<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>再读斋</title>
  <subtitle>MICHAEL</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liuguoquan727.github.io/"/>
  <updated>2017-07-19T07:57:43.000Z</updated>
  <id>http://liuguoquan727.github.io/</id>
  
  <author>
    <name>刘涤生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义View1-1绘制基础</title>
    <link href="http://liuguoquan727.github.io/2017/07/19/%E8%87%AA%E5%AE%9A%E4%B9%89View1-1%E7%BB%98%E5%88%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://liuguoquan727.github.io/2017/07/19/自定义View1-1绘制基础/</id>
    <published>2017-07-19T07:53:41.000Z</published>
    <updated>2017-07-19T07:57:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNTczNTY0NA==&amp;mid=2247483657&amp;idx=1&amp;sn=0e3a9f84d9924ef4125c885592dbb843&amp;chksm=972d12baa05a9bac18af5d335d65eba9b71146a9fec143be6ecf62d4a4bd2e7179c726cdbb81&amp;mpshare=1&amp;scene=24&amp;srcid=07198ZDmC9iwJgUAtM9I453i&amp;key=227c90f337be412aaf4e8e422d287da09f02743be42e35a090c39b2a61994661951872e3119c6bcfef2d0ea2d84c207a010b149bbb00f0515eed4035fbbfd3c8cbc6a2962364de91f0b866659697e3b1&amp;ascene=0&amp;uin=MjU2OTM5MzI4MA%3D%3D&amp;devicetype=iMac+MacBookPro11%2C4+OSX+OSX+10.12.5+build(16F73" target="_blank" rel="external">原文转载自扔物线：Android 开发进阶: 自定义 View 1-1 绘制基础</a>&amp;version=12020810&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=cNya6fxGbygCgP%2BZuKaXIUFc1VL6LjQX2Xnqv0vihhGhje4I76DJYvVZI85YkV%2Be)</p>
<h1 id="自定义绘制知识的四个级别"><a href="#自定义绘制知识的四个级别" class="headerlink" title="自定义绘制知识的四个级别"></a>自定义绘制知识的四个级别</h1><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><p>Canvas 的 drawXXX() 方法及 Paint 最常见的使用。</p>
<p>Canvas.drawXXX() 是自定义绘制最基本的操作。掌握了这些方法，才知道怎么绘制内容，例如怎么画圆、画方、画图形和文字。组合绘制这些内容，再配合Paint上的一些常见方法来对绘制内容的颜色和风格进行简单的配置，就能实现大部分的绘制需求了。</p>
<p><img src="https://pic4.zhimg.com/v2-764d6f89dadf10635f60e9f1444b4a3f_b.png" alt=""></p>
<p><img src="https://pic3.zhimg.com/v2-4c904db3ec7c80b1946bfe8d81332bea_b.png" alt=""></p>
<p><img src="https://pic4.zhimg.com/v2-325d2d5e4ca61b9acc4d9f2fa9daa7fb_b.png" alt=""></p>
<h2 id="Paint的完全攻略"><a href="#Paint的完全攻略" class="headerlink" title="Paint的完全攻略"></a>Paint的完全攻略</h2><p>Paint可以做的事不只是设置颜色，也不只是实心空心、线条粗细、有没有阴影，它可以做的风格设置非常多，例如：</p>
<blockquote>
<p>拐弯要什么形状？</p>
</blockquote>
<p><img src="https://pic2.zhimg.com/v2-c1ceb235034c191ee3038cbdd759abf5_b.png" alt=""></p>
<blockquote>
<p>开不开双线性过滤？</p>
</blockquote>
<p><img src="https://pic3.zhimg.com/v2-6b75511ed15d18875158311b74ac60ce_b.png" alt=""></p>
<blockquote>
<p>加不加特效？</p>
</blockquote>
<p><img src="https://pic3.zhimg.com/v2-d5ac530b894810ed6551cf68a1fc0656_b.png" alt=""></p>
<h2 id="范围裁剪和几何变换"><a href="#范围裁剪和几何变换" class="headerlink" title="范围裁剪和几何变换"></a>范围裁剪和几何变换</h2><p>范围裁剪和几何变换一般用于辅助绘制</p>
<p>范围裁剪：</p>
<p><img src="https://pic3.zhimg.com/v2-5b054225e346034d70cf6d4d6240ee56_b.png" alt=""></p>
<p>几何变换：</p>
<p><img src="https://pic3.zhimg.com/v2-785dbc3841fcab4677a47444794ad39e_b.png" alt=""></p>
<h2 id="控制绘制顺序"><a href="#控制绘制顺序" class="headerlink" title="控制绘制顺序"></a>控制绘制顺序</h2><p><strong>控制绘制顺序解决的并不是「做不到」的问题，而是性能问题</strong>。同样的一种效果，你不用绘制顺序的控制往往也能做到，但需要用多个 View 甚至是多层 View 才能拼凑出来，因此代价是 UI 的性能；而使用绘制顺序的话，一个View就全部搞定了。</p>
<p>自定义绘制的知识，大概就分为上面这四个级别。在你把这四个级别依次掌握了之后，你就是一个自定义绘制的高手了。下面开始第一篇： Canvas.drawXXX() 系列方法及 Paint 最基本的使用。</p>
<h1 id="一切的开始：OnDraw"><a href="#一切的开始：OnDraw" class="headerlink" title="一切的开始：OnDraw()"></a>一切的开始：OnDraw()</h1><p>自定义绘制的过程非常简单：提前创建好Paint对象，重写onDraw()，把绘制代码写在onDraw()里面，这就是自定义绘制最基本的实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Paint paint = <span class="keyword">new</span> Paint();</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    <span class="comment">// 绘制一个圆</span></div><div class="line">    canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Canvas-drawXXX-和-Paint-基础"><a href="#Canvas-drawXXX-和-Paint-基础" class="headerlink" title="Canvas.drawXXX() 和 Paint 基础"></a>Canvas.drawXXX() 和 Paint 基础</h1><p>drawXXX() 系列方法和 Paint 的基础掌握了，就能够应付简单的绘制需求。它们主要包括：</p>
<ul>
<li>Canvas 类下的所有 draw- 打头的方法，例如 <code>drawCircle() drawBitmap()</code>。</li>
<li>Paint 类的几个最常用的方法。具体是：<ul>
<li>Paint.setStyle(Style style) 设置绘制模式</li>
<li>Paint.setColor(int color) 设置颜色</li>
<li>Paint.setStrokeWidth(float width) 设置线条宽度</li>
<li>Paint.setTextSize(float textSize) 设置文字大小</li>
<li>Paint.setAntiAlias(boolean aa) 设置抗锯齿开关</li>
</ul>
</li>
</ul>
<p><a href="https://developer.android.google.cn/reference/android/graphics/Canvas.html" target="_blank" rel="external">Canvas官方文档</a><br><a href="https://developer.android.google.cn/reference/android/graphics/Paint.html" target="_blank" rel="external">Paint官方文档</a></p>
<h2 id="drawColor"><a href="#drawColor" class="headerlink" title="drawColor"></a>drawColor</h2><blockquote>
<p>Canvas.drawColor(@ColorInt int color) 颜色填充，这是最基本的 drawXXX() 方法：在整个绘制区域统一涂上指定的颜色。</p>
</blockquote>
<p>例如 drawColor(Color.BLACK) 会把整个区域染成纯黑色，覆盖掉原有内容； <code>drawColor(Color.parse(&quot;#88880000&quot;)</code> 会在原有的绘制效果上加一层半透明的红色遮罩</p>
<p><code>drawColor(Color.BLACK);  // 纯黑</code></p>
<p><img src="https://pic2.zhimg.com/v2-bd7b32f98a2ca396362e32eef607da91_b.png" alt=""></p>
<p><code>drawColor(Color.parse(&quot;#88880000&quot;); // 半透明红色</code></p>
<p><img src="https://pic1.zhimg.com/v2-7fb1a6ddde036c532a25b45a830e2468_b.png" alt=""></p>
<p>类似的方法还有 <code>drawRGB(int r, int g, int b)</code> 和 <code>drawARGB(int a, int r, int g, int b)</code> ，它们和 <code>drawColor(color)</code> 只是使用方式不同，作用都是一样的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">canvas.drawRGB(<span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>);</div><div class="line">canvas.drawARGB(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p><strong>这类颜色填充方法一般用于在绘制之前设置底色，或者在绘制之后为界面设置半透明蒙版。</strong></p>
<h2 id="drawCircle"><a href="#drawCircle" class="headerlink" title="drawCircle"></a>drawCircle</h2><blockquote>
<p>drawCircle(float centerX, float centerY, float radius, Paint paint) 画圆</p>
</blockquote>
<ul>
<li>centerX centerY：是圆心的坐标，单位是像素</li>
<li>radius：是圆的半径，单位是像素</li>
<li>paint：画笔，它提供基本信息之外的所有风格信息，例如颜色、线条粗细、阴影等。</li>
</ul>
<blockquote>
<p>canvas.drawCircle(300, 300, 200, paint);</p>
</blockquote>
<p><img src="https://pic3.zhimg.com/v2-57bfe51b2fdf4e5c9b4d6d57987d86ca_b.png" alt=""></p>
<p>在Android坐标系中的位置：</p>
<p><img src="https://pic4.zhimg.com/v2-7379659fce2874d477f79fc81490d42b_b.png" alt=""></p>
<p>圆心坐标和半径，这些都是圆的基本信息，也是它的独有信息。什么叫独有信息？就是只有它有，别人没有的信息。你画圆有圆心坐标和半径，画方有吗？画椭圆有吗？这就叫独有信息。独有信息都是直接作为参数写进 drawXXX() 方法里的（比如 drawCircle(centerX, centerY, radius, paint) 的前三个参数）。</p>
<p>而除此之外，其他的都是公有信息。比如图形的颜色、空心实心这些，你不管是画圆还是画方都有可能用到的，这些信息则是统一放在 paint 参数里的。</p>
<h3 id="Paint-setColor-int-color"><a href="#Paint-setColor-int-color" class="headerlink" title="Paint.setColor(int color)"></a>Paint.setColor(int color)</h3><p>例如，你要画一个红色的圆，并不是写成 canvas.drawCircle(300, 300, 200, RED, paint) 这样，而是像下面这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paint.setColor(Color.RED); <span class="comment">// 设置为红色</span></div><div class="line">canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-299df7cf4a404f2cee837a76778aec67_b.png" alt=""></p>
<p>Paint.setColor(int color) 是 Paint 最常用的方法之一，用来设置绘制内容的颜色。你不止可以用它画红色的圆，也可以用它来画红色的矩形、红色的五角星、红色的文字。</p>
<h3 id="Paint-setStyle-Paint-Style-style"><a href="#Paint-setStyle-Paint-Style-style" class="headerlink" title="Paint.setStyle(Paint.Style style)"></a>Paint.setStyle(Paint.Style style)</h3><p>而如果你想画的不是实心圆，而是空心圆（或者叫环形），也可以使用 paint.setStyle(Paint.Style.STROKE) 来把绘制模式改为画线模式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Paint.Style.STROKE); <span class="comment">// Style 修改为画线模式</span></div><div class="line">canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, paint);</div></pre></td></tr></table></figure>
<p><code>setStyle(Style style)</code> 这个方法设置的是绘制的 Style 。Style 具体来说有三种： FILL, STROKE 和 FILL_AND_STROKE 。FILL 是填充模式，STROKE 是画线模式（即勾边模式），FILL_AND_STROKE 是两种模式一并使用：既画线又填充。它的默认值是 FILL，填充模式。</p>
<h3 id="Paint-setStrokeWidth-float-width"><a href="#Paint-setStrokeWidth-float-width" class="headerlink" title="Paint.setStrokeWidth(float width)"></a>Paint.setStrokeWidth(float width)</h3><p>在 STROKE 和 FILL_AND_STROKE 下，还可以使用 paint.setStrokeWidth(float width) 来设置线条的宽度：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Paint.Style.STROKE);</div><div class="line">paint.setStrokeWidth(<span class="number">20</span>); <span class="comment">// 线条宽度为 20 像素</span></div><div class="line">canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-33317c32913d3b18a2bd936aa0f5b5c0_b.png" alt=""></p>
<h3 id="Paint-setAntiAlias-boolean-aa"><a href="#Paint-setAntiAlias-boolean-aa" class="headerlink" title="Paint.setAntiAlias(boolean aa)"></a>Paint.setAntiAlias(boolean aa)</h3><p>在绘制的时候，往往需要开启抗锯齿来让图形和文字的边缘更加平滑。开启抗锯齿很简单，只要在 new Paint() 的时候加上一个 ANTI_ALIAS_FLAG 参数就行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Paint paint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div></pre></td></tr></table></figure>
<p>另外，你也可以使用 Paint.setAntiAlias(boolean aa) 来动态开关抗锯齿。抗锯齿的效果如下：</p>
<p><img src="https://pic1.zhimg.com/v2-7dcde98a1ed45327e10244279faaca08_b.png" alt=""></p>
<h2 id="drawRect"><a href="#drawRect" class="headerlink" title="drawRect"></a>drawRect</h2><blockquote>
<p>drawRect(float left, float top, float right, float bottom, Paint paint) 画矩形<br>drawRect(RectF rect, Paint paint) 通过RectF对象画矩形<br>drawRect(Rect rect, Paint paint) 通过Rect对象画矩形</p>
</blockquote>
<ul>
<li>left, top, right, bottom 是矩形四条边的坐标</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Style.FILL);</div><div class="line">canvas.drawRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">500</span>, paint);</div><div class="line">  </div><div class="line">paint.setStyle(Style.STROKE);</div><div class="line">canvas.drawRect(<span class="number">700</span>, <span class="number">100</span>, <span class="number">1100</span>, <span class="number">500</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-716c6e178ae6cae876495e13e76394ba_b.png" alt=""></p>
<h2 id="drawPoint"><a href="#drawPoint" class="headerlink" title="drawPoint"></a>drawPoint</h2><blockquote>
<p>drawPoint(float x, float y, Paint paint) 画点</p>
</blockquote>
<p>x 和 y 是点的坐标。点的大小可以通过 paint.setStrokeWidth(width) 来设置；点的形状可以通过 paint.setStrokeCap(cap) 来设置：ROUND 画出来是圆形的点，SQUARE 或 BUTT 画出来是方形的点。<a href="https://developer.android.google.cn/reference/android/graphics/Paint.Cap.html" target="_blank" rel="external">Cap官方文档</a></p>
<blockquote>
<p>注：Paint.setStrokeCap(cap) 可以设置点的形状，但这个方法并不是专门用来设置点的形状的，而是一个设置线条端点形状的方法。端点有圆头 (ROUND)、平头 (BUTT) 和方头 (SQUARE) 三种</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">paint.setStrokeWidth(<span class="number">20</span>);</div><div class="line">paint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">canvas.drawPoint(<span class="number">50</span>, <span class="number">50</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-b71189c7d0e3f47dccc5c40ae0ec21da_b.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">paint.setStrokeWidth(<span class="number">20</span>);</div><div class="line">paint.setStrokeCap(Paint.Cap.SQUARE;</div><div class="line">canvas.drawPoint(<span class="number">50</span>, <span class="number">50</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-2dba848a12123f8769ac682ad018038c_b.png" alt=""></p>
<h2 id="drawPoints"><a href="#drawPoints" class="headerlink" title="drawPoints"></a>drawPoints</h2><blockquote>
<p>drawPoints(float[] pts, int offset, int count, Paint paint)<br>drawPoints(float[] pts, Paint paint) 画点（批量）</p>
</blockquote>
<ul>
<li>pts 这个数组是点的坐标，每两个成一对</li>
<li>offset 表示跳过数组的前几个数再开始记坐标</li>
<li>count 表示坐标的个数</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span>[] points = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">50</span>, <span class="number">150</span>, <span class="number">100</span>&#125;;</div><div class="line"><span class="comment">// 绘制四个点：(50, 50) (50, 100) (100, 50) (100, 100)</span></div><div class="line">canvas.drawPoints(points, <span class="number">2</span> <span class="comment">/* 跳过两个数，即前两个 0 */</span>,</div><div class="line">          <span class="number">8</span> <span class="comment">/* 一共绘制 8 个数（4 个点）*/</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-d9037a7ffc3ff2ace2c8e60861b1be7c_b.png" alt=""></p>
<h2 id="drawOval"><a href="#drawOval" class="headerlink" title="drawOval"></a>drawOval</h2><blockquote>
<p>drawOval(RectF rect, Paint paint)<br>drawOval(float left, float top, float right, float bottom, Paint paint) 画椭圆<br>只能绘制横着的或者竖着的椭圆。left, top, right, bottom 是这个椭圆的左、上、右、下四个边界点的坐标。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Style.FILL);</div><div class="line">canvas.drawOval(<span class="number">50</span>, <span class="number">50</span>, <span class="number">350</span>, <span class="number">200</span>, paint);</div><div class="line"></div><div class="line">paint.setStyle(Style.STROKE);</div><div class="line">canvas.drawOval(<span class="number">400</span>, <span class="number">50</span>, <span class="number">700</span>, <span class="number">200</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-4d7afb1aa2ba028d36243f2dc6a8430d_b.png" alt=""></p>
<h2 id="drawLine"><a href="#drawLine" class="headerlink" title="drawLine"></a>drawLine</h2><blockquote>
<p>drawLine(float startX, float startY, float stopX, float stopY, Paint paint) 画线</p>
</blockquote>
<ul>
<li>startX, startY, stopX, stopY 分别是线的起点和终点坐标。</li>
</ul>
<blockquote>
<p>drawLines(float[] pts, Paint paint)  批量画线<br>drawLines(float[] pts, int offset, int count, Paint paint)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawLine(<span class="number">200</span>, <span class="number">200</span>, <span class="number">800</span>, <span class="number">500</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-d47cb08fdf64f6cf9b6631bb43c27534_b.png" alt=""></p>
<blockquote>
<p>由于直线不是封闭图形，所以 setStyle(style) 对直线没有影响。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span>[] points = &#123;<span class="number">20</span>, <span class="number">20</span>, <span class="number">120</span>, <span class="number">20</span>, <span class="number">70</span>, <span class="number">20</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">20</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">150</span>, <span class="number">20</span>, <span class="number">250</span>, <span class="number">20</span>, <span class="number">150</span>, <span class="number">20</span>, <span class="number">150</span>, <span class="number">120</span>, <span class="number">250</span>, <span class="number">20</span>, <span class="number">250</span>, <span class="number">120</span>, <span class="number">150</span>, <span class="number">120</span>, <span class="number">250</span>, <span class="number">120</span>&#125;;</div><div class="line">canvas.drawLines(points, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-2fc1c7f19de673e332db5180304eceef_b.png" alt=""></p>
<h2 id="drawRoundRect"><a href="#drawRoundRect" class="headerlink" title="drawRoundRect"></a>drawRoundRect</h2><blockquote>
<p>drawRoundRect(RectF rect, float rx, float ry, Paint paint)<br>drawRoundRect(float left, float top, float right, float bottom, float rx, float ry, Paint paint) 画圆角矩形</p>
</blockquote>
<ul>
<li>left, top, right, bottom 是四条边的坐标</li>
<li>rx 和 ry 是圆角的横向半径和纵向半径</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawRoundRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">300</span>, <span class="number">50</span>, <span class="number">50</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-435b255556293566c99a8a54c12383a5_b.png" alt=""></p>
<h2 id="drawArc"><a href="#drawArc" class="headerlink" title="drawArc"></a>drawArc</h2><blockquote>
<p>drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint) 绘制弧形或扇形</p>
</blockquote>
<ul>
<li>left, top, right, bottom 描述的是这个弧形所在的椭圆;</li>
<li>startAngle 是弧形的起始角度（x 轴的正向，即正右的方向，是 0 度的位置；顺时针为正角度，逆时针为负角度）;</li>
<li>sweepAngle 是弧形划过的角度;</li>
<li>useCenter 表示是否连接到圆心，如果不连接到圆心，就是弧形，如果连接到圆心，就是扇形。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Paint.Style.FILL); <span class="comment">// 填充模式</span></div><div class="line">canvas.drawArc(<span class="number">200</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>, -<span class="number">110</span>, <span class="number">100</span>, <span class="keyword">true</span>, paint); <span class="comment">// 绘制扇形</span></div><div class="line">canvas.drawArc(<span class="number">200</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>, <span class="number">20</span>, <span class="number">140</span>, <span class="keyword">false</span>, paint); <span class="comment">// 绘制弧形</span></div><div class="line">paint.setStyle(Paint.Style.STROKE); <span class="comment">// 画线模式</span></div><div class="line">canvas.drawArc(<span class="number">200</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>, <span class="number">180</span>, <span class="number">60</span>, <span class="keyword">false</span>, paint); <span class="comment">// 绘制不封口的弧形</span></div></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-96faf09a2471c5dbcb76e9a118ffd292_b.png" alt=""></p>
<p>到此为止，以上就是 Canvas 所有的简单图形的绘制。除了简单图形的绘制， Canvas 还可以使用 drawPath(Path path) 来绘制自定义图形。</p>
<h2 id="drawBitmap"><a href="#drawBitmap" class="headerlink" title="drawBitmap"></a>drawBitmap</h2><blockquote>
<p>drawBitmap(Bitmap bitmap, float left, float top, Paint paint) 画 Bitmap<br>drawBitmap(Bitmap bitmap, Rect src, RectF dst, Paint paint)<br>drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint)<br>drawBitmap(Bitmap bitmap, Matrix matrix, Paint paint)</p>
</blockquote>
<p>绘制 Bitmap 对象，也就是把这个 Bitmap 中的像素内容贴过来。其中 left 和 top 是要把 bitmap绘制到的位置坐标。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drawBitmap(bitmap, <span class="number">200</span>, <span class="number">100</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic1.zhimg.com/v2-2216a99e4aa817855def6265ee572bc0_b.png" alt=""></p>
<h2 id="drawText"><a href="#drawText" class="headerlink" title="drawText"></a>drawText</h2><blockquote>
<p>drawText(String text, float x, float y, Paint paint) 绘制文字</p>
</blockquote>
<ul>
<li>参数 text 是用来绘制的字符串;</li>
<li>x 和 y 是绘制的起点坐标;</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawText(text, <span class="number">200</span>, <span class="number">100</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-a18a85ff3555029c5b56706d4ff71e02_b.png" alt=""></p>
<h3 id="Paint-setTextSize-float-textSize"><a href="#Paint-setTextSize-float-textSize" class="headerlink" title="Paint.setTextSize(float textSize)"></a>Paint.setTextSize(float textSize)</h3><p>通过 Paint.setTextSize(textSize)，可以设置文字的大小。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">paint.setTextSize(<span class="number">18</span>);</div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">25</span>, paint);</div><div class="line">paint.setTextSize(<span class="number">36</span>);</div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">70</span>, paint);</div><div class="line">paint.setTextSize(<span class="number">60</span>);</div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">145</span>, paint);</div><div class="line">paint.setTextSize(<span class="number">84</span>);</div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">240</span>, paint);</div></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-10c7a042deb59e69c9be3fe044b83c0d_b.png" alt=""></p>
<h2 id="drawPath"><a href="#drawPath" class="headerlink" title="drawPath"></a>drawPath</h2><blockquote>
<p>drawPath(Path path, Paint paint) 画自定义图形 <a href="https://developer.android.google.cn/reference/android/graphics/Path.html" target="_blank" rel="external">Path官方文档</a></p>
</blockquote>
<p>前面的这些方法，都是绘制某个给定的图形，而 drawPath() 可以绘制自定义图形。当你要绘制的图形比较特殊，使用前面的那些方法做不到的时候，就可以使用 drawPath() 来绘制。</p>
<p><img src="https://pic3.zhimg.com/v2-555a511cce80232edfb792906d02b4e2_b.png" alt=""></p>
<p>drawPath(path) 这个方法是通过描述路径的方式来绘制图形的，它的 path 参数就是用来描述图形路径的对象。path 的类型是 Path ，使用方法大概像下面这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">    Path path = <span class="keyword">new</span> Path(); <span class="comment">// 初始化 Path 对象</span></div><div class="line">    </div><div class="line">    ......</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">      <span class="comment">// 使用 path 对图形进行描述（这段描述代码不必看懂）</span></div><div class="line">      path.addArc(<span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">400</span>, -<span class="number">225</span>, <span class="number">225</span>);</div><div class="line">      path.arcTo(<span class="number">400</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">400</span>, -<span class="number">180</span>, <span class="number">225</span>, <span class="keyword">false</span>);</div><div class="line">      path.lineTo(<span class="number">400</span>, <span class="number">542</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">      </div><div class="line">      canvas.drawPath(path, paint); <span class="comment">// 绘制出 path 描述的图形（心形），大功告成</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-ea827ac49efdebece7167dcdc67b2445_b.png" alt=""></p>
<p>Path 可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。下面我就说一下具体的怎么把这些图形描述出来。</p>
<p>Path 有两类方法，一类是直接描述路径的，另一类是辅助的设置或计算。</p>
<h3 id="Path-方法第一类：直接描述路径"><a href="#Path-方法第一类：直接描述路径" class="headerlink" title="Path 方法第一类：直接描述路径"></a>Path 方法第一类：直接描述路径</h3><h4 id="addXxx-——添加子图形"><a href="#addXxx-——添加子图形" class="headerlink" title="addXxx() ——添加子图形"></a>addXxx() ——添加子图形</h4><ul>
<li>addCircle(float x, float y, float radius, Direction dir) 添加圆</li>
</ul>
<blockquote>
<p>x, y, radius 这三个参数是圆的基本信息，最后一个参数 dir 是画圆的路径的方向。<br>路径方向有两种：顺时针 (CW clockwise) 和逆时针 (CCW counter-clockwise) 。对于普通情况，这个参数填 CW 还是填 CCW 没有影响。它只是在需要填充图形 (Paint.Style 为 FILL 或 FILL_AND_STROKE) ，并且图形出现自相交时，用于判断填充范围的。</p>
</blockquote>
<ul>
<li><p>addOval(float left, float top, float right, float bottom, Direction dir) / addOval(RectF oval, Direction dir) 添加椭圆</p>
</li>
<li><p>addRect(float left, float top, float right, float bottom, Direction dir) / addRect(RectF rect, Direction dir) 添加矩形</p>
</li>
<li><p>addRoundRect(RectF rect, float rx, float ry, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float rx, float ry, Direction dir) / addRoundRect(RectF rect, float[] radii, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float[] radii, Direction dir) 添加圆角矩形</p>
</li>
<li><p>addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle) / addArc(RectF oval, float startAngle, float sweepAngle) 添加弧形</p>
</li>
<li><p>addPath(Path path) 添加另一个 Path</p>
</li>
</ul>
<h4 id="xxxTo-——画线（直线或曲线）"><a href="#xxxTo-——画线（直线或曲线）" class="headerlink" title="xxxTo() ——画线（直线或曲线）"></a>xxxTo() ——画线（直线或曲线）</h4><ul>
<li>lineTo(float x, float y) / rLineTo(float x, float y) 画直线</li>
</ul>
<p>从<strong>当前位置</strong>向目标位置画一条直线， x 和 y 是目标位置的坐标。这两个方法的区别是，lineTo(x, y)的参数是<strong>绝对坐标</strong>，而 rLineTo(x, y) 的参数是相对当前位置的<strong>相对坐标</strong> （前缀 r 指的就是 relatively 「相对地」)。</p>
<blockquote>
<p><strong>当前位置</strong>：所谓当前位置，即最后一次调用画 Path 的方法的终点位置。初始值为原点 (0, 0)。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Style.STROKE);</div><div class="line">path.lineTo(<span class="number">100</span>, <span class="number">100</span>); <span class="comment">// 由当前位置 (0, 0) 向 (100, 100) 画一条直线</span></div><div class="line">path.rLineTo(<span class="number">100</span>, <span class="number">0</span>); <span class="comment">// 由当前位置 (100, 100) 向正右方 100 像素的位置画一条直线</span></div></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-7657eee8380b034d95d4333591d4698f_b.png" alt=""></p>
<ul>
<li>quadTo(float x1, float y1, float x2, float y2) / rQuadTo(float dx1, float dy1, float dx2, float dy2) 画二次贝塞尔曲线</li>
</ul>
<blockquote>
<p>这条二次贝塞尔曲线的起点就是当前位置，而参数中的 x1, y1 和 x2, y2 则分别是控制点和终点的坐标。和 rLineTo(x, y) 同理，rQuadTo(dx1, dy1, dx2, dy2) 的参数也是相对坐标</p>
</blockquote>
<ul>
<li><p>cubicTo(float x1, float y1, float x2, float y2, float x3, float y3) / rCubicTo(float x1, float y1, float x2, float y2, float x3, float y3) 画三阶贝塞尔曲线</p>
</li>
<li><p>moveTo(float x, float y) / rMoveTo(float x, float y) 移动到目标位置</p>
</li>
</ul>
<blockquote>
<p>不论是直线还是贝塞尔曲线，都是以当前位置作为起点，而不能指定起点。但你可以通过 moveTo(x, y)或 rMoveTo() 来改变当前位置，从而间接地设置这些方法的起点。</p>
</blockquote>
<ul>
<li>arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) / arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo) / arcTo(RectF oval, float startAngle, float sweepAngle) 画弧形</li>
</ul>
<blockquote>
<p>forceMoveTo 参数的意思是，绘制是要「抬一下笔移动过去」，还是「直接拖着笔过去」，区别在于是否留下移动的痕迹。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Style.STROKE);</div><div class="line">path.lineTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">path.arcTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>, -<span class="number">90</span>, <span class="number">90</span>, <span class="keyword">true</span>); <span class="comment">// 强制移动到弧形起点（无痕迹）</span></div></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-8faa6acdbd58d50789f43b03badd0b2b_b.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Style.STROKE);</div><div class="line">path.lineTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">path.arcTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>, -<span class="number">90</span>, <span class="number">90</span>, <span class="keyword">false</span>); <span class="comment">// 直接连线连到弧形起点（有痕迹</span></div></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/v2-0e058857d727d56f9a23ec5f5daa4fa6_b.png" alt=""></p>
<h4 id="close-封闭当前子图形"><a href="#close-封闭当前子图形" class="headerlink" title="close() 封闭当前子图形"></a>close() 封闭当前子图形</h4><p>它的作用是把当前的子图形封闭，即由当前位置向当前子图形的起点绘制一条直线。close() 和 lineTo(起点坐标) 是完全等价的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Style.STROKE);</div><div class="line">path.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">path.lineTo(<span class="number">200</span>, <span class="number">100</span>);</div><div class="line">path.lineTo(<span class="number">150</span>, <span class="number">150</span>);</div><div class="line"><span class="comment">// 子图形未封闭</span></div></pre></td></tr></table></figure>
<p><img src="https://pic2.zhimg.com/v2-46f06258fd6fba811aadb5f5a80add8d_b.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Style.STROKE);</div><div class="line">path.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">path.lineTo(<span class="number">200</span>, <span class="number">100</span>);</div><div class="line">path.lineTo(<span class="number">150</span>, <span class="number">150</span>);</div><div class="line">path.close(); <span class="comment">// 使用 close() 封闭子图形。等价于 path.lineTo(100, 100)</span></div></pre></td></tr></table></figure>
<p><img src="https://pic4.zhimg.com/v2-0d4b07fa8cc9c32b7a58596a6ce2853f_b.png" alt=""></p>
<h3 id="Path-方法第二类：辅助的设置或计算"><a href="#Path-方法第二类：辅助的设置或计算" class="headerlink" title="Path 方法第二类：辅助的设置或计算"></a>Path 方法第二类：辅助的设置或计算</h3><h4 id="Path-op-Path-path-Path-Op-op"><a href="#Path-op-Path-path-Path-Op-op" class="headerlink" title="Path.op(Path path, Path.Op op)"></a>Path.op(Path path, Path.Op op)</h4><p>op(Path path, Path.Op op) 方法，用于将两个Path路径进行组合之后的效果设置，靠op方法可以快速组合生成一些复杂的图形效果，例如月牙形 </p>
<p>Path.Op有如下几种参数  </p>
<ul>
<li>Path.Op.DIFFERENCE：减去Path2后Path1剩下的部分   </li>
<li>Path.Op.INTERSECT：保留Path1与Path2共同的部分   </li>
<li>Path.Op.REVERSE_DIFFERENCE：减去Path1后Path2剩下的部分   </li>
<li>Path.Op.UNION：保留全部Path1和Path2    </li>
<li>Path.Op.XOR：包含Path1与Path2但不包括两者相交的部分 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">   <span class="comment">//设置绘制风格</span></div><div class="line">   setViewPaint();</div><div class="line">   <span class="comment">//设置填充风格，方便观察效果</span></div><div class="line">   paint.setStyle(Paint.Style.FILL);</div><div class="line">   <span class="comment">//构建path</span></div><div class="line">   Path path=<span class="keyword">new</span> Path();</div><div class="line">   path.addCircle(<span class="number">150</span>, <span class="number">150</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   Path path2 = <span class="keyword">new</span> Path();</div><div class="line">   path2.addCircle(<span class="number">300</span>, <span class="number">150</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   path.op(path2,Path.Op.UNION);</div><div class="line">   <span class="comment">//Path.Op.UNION</span></div><div class="line">   canvas.drawPath(path,paint);</div><div class="line"></div><div class="line">   <span class="comment">//清除路径</span></div><div class="line">   path.reset();</div><div class="line">   path2.reset();</div><div class="line">   path.addCircle(<span class="number">150</span>, <span class="number">400</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   path2.addCircle(<span class="number">300</span>, <span class="number">400</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   path.op(path2,Path.Op.REVERSE_DIFFERENCE);</div><div class="line">   <span class="comment">//Path.Op.REVERSE_DIFFERENCE</span></div><div class="line">   canvas.drawPath(path,paint);</div><div class="line"></div><div class="line">   <span class="comment">//清除路径</span></div><div class="line">   path.reset();</div><div class="line">   path2.reset();</div><div class="line">   path.addCircle(<span class="number">150</span>, <span class="number">650</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   path2.addCircle(<span class="number">300</span>, <span class="number">650</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   path.op(path2,Path.Op.INTERSECT);</div><div class="line">   <span class="comment">//Path.Op.INTERSECT</span></div><div class="line">   canvas.drawPath(path,paint);</div><div class="line"></div><div class="line">   <span class="comment">//清除路径</span></div><div class="line">   path.reset();</div><div class="line">   path2.reset();</div><div class="line">   path.addCircle(<span class="number">150</span>, <span class="number">900</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   path2.addCircle(<span class="number">300</span>, <span class="number">900</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   path.op(path2,Path.Op.DIFFERENCE);</div><div class="line">   <span class="comment">//Path.Op.DIFFERENCE</span></div><div class="line">   canvas.drawPath(path,paint);</div><div class="line"></div><div class="line">   <span class="comment">//清除路径</span></div><div class="line">   path.reset();</div><div class="line">   path2.reset();</div><div class="line">   path.addCircle(<span class="number">150</span>, <span class="number">1150</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   path2.addCircle(<span class="number">300</span>, <span class="number">1150</span>, <span class="number">100</span>, Path.Direction.CW);</div><div class="line">   path.op(path2,Path.Op.XOR);</div><div class="line">   <span class="comment">//Path.Op.XOR</span></div><div class="line">   canvas.drawPath(path,paint);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/path-path%E4%B8%ADop%E6%96%B9%E6%B3%95%E7%9A%84%E7%94%A8%E6%B3%95.png" alt=""></p>
<h4 id="Path-setFillType-Path-FillType-ft"><a href="#Path-setFillType-Path-FillType-ft" class="headerlink" title="Path.setFillType(Path.FillType ft)"></a>Path.setFillType(Path.FillType ft)</h4><p>Path.setFillType(Path.FillType ft) 设置填充方式。</p>
<p>前面在说 dir 参数的时候提到， Path.setFillType(fillType) 是用来设置图形自相交时的填充算法的：</p>
<p><img src="https://pic1.zhimg.com/v2-83ebbc6bd6a13fcc7217abeafcc6a5b4_b.png" alt=""></p>
<p>方法中填入不同的 FillType 值，就会有不同的填充效果。FillType 的取值有四个：</p>
<ul>
<li>EVEN_ODD EVEN_ODD </li>
<li>WINDING （默认值）全填充</li>
<li>INVERSE_EVEN_ODD</li>
<li>INVERSE_WINDING</li>
</ul>
<p><img src="https://pic1.zhimg.com/v2-bc3da8bcc5833989e9e70ec121346f04_b.png" alt=""></p>
<h5 id="EVEN-ODD的原理"><a href="#EVEN-ODD的原理" class="headerlink" title="EVEN_ODD的原理"></a>EVEN_ODD的原理</h5><p>即 even-odd rule （奇偶原则）：对于平面中的任意一点，向任意方向射出一条射线，这条射线和图形相交的次数（相交才算，相切不算哦）如果是奇数，则这个点被认为在图形内部，是要被涂色的区域；如果是偶数，则这个点被认为在图形外部，是不被涂色的区域。还以左右相交的双圆为例：</p>
<p><img src="https://pic4.zhimg.com/v2-932fe07e7d5a514a699cf0687d4f9147_r.png" alt=""></p>
<blockquote>
<p>射线的方向无所谓，同一个点射向任何方向的射线，结果都是一样的，不信你可以试试。</p>
</blockquote>
<p>从上图可以看出，射线每穿过图形中的一条线，内外状态就发生一次切换，这就是为什么 EVEN_ODD 是一个「交叉填充」的模式。</p>
<h5 id="WINDING的原理"><a href="#WINDING的原理" class="headerlink" title="WINDING的原理"></a>WINDING的原理</h5><p>即 non-zero winding rule （非零环绕数原则）：首先，它需要你图形中的所有线条都是有绘制方向的：</p>
<p><img src="https://pic2.zhimg.com/v2-9641f6ef40ed0f60510ceacf3566a6d1_b.png" alt=""></p>
<p>然后，同样是从平面中的点向任意方向射出一条射线，但计算规则不一样：以 0 为初始值，对于射线和图形的所有交点，遇到每个顺时针的交点（图形从射线的左边向右穿过）把结果加 1，遇到每个逆时针的交点（图形从射线的右边向左穿过）把结果减 1，最终把所有的交点都算上，得到的结果如果不是 0，则认为这个点在图形内部，是要被涂色的区域；如果是 0，则认为这个点在图形外部，是不被涂色的区域。</p>
<p><img src="https://pic3.zhimg.com/v2-692d88842aa31152567833caa062e072_b.png" alt=""></p>
<blockquote>
<p>和 EVEN_ODD 相同，射线的方向并不影响结果。</p>
</blockquote>
<p>所以，前面的那个「简单粗暴」的总结，对于 WINDING 来说并不完全正确：如果你所有的图形都用相同的方向来绘制，那么 WINDING 确实是一个「全填充」的规则；但如果使用不同的方向来绘制图形，结果就不一样了。</p>
<blockquote>
<p>图形的方向：对于添加子图形类方法（如 Path.addCircle() Path.addRect()）的方向，由方法的 dir 参数来控制，这个在前面已经讲过了；而对于画线类的方法（如 Path.lineTo()Path.arcTo()）就更简单了，线的方向就是图形的方向。</p>
</blockquote>
<p>所以，完整版的 EVEN_ODD 和 WINDING 的效果应该是这样的：</p>
<p><img src="https://pic1.zhimg.com/v2-32a19f7fcac54fe9d185c7ac0b3bf360_b.png" alt=""></p>
<p>而 INVERSE_EVEN_ODD 和 INVERSE_WINDING ，只是把这两种效果进行反转而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNTczNTY0NA==&amp;amp;mid=2247483657&amp;amp;idx=1&amp;amp;sn=0e3a9f84d9924ef4125c885592dbb843&amp;amp;chksm
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android进阶" scheme="http://liuguoquan727.github.io/tags/Android%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript⑦对象</title>
    <link href="http://liuguoquan727.github.io/2017/06/21/JavaScript%E2%91%A6%E5%AF%B9%E8%B1%A1/"/>
    <id>http://liuguoquan727.github.io/2017/06/21/JavaScript⑦对象/</id>
    <published>2017-06-21T14:10:53.000Z</published>
    <updated>2017-06-21T14:12:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><ul>
<li>创建一个函数需要用到关键字function，后面是一个函数名</li>
<li>为函数提供0或多个参数，使用参数向函数传值</li>
<li>可以返回一个值作为调用这个函数的结果，这是可选的</li>
<li>编写函数体，包含完成函数工作的所有代码</li>
</ul>
<p>JavaScript有两种方式定义函数，第一种方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过运算可以实现非常复杂的逻辑。如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。</p>
<p>由于JavaScript函数也是一个对象，上述定义的add()函数实际上是一个函数对象，而函数名add可以视为指向该函数的变量。<br>因此，第二种定义函数的方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这种方式下，<code>function{....}</code>是一个匿名函数，它没有函数名，但是这个匿名函数赋值给了变量add，所有通过变量add就可以调用该函数。</p>
<p>上述两种定义是等价的，注意第二种方式按照完整语法需要在末尾加一个；号，表示赋值语句结束。</p>
<blockquote>
<p>函数声明可以出现在脚本中的任何位置。使用多个外部JavaScript文件时有一点要记住，如果不同文件中有两个同名的函数，将使用浏览器最后看到的那个函数。</p>
</blockquote>
<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>调用函数时，按顺序传入参数即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = add(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//返回3</span></div></pre></td></tr></table></figure>
<p>由于JavaScript允许任意参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//返回3</span></div></pre></td></tr></table></figure>
<p>传入的参数比定义的少也没有问题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = add(); <span class="comment">//返回NaN</span></div></pre></td></tr></table></figure>
<p>此时，add的参数将受到undefined，计算结果为NaN</p>
<h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>如果一个变量在函数外声明，这个变量就是全局变量。可以在JavaScript代码中的任何地方访问。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">3</span>; <span class="comment">//全局变量</span></div><div class="line"><span class="keyword">var</span> y = <span class="number">4</span>;</div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> z = <span class="number">4</span>; <span class="comment">//局部变量</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> x + y + z;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>如果一个变量在函数内声明，这个变量就是局部变量。只能在函数体内部使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">3</span>; <span class="comment">//全局变量</span></div><div class="line"><span class="keyword">var</span> y = <span class="number">4</span>;</div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> z = <span class="number">4</span>; <span class="comment">//局部变量</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> x + y + z;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>JavaScript函数定义有个特点，它会先扫描整个函数体的语句，把所有声明的变量提升到函数顶部</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="string">"hello,"</span> + y;</div><div class="line">    alert(x);</div><div class="line">    y = <span class="string">"world"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div></pre></td></tr></table></figure>
<p>虽然是strict模式，但语句<code>var x = &quot;hello,&quot; + y</code>并不报错，原因是变量y在稍后说明了。但是alert显示hello，undefined，说明变量y的值为undefined。这正是因为JavaScript引擎自动提升了变量y的声明，但不会提升变量y的赋值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> y; <span class="comment">// 提升变量y的申明</span></div><div class="line">    <span class="keyword">var</span> x = <span class="string">'Hello, '</span> + y;</div><div class="line">    alert(x);</div><div class="line">    y = <span class="string">'Bob'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于JavaScript的这一特性，我们在函数内部定义变量时，请严格遵守“在函数内部首先声明所有变量”这一规则。最常见的做法是用一个var声明函数内部所用到的变量：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span></div><div class="line">        x = <span class="number">1</span>, <span class="comment">// x初始化为1</span></div><div class="line">        y = x + <span class="number">1</span>, <span class="comment">// y初始化为2</span></div><div class="line">        z, i; <span class="comment">// z和i为undefined</span></div><div class="line">    <span class="comment">// 其他语句:</span></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="普通创建对象"><a href="#普通创建对象" class="headerlink" title="普通创建对象"></a>普通创建对象</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>已经有了一个包含一些属性的对象。如何使用JavaScript创建这个对象呢？方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fido = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Fido"</span>,</div><div class="line">    <span class="attr">weight</span>: <span class="number">40</span>,</div><div class="line">    <span class="attr">breed</span>: <span class="string">"Mixed"</span>,</div><div class="line">    <span class="attr">loves</span>: [<span class="string">"walks"</span>,<span class="string">"fetching balls"</span>]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="访问和操作对象"><a href="#访问和操作对象" class="headerlink" title="访问和操作对象"></a>访问和操作对象</h3><ul>
<li>使用“点”记法访问对象属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (fido.weight &gt; <span class="number">25</span>) &#123;</div><div class="line">    alert(<span class="string">"Wonderful"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">"keep moving"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用一个串结合[]记法访问属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> breed = fido[<span class="string">"breed"</span>];</div><div class="line"><span class="keyword">if</span> (breed == <span class="string">"mixed"</span>) &#123;</div><div class="line">    alert(<span class="string">"Best in show"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>改变属性的值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fido.weight = <span class="number">27</span>; <span class="comment">//改变Fido的重量</span></div><div class="line">fido.loves.push(<span class="string">"chewing bones"</span>); <span class="comment">//向它的loves数组增加一个新元素</span></div></pre></td></tr></table></figure>
<ul>
<li>枚举对象的所有属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> prop;</div><div class="line"><span class="keyword">for</span>(prop <span class="keyword">in</span> fido) &#123;</div><div class="line">    alert(<span class="string">"Fido has a"</span> + prop + <span class="string">" property"</span>); <span class="comment">//每次循环迭代时，变量prop会得到下一个属性名的相应串值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>处理对象的数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> likes = fido.loves;</div><div class="line"><span class="keyword">var</span> likesStr = <span class="string">"Fido likes"</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; likes.length; i++) &#123;</div><div class="line">    likesStr += <span class="string">" "</span> + likes[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>向函数传入一个对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bark</span>(<span class="params">dog</span>) </span>&#123;</div><div class="line">    dog.weight = <span class="number">28</span>; <span class="comment">//会同时改变fido中的值</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">bark(fido);</div></pre></td></tr></table></figure>
<p>注意：将一个对象赋值给变量时，这个变量会包含这个对象的一个引用，而不是对象的副本，可以把引用想成是对象的一个指针。所有对该变量中属性的改变都会改变原对象的属性。</p>
<p>上述代码中，改变dog对象的weight属性时，实际上是修改的原对象fido的属性，而不是副本，所有不仅函数体内的dog对象发生了改变，函数体外的fido对象也发生了改变。</p>
<h3 id="给对象增加方法"><a href="#给对象增加方法" class="headerlink" title="给对象增加方法"></a>给对象增加方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fido = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Fido"</span>;</div><div class="line">    weight: <span class="number">40</span>;</div><div class="line">    breed: <span class="string">"Mixed"</span>;</div><div class="line">    loves: [<span class="string">"walks"</span>,<span class="string">"fetching balls"</span>]</div><div class="line"></div><div class="line">    bark: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"Woof Woof"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">fido.bark(); <span class="comment">//调用方法</span></div></pre></td></tr></table></figure>
<h2 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name,breed,weight</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.breed = breed;</div><div class="line">    <span class="keyword">this</span>.weight = weight;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.weight) &#123;</div><div class="line">            alert(<span class="keyword">this</span>.name + <span class="string">" say Woof!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">注意这个语法和对象的语法有所不同。这些是语句，所有需要一个“;”结束各语句。<span class="keyword">this</span>用于指示对象中的属性，它就代表了新创建的实例对象。</div></pre></td></tr></table></figure>
<h3 id="创建对象-1"><a href="#创建对象-1" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fido = <span class="keyword">new</span> Dog(<span class="string">"Fido"</span>,<span class="string">"Mixed"</span>,<span class="number">38</span>); <span class="comment">//new关键字创建一个对象</span></div><div class="line"><span class="keyword">var</span> tiny = <span class="keyword">new</span> Dog(<span class="string">"Tiny"</span>,<span class="string">"Chawalla"</span>,<span class="number">18</span>);</div><div class="line"></div><div class="line">fido.bark();</div><div class="line">tiny.bark();</div></pre></td></tr></table></figure>
<h2 id="prototype属性创建对象"><a href="#prototype属性创建对象" class="headerlink" title="prototype属性创建对象"></a>prototype属性创建对象</h2><p>prototype属性包含一个对象，所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。</p>
<p>实例对象一旦创建，将自动引用prototype对象的属性和方法。也就是说，实例对象的属性和方法分为两种，一种是本地的，一种是引用的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">DOG</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">this</span>.name = name;</div><div class="line">　　&#125;</div><div class="line">　　DOG.prototype = &#123; <span class="attr">species</span> : <span class="string">'犬科'</span> &#125;;</div><div class="line"></div><div class="line">　　<span class="keyword">var</span> dogA = <span class="keyword">new</span> DOG(<span class="string">'大毛'</span>);</div><div class="line">　　<span class="keyword">var</span> dogB = <span class="keyword">new</span> DOG(<span class="string">'二毛'</span>);</div><div class="line"></div><div class="line">　　alert(dogA.species); <span class="comment">// 犬科</span></div><div class="line">　　alert(dogB.species); <span class="comment">// 犬科</span></div></pre></td></tr></table></figure>
<p>现在，species属性放在prototype对象中，两个实例对象共享的，只要修改了prototype对象，就会同时影响到两个实例对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DOG.prototype.species = <span class="string">'猫科'</span>;</div><div class="line">alert(dogA.species); <span class="comment">// 猫科</span></div><div class="line">alert(dogB.species); <span class="comment">// 猫科</span></div></pre></td></tr></table></figure>
<p>综上所述，由于所有实例对象共享同一个prototype对象，那么在外界看起来，prototype对象就好像是实例对象的原型，而实例对象则好像继承了prototype对象一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;定义函数&quot;&gt;&lt;a href=&quot;#定义函数&quot; class=&quot;headerlink&quot; title=&quot;定义函数&quot;&gt;&lt;/a&gt;定义函数&lt;/h
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript⑥引用类型RegExp</title>
    <link href="http://liuguoquan727.github.io/2017/06/19/JavaScript%E2%91%A5%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8BRegExp/"/>
    <id>http://liuguoquan727.github.io/2017/06/19/JavaScript⑥引用类型RegExp/</id>
    <published>2017-06-19T13:22:06.000Z</published>
    <updated>2017-06-21T14:13:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><ul>
<li>字面量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d+/g</span>;</div><div class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"789456"</span>));<span class="comment">//true</span></div></pre></td></tr></table></figure>
<ul>
<li>构造函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg2=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\d+"</span>,<span class="string">"g"</span>);</div><div class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"1234444456"</span>));<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">"asdsa"</span>));<span class="comment">//false</span></div></pre></td></tr></table></figure>
<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><ul>
<li><strong>i：</strong>表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</li>
<li><strong>m：</strong>表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模 式匹配的项。</li>
<li><strong>g：</strong>表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即 停止；</li>
</ul>
<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><ul>
<li>单个字符数字<ul>
<li>. 匹配除换行符以外的任意字符</li>
<li>[a-zA-Z0-p] 与 [^a-zA-Z0-p] 匹配方括号中的任意字符，前面代^是匹配不在方括号中的任意字符；<ul>
<li>\d 与 \D    匹配数字和匹配非数字；</li>
<li>\w 与 \W    匹配字符和匹配非字母</li>
</ul>
</li>
</ul>
</li>
<li>空白字符<ul>
<li>\O        匹配null字符</li>
<li>\b        匹配空格字符</li>
<li>\f        匹配换页符</li>
<li>\n        匹配换行符</li>
<li>\r        匹配回车符</li>
<li>\s 和 \S        匹配空白字符，空格、制表符或换行符。大写的S是匹配非空字符</li>
<li>\t        匹配制表符</li>
</ul>
</li>
<li>定位符<ul>
<li>^        行首匹配</li>
<li>$        行尾匹配</li>
<li>\A        只匹配字符串的开始处</li>
<li>\b \B    匹配单词便捷，词在[]内无效，匹配非单词边界</li>
<li>G        匹配当前搜索的开始位置</li>
<li>\Z \z    匹配字符串结束处或行尾，只匹配字符串结束处</li>
</ul>
</li>
<li>限定符<ul>
<li>x?        匹配0个或一个x </li>
<li>x*        匹配0个或者任意多个x</li>
<li>x+        匹配一个或者多个</li>
<li>x{m,n}    匹配m-n个x；</li>
</ul>
</li>
<li>分组<ul>
<li>(?:x)        匹配x但不记录匹配结果（匹配不捕获）</li>
<li>x(?=y)        当x后面接y时匹配x</li>
<li>x(?!y)        当x后不是y时匹配x</li>
</ul>
</li>
<li>引用<ul>
<li>\1…\9    $1…$9        返回就割在模式匹配期间找到的，最近保存的部分</li>
</ul>
</li>
<li>或模式<ul>
<li>x|y|z        匹配x或者y或者z</li>
</ul>
</li>
</ul>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><p>RegExp 的每个实例都具有下列属性，通过这些属性可以取得有关模式的各种信息。</p>
<ul>
<li>global：布尔值，检测是走设置g标记</li>
<li>ignoreCase：布尔值，检测是否设置i标记</li>
<li>nultiline：    布尔值，检测是否设置了m标记</li>
<li>lastIndex：    整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。</li>
<li>source            返回正则表达式的字符串表示,按照字面量形式而非传入构造函数中的字符串模式返回。</li>
</ul>
<p>通过这些属性可以获知一个正则表达式的各方面信息，但却没有多大用处，因为这些信息全都包含在模式声明中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/\[bc\]at/i</span>;</div><div class="line"><span class="built_in">console</span>.log(pattern1.global); <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.ignoreCase); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.multiline); <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.lastIndex); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.source); <span class="comment">//"\[bc\]at"</span></div><div class="line"><span class="keyword">var</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\[bc\\]at"</span>, <span class="string">"i"</span>);</div><div class="line"><span class="built_in">console</span>.log(pattern2.global); <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.ignoreCase); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.multiline); <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.lastIndex); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.source); <span class="comment">//"\[bc\]at"</span></div></pre></td></tr></table></figure>
<p>尽管第一个模式使用的是字面量，第二个模式使用了 RegExp 构造函数，但它们的source 属性是相同的。可见， source 属性保存的是规范形式的字符串，即字面量形式所用的字符串。</p>
<h2 id="构造函数属性"><a href="#构造函数属性" class="headerlink" title="构造函数属性"></a>构造函数属性</h2><ul>
<li>$_        input    返回最近一次匹配的字符串</li>
<li>$&amp;        lastMatch    返回最近一次的匹配项</li>
<li>$+        lastParen    返回最近一次匹配的捕获组</li>
<li>$`        leftContext    返回被查找的字符串中从字符串开始位置到最后匹配之前的位置之间的字符</li>
<li>$’        rightContext    返回被搜索的字符串中从最后一个匹配位置开始到字符串结尾之间的字符</li>
<li>$*        multiline        检测表达式是否采用多行匹配m</li>
</ul>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><blockquote>
<p>test()方法在字符串中检测模式匹配，返回true或false</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> re = <span class="literal">null</span>, i;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    re = <span class="regexp">/cat/g</span>;</div><div class="line">    <span class="built_in">console</span>.log(re.test(<span class="string">"catastrophe"</span>)); <span class="comment">//true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"cat"</span>, <span class="string">"g"</span>);</div><div class="line">    <span class="built_in">console</span>.log(re.test(<span class="string">"catastrophe"</span>)); <span class="comment">//true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>RegExp 对象的主要方法是 exec()，该方法是专门为捕获组而设计的。exec()接受一个参数，即 要应用模式的字符串，然后返回包含第一个匹配项信息的数组；或者在没有匹配项的情况下返回 null。 返回的数组虽然是 Array 的实例，但包含两个额外的属性：index 和 input。其中，index 表示匹配 项在字符串中的位置，而 input 表示应用正则表达式的字符串。在数组中，第一项是与整个模式匹配 的字符串，其他项是与模式中的捕获组匹配的字符串（如果模式中没有捕获组，则该数组只包含一项）。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"cat, bat, sat, fat"</span>;</div><div class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/.at/</span>;</div><div class="line"><span class="keyword">var</span> matches = pattern1.exec(text);</div><div class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">//cat</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.lastIndex); <span class="comment">//0</span></div><div class="line">matches = pattern1.exec(text);</div><div class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">//cat</span></div><div class="line"><span class="built_in">console</span>.log(pattern1.lastIndex); <span class="comment">//0</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> pattern2 = <span class="regexp">/.at/g</span>;</div><div class="line"><span class="keyword">var</span> matches = pattern2.exec(text);</div><div class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">//cat</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.lastIndex); <span class="comment">//3</span></div><div class="line"></div><div class="line">matches = pattern2.exec(text);</div><div class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">//5</span></div><div class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">//bat</span></div><div class="line"><span class="built_in">console</span>.log(pattern2.lastIndex); <span class="comment">//8</span></div></pre></td></tr></table></figure>
<p>第一个模式 pattern1 不是全局模式，因此每次调用 exec() 返回的都是第一个匹配项（ “cat” ）。而第二个模式 pattern2 是全局模式，因此每次调用 exec() 都会返回字符串中的下一个匹配项，直至搜索到字符串末尾为止。此外，还应该注意模式的 lastIndex 属性的变化情况。在全局匹配模式下， lastIndex 的值在每次调用 exec() 后都会增加，而在非全局模式下则始终保持不变。</p>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ul>
<li>match        找到一个或者多个正则表达式的匹配</li>
<li>replace    替换与正则表达式匹配的子串</li>
<li>search        检索与正则表达式匹配的值</li>
<li>split        把字符串分割为字符串数组</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;字面量&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript⑥引用类型Global</title>
    <link href="http://liuguoquan727.github.io/2017/06/19/JavaScript%E2%91%A5%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8BGlobal/"/>
    <id>http://liuguoquan727.github.io/2017/06/19/JavaScript⑥引用类型Global/</id>
    <published>2017-06-19T13:20:06.000Z</published>
    <updated>2017-06-19T13:38:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>所有在全局作用域中定义的属性和函数，都是 Global 对象的属性。</p>
<ul>
<li>isNaN() </li>
<li>isFinite() </li>
<li>parseInt() 与 parseFloat()</li>
<li>encodeURI() 和 encodeURIComponent()</li>
<li>decodeURI() 和 decodeURIComponent()</li>
<li>eval()</li>
</ul>
<h1 id="URI编码"><a href="#URI编码" class="headerlink" title="URI编码"></a>URI编码</h1><h2 id="encodeURI-和-encodeURIComponent"><a href="#encodeURI-和-encodeURIComponent" class="headerlink" title="encodeURI() 和 encodeURIComponent()"></a>encodeURI() 和 encodeURIComponent()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uri1 = <span class="string">"http://www.wrox.com/illegal value.htm#start"</span>;</div><div class="line"><span class="keyword">var</span> uri2 = <span class="string">"https://www.google.com.hk/webhp?tab=Tw"</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURI</span>(uri1));<span class="comment">//http://www.wrox.com/illegal%20value.htm#start</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURI</span>(uri2));<span class="comment">//https://www.google.com.hk/webhp?tab=Tw</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURIComponent</span>(uri1));<span class="comment">//http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURIComponent</span>(uri2));<span class="comment">//https%3A%2F%2Fwww.google.com.hk%2Fwebhp%3Ftab%3DTw</span></div></pre></td></tr></table></figure>
<p><strong>encodeURI() 不会对本身属于 URI 的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；而 encodeURIComponent() 则会对它发现的任何非标准字符进行编码。</strong></p>
<p>使用 encodeURI() 编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20 。而 encodeURIComponent() 方法则会使用对应的编码替换所有非字母数字字符。这也正是可以对整个 URI使用 encodeURI() ，而只能对附加在现有 URI后面的字符串使用 encodeURIComponent()的原因所在。</p>
<p>Global 对象的 encodeURI() 和 encodeURIComponent() 方法可以对 URI（Uniform ResourceIdentifiers，通用资源标识符）进行编码，以便发送给浏览器。有效的 URI 中不能包含某些字符，例如空格。而这两个 URI 编码方法就可以对 URI 进行编码，它们用特殊的 UTF-8 编码替换所有无效的字符，从而让浏览器能够接受和理解。</p>
<blockquote>
<p>使用 encodeURIComponent() 方法的时候要比使用encodeURI()更多，因为在实践中更常见的是对查询字符串参数而不是对基础URI进行编码。</p>
</blockquote>
<h2 id="decodeURI-和-decodeURIComponent"><a href="#decodeURI-和-decodeURIComponent" class="headerlink" title="decodeURI() 和 decodeURIComponent()"></a>decodeURI() 和 decodeURIComponent()</h2><p>其中， decodeURI() 只能对使用 encodeURI() 替换的字符进行解码,decodeURIComponent可以解析encodeURI的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uri1 = <span class="string">"https%3A%2F%2Fwww.google.com.hk%2Fwebhp%3Ftab%3DTw"</span>;</div><div class="line"><span class="keyword">var</span> uri2 = <span class="string">"http://www.wrox.com/illegal%20value.htm#start"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURI</span>(uri1));<span class="comment">//https%3A%2F%2Fwww.google.com.hk%2Fwebhp%3Ftab%3DTw</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(uri1));<span class="comment">//https://www.google.com.hk/webhp?tab=Tw</span></div><div class="line">    </div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURI</span>(uri2));<span class="comment">//http://www.wrox.com/illegal value.htm#start</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(uri2));<span class="comment">//http://www.wrox.com/illegal value.htm#start</span></div></pre></td></tr></table></figure>
<h1 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h1><p>eval()方法就像是一个完整的 ECMAScript 解析器,它只接受一个参数，即要执行的 ECMAScript （或 JavaScript）字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>(<span class="string">"console.log('test name')"</span>); <span class="comment">//"test name"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> msg = <span class="string">"hello world"</span>;</div><div class="line"><span class="built_in">eval</span>(<span class="string">"console.log(msg)"</span>); <span class="comment">//"hello world"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在 eval() 中创建的任何变量或函数都不会被提升，因为在解析代码的时候，它们被包含在一个字符串中；它们只在 eval() 执行的时候创建。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testVar;</div><div class="line"><span class="built_in">console</span>.log(testVar);<span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(msg);<span class="comment">//Uncaught ReferenceError: msg is not defined</span></div><div class="line"><span class="built_in">eval</span>(<span class="string">'var msg = "hello world eval"'</span>);</div><div class="line"><span class="built_in">eval</span>(<span class="string">"console.log(msg)"</span>); <span class="comment">//"hello world"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>严格模式下，在外部访问不到 eval() 中创建的任何变量或函数，因此前面两个例子都会导致错误。同样，在严格模式下，为 eval 赋值也会导致错误</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所有在全局作用域中定义的属性和函数，都是 Global 对象的属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;isNaN() &lt;/li&gt;
&lt;li&gt;isFinite() &lt;/li&gt;
&lt;li&gt;parseInt() 与 parseFloat()&lt;/li&gt;
&lt;li&gt;encodeURI() 和 e
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript⑥引用类型Date</title>
    <link href="http://liuguoquan727.github.io/2017/06/19/JavaScript%E2%91%A5%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8BDate/"/>
    <id>http://liuguoquan727.github.io/2017/06/19/JavaScript⑥引用类型Date/</id>
    <published>2017-06-19T13:18:06.000Z</published>
    <updated>2017-06-19T13:38:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h1><ul>
<li>“月/日/年”，如 6/13/2004；</li>
<li>“英文月名 日,年”，如 January 12,2016；</li>
<li>“英文星期几 英文月名 日 年 时:分:秒 时区”，如 Tue May 25 2004 00:00:00 GMT-0700。</li>
<li>YYYY-MM-DD HH:mm:ss.sss</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testDate1 = <span class="keyword">new</span>  <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">var</span> testDate2 = <span class="keyword">new</span>  <span class="built_in">Date</span>(<span class="string">"9/13/2016"</span>);</div><div class="line"><span class="keyword">var</span> testDate3 = <span class="keyword">new</span>  <span class="built_in">Date</span>(<span class="string">"09/13/2016"</span>);</div><div class="line"><span class="keyword">var</span> testDate4 = <span class="keyword">new</span>  <span class="built_in">Date</span>(<span class="string">"January 12,2016"</span>);</div><div class="line"><span class="keyword">var</span> testDate5 = <span class="keyword">new</span>  <span class="built_in">Date</span>(<span class="string">"Tue May 25 2016 00:00:00 GMT-0700"</span>);</div><div class="line"><span class="keyword">var</span> testDate6=<span class="keyword">new</span>  <span class="built_in">Date</span>(<span class="string">"2004-05-25 00:01:02"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"testDate1"</span>,testDate1);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"testDate2"</span>,testDate2);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"testDate3"</span>,testDate3);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"testDate4"</span>,testDate4);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"testDate5"</span>,testDate5);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"testDate6"</span>,testDate6);</div></pre></td></tr></table></figure>
<h1 id="计算程序的耗时"><a href="#计算程序的耗时" class="headerlink" title="计算程序的耗时"></a>计算程序的耗时</h1><p>Data.now() 方法，返回表示调用这个方法时的日期和时间的毫秒数。这个方法简化了使用 Data 对象分析代码的工作;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//取得开始时间</div><div class="line">var start = Date.now();</div><div class="line">//调用函数</div><div class="line">for(var i=0;i&lt;10000000;i++)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//取得停止时间</div><div class="line">var end = Date.now();</div><div class="line">console.log(end-start);</div></pre></td></tr></table></figure>
<p>支持 Data.now() 方法的浏览器包括 IE9+、Firefox 3+、Safari 3+、Opera 10.5 和 Chrome。在不支持它的浏览器中，使用+操作符把 Data 对象转换成字符串，也可以达到同样的目的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//取得开始时间</div><div class="line">var start = +Date.now();</div><div class="line">//调用函数</div><div class="line">for(var i=0;i&lt;10000000;i++)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//取得停止时间</div><div class="line">var end = +Date.now();</div><div class="line">console.log(end-start);</div></pre></td></tr></table></figure>
<h1 id="日期的比较"><a href="#日期的比较" class="headerlink" title="日期的比较"></a>日期的比较</h1><blockquote>
<p>原理：比较的是转成毫秒数后，然后再比较毫秒数；日期越靠后，毫秒数越大；<br>Date 类上有一个 valueOf() 方法，返回日期的毫秒表示（距离1970年午夜的毫秒差）。</p>
</blockquote>
<p>如下；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testDate1=<span class="keyword">new</span>  <span class="built_in">Date</span>(<span class="string">"8/13/2016"</span>);</div><div class="line"><span class="keyword">var</span> testDate2=<span class="keyword">new</span>  <span class="built_in">Date</span>(<span class="string">"9/13/2016"</span>);</div><div class="line"><span class="keyword">var</span> testDate3=<span class="keyword">new</span>  <span class="built_in">Date</span>(<span class="string">"1/1/1970"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(testDate1 &gt; testDate2);<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(testDate1 &lt; testDate2);<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(testDate1.valueOf());<span class="comment">//1471017600000</span></div><div class="line"><span class="built_in">console</span>.log(testDate2.valueOf());<span class="comment">//1473696000000</span></div><div class="line"><span class="built_in">console</span>.log(testDate3.valueOf()-testDate3.getTime());<span class="comment">//1473696000000</span></div></pre></td></tr></table></figure>
<h1 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h1><ul>
<li>toDateString()——以特定于实现的格式显示星期几、月、日和年；</li>
<li>toTimeString()——以特定于实现的格式显示时、分、秒和时区；</li>
<li>toLocaleDateString()——以特定于地区的格式显示星期几、月、日和年；</li>
<li>toLocaleTimeString()——以特定于实现的格式显示时、分、秒；</li>
<li>toUTCString()——以特定于实现的格式完整的 UTC 日期。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="built_in">console</span>.log(date.toDateString());</div><div class="line"><span class="built_in">console</span>.log(date.toTimeString());</div><div class="line"><span class="built_in">console</span>.log(date.toLocaleDateString());</div><div class="line"><span class="built_in">console</span>.log(date.toLocaleTimeString());</div><div class="line"><span class="built_in">console</span>.log(date.toUTCString());</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *Mon Jun 19 2017</div><div class="line"> 13:49:00 GMT+0800 (CST)</div><div class="line"> 6/19/2017</div><div class="line"> 1:49:00 PM</div><div class="line"> Mon, 19 Jun 2017 05:49:00 GMT</div><div class="line"> */</div></pre></td></tr></table></figure>
<h1 id="Date的常用方法"><a href="#Date的常用方法" class="headerlink" title="Date的常用方法"></a>Date的常用方法</h1><ul>
<li>getTime(); //返回表示日期的毫秒数</li>
<li>getFullYear();//获取四位年</li>
<li>getMonth();//获取月0-11代表1-12月;用的时候，记得补1;</li>
<li>getDate();//获取日期月份中的天数(1~31)</li>
<li>getDay();//获取星期0-6代表周日-周六</li>
<li>getHours();//获取小时</li>
<li>getMinutes();//获取分</li>
<li>getSeconds();//获取秒</li>
<li>getMilliseconds();//获取毫秒</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(date.getTime());</div><div class="line"><span class="built_in">console</span>.log(date.getFullYear()+<span class="string">"年"</span>);</div><div class="line"><span class="built_in">console</span>.log(date.getMonth()+<span class="number">1</span>+<span class="string">"月"</span>);</div><div class="line"><span class="built_in">console</span>.log(date.getDate()+<span class="string">"日"</span>);</div><div class="line"><span class="built_in">console</span>.log(date.getHours()+<span class="string">"时"</span>);</div><div class="line"><span class="built_in">console</span>.log(date.getMinutes()+<span class="string">"分"</span>);</div><div class="line"><span class="built_in">console</span>.log(date.getSeconds()+<span class="string">"秒"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 1497851952517</div><div class="line"> 2017年</div><div class="line"> 6月</div><div class="line"> 19日</div><div class="line"> 13时</div><div class="line"> 59分</div><div class="line"> 12秒</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建Date对象&quot;&gt;&lt;a href=&quot;#创建Date对象&quot; class=&quot;headerlink&quot; title=&quot;创建Date对象&quot;&gt;&lt;/a&gt;创建Date对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;“月/日/年”，如 6/13/2004；&lt;/li&gt;
&lt;li&gt;“英文月名 日,年”
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript⑥引用类型Array</title>
    <link href="http://liuguoquan727.github.io/2017/06/19/JavaScript%E2%91%A5%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8BArray/"/>
    <id>http://liuguoquan727.github.io/2017/06/19/JavaScript⑥引用类型Array/</id>
    <published>2017-06-19T13:16:06.000Z</published>
    <updated>2017-06-19T13:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。</p>
<h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建空数组</span></div><div class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="comment">//创建长度为10的数组</span></div><div class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(colors.length);</div><div class="line"></div><div class="line"><span class="comment">//改变数组长度，用undefined元素补全</span></div><div class="line">colors.length = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(colors);</div><div class="line"></div><div class="line"><span class="comment">//索引超出范围同样会改变数组长度，未复制的元素用undefined补全</span></div><div class="line">colors[<span class="number">5</span>] = <span class="number">45</span>;</div><div class="line"><span class="built_in">console</span>.log(colors);</div><div class="line"><span class="comment">//[ 'red', 'blue', 'green', , , 45 ]</span></div></pre></td></tr></table></figure>
<h1 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断是否是数组</span></div><div class="line"><span class="keyword">if</span> (colors <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"是数组"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//ECMAScript5新增方法</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(colors)) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"是数组"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>instanceof 操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实 际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的 Array 构造函数。</p>
<p>ECMAScript 5 新增了 <code>Array.isArray()</code>方法。这个方法的目的是最终确定某 个值到底是不是数组，而不管它是在哪个全局执行环境中创建的。</p>
<h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</div><div class="line"></div><div class="line"><span class="comment">//返回以逗号分隔元素值的字符串</span></div><div class="line"><span class="built_in">console</span>.log(colors.toString());</div><div class="line"><span class="comment">//red,blue,green,45</span></div><div class="line"></div><div class="line"><span class="comment">//返回以指定字符串分隔元素值的字符串</span></div><div class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">"|"</span>));</div><div class="line"><span class="comment">//red|blue|green</span></div><div class="line"></div><div class="line"><span class="comment">//返回数组</span></div><div class="line"><span class="built_in">console</span>.log(colors.valueOf());</div><div class="line"><span class="comment">//[ 'red', 'blue', 'green', 45 ]</span></div></pre></td></tr></table></figure>
<h1 id="添加删除元素"><a href="#添加删除元素" class="headerlink" title="添加删除元素"></a>添加删除元素</h1><h2 id="push-和-pop"><a href="#push-和-pop" class="headerlink" title="push 和 pop"></a>push 和 pop</h2><ul>
<li>push()：接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。</li>
<li>pop()：pop()方法则从数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组末尾增加元素</span></div><div class="line">colors.push(<span class="string">"gray"</span>);</div><div class="line">colors.push(<span class="string">"white"</span>);</div><div class="line">colors.push(<span class="string">"dark"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(colors);</div><div class="line"></div><div class="line"><span class="comment">//删除最后一个元素，同时返回这个元素</span></div><div class="line"><span class="built_in">console</span>.log(colors.pop());</div></pre></td></tr></table></figure>
<h2 id="shift-和-unshift"><a href="#shift-和-unshift" class="headerlink" title="shift 和 unshift"></a>shift 和 unshift</h2><ul>
<li>shift()：能够移 除数组中的第一个项并返回该项，同时将数组长度减 1。</li>
<li>unshift()：它能在数组前端添加任意个项并返回新数组的长度。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//删除并返回第一个元素</span></div><div class="line"><span class="built_in">console</span>.log(colors.shift());</div><div class="line"></div><div class="line"><span class="comment">//在数组首位添加元素并返回新数组的长度</span></div><div class="line"><span class="built_in">console</span>.log(colors.unshift(<span class="string">"red"</span>,<span class="string">"orange"</span>));</div><div class="line"><span class="built_in">console</span>.log(colors);</div><div class="line"><span class="comment">//[ 'red', 'orange', 'blue', 'green', 'gray', 'white' ]</span></div></pre></td></tr></table></figure>
<h1 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h1><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>reverse()方法会反转数组项的顺序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//反转数组元素</span></div><div class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>];</div><div class="line">values.reverse();</div><div class="line"><span class="built_in">console</span>.log(values);</div><div class="line"><span class="comment">//[ 0, 5, 4, 3, 2, 1 ]</span></div></pre></td></tr></table></figure>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>在默认情况下，sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。 为了实现排序，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以 确定如何排序。即使数组中的每一项都是数值，sort()方法比较的也是字符串，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</div><div class="line"><span class="comment">//数组排序</span></div><div class="line">values.sort();</div><div class="line"><span class="built_in">console</span>.log(values);</div><div class="line"><span class="comment">//[ 0, 1, 10, 15, 5 ]</span></div></pre></td></tr></table></figure>
<blockquote>
<p>因为数值 5 虽然小于 10，但在进行字符串比较时，”10”则位于”5”的前面，于是数组的顺序就被修改了。</p>
</blockquote>
<p>sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等 则返回 0，如果第一个参数应该位于第二个之后则返回一个正数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">v1,v2</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (v1 &lt; v2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v1 &gt; v2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//数组排序</span></div><div class="line">values.sort(compare);</div><div class="line"><span class="built_in">console</span>.log(values);</div><div class="line"><span class="comment">//[ 0, 1, 5, 10, 15 ]</span></div></pre></td></tr></table></figure>
<h1 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h1><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）。</p>
<p>splice()的主要用途是向数组的中部插入项，但使用这种方法的方式则有如下 3 种。</p>
<ul>
<li><strong>删除元素：</strong>可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。 例如，splice(0,2)会删除数组中的前两项。</li>
<li><strong>插入元素：</strong>可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、0（要删除的项数）和要插入的项（可以是多项）。</li>
<li><strong>替换元素：</strong>可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起 始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> company = [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Yahoo'</span>, <span class="string">'AOL'</span>, <span class="string">'Excite'</span>, <span class="string">'Oracle'</span>];</div><div class="line"><span class="comment">//删除指定位置0开始的2个元素</span></div><div class="line">company.splice(<span class="number">0</span>,<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(company);</div><div class="line"></div><div class="line"><span class="comment">//删除并添加元素</span></div><div class="line">company.splice(<span class="number">0</span>,<span class="number">1</span>,<span class="string">"facebook"</span>);</div><div class="line"><span class="built_in">console</span>.log(company);</div><div class="line"></div><div class="line"><span class="comment">//指定位置2添加元素</span></div><div class="line">company.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"Google"</span>,<span class="string">"Airbnb"</span>);</div><div class="line"><span class="built_in">console</span>.log(company);</div></pre></td></tr></table></figure>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>slice()方法可以 接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该 参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项— —但不包括结束位置的项。注意，slice()方法不会影响原始数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//截取Array的部分元素</span></div><div class="line"><span class="keyword">var</span> a = company.slice(<span class="number">0</span>,<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"></div><div class="line"><span class="comment">//复制Array</span></div><div class="line">a = company.slice();</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="built_in">console</span>.log(a == arr); <span class="comment">//false</span></div></pre></td></tr></table></figure>
<h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>concat()方法可以基于当前数 组中的所有项创建一个新数组。具体来说，这个方法会先创建当前数组一个副本，然后将接收到的参数 添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是 复制当前数组并返回副本。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//合并两个Array，并返回一个新的Array</span></div><div class="line"><span class="keyword">var</span> l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> l2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="keyword">var</span> l = l1.concat(l2);</div><div class="line"><span class="built_in">console</span>.log(l);</div><div class="line"><span class="built_in">console</span>.log(l == l1); <span class="comment">//false</span></div></pre></td></tr></table></figure>
<h1 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h1><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="string">'30'</span>, <span class="string">'xyz'</span>,<span class="number">10</span>];</div><div class="line"><span class="comment">//返回指定元素的第一次出现位置</span></div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">10</span>));</div><div class="line"><span class="comment">//没有找到返回 -1</span></div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">0</span>));</div></pre></td></tr></table></figure>
<h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回元素最后一次出现的位置</span></div><div class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">10</span>));</div></pre></td></tr></table></figure>
<h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h2><p>ECMAScript 5 为数组定义了 5 个迭代方法。每个方法都接收两个参数：要在每一项上运行的函数和（可选的）运行该函数的作用域对象——影响 this 的值。传入这些方法中的函数会接收三个参数：数 组项的值、该项在数组中的位置和数组对象本身。</p>
<ul>
<li>every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。</li>
<li>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</li>
<li>filter()：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。</li>
<li>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>
<li>forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">//每一项都返回true，则结果为true</span></div><div class="line"><span class="keyword">var</span> everyResult = numbers.every(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> item &gt; <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(everyResult);</div><div class="line"><span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="comment">//有一项返回true，则结果为true</span></div><div class="line"><span class="keyword">var</span> someResult = numbers.some(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> item &gt; <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(sommeResult);</div><div class="line"><span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">//筛选出指定条件的元素数组</span></div><div class="line"><span class="keyword">var</span> filterResult = numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> item &gt; <span class="number">2</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(filterResult);</div><div class="line"><span class="comment">//[ 3, 4, 5, 6, 7, 8, 9, 5, 4, 3 ]</span></div><div class="line"></div><div class="line"><span class="comment">//对数组每一项都运行给定的函数，返回计算后的元素数组</span></div><div class="line"><span class="keyword">var</span> mapResult = numbers.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(mapResult);</div><div class="line"><span class="comment">//[ 2, 4, 6, 8, 10, 12, 14, 16, 18, 10, 8, 6, 4, 2 ]</span></div><div class="line"></div><div class="line"><span class="comment">//遍历数组</span></div><div class="line">numbers.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,array</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(item);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h1><p>ECMAScript 5 还新增了两个归并数组的方法：reduce()和 reduceRight()。这两个方法都会迭 代数组的所有项，然后构建一个最终返回的值。这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。</p>
<p>传给 reduce()和 reduceRight()的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象。这 个函数返回的任何值都会作为第一个参数自动传给下一项。</p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>reduce()方法从数组的第一项开始，逐个遍历到最后。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> sum = nums.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev,cur,index,array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> prev + cur;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//45</span></div></pre></td></tr></table></figure>
<h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><p>reduceRight()则从数组的最后一项开始，向前遍历到第一项。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</div><div class="line"></div><div class="line">sum = nums.reduceRight(<span class="function"><span class="keyword">function</span> (<span class="params">prev,cur,index,array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> prev + cur;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//45</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。&lt;/p&gt;
&lt;h1 id=&quot;创建数组&quot;&gt;&lt;a href=&quot;#创建数组&quot; class=&quot;headerlink&quot; title=&quot;创建数组&quot;&gt;&lt;/a&gt;创建数组&lt;/h1&gt;&lt;figure class=&quot;hi
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript⑥基本包装类型</title>
    <link href="http://liuguoquan727.github.io/2017/06/19/JavaScript%E2%91%A5%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/"/>
    <id>http://liuguoquan727.github.io/2017/06/19/JavaScript⑥基本包装类型/</id>
    <published>2017-06-19T13:14:06.000Z</published>
    <updated>2017-06-19T13:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h1><p>Boolean类型是与布尔值对应的引用类型。要创建 Boolean 对象，可以像下面这样调用 Boolean 构造函数并传入 true 或 false 值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</div><div class="line"><span class="built_in">console</span>.log(obj.valueOf());</div><div class="line"><span class="built_in">console</span>.log(obj.toString());</div></pre></td></tr></table></figure>
<p>Boolean 对象在 ECMAScript 中的用处不大，因为它经 常会造成人们的误解。其中最常见的问题就是在布尔表达式中使用 Boolean 对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> falseObj = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</div><div class="line"><span class="comment">//对象在布尔表达式中表示true</span></div><div class="line"><span class="keyword">var</span> ret = falseObj &amp;&amp; <span class="literal">true</span>;</div><div class="line"><span class="built_in">console</span>.log(ret); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>检测Boolean对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> falseObj);</div><div class="line"><span class="built_in">console</span>.log(falseObj <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);</div></pre></td></tr></table></figure>
<h1 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h1><p>Number 是与数字值对应的引用类型。要创建 Number 对象，可以在调用 Number 构造函数时向其中传递相应的数值。</p>
<ul>
<li>toFixed()方法会按照指定的小数位返回数值的字符串表示</li>
<li>toExponential()，该方法返回以指数表示法（也称 e 表示法） 表示的数值的字符串形式。</li>
<li>toPrecision()会根据要处理的数值决定到底是调用 toFixed()还是调用 toExponential()。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(num.toString());</div><div class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">//二进制</span></div><div class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">//八进制</span></div><div class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">//16进制</span></div><div class="line"></div><div class="line"><span class="comment">//指定小数位数</span></div><div class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">//10.00</span></div><div class="line"></div><div class="line"><span class="comment">//自动四舍五入</span></div><div class="line">num = <span class="number">10.004</span>;</div><div class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">//10.00</span></div><div class="line">num = <span class="number">10.005</span>;</div><div class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">//10.01</span></div><div class="line"></div><div class="line">num = <span class="number">10</span>;</div><div class="line"><span class="comment">//指数表示法表示的数值的字符串形式</span></div><div class="line"><span class="built_in">console</span>.log(num.toExponential(<span class="number">2</span>)); <span class="comment">//1.00e+1</span></div><div class="line"></div><div class="line"></div><div class="line">num = <span class="number">99</span>;</div><div class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">1</span>)); <span class="comment">//1e+2</span></div><div class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">2</span>)); <span class="comment">//99</span></div><div class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">3</span>)); <span class="comment">//99.0</span></div><div class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">4</span>)); <span class="comment">//99.00</span></div></pre></td></tr></table></figure>
<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>String 类型是字符串的对象包装类型，可以像下面这样使用 String 构造函数来创建。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"Hello world"</span>);</div><div class="line"><span class="built_in">console</span>.log(str.valueOf());</div><div class="line"><span class="built_in">console</span>.log(str.toString());</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"字符串长度: "</span>+str.length);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"字符方法"</span>)</div><div class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>));</div><div class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">1</span>));</div><div class="line"><span class="built_in">console</span>.log(str[<span class="number">1</span>]);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"字符串操作"</span>);</div><div class="line"><span class="comment">//拼接</span></div><div class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">" welcome"</span>));</div><div class="line"><span class="comment">//返回子字符串</span></div><div class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>,<span class="number">5</span>));</div><div class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">0</span>,<span class="number">5</span>));</div><div class="line"><span class="comment">/**</span></div><div class="line"> substr()的第二个参数是返回的字符个数，</div><div class="line">如果没有传递该参数则将字符串的长度作为结束位置</div><div class="line">*/</div><div class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">0</span>));</div><div class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>,<span class="number">5</span>));</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"字符串查找"</span>);</div><div class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"e"</span>,<span class="number">0</span>));</div><div class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">"l"</span>));</div><div class="line"></div><div class="line"><span class="comment">//搜索所有字符l的位置</span></div><div class="line"><span class="keyword">var</span> pos = str.indexOf(<span class="string">"l"</span>);</div><div class="line"><span class="keyword">var</span> positions = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="keyword">while</span> (pos &gt; <span class="number">-1</span>) &#123;</div><div class="line">    positions.push(pos);</div><div class="line">    pos = str.indexOf(<span class="string">"l"</span>, pos + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(positions);</div><div class="line"></div><div class="line"><span class="comment">//去掉前后空格</span></div><div class="line">str = <span class="string">" Hello World  "</span>;</div><div class="line">str = str.trim();</div><div class="line"><span class="built_in">console</span>.log(str.trim());</div><div class="line"></div><div class="line"><span class="comment">//大小写</span></div><div class="line"><span class="built_in">console</span>.log(str.toLocaleUpperCase());</div><div class="line"><span class="built_in">console</span>.log(str.toUpperCase());</div><div class="line"><span class="built_in">console</span>.log(str.toLocaleLowerCase());</div><div class="line"><span class="built_in">console</span>.log(str.toLowerCase());</div><div class="line"></div><div class="line"><span class="comment">//搜索匹配字符串</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="string">"ll"</span>));</div><div class="line"><span class="built_in">console</span>.log(str.search(<span class="string">"ll"</span>));</div><div class="line"></div><div class="line"><span class="comment">//替换字符串</span></div><div class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">"ll"</span>,<span class="string">"rr"</span>));</div><div class="line"></div><div class="line"><span class="comment">//分割字符串</span></div><div class="line">str = <span class="string">"green,yellow,blue"</span>;</div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="string">","</span>))</div><div class="line"></div><div class="line"><span class="comment">//比较字符串</span></div><div class="line">str = <span class="string">"blue"</span>;</div><div class="line"><span class="built_in">console</span>.log(str.localeCompare(<span class="string">"area"</span>)); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(str.localeCompare(<span class="string">"blue"</span>)); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(str.localeCompare(<span class="string">"cat"</span>)); <span class="comment">// -1</span></div><div class="line"></div><div class="line"><span class="comment">//fromCharCode()。这个方法的任务是接收一或 多个字符编码，然后将它们转换成一个字符串。</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>)); <span class="comment">//hello</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Boolean&quot;&gt;&lt;a href=&quot;#Boolean&quot; class=&quot;headerlink&quot; title=&quot;Boolean&quot;&gt;&lt;/a&gt;Boolean&lt;/h1&gt;&lt;p&gt;Boolean类型是与布尔值对应的引用类型。要创建 Boolean 对象，可以像下面这样调用 Boo
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript⑤函数</title>
    <link href="http://liuguoquan727.github.io/2017/06/18/JavaScript%E2%91%A4%E5%87%BD%E6%95%B0/"/>
    <id>http://liuguoquan727.github.io/2017/06/18/JavaScript⑤函数/</id>
    <published>2017-06-18T13:14:06.000Z</published>
    <updated>2017-06-19T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识函数"><a href="#初识函数" class="headerlink" title="初识函数"></a>初识函数</h1><p>ECMAScript中的函数使用 function 关键字来声明，后跟一组参数以及函数体。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 基本的语法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">argument1,argument2</span>)</span>&#123;</div><div class="line"> <span class="comment">/*一堆的代码*/</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//下面是函数的一个实例，</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line"> <span class="built_in">console</span>.log(a-b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">diff(<span class="number">10</span>,<span class="number">5</span>);<span class="comment">//输出5</span></div><div class="line">diff(<span class="number">20</span>,<span class="number">2</span>);<span class="comment">//输出18</span></div></pre></td></tr></table></figure>
<p>函数还有一个属性，就是可以return；ECMAScript中函数在定义的时候，不要求函数是否返回一个值，但是每个函数都有return的权利；任何函数在任何时候都可以通过return语句返回的值来实现把值返回给外部变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line"> <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> diffNumber=diff(<span class="number">10</span>,<span class="number">5</span>);</div><div class="line"><span class="built_in">console</span>.log(diffNumber);</div></pre></td></tr></table></figure>
<p>函数的返回值只能通过return来返回,除了return以外，没有任何声明可以表示返回值，无论return在哪里，只要有执行了return同一条的代码后，函数立即停止，并且立即退出，因此位于return语句之后的人和代码都永远不会执行； </p>
<p>return语句可以不带任何返回值，这种情况下，函数返回值是undefined；这种写法，一般用在需要提前停止函数又不需要返回值的情况下。</p>
<h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><ul>
<li>function语句的定义方法</li>
<li>函数直接量的定义方法</li>
<li>构造函数的定义方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//function语句的定义方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"function语句的定义方法:"</span>,arg1+arg2);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//函数直接量的定义方法</span></div><div class="line"><span class="keyword">var</span> test2 = <span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"函数直接量的定义方法:"</span>,arg1+arg2);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//构造函数的定义方法</span></div><div class="line"><span class="keyword">var</span> test3 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"arg1"</span>,<span class="string">"arg2"</span>,<span class="string">"console.log('构造函数的定义方法:',arg1+arg2)"</span>);</div></pre></td></tr></table></figure>
<h1 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h1><p>ECMAScript 函数不能实现重载，ECMAScript 没有函数签名，因为其参数是由包含0 或者多个值的数组来表示的。如果在 ECMAScript 中定义了两个名字相同的参数，则该名字只属于后定义的函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num + <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num + <span class="number">200</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> ret = add(<span class="number">100</span>);</div><div class="line"><span class="built_in">console</span>.log(ret);</div><div class="line"><span class="comment">//300</span></div></pre></td></tr></table></figure>
<h1 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h1><h2 id="直接调用-函数名-实参列表"><a href="#直接调用-函数名-实参列表" class="headerlink" title="直接调用:函数名(实参列表)"></a>直接调用:函数名(实参列表)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"function语句的定义方法:"</span>,arg1+arg2);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//直接调用</span></div><div class="line">test1(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//function语句的定义方法: 3</span></div></pre></td></tr></table></figure>
<h2 id="在链接中调用"><a href="#在链接中调用" class="headerlink" title="在链接中调用"></a>在链接中调用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"test1(9,9)"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">"function语句的定义方法:"</span>,arg1+arg2);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在事件中调用"><a href="#在事件中调用" class="headerlink" title="在事件中调用"></a>在事件中调用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> oBtn1=<span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</div><div class="line">oBtn1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	test1(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"function语句的定义方法:"</span>,arg1+arg2);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h2><blockquote>
<p>在函数内部调用函数自身</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> oBtn1=<span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</div><div class="line">oBtn1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">test1(<span class="number">10</span>,<span class="number">1</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"最开始的调用方法"</span>,arg1+arg2);</div><div class="line">arg1--;</div><div class="line"><span class="keyword">if</span>(arg1&gt;<span class="number">0</span>)&#123;</div><div class="line">test1(arg1,arg2)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><blockquote>
<p>存放实参的参数列表</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">test1(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//[1,2]</span></div><div class="line">test1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//[1, 2, 3, 4, 5]</span></div><div class="line">function test1()&#123;</div><div class="line">  console.log(arguments);</div><div class="line">&#125;</div><div class="line"><span class="comment">//&#123; '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 &#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>argutments 在普通模式里，可以在函数内部修改函数的值；在严格模式下，函数内部不能修改argument的值，即使修改了，操作也是无效的；其次重写arguments值会导致语法错误，代码不执行；</p>
</blockquote>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><blockquote>
<p>仅能在函数体内使用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">test1(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//[1,2]</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);<span class="comment">//arguments is not defined</span></div></pre></td></tr></table></figure>
<blockquote>
<p>函数声明时自动初始化</p>
</blockquote>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote>
<p>length：获取函数实参的长度</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">test1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">// 输出5</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="this关键字的指向"><a href="#this关键字的指向" class="headerlink" title="this关键字的指向"></a>this关键字的指向</h1><ul>
<li>this：指向当前操作对象；</li>
<li>callee：指向正在执行函数的指针；</li>
</ul>
<h1 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h1><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>创建一个函数并把它赋值给变量，这种情况下创建的函数叫做<strong>匿名函数</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sayHi;</div><div class="line">sayHi = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"sayHi "</span> + num);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sayHi(<span class="number">1</span>);</div><div class="line"><span class="comment">//sayHi 1</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个匿名函数并立即执行</span></div><div class="line"><span class="keyword">var</span> ret = (<span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> x * y;</div><div class="line">&#125;)(<span class="number">3</span>,<span class="number">8</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ret);</div><div class="line"><span class="comment">//24</span></div></pre></td></tr></table></figure>
<h2 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h2><p>闭包是指有权访问另一个 函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazy_sum</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> x * y;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = lazy_sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]); <span class="comment">//返回的是求和函数</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(f()); <span class="comment">//调用函数f计算求和</span></div></pre></td></tr></table></figure>
<p>借助闭包，可以封装一个私有变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//闭包实现计数器</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_counter</span>(<span class="params">initial</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> x = initial || <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">inc</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            x += <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> counter1 = create_counter();</div><div class="line"><span class="built_in">console</span>.log(counter1.inc()); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(counter1.inc()); <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(counter1.inc()); <span class="comment">//3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> counter2 = create_counter(<span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(counter2.inc()); <span class="comment">//11</span></div><div class="line"><span class="built_in">console</span>.log(counter2.inc()); <span class="comment">//12</span></div><div class="line"><span class="built_in">console</span>.log(counter2.inc()); <span class="comment">//13</span></div></pre></td></tr></table></figure>
<p>闭包还可以把多参数的函数变成单参数的函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_pow</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.pow(n,x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建两个新函数</span></div><div class="line"><span class="keyword">var</span> pow1 = make_pow(<span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> pow2 = make_pow(<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(pow1(<span class="number">2</span>)); <span class="comment">// 4</span></div><div class="line"><span class="built_in">console</span>.log(pow2(<span class="number">2</span>)); <span class="comment">// 8</span></div></pre></td></tr></table></figure>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">x</span> =&gt; x * x</div></pre></td></tr></table></figure>
<p>上面的箭头函数相当于</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title"></span>(x) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">x</span> * x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"箭头函数 "</span>+ fn(<span class="number">3</span>));</div></pre></td></tr></table></figure>
<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。一个最简单的高阶函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHigh</span>(<span class="params">x, y, f</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> f(x) + f(y);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(addHigh(<span class="number">-4</span>,<span class="number">-5</span>,<span class="built_in">Math</span>.abs)); <span class="comment">//9</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初识函数&quot;&gt;&lt;a href=&quot;#初识函数&quot; class=&quot;headerlink&quot; title=&quot;初识函数&quot;&gt;&lt;/a&gt;初识函数&lt;/h1&gt;&lt;p&gt;ECMAScript中的函数使用 function 关键字来声明，后跟一组参数以及函数体。&lt;/p&gt;
&lt;figure clas
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript④流程语句</title>
    <link href="http://liuguoquan727.github.io/2017/06/18/JavaScript%E2%91%A3%E6%B5%81%E7%A8%8B%E8%AF%AD%E5%8F%A5/"/>
    <id>http://liuguoquan727.github.io/2017/06/18/JavaScript④流程语句/</id>
    <published>2017-06-18T13:13:06.000Z</published>
    <updated>2017-06-18T13:13:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="comment">(条件表达式)</span> &#123;</div><div class="line">  <span class="comment">//循环执行代码段</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h2><p>do-while 语句是一种后测试循环语句，即只有在循环体中的代码执行之后，才会测试出口条件。 换句话说，在对条件表达式求值之前，循环体内的代码至少会被执行一次。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">   <span class="comment">//代码执行主体</span></div><div class="line"> &#125; <span class="keyword">while</span> <span class="comment">(条件表达式)</span>;</div></pre></td></tr></table></figure>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</div><div class="line">       array[i]</div><div class="line">       //代码执行的主体</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h2 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h2><p>for-in 语句是一种精准的迭代语句，可以用来枚举对象的属性。</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (var <span class="keyword">variable</span> <span class="keyword">in</span> <span class="keyword">object</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">object</span>.hasOwnProperty(<span class="keyword">variable</span>)) &#123;</div><div class="line">    <span class="comment">//代码执行主体</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>ECMAScript 对象的属性没有顺序。因此，通过 for-in 循环输出的属性名的顺序是不可预测的。</li>
<li>如果表示要迭代的对象的变量值为 null 或 undefined ， for-in 语句会抛出错误。 ECMAScript 5 更正了这一行为；对这种情况不再抛出错误，而只是不执行循环体。</li>
</ul>
<h1 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h1><ul>
<li>return：终止函数体的运行，并返回一个值</li>
<li>break：终止整个循环，不再进行判断</li>
<li>continue：结束本次循环，接着去判断是否执行下次循环</li>
</ul>
<h1 id="label语句"><a href="#label语句" class="headerlink" title="label语句"></a>label语句</h1><p>使用 label 语句可以在代码中添加标签，以便将来使用。以下是 label 语句的语法：</p>
<blockquote>
<p>label: statement</p>
</blockquote>
<p>下面是一个示例：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start: <span class="keyword">for</span> (var <span class="built_in">i</span>=<span class="number">0</span>; <span class="built_in">i</span> &lt; count; <span class="built_in">i</span>++) &#123; alert(i); &#125;</div></pre></td></tr></table></figure>
<p>这个例子中定义的 start 标签可以在将来由 break 或 continue 语句引用。加标签的语句一般都 要与 for 语句等循环语句配合使用。</p>
<h1 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h1><blockquote>
<p>选择语句，有三个，if和switch、?:三目运算符</p>
</blockquote>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</div><div class="line">  代码段<span class="number">1</span></div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</div><div class="line">  代码段<span class="number">2</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  代码段<span class="number">3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(条件表达式)&#123;</div><div class="line">    <span class="keyword">case</span> 标签<span class="number">1</span>:</div><div class="line">    代码段<span class="number">1</span></div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    ……</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    代码段n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>switch 语句中使用任何数据类型（在很多其他语言中只能使用数值），无论是字符串，还是对象都没有 问题。其次，每个 case 的值不一定是常量，可以是变量，甚至是表达式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (<span class="string">"hello world"</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">"hello"</span> + <span class="string">" world"</span>:</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Greeting was found."</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">"goodbye"</span>:</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Closing was found."</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Unexpected message was found."</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="number">25</span>;</div><div class="line"><span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> num &lt; <span class="number">0</span>:</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Less than 0."</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> num &gt;= <span class="number">0</span> &amp;&amp; num &lt;= <span class="number">10</span>:</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Between 0 and 10."</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> num &gt; <span class="number">10</span> &amp;&amp; num &lt;= <span class="number">20</span>:</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Between 10 and 20."</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"More than 20."</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>switch 语句在比较值时使用的是全等操作符，因此不会发生类型转换（例如， 字符串”10”不等于数值 10）。</p>
</blockquote>
<h1 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h1><p>with 语句的作用是将代码的作用域设置到一个特定的对象中。with 语句的语法如下：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">with(<span class="name">expression</span>) statement<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>严格模式下不允许使用 with 语句，否则将视为语法错误。由于大量使用 with 语句会导致性能下降，同时也会给调试代码造成困难，因此 在开发大型应用程序时，不建议使用 with 语句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;循环语句&quot;&gt;&lt;a href=&quot;#循环语句&quot; class=&quot;headerlink&quot; title=&quot;循环语句&quot;&gt;&lt;/a&gt;循环语句&lt;/h1&gt;&lt;h2 id=&quot;while&quot;&gt;&lt;a href=&quot;#while&quot; class=&quot;headerlink&quot; title=&quot;while&quot;&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript③运算符</title>
    <link href="http://liuguoquan727.github.io/2017/06/18/JavaScript%E2%91%A2%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://liuguoquan727.github.io/2017/06/18/JavaScript③运算符/</id>
    <published>2017-06-18T13:12:06.000Z</published>
    <updated>2017-06-18T13:13:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自增与自减"><a href="#自增与自减" class="headerlink" title="自增与自减"></a>自增与自减</h1><ul>
<li>++ 对唯一的运算数进行递增操作(每次加1)</li>
<li>– 对唯一的运算数进行递减操作(每次减1)</li>
</ul>
<h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><h2 id="逻辑位运算"><a href="#逻辑位运算" class="headerlink" title="逻辑位运算"></a>逻辑位运算</h2><ul>
<li>按位非~ 结果就是返回数值的反码</li>
<li>按位与&amp;  同时为1</li>
<li>按位或|  有一个为1</li>
<li>按位异或^ 既不同时为0，也不同时为1</li>
</ul>
<h2 id="位移操作"><a href="#位移操作" class="headerlink" title="位移操作"></a>位移操作</h2><ul>
<li>左移&lt;&lt;<ul>
<li>将数值的所有位左移指定的位数</li>
<li>所有空位用0补充</li>
<li>左移1位对其X2，左移2位对其X4；依次类推</li>
</ul>
</li>
<li>有符号右移&gt;&gt;<ul>
<li>将数值的所有位右移指定的位数</li>
<li>一处的位被舍弃</li>
<li>保留符号位</li>
<li>右移一位对齐除2，右移两位对齐除4，依次类推</li>
</ul>
</li>
<li>无符号右移&gt;&gt;&gt;<ul>
<li>正数，与有符号右移结果相同</li>
<li>负数，会出现无限大的数值；</li>
</ul>
</li>
</ul>
<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><h2 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非!"></a>逻辑非!</h2><p>逻辑非操作符首先会将它的操作数转换为一个布尔值，然后再 对其求反。也就是说，逻辑非操作符遵循下列规则：</p>
<ul>
<li>操作数是对象，返回false</li>
<li>空字符串，返回true</li>
<li>非空字符串，返回false</li>
<li>0，返回true</li>
<li>NaN，返回true</li>
<li>Undefined，返回true</li>
<li>非0数值(Infinity)，返回false</li>
<li>null 返回true</li>
</ul>
<h2 id="逻辑与-amp-amp"><a href="#逻辑与-amp-amp" class="headerlink" title="逻辑与&amp;&amp;"></a>逻辑与&amp;&amp;</h2><ul>
<li>只有第一个值是true的时候，才会返回第二个值；第一个值为false，则返回第一个值；意是根据原理来返回的；&amp;&amp;是必须两个都为true才为true的；看取决于哪个值的</li>
<li>第一个操作数的对象，返回第二个操作数（第一个为true了，关键取决于第二个值，所以返回第二个）</li>
<li>第二个操作数是对象，如果想返回第二个对象，第一个必须为true；</li>
<li>如果两个操作数都是对象，第一个是true，则返回第二个操作数；</li>
<li>第一个操作数是null，返回null（第一个null已经是false了，后面第二个值无论是true-还是false已经不重要了，所以返回的是第一个值）</li>
<li>第一个操作数是NaN，返回NaN（原理同上）</li>
<li>第一个操作数是undefined，返回undefined（原理同上）</li>
</ul>
<h2 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或 ||"></a>逻辑或 ||</h2><ul>
<li>两个操作数都是false的时候才为false；第一个操作数是true，则返回第一个数；无需对第二个值判断了，已经可以确定为true；如果第一个值为false的时候，返回第二个数；因为第一个已经是false了，值取决于第二个值，所以返回第二个值；</li>
<li>第一个操作数是对象，返回第一个操作数</li>
<li>第一个操作数值为false，返回第二个操作数</li>
<li>两个操作数都是对象，返回第一个操作数</li>
<li>两个操作数都是null，返回null；</li>
<li>两个操作数都是NaN，返回NaN；</li>
<li>两个操作数都是undefined，返回undefined</li>
</ul>
<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>算术运算符包括：+-*/%；</p>
<p>复合赋值运算符：+=、-=、*=、\/=、%=</p>
<ul>
<li>+<ul>
<li>功能：<ul>
<li>1、对数字进行代数求和</li>
<li>2、对字符串进行连接操作</li>
<li>3、将一个数值转换成字符串</li>
</ul>
</li>
<li>字符串拼接<ul>
<li>字符串+字符串—两者直接拼接</li>
<li>字符串+数值—数值转为字符串再拼接</li>
</ul>
</li>
</ul>
</li>
<li>-<ul>
<li>功能：<ul>
<li>对操作数进行”取反”操作</li>
<li>对数字进行减法操作</li>
<li>将字符串转换成数值–数值型字符串-0；</li>
</ul>
</li>
</ul>
</li>
<li>*和/<ul>
<li>功能：对两个运算数进行乘法（除法）运算；</li>
<li>符号问题：同号得正，异号得负；</li>
</ul>
</li>
<li>%<ul>
<li>功能：返回两个除数的余数</li>
<li>符号问题：和第一个运算数的符号相同；</li>
</ul>
</li>
</ul>
<h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><ul>
<li>&lt; 如果A小于B，则返回true，否则返回值为false；</li>
<li>&lt;= 如果A小于等于B，则返回值为true，否则返回false</li>
<li>>= 如果A大于等于B,返回true，否则返回值为false</li>
<li>> 如果A大于B，则返回true，否则返回值为false</li>
</ul>
<p>操作规则</p>
<ul>
<li>数值与数值的比较，比较它们的代数值；</li>
<li>仅一个运算数是数值，将另一个运算数转换成数值，并比较他们的代数值；</li>
<li>字符串间的比较，逐字符比较他们的Unicode数值；</li>
<li>字符串与非数值的比较，将运算数转换成字符串并进行比较；</li>
<li>运算数既非数字也非字符串，返回值为false；</li>
<li>与NaN比较，返回值是false；</li>
</ul>
<h1 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h1><h2 id="相等和不相等"><a href="#相等和不相等" class="headerlink" title="相等和不相等"></a>相等和不相等</h2><ul>
<li>==：如果两个操作数相等，则返回 true</li>
<li>!=：如果两个操作数不相等，则返回 true。</li>
</ul>
<p>这两个操作符都会 先转换操作数（通常称为强制转型），然后再比较它们的相等性。</p>
<h2 id="全等和不全等"><a href="#全等和不全等" class="headerlink" title="全等和不全等"></a>全等和不全等</h2><ul>
<li>===</li>
<li>!==</li>
</ul>
<p>这两个操作符不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。所以推荐使用全等和不全等操作符。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">NaN</span> === NaN; // <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>唯一能判断NaN的方法是通过isNaN()函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h1><p>?: 条件运算符，简介的if else；也叫三元运算符/三目运算符；基本格式为：条件表达式?表达式一:表达式二；其中问号之前的表示判断的条件，如果这个条件为真，则执行问号后面的语句，如果判断条件不成立，则执行冒号后面的语句。</p>
<h1 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h1><ul>
<li>*=</li>
<li>/=</li>
<li>%=</li>
<li>+=</li>
<li>-=</li>
<li>&lt;&lt;=</li>
<li>无符号右移/赋值 &gt;&gt;=</li>
<li>无符号右移/赋值 &gt;&gt;&gt;=</li>
</ul>
<h1 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h1><p>逗号操作符可以在一行语句中执行多个不同的操作</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">i</span> = <span class="number">2</span>,j = <span class="number">1</span> + <span class="selector-tag">i</span>,k = <span class="number">5</span></div></pre></td></tr></table></figure>
<p>逗号操作符还可以用于赋值。在用于赋值时，逗号 操作符总会返回表达式中的最后一项，</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var num = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>); <span class="comment">//num = 5</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自增与自减&quot;&gt;&lt;a href=&quot;#自增与自减&quot; class=&quot;headerlink&quot; title=&quot;自增与自减&quot;&gt;&lt;/a&gt;自增与自减&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;++ 对唯一的运算数进行递增操作(每次加1)&lt;/li&gt;
&lt;li&gt;– 对唯一的运算数进行递减操作(每次减1
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript②数据类型</title>
    <link href="http://liuguoquan727.github.io/2017/06/18/JavaScript%E2%91%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://liuguoquan727.github.io/2017/06/18/JavaScript②数据类型/</id>
    <published>2017-06-18T13:11:06.000Z</published>
    <updated>2017-06-18T13:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript中有5种简单的数据类型，也成为基本数据类型；Undefined、Null/Boolean/Number/String。还有一种复杂的数据类型，Object(还有一种特殊的Function)object本质是由一组无序的键值对组成的；</p>
<h1 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h1><ul>
<li>console.log(typeof qqqq);//undefined，这个变量没有定义；</li>
<li>console.log(typeof (222));//number，是一个数字； typeof是操作符而不是方法，所以后面可以加()也可以不加；</li>
<li>console.log(typeof “222”);//string，是一个字符串</li>
<li>console.log(typeof false);//boolean，是一个布尔值</li>
<li>console.log(typeof {});//object 是一个对象</li>
<li>console.log(typeof null);//objecy 是一个对象，在javascript里，null是一个空指针；</li>
<li>console.log(typeof function(){});//function，是一个方法，也是属于object类型的；js里万物皆对象</li>
</ul>
<p>从技术的角度上将，函数在ECMAScript中是对象，不是一种数据类型，属于对象，在就是里万物皆对象的，但是，函数也确实有一些特殊的属性，因此通过typeof操作符来区分也是有必要的；<br>typeof检测任何数据，返回的都是一个字符串，两次和两次以上的连续typeof结果肯定都是string；</p>
<h1 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h1><ul>
<li>null<ul>
<li>逻辑上null表示一个空对象的指针</li>
<li>使用typeof检测的时候会返回object；（null是object原型的终点）</li>
</ul>
</li>
<li>undefined<ul>
<li>使用var声明变量但没有初始化</li>
<li>区分空对象指针与尚未定义的变量</li>
<li>对未初始化的变量以及未声明的变量使用</li>
<li>typeof运算符均会返回undefined；</li>
</ul>
</li>
<li>undefined和null的关系；是undefined派生自null；因为undefined派生子null；所以Null和undefined做比较的时候是true；但是null和undefined和别的人和类型比较都不想等；<ul>
<li>undefined派生子null，因此在使用”==”进行比较的时候会返回true；</li>
<li>没有必要将变量显示声明undefined；</li>
<li>声明非空对象对应将其赋值为null；比如做定时器的时候用；</li>
</ul>
</li>
</ul>
<blockquote>
<p>Undefined只有一个值，就是特殊的undefine；（大写的Undefined是代表Undefined类的意思，就好比人类和人的关系；）</p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var test1;</div><div class="line">var test2=<span class="literal">undefined</span>;</div><div class="line"><span class="built_in">console</span>.log(test1==<span class="literal">undefined</span>);<span class="regexp">//</span><span class="literal">true</span>，变量声明了，但是没有定义；</div><div class="line"><span class="built_in">console</span>.log(test1==<span class="string">"undefined"</span>);<span class="regexp">//</span><span class="literal">false</span>,<span class="string">"undefined"</span>是一个字符串，含有<span class="literal">undefined</span>的字符；而不是<span class="literal">undefined</span>类型；</div><div class="line"><span class="built_in">console</span>.log(test2==<span class="literal">undefined</span>);<span class="regexp">//</span><span class="literal">true</span>，变量声明了，但是没有被定义，<span class="literal">undefined</span>是变量的默认值；我们声不需要显示的把某个变量设置为<span class="literal">undefined</span>，因为没有赋值的变量，默认就是<span class="literal">undefined</span>;可以试验下，这里的两个等于号和三个等于号的区别，<span class="number">2</span>个是比较（会隐式转换类型，===是不转化类型的，是绝对相等）</div></pre></td></tr></table></figure>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(test1);<span class="regexp">//</span><span class="literal">undefined</span></div><div class="line"><span class="built_in">console</span>.log(test2);<span class="regexp">//</span><span class="literal">undefined</span></div><div class="line"><span class="built_in">console</span>.log(test3);<span class="regexp">//</span>Error，报错了; Uncaught ReferenceError: test3 <span class="keyword">is</span> <span class="keyword">not</span> defined；</div></pre></td></tr></table></figure>
<p>对于尚未声明的变量，只能执行一项操作，就是typeof检测其数据类型；</p>
<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="字符串的特性"><a href="#字符串的特性" class="headerlink" title="字符串的特性"></a>字符串的特性</h2><ul>
<li>由0个或多个16位unicode字符组成；</li>
<li>单引号和双引号都可以；但是单引号和双引号不能交叉使用；（放在引号内的任何东西都是属于字符串，即使里面没有东西或者空格，都属于合法的字符串 ）</li>
<li>使用.length属性可以访问字符串的长度</li>
<li>转义序列表示一个字符</li>
<li>无法精确返回双字节字符长度</li>
<li>字符串一旦被创建，其值是不能改变的，若要改变必须销毁原有字符串，然后用另一个包含新值的字符串填充改变量；<br>转义序列（仅作了解）；</li>
<li>\n 换行，常用的,这个需要记住；</li>
<li>\斜杠\  常用</li>
<li>\’单引号 常用</li>
<li><p>\”双引号 常用</p>
</li>
<li><p>\t 制表符</p>
</li>
<li>\b 空格</li>
<li>\r 回车符</li>
<li>\f 分页符</li>
<li>\xnn 十六进制，n代表0-F</li>
<li>\unnnn 以十六进制代码表示一个unicode字符</li>
</ul>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul>
<li>toString()：转换为字符串</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">is</span> = <span class="keyword">true</span>;</div><div class="line"><span class="keyword">is</span>.toString(); <span class="comment">//"true"</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">10</span>;</div><div class="line"><span class="built_in">num</span>.toString(); <span class="comment">//"10"</span></div><div class="line"><span class="built_in">num</span>.toString(<span class="number">2</span>); <span class="comment">//"1010" (二进制)</span></div><div class="line"><span class="built_in">num</span>.toString(<span class="number">8</span>); <span class="comment">//"12" (八进制）</span></div><div class="line"><span class="built_in">num</span>.toString(<span class="number">16</span>); <span class="comment">//"A" （十六进制）</span></div></pre></td></tr></table></figure>
<ul>
<li>String()</li>
</ul>
<p>null和undefined没有toString方法，所以转换的时候用String()函数。如果值是null，则返回”null”,如果值是undefined则返回”undefined”。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> value1 = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> value2 = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">var</span> value3;</div><div class="line"></div><div class="line"><span class="built_in">String</span>(value1); <span class="comment">//"10"</span></div><div class="line"><span class="built_in">String</span>(value2); <span class="comment">//"null"</span></div><div class="line"><span class="built_in">String</span>(value3); <span class="comment">//"undefined"</span></div></pre></td></tr></table></figure>
<h1 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h1><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var  intNum = <span class="number">55</span>; <span class="comment">//整数</span></div><div class="line"></div><div class="line">var octalNum = <span class="number">0</span>o70; <span class="comment">//八进制 以 0o开头</span></div><div class="line"></div><div class="line">var hexNum = <span class="number">0xAA</span>; <span class="comment">//十六进制</span></div><div class="line"></div><div class="line">var floatNum = <span class="number">1.1</span>; <span class="comment">//浮点数</span></div><div class="line"></div><div class="line">var floatNum1 = <span class="number">1.</span> <span class="comment">//解析为整数1</span></div><div class="line">var floatNum2 = <span class="number">10.0</span> <span class="comment">//解析为整数10</span></div><div class="line"></div><div class="line">floatNum = <span class="number">3.125e7</span>; <span class="comment">//e表示法</span></div></pre></td></tr></table></figure>
<h2 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h2><ul>
<li>最小值 Number.MIN_VALUE</li>
<li>最大值 Number.MAX_VALUE：</li>
<li>超出范围<ul>
<li>正无穷<ul>
<li>Infinity</li>
<li>Number.POSITIVE_INFINTY</li>
</ul>
</li>
<li>负无穷<ul>
<li>-Infinity</li>
<li>Number.NEGATIVE_INFINITY</li>
</ul>
</li>
<li>缺陷<ul>
<li>无法参与下一次计算</li>
</ul>
</li>
<li>检测方法，用isFinite<ul>
<li>超出范围 false</li>
<li>合法范围true<h2 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h2></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>含义</strong></p>
<ul>
<li>Not a Number</li>
<li>非数值</li>
</ul>
<p><strong>特点</strong></p>
<ul>
<li>任何涉及NaN的操作都将返回NaN</li>
<li>NaN与任何值值都不相等包括其自身</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">NaN</span> / <span class="number">5</span>  <span class="comment">// NaN</span></div><div class="line"><span class="literal">NaN</span> == Nan <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p><strong>检测 isNaN</strong></p>
<ul>
<li>可以转换为数值，为false</li>
<li>不能转换为数值，为true</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">isNaN</span><span class="params">(NaN)</span></span> <span class="comment">// true</span></div><div class="line"><span class="function"><span class="title">isNaN</span><span class="params">(<span class="number">10</span>)</span></span> <span class="comment">//false</span></div><div class="line"><span class="function"><span class="title">isNaN</span><span class="params">(<span class="string">"10"</span>)</span></span> <span class="comment">//false</span></div><div class="line"><span class="function"><span class="title">isNaN</span><span class="params">(<span class="string">"blue"</span>)</span></span> <span class="comment">//不能转换为数值 true</span></div><div class="line"><span class="function"><span class="title">isNaN</span><span class="params">(<span class="string">"true"</span>)</span></span> <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h2><p>有三个函数可以把非数值转换为数值：Number()、parseInt()、parseFloat()。Number()可以用于任何数据类型，后面两个函数只能用于把字符串转换成数值。</p>
<h3 id="Number-1"><a href="#Number-1" class="headerlink" title="Number()"></a>Number()</h3><p>Number()的转换规则如下：</p>
<ul>
<li>Boolean转换为数值的时候true转为1,flase转为0；</li>
<li>null转换为数值的时候 转换为0</li>
<li>undefined转换为数值的时候 转为NaN</li>
<li>string转换为数值的时候<ul>
<li>如果只包含数字，转为十进制数，前导0被忽略（“011”转为11）</li>
<li>如果包含有效浮点格式，转为浮点数值，忽略前导0</li>
<li>包含有效十六进制格式；相同大小的十六进制整数</li>
<li>空字符串转为0；备注：””是空字符串 “ “这个就不是空字符串了</li>
<li>其他格式字符串NaN</li>
</ul>
</li>
<li>Object 调用对象的valueOf()方法，然后依照前面的规则转换返回的值，如果转换的结果是NAN，则调用对应的toString()方法，然后再次依照前面的规则转换返回的字符串值；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"hello word"</span>));<span class="comment">//NaN</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">""</span>));<span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"000011"</span>));<span class="comment">//11</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"true"</span>));<span class="comment">//NaN</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>));<span class="comment">//1</span></div></pre></td></tr></table></figure>
<h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h3><p>  parseInt参数</p>
<pre><code>- 参数1、要解析的字符串
- 参数2、转换时所使用的基数；为了消除在使用parentInt函数时可能导致的格式，第二个参数可以指定要解析的基数，16就是十六进制；一般不传第二个参数
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"AF"</span>));<span class="comment">//NaN,默认十进制解析的</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"AF"</span>,<span class="number">16</span>));<span class="comment">//175</span></div></pre></td></tr></table></figure>
<h3 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h3><ul>
<li>从第一个字符开始解析</li>
<li>遇到无效浮点格式后结束</li>
<li>只有第一个小数点有效</li>
<li>忽略前导0</li>
<li>十六进制始终为0</li>
<li>没有小数点或小数点后全0；转换为整数</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"1234blue"</span>); <span class="comment">//1234</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"0xA"</span>); <span class="comment">//0</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"22.5"</span>); <span class="comment">//22.5</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"0908.5"</span>); <span class="comment">//908.5</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"2.125e4"</span>); <span class="comment">//21250</span></div></pre></td></tr></table></figure>
<h1 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h1><ul>
<li>true为真，flase为假（false是布尔值，而Flase只是标识符）；通常用在if/else的判断语句中（通常还会配合逻辑与&amp;&amp;，逻辑或||来完成）</li>
<li>true不一定=1；flase不一定=0；</li>
<li>使用boolean()进行转换；任何数据类型的值调用Boolean()函数，都会返回一个Boolean值；也可以用(!/!!来转换)</li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>转换为true的值</th>
<th>转换为false的值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Boolean</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>String</td>
<td>任何非空字符</td>
<td>“”空字符串</td>
</tr>
<tr>
<td>Number</td>
<td>任何非零数值</td>
<td>0和NaN</td>
</tr>
<tr>
<td>Object</td>
<td>任何对象</td>
<td>null</td>
</tr>
<tr>
<td>Undefined</td>
<td>无</td>
<td>undefined</td>
</tr>
</tbody>
</table>
<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p><strong>定义</strong></p>
<p>一组数据或功能的集合</p>
<p><strong>声明</strong></p>
<ul>
<li>Var o=new Object()//Object后面的()可以省略，但不推荐</li>
<li>Var o={}</li>
</ul>
<p><strong>属性和方法</strong></p>
<ul>
<li>constructor：保存用于创建当前对象的函数，构造函数就是Object()</li>
<li>HasOwnProperty(propertyName) 检测给定输定在当前对象实例中是否存在（而不是实例的原型中）</li>
<li>isPrototypeOf(object) ：检测传入的对象是否是另一个对象的原型（而不是在实例中）；</li>
<li>propertyIsEnumerable(propertyName)；检测给定属性是否能用for-in语句每句来枚举；</li>
<li>toLocaleString() 返回对象的字符串表示，该字符串与执行环境的地区对应；</li>
<li>toString() 返回对象的字符串表示</li>
<li>valueOf() 返回对象的字符串，数值或布尔值表示；通常与toString()的值相同；</li>
<li>在ECMAScript中，Object是所有对象的基础，因此所有对象都具有这些基本的属性和方法；方法的具体原理，后面数据类型和原型链中具体说；</li>
<li>BOM/DOM中的对象，都是属于宿主对象，因为他们是由宿主实现提供和定义的，但是ECMAScript不负责定义宿主对象，因此宿主对象可能会也可能不会继承Object；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMAScript中有5种简单的数据类型，也成为基本数据类型；Undefined、Null/Boolean/Number/String。还有一种复杂的数据类型，Object(还有一种特殊的Function)object本质是由一组无序的键值对组成的；&lt;/p&gt;
&lt;h1 id
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript①基础知识</title>
    <link href="http://liuguoquan727.github.io/2017/06/18/JavaScript%E2%91%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://liuguoquan727.github.io/2017/06/18/JavaScript①基础知识/</id>
    <published>2017-06-18T13:10:06.000Z</published>
    <updated>2017-06-18T13:12:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript会带你进入新境界。你已经了解了HTML标记（结构），而且知道了CSS样式（表示），剩下的就是JavaScript（行为）。如果你只知道结构和表示，当然创建一个漂亮的页面时没有问题的，不过它们只是页面而已。用JavaScript增加行为时，你就能创建一种交互式体验。</p>
<h2 id="JavaScript能做什么"><a href="#JavaScript能做什么" class="headerlink" title="JavaScript能做什么"></a>JavaScript能做什么</h2><p>一旦有一个包含<code>&lt; script &gt;</code>元素的页面（或者包含引用，指向一个单独的JavaScript文件），你就已经开始编写代码了。JavaScript是一种完备的编程语言，用其他语言能做的事情用JavaScript同样能够做到，甚至还能做得更多，因为我们就在Web页面内部编程。</p>
<p>你可以要求JavaScript：</p>
<h3 id="1-建立一个语句"><a href="#1-建立一个语句" class="headerlink" title="1.建立一个语句"></a>1.建立一个语句</h3><p>创建一个变量并赋值、让变量相加、完成计算，还可以使用一个JavaScript库的内置功能。</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var temp</span>  = 98.6;</div><div class="line"><span class="attribute">var beanCounter</span> = 4;</div><div class="line"><span class="attribute">var reallyCool</span> = true;</div><div class="line"><span class="attribute">var motto</span> = <span class="string">"I rule"</span>;</div><div class="line"></div><div class="line"><span class="attribute">temp</span> = (temp - 32) * 5 / 9;</div><div class="line"><span class="attribute">motto</span> = motto + <span class="string">" and so do you!"</span>;</div><div class="line"><span class="attribute">var pos</span> = Math.random();</div></pre></td></tr></table></figure>
<h3 id="2-重复做事情"><a href="#2-重复做事情" class="headerlink" title="2.重复做事情"></a>2.重复做事情</h3><p>循环完成语句，次数可以根据你的需要来定</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">while (<span class="keyword">beanCounter </span>&gt; <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">    processBeans()<span class="comment">;</span></div><div class="line">    <span class="keyword">beanCounter </span>= <span class="keyword">beanCounter </span>- <span class="number">1</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-做出判断"><a href="#3-做出判断" class="headerlink" title="3.做出判断"></a>3.做出判断</h3><p>编写根据应用的状态并按条件执行的代码</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (isReallyCool) &#123;</div><div class="line"></div><div class="line">    <span class="attr">invite</span> = <span class="string">"You are invited!"</span></div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">    <span class="attr">invite</span> = <span class="string">"Sorry, we are at capacity."</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JavaScript变量"><a href="#JavaScript变量" class="headerlink" title="JavaScript变量"></a>JavaScript变量</h2><p>利用JavaScript，变量可以用来保存各种不同的东西。下面来声明一些变量:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> winners = <span class="number">2</span>; <span class="comment">//整数值</span></div><div class="line"><span class="keyword">var</span> money = <span class="number">212.2</span>; <span class="comment">//浮点数</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"liuguoquan"</span>; <span class="comment">//字符串</span></div><div class="line"><span class="keyword">var</span> isExist = <span class="literal">false</span>;  <span class="comment">//布尔值</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong></p>
</blockquote>
<ul>
<li>JavaScript不需要为变量指定一个类型，它只是创建一个通用容器，其中可以存放多种东西，所有任何变量都可以存放数字、字符串或者布尔值。因为JavaScript采用的动态类型，也就是说，JavaScript解析器会在代码运行时确定要使用说明类型。</li>
<li><code>var scoops = null</code>；表示“没有值”；</li>
<li>var winner；如果不赋值给变量，那么执行这个语句之后，变量winner会赋值为undefined。</li>
</ul>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>有两种方式可以产生全局变量；</p>
<ul>
<li>在函数体外定义的变量；</li>
<li>在函数体内部定义的无var的变量；</li>
</ul>
<p>全局变量的用法：在任何位置都可以调用</p>
<ul>
<li>直接调用变量名；（不含有同名局部变量和参数时）；</li>
<li>通过window.varName 来调用；</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">i</span> = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">()</span> &#123;</span></div><div class="line">    console.<span class="built_in">log</span>(<span class="built_in">i</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">print();</div></pre></td></tr></table></figure>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>局部变量有两种类型；</p>
<ul>
<li>在函数内部使用var声明的变量；</li>
<li>函数的参数变量</li>
</ul>
<p>局部变量的调用方法：</p>
<ul>
<li>当前函数体内部；</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLocal</span><span class="params">()</span> &#123;</span></div><div class="line">    var <span class="built_in">i</span> = <span class="number">11</span>;</div><div class="line">    console.<span class="built_in">log</span>(<span class="built_in">i</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">printLocal();</div></pre></td></tr></table></figure>
<h2 id="JavaScript变量命名"><a href="#JavaScript变量命名" class="headerlink" title="JavaScript变量命名"></a>JavaScript变量命名</h2><ul>
<li>规则1：变量要以一个字母、下划线或者美元符开头。</li>
<li>规则2：然后变量后面的可以使用任意多个字母、数字、下划线或者美元符</li>
<li>规则3：一定要避开JavaScript的所有保留字。</li>
</ul>
<p>JavaScript的保留字如下图所示:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-c9a14b3c3b49c3bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="JavaScript表达式"><a href="#JavaScript表达式" class="headerlink" title="JavaScript表达式"></a>JavaScript表达式</h2><ul>
<li>数值表达式：<code>Math.random() * 10 + 32 - 11.0</code></li>
<li>布尔表达式：<code>level == 4</code></li>
<li>串表达式：<code>&quot;I&quot; + &quot; am &quot; + &quot; hero!&quot;</code></li>
<li>其他表达式：<code>function() {...}，document.getElementById(&#39;cows&#39;)，new Array(10)</code></li>
</ul>
<h2 id="JavaScript自动类型转换"><a href="#JavaScript自动类型转换" class="headerlink" title="JavaScript自动类型转换"></a>JavaScript自动类型转换</h2><ul>
<li><code>message = 2 + &quot; if by sea</code>，值为2 if by sea，JavaScript会将2转换为串“2”;</li>
<li><code>value = 2 * 3.1</code>, 值为6.2，JavaScript会把整数2转换为一个浮点数。</li>
</ul>
<p>JavaScript计算下面的语句会得到什么？</p>
<ul>
<li><code>numORString1 = &quot;3&quot; + &quot;4&quot;</code>; 值为：”34”</li>
<li><code>numORString2 = &quot;3&quot; * &quot;4&quot;</code>; 值为：12</li>
</ul>
<p>##JavaScript循环</p>
<ul>
<li><strong>while循环</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> scoop = <span class="number">5</span>;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>(scoop &gt; <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">      alert(<span class="string">"More icecream!"</span>);</div><div class="line">      scoop = scoop - <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  alert(<span class="string">"life without ice cream is not the same!"</span>);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>for循环</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> scoop;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(scoop = <span class="number">5</span>; scoop &gt; <span class="number">0</span>; scoop--) &#123;</div><div class="line"></div><div class="line">      alert(<span class="string">"More icecream!"</span>);</div><div class="line">      </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  alert(<span class="string">"life without ice cream is not the same!"</span>);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="HTML页面增加JavaScript"><a href="#HTML页面增加JavaScript" class="headerlink" title="HTML页面增加JavaScript"></a>HTML页面增加JavaScript</h2><p>要使用JavaScript，必须把它增加到一个Web页面中。不过在哪里加呢？下面介绍向页面增加JavaScript代码的三种方式</p>
<ul>
<li><strong>联机脚本放在<head>元素中</head></strong></li>
</ul>
<p>向页面增加代码时，最常用的方式就是在页面的head部分放置一个script元素。在head元素中增加JavaScript部分就会最先执行这个代码，然后才解析页面的其余部分。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        ...语句</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>通过引用一个单独的JavaScript文件夹来增加脚本</strong></li>
</ul>
<p>还可以链接一个包含了JavaScript代码的单独的文件。将这个文件的URL放在开始script表计的src属性中，另外一定要用&lt; /script&gt;结束这个脚本元素。如果链接到同一目录的某个文件，可以不提供该文件夹的完整路径。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mycode.js"</span> &gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>将代码增加到文档体中，可以作为内联代码，也可以作为一个单独文件的链接</strong></li>
</ul>
<p>也可以把代码直接放在HTML5的body中。同样的，将JavaScript代码包围在script元素中（或者在src属性中引用一个单独的文件）。浏览器解析体时就会执行页面体重的JavaScript（而且通常会从上向下执行）。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></div><div class="line">        ...语句</div><div class="line">    <span class="tag">&lt;/<span class="name">sript</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="JavaScript与HTML5页面交互"><a href="#JavaScript与HTML5页面交互" class="headerlink" title="JavaScript与HTML5页面交互"></a>JavaScript与HTML5页面交互</h2><ul>
<li>1.在浏览器总加载一个页面时，浏览器会解析HTML，并创建文档的一个内部模型，其中包含HTML标记中的所有元素。</li>
<li>2.JavaScript可以与DOM交互来访问元素以及元素中的内容。JavaScript还可以使用DOM来创建或删除元素。</li>
<li>3.JavaScript修改了DOM时，浏览器会动态更新页面，所有你会看到页面上的新内容。</li>
</ul>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>ECMAScript5 引入了严格模式的概念。严格模式是为 JavaScript 定义了一种不同的解析与执行模型。在严格模式下 ECMAScript3 的一些不确定的行为将得到处理而且对某些不安全的操作也会抛出错误。要在脚本中启用严格模式，可以在顶部添加如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>javascript的注释。单行注释是”//注释文字”，多行注释是<code>/*注释文字*/</code></p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//单行注释</span></div><div class="line"></div><div class="line">/*</div><div class="line"><span class="bullet">* </span>多行注释1</div><div class="line"><span class="bullet">* </span>多行注释2</div><div class="line"><span class="bullet">* </span>/</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript会带你进入新境界。你已经了解了HTML标记（结构），而且知道了CSS样式（表示），剩下的就是JavaScript（行为）。如果你只知道结构和表示，当然创建一个漂亮的页面时没有问题的，不过它们只是页面而已。用JavaScript增加行为时，你就能创建一种交
    
    </summary>
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://liuguoquan727.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Go 标准库⑧XML文件处理</title>
    <link href="http://liuguoquan727.github.io/2017/05/19/Go%20%E6%A0%87%E5%87%86%E5%BA%93%E2%91%A7XML%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://liuguoquan727.github.io/2017/05/19/Go 标准库⑧XML文件处理/</id>
    <published>2017-05-19T13:50:53.000Z</published>
    <updated>2017-06-19T13:49:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span> <span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">servers</span> <span class="attr">version</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">serverName</span>&gt;</span>Shanghai_VPN<span class="tag">&lt;/<span class="name">serverName</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">serverIP</span>&gt;</span>192.168.1.2<span class="tag">&lt;/<span class="name">serverIP</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">serverName</span>&gt;</span>Beijing_VPN<span class="tag">&lt;/<span class="name">serverName</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">serverIP</span>&gt;</span>192.168.1.3<span class="tag">&lt;/<span class="name">serverIP</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="XML处理"><a href="#XML处理" class="headerlink" title="XML处理"></a>XML处理</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"encoding/xml"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> ServerHost <span class="keyword">struct</span> &#123;</div><div class="line">	ServerName <span class="keyword">string</span> <span class="string">`xml:"serverName"`</span> <span class="comment">//序列化xml字段名为serverName</span></div><div class="line">	ServerIp <span class="keyword">string</span> <span class="string">`xml:"serverIP"`</span></div><div class="line">	Port <span class="keyword">int</span> <span class="string">`xml:"port"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Servers <span class="keyword">struct</span> &#123;</div><div class="line">	XMLName xml.Name <span class="string">`xml:"servers"`</span> <span class="comment">//</span></div><div class="line">	Version <span class="keyword">string</span> <span class="string">`xml:"version,attr"`</span></div><div class="line">	ServerHosts []ServerHost <span class="string">`xml:"server"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> s Servers</div><div class="line"></div><div class="line">	path := <span class="string">"/Users/liuguoquan/go/src/liu/basic/liu.xml"</span></div><div class="line">	fin, err := os.Open(path)</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> fin.Close() <span class="comment">//延迟关闭资源</span></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	decoder := xml.NewDecoder(fin)</div><div class="line">	<span class="comment">//xml反序列化</span></div><div class="line">	decoder.Decode(&amp;s)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"Version:"</span> +s.Version)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s.ServerHosts);i++ &#123;</div><div class="line">	   fmt.Println(s.ServerHosts[i].ServerName,s.ServerHosts[i].ServerIp,s.ServerHosts[i].Port)</div><div class="line">	&#125;</div><div class="line">	fmt.Println()</div><div class="line"></div><div class="line">	server1 := ServerHost &#123;ServerName:<span class="string">"liu"</span>,ServerIp:<span class="string">"192.168.1.12"</span>,Port:<span class="number">8888</span>&#125;</div><div class="line">	server2 := ServerHost &#123;ServerName:<span class="string">"lee"</span>,ServerIp:<span class="string">"192.168.1.13"</span>,Port:<span class="number">8888</span>&#125;</div><div class="line">	s2 := Servers &#123; Version:<span class="string">"1"</span> &#125;</div><div class="line">	s2.ServerHosts = <span class="built_in">append</span>(s2.ServerHosts,server1)</div><div class="line">	s2.ServerHosts = <span class="built_in">append</span>(s2.ServerHosts,server2)</div><div class="line">	<span class="comment">//xml序列化</span></div><div class="line">	out,err := xml.MarshalIndent(s2,<span class="string">""</span>,<span class="string">"  "</span>)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	fmt.Print(xml.Header)</div><div class="line">	fmt.Println(<span class="keyword">string</span>(out))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">Version:1</div><div class="line">Shanghai_VPN 192.168.1.2 8080</div><div class="line">Beijing_VPN 192.168.1.3 8080</div><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;servers version="1"&gt;</div><div class="line">  &lt;server&gt;</div><div class="line">    &lt;serverName&gt;liu&lt;/serverName&gt;</div><div class="line">    &lt;serverIP&gt;192.168.1.12&lt;/serverIP&gt;</div><div class="line">    &lt;port&gt;8888&lt;/port&gt;</div><div class="line">  &lt;/server&gt;</div><div class="line">  &lt;server&gt;</div><div class="line">    &lt;serverName&gt;lee&lt;/serverName&gt;</div><div class="line">    &lt;serverIP&gt;192.168.1.13&lt;/serverIP&gt;</div><div class="line">    &lt;port&gt;8888&lt;/port&gt;</div><div class="line">  &lt;/server&gt;</div><div class="line">&lt;/servers&gt;</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h1&gt;&lt;h2 id=&quot;XML文件&quot;&gt;&lt;a href=&quot;#XML文件&quot; class=&quot;headerlink&quot; title=&quot;XML文件&quot;&gt;&lt;/a&gt;XML文
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go 标准库⑦JSON文件处理</title>
    <link href="http://liuguoquan727.github.io/2017/05/18/Go%20%E6%A0%87%E5%87%86%E5%BA%93%E2%91%A6JSON%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://liuguoquan727.github.io/2017/05/18/Go 标准库⑦JSON文件处理/</id>
    <published>2017-05-18T13:50:53.000Z</published>
    <updated>2017-06-19T13:49:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>GO语言标准库<code>encoding/json</code>用于处理JSON文本数据。</p>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>将一个对象编码成JSON数据，接受一个interface{}对象，返回[]byte和error：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span></div></pre></td></tr></table></figure>
<p>Marshal函数将会递归遍历整个对象，依次按成员类型对这个对象进行编码，类型转换规则如下：</p>
<ul>
<li>bool类型 转换为JSON的Boolean</li>
<li>整数、浮点数等数值类型 转换为JSON的Number</li>
<li>string 转换为JSON的字符串(带””引号)</li>
<li>struct 转换为JSON的Object，再根据各个成员的类型递归打包</li>
<li>数组或切片 转换为JSON的Array</li>
<li>[]byte 会先进行base64编码然后转换为JSON字符串</li>
<li>map 转换为JSON的Object，key必须是string</li>
<li>interface{} 按照内部的实际类型进行转换</li>
<li>nil 转为JSON的null</li>
<li>channel,func等类型 会返回UnsupportedTypeError</li>
</ul>
<h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p>将JSON数据解析为Go结构体</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="keyword">byte</span>, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></div></pre></td></tr></table></figure>
<p>interface{}类型在Unmarshal时，会自动将JSON转换为对应的数据类型：</p>
<ul>
<li>JSON的boolean 转换为bool</li>
<li>JSON的数值 转换为float64</li>
<li>JSON的字符串 转换为string</li>
<li>JSON的Array 转换为[]interface{}</li>
<li>JSON的Object 转换为map[string]interface{}</li>
<li><p>JSON的null 转换为nil</p>
</li>
<li><p>结构体必须是大写字母开头的成员才会被JSON处理到，小写字母开头的成员不会有影响。</p>
</li>
<li>Unmashal时，会自动匹配对应的变量名进行赋值，大小写不敏感。</li>
<li>Unmarshal时，如果JSON中有多余的字段，会被直接抛弃掉；如果JSON缺少某个字段，则直接忽略不对结构体中变量赋值，不会报错。</li>
</ul>
<h1 id="StructTag"><a href="#StructTag" class="headerlink" title="StructTag"></a>StructTag</h1><p>如果希望手动配置结构体的成员和JSON字段的对应关系，可以在定义结构体的时候给成员打标签</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">type Message struct &#123;  </div><div class="line">    Name string `json:<span class="string">"msg_name"</span>`       <span class="comment">// 对应JSON的msg_name  </span></div><div class="line">    Body string `json:<span class="string">"body,omitempty"</span>` <span class="comment">// 如果为空置则忽略字段  </span></div><div class="line">    Time int64  `json:<span class="string">"-"</span>`              <span class="comment">// 直接忽略字段  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"servers"</span>:[</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"serverName"</span>:<span class="string">"Shanghai_VPN"</span>,</div><div class="line">      <span class="attr">"serverIp"</span>:<span class="string">"127.0.0.1"</span>,</div><div class="line">      <span class="attr">"port"</span>:<span class="number">8080</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"serverName"</span>:<span class="string">"Beijing_VPN"</span>,</div><div class="line">      <span class="attr">"serverIp"</span>:<span class="string">"127.0.0.2"</span>,</div><div class="line">      <span class="attr">"port"</span>:<span class="number">8080</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSON序列化和反序列化"><a href="#JSON序列化和反序列化" class="headerlink" title="JSON序列化和反序列化"></a>JSON序列化和反序列化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</div><div class="line">	ServerName <span class="keyword">string</span> <span class="string">`json:"serverName"`</span> <span class="comment">//序列化json字段名为serverName</span></div><div class="line">	ServerIp <span class="keyword">string</span> <span class="string">`json:"serverIp"`</span></div><div class="line">	Port <span class="keyword">int</span> <span class="string">`json:"port"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> ServerSlice <span class="keyword">struct</span> &#123;</div><div class="line">	Servers []Server <span class="string">`json:"servers"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> s ServerSlice</div><div class="line">	<span class="keyword">var</span> count <span class="keyword">int</span></div><div class="line"></div><div class="line">	path := <span class="string">"/Users/liuguoquan/go/src/liu/basic/123.json"</span></div><div class="line">	fin, err := os.Open(path)</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> fin.Close() <span class="comment">//延迟关闭资源</span></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>) <span class="comment">//创建一个初始容量为1024的slice,作为缓冲容器</span></div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="comment">//循环读取文件数据到缓冲容器中,返回读取到的个数</span></div><div class="line">		n, _ := fin.Read(buf)</div><div class="line">		count += n</div><div class="line">		<span class="keyword">if</span> <span class="number">0</span> == n &#123;</div><div class="line">			<span class="keyword">break</span> <span class="comment">//如果读到个数为0,则读取完毕,跳出循环</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">//从缓冲slice中写出数据,从slice下标0到n,通过os.Stdout写出到控制台</span></div><div class="line">		<span class="comment">//os.Stdout.Write(buf[:n])</span></div><div class="line">	&#125;</div><div class="line">	fmt.Println(count)</div><div class="line">	input := buf[<span class="number">0</span>:count]</div><div class="line">	<span class="comment">//json反序列化</span></div><div class="line">	err = json.Unmarshal(input, &amp;s)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s.Servers);i++ &#123;</div><div class="line">		fmt.Println(s.Servers[i].ServerName,s.Servers[i].ServerIp,s.Servers[i].Port)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	server1 := Server &#123;ServerName:<span class="string">"liu"</span>,ServerIp:<span class="string">"192.168.1.12"</span>,Port:<span class="number">8888</span>&#125;</div><div class="line">	server2 := Server &#123;ServerName:<span class="string">"lee"</span>,ServerIp:<span class="string">"192.168.1.13"</span>,Port:<span class="number">8888</span>&#125;</div><div class="line">	s2 := ServerSlice &#123; Servers:[]Server&#123;server1,server2&#125; &#125;</div><div class="line">	<span class="comment">//json序列化</span></div><div class="line">	out,err := json.Marshal(s2)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	os.Stdout.Write(out)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//打印</span></div><div class="line">Shanghai_VPN <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">8080</span></div><div class="line">Beijing_VPN <span class="number">127.0</span><span class="number">.0</span><span class="number">.2</span> <span class="number">8080</span></div><div class="line">&#123;<span class="string">"servers"</span>:[&#123;<span class="string">"serverName"</span>:<span class="string">"liu"</span>,<span class="string">"serverIp"</span>:<span class="string">"192.168.1.12"</span>,<span class="string">"port"</span>:<span class="number">8888</span>&#125;,&#123;<span class="string">"serverName"</span>:<span class="string">"lee"</span>,<span class="string">"serverIp"</span>:<span class="string">"192.168.1.13"</span>,<span class="string">"port"</span>:<span class="number">8888</span>&#125;]&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GO语言标准库&lt;code&gt;encoding/json&lt;/code&gt;用于处理JSON文本数据。&lt;/p&gt;
&lt;h1 id=&quot;序列化&quot;&gt;&lt;a href=&quot;#序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化&quot;&gt;&lt;/a&gt;序列化&lt;/h1&gt;&lt;p&gt;将一个对象编码成JSON
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go 标准库介绍⑥log</title>
    <link href="http://liuguoquan727.github.io/2017/05/17/Go%20%E6%A0%87%E5%87%86%E5%BA%93%E2%91%A5log/"/>
    <id>http://liuguoquan727.github.io/2017/05/17/Go 标准库⑥log/</id>
    <published>2017-05-17T13:50:53.000Z</published>
    <updated>2017-06-19T13:49:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>log 包实现了简单的日志服务，log 包定义了Logger类型，该类型提供了一些格式化输出的方法。本包也提供了一个预定义的“标准”Logger，可以通过辅助函数Print[f|ln]、Fatal[f|ln]和Panic[f|ln]访问，比手工创建一个Logger对象更容易使用。Logger会打印每条日志信息的日期、时间，默认输出到标准错误。Fatal系列函数会在写入日志信息后调用os.Exit(1)。Panic系列函数会在写入日志信息后调用panic。</p>
</blockquote>
<h1 id="Logger结构体"><a href="#Logger结构体" class="headerlink" title="Logger结构体"></a>Logger结构体</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Logger <span class="keyword">struct</span> &#123;</div><div class="line">    mu     sync.Mutex <span class="comment">// ensures atomic writes; protects the following fields</span></div><div class="line">    prefix <span class="keyword">string</span>     <span class="comment">// prefix to write at beginning of each line</span></div><div class="line">    flag   <span class="keyword">int</span>        <span class="comment">// properties</span></div><div class="line">    out    io.Writer  <span class="comment">// destination for output</span></div><div class="line">    buf    []<span class="keyword">byte</span>     <span class="comment">// for accumulating text to write</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Logger 类型表示一个记录日志的对象，它会生成一行行的输出写入一个io.Writer 接口。每一条日志操作会调用一次io.Writer 接口的Write 方法。Logger 类型的对象可以被多个线程安全的同时使用，它会保证对io.Writer 接口的顺序访问。</p>
<ul>
<li><p>func New(out io.Writer, prefix string, flag int) *Logger // 创建一个Logger, out设置日志信息写入的目的地, prefix 添加到生成的每一条日志前面, flag定义日志的属性</p>
</li>
<li><p>func (l *Logger) Flags() int // Flags返回logger的输出选项</p>
</li>
<li><p>func (l *Logger) SetFlags(flag int) // SetFlags设置logger的输出选项</p>
</li>
<li><p>func (l *Logger) Prefix() string // Prefix返回logger的输出前缀</p>
</li>
<li><p>func (l *Logger) SetPrefix(prefix string) // SSetPrefix设置logger的输出前缀</p>
</li>
<li><p>func (l *Logger) Output(calldepth int, s string) error // 输出一条日志</p>
</li>
<li><p>func (l *Logger) Printf(format string, v …interface{}) // 将生成的格式化字符串输出到out</p>
</li>
<li><p>func (l *Logger) Fatal(v …interface{}) // Fatal等价于{l.Print(v…); os.Exit(1)}</p>
</li>
<li><p>func (l *Logger) Panic(v …interface{}) // Panic等价于{l.Print(v…); panic(…)}</p>
</li>
</ul>
<h1 id="log导出函数"><a href="#log导出函数" class="headerlink" title="log导出函数"></a>log导出函数</h1><p>log 导出函数基于预定义的 std 变量 <code>var std = New(os.Stderr, &quot;&quot;, LstdFlags)</code> 实现。</p>
<ul>
<li>func Flags() int // 获取预定义“标准”日志输出属性</li>
<li>func Prefix() string // 获取预定义“标准”日志前缀</li>
<li>func SetOutput(w io.Writer) // 设置预定义“标准”日志输出位置</li>
<li>func Print(v …interface{}) // 打印一条标准日志</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// go 标准库 log</span></div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    logger := log.New(os.Stdout, <span class="string">"a log:"</span>, log.Lshortfile)</div><div class="line">    logger.SetFlags(log.Llongfile)</div><div class="line">    fmt.Println(logger.Flags()) <span class="comment">// 8</span></div><div class="line"> </div><div class="line">    logger.SetPrefix(<span class="string">"debug:"</span>)</div><div class="line">    fmt.Println(logger.Prefix()) <span class="comment">// de<span class="doctag">bug:</span></span></div><div class="line"> </div><div class="line">    logger.Print(<span class="string">"hello, log file"</span>)</div><div class="line"> </div><div class="line">    err := logger.Output(<span class="number">2</span>, <span class="string">"world"</span>)</div><div class="line">    fmt.Println(err)</div><div class="line"> </div><div class="line">    logger.Printf(<span class="string">"%v\t%v"</span>, <span class="string">"hello"</span>, <span class="string">"go"</span>)</div><div class="line"> </div><div class="line">    <span class="comment">// logger.Fatal("fatal log")</span></div><div class="line">    <span class="comment">// logger.Panic("Panic log")</span></div><div class="line"> </div><div class="line">    <span class="comment">// 使用预定义日志类型</span></div><div class="line">    fmt.Println(log.Flags())         <span class="comment">// 3</span></div><div class="line">    fmt.Println(log.Prefix())        <span class="comment">// ''</span></div><div class="line">    log.Print(<span class="string">"hello predefine log"</span>) <span class="comment">// 2017/03/04 16:34:27 hello predefine log</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;log 包实现了简单的日志服务，log 包定义了Logger类型，该类型提供了一些格式化输出的方法。本包也提供了一个预定义的“标准”Logger，可以通过辅助函数Print[f|ln]、Fatal[f|ln]和Panic[f|ln]访问，比手工创建
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go 标准库介绍⑤io</title>
    <link href="http://liuguoquan727.github.io/2017/05/16/Go%20%E6%A0%87%E5%87%86%E5%BA%93%E2%91%A4io/"/>
    <id>http://liuguoquan727.github.io/2017/05/16/Go 标准库⑤io/</id>
    <published>2017-05-16T13:50:53.000Z</published>
    <updated>2017-06-19T13:49:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="io-包的接口"><a href="#io-包的接口" class="headerlink" title="io 包的接口"></a>io 包的接口</h1><ul>
<li>Reader</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</div><div class="line">    Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Reader 接口用于包装基本的读取方法。Read 方法读取 len(p) 字节数据写入p。它返回写入的字节数和遇到的任何错误。即使Read方法返回值 n &lt; len(p)，本方法在被调用时仍可能使用p的全部长度作为暂存空间。如果有部分可用数据，但不够len(p)字节，Read会返回可以读取到的数据，而不是等待更多数据。</p>
<ul>
<li>Writer</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</div><div class="line">    Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Writer 接口用于包装基本的写入方法。Write 方法将 len(p) 字节数据从p写入底层的数据流。它会返回写入的字节数据<code>(0 &lt;= n &lt;= len(p))</code> 和遇到的任何导致写入提取结束的错误。如果它返回的 n &lt; len(p), Write必须返回非nil的错误。</p>
<ul>
<li>Closer</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Closer <span class="keyword">interface</span> &#123;</div><div class="line">    Close() error</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Closer 接口用于包装基本的关闭方法。</p>
<ul>
<li>Seeker</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Seeker <span class="keyword">interface</span> &#123;</div><div class="line">    Seek(offset <span class="keyword">int64</span>, whence <span class="keyword">int</span>) (<span class="keyword">int64</span>, error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Seeker 接口用于包装基本的移位方法。Seek方法设定下一次读写的位置：偏移量为offset，校准点由whence确定：0表示相对于文件起始；1表示相对于当前位置；2表示相对于文件结尾。Seek方法返回新的位置以及可能遇到的错误。</p>
<ul>
<li>ReaderAt</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ReaderAt <span class="keyword">interface</span> &#123;</div><div class="line">    ReadAt(p []<span class="keyword">byte</span>, off <span class="keyword">int64</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ReaderAt 接口包装了基本的ReadAt方法。ReadAt从底层输入流的偏移量off位置读取len(p) 字节数据写入p， 它返回读取的字节数(0 &lt;= n &lt;= len(p)) 和遇到的任何错误。</p>
<ul>
<li>ByteReader</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ByteReader <span class="keyword">interface</span> &#123;</div><div class="line">    ReadByte() (c <span class="keyword">byte</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ByteReader 是基本的ReadByte方法的包装。ReadByte读取输入中的单个字节并返回。如果没有字节可读取，会返回错误。</p>
<ul>
<li>ByteScanner</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ByteScanner <span class="keyword">interface</span> &#123;</div><div class="line">    ByteReader</div><div class="line">    UnreadByte() error</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ByteScanner 接口在基本的ReadByte 方法之外还添加了UnreadByte方法。UnreadByte方法让下一次调用ReadByte时返回之前调用ReadByte时返回的同一个字节。连续调用两次UnreadByte方法而中间没有调用ReadByte时，可能会导致错误</p>
<ul>
<li>ReaderFrom</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ReaderFrom <span class="keyword">interface</span> &#123;</div><div class="line">    ReadFrom(r Reader) (n <span class="keyword">int64</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ReaderFrom 接口包装了基本的ReadFrom方法。ReadFrom 方法从r 读取数据直到EOF或者遇到错误。返回值n是读取的字节数，执行时遇到的错误（EOF除外）也会被返回</p>
<ul>
<li>LimitedReader</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> LimitedReader <span class="keyword">struct</span> &#123;</div><div class="line">    R Reader <span class="comment">// underlying reader</span></div><div class="line">    N <span class="keyword">int64</span>  <span class="comment">// max bytes remaining</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LimitedReader 从R中读取数据，但限制可以读取的数据的量为最多N 字节，每次调用Read方法都会更新N 以标记剩余可以读取的字节数。</p>
<ul>
<li>func LimitReader(r Reader, n int64) LimitedReader // 创建一个 LimitedReader</li>
<li><p>func (l *LimitedReader) Read(p []byte) (n int, err error)</p>
</li>
<li><p>SectionReader</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> SectionReader <span class="keyword">struct</span> &#123;</div><div class="line">    r     ReaderAt</div><div class="line">    base  <span class="keyword">int64</span></div><div class="line">    off   <span class="keyword">int64</span></div><div class="line">    limit <span class="keyword">int64</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SectionReader 实现了对底层满足ReadAt 接口的输入流某个片段的Read、ReadAt、Seek方法。</p>
<ul>
<li>func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader // 返回一个从r中的偏移量off处为起始，读取n个字节后以停止的SectionReader</li>
<li>func (s *SectionReader) Size() int64 // Size返回该片段的字节数</li>
</ul>
<h1 id="io-导出函数"><a href="#io-导出函数" class="headerlink" title="io 导出函数"></a>io 导出函数</h1><ul>
<li>func WriteString(w Writer, s string) (n int, err error) // 将字符串s的内容写入w中</li>
<li>func Copy(dst Writer, src Reader) (written int64, err error) // 将src的数据拷贝到dst，直到在src上到达EOF或发生错误。返回拷贝的字节数和遇到的第一个错误</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"io"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    r := strings.NewReader(<span class="string">"go is a programming language\n"</span>)</div><div class="line">    <span class="keyword">if</span> n, err := io.Copy(os.Stdout, r); err != <span class="literal">nil</span> &#123;</div><div class="line">        log.Fatal(n, err)</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// writestring</span></div><div class="line">    io.WriteString(os.Stdout, <span class="string">"hello go\n"</span>)</div><div class="line"> </div><div class="line">    <span class="comment">// 从标准输入copy 到标准输出</span></div><div class="line">    <span class="keyword">if</span> n, err := io.Copy(os.Stdout, os.Stdin); err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(n, err)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;io-包的接口&quot;&gt;&lt;a href=&quot;#io-包的接口&quot; class=&quot;headerlink&quot; title=&quot;io 包的接口&quot;&gt;&lt;/a&gt;io 包的接口&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Reader&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight g
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go 标准库介绍④path</title>
    <link href="http://liuguoquan727.github.io/2017/05/15/Go%20%E6%A0%87%E5%87%86%E5%BA%93%E2%91%A3path/"/>
    <id>http://liuguoquan727.github.io/2017/05/15/Go 标准库④path/</id>
    <published>2017-05-15T13:50:53.000Z</published>
    <updated>2017-06-19T13:48:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="path-包"><a href="#path-包" class="headerlink" title="path 包"></a>path 包</h1><p>path实现了对斜杠分隔的路径进行操作的函数。</p>
<ul>
<li>func IsAbs(path string) bool // 判断是否是一个绝对路径</li>
<li>func Split(path string) (dir, file string) // 将路径分割为路径和文件名</li>
<li>func Join(elem …string) string // 将多个字符串合并为一个路径</li>
<li>func Ext(path string) string // 返回路径中扩展部分</li>
<li>func Base(path string) string // 返回路径的最后一个元素</li>
<li>func Dir(path string) string // 返回路径中目录部分</li>
<li>func Clean(path string) string // 返回同目录的最短路径</li>
<li>func Match(pattern, name string) (matched bool, err error) // 正则是否匹配路径（shell 文件名匹配）</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// go 标准库 path</span></div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"path"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    pt := <span class="string">"~/gocode/src/go_note/package/path"</span></div><div class="line"> </div><div class="line">    <span class="comment">// 判断是否是一个绝对路径</span></div><div class="line">    is_abs := path.IsAbs(pt)</div><div class="line">    fmt.Println(is_abs) <span class="comment">// false</span></div><div class="line"> </div><div class="line">    <span class="comment">// 将路径分割为路径和文件名</span></div><div class="line">    pf := <span class="string">"~gocode/src/go_note/package/path/path.go"</span></div><div class="line">    dir, file := path.Split(pf)</div><div class="line">    fmt.Println(dir, file) <span class="comment">// ~gocode/src/go_note/package/path/ path.go</span></div><div class="line"> </div><div class="line">    <span class="comment">// 将多个字符串合并为一个路径</span></div><div class="line">    dir_join := path.Join(<span class="string">"usr"</span>, <span class="string">"local"</span>, <span class="string">"bin"</span>)</div><div class="line">    fmt.Println(dir_join) <span class="comment">// usr/local/bin</span></div><div class="line"> </div><div class="line">    <span class="comment">// 返回路径中扩展</span></div><div class="line">    file_ext := path.Ext(pf)</div><div class="line">    fmt.Println(file_ext) <span class="comment">// .go</span></div><div class="line"> </div><div class="line">    <span class="comment">// 返回路径的最后一个元素</span></div><div class="line">    dir_base := path.Base(pf)</div><div class="line">    fmt.Println(dir_base) <span class="comment">// path.go</span></div><div class="line"> </div><div class="line">    <span class="comment">// 返回路径中目录部分</span></div><div class="line">    dir = path.Dir(pf)</div><div class="line">    fmt.Println(dir) <span class="comment">// ~gocode/src/go_note/package/path</span></div><div class="line"> </div><div class="line">    <span class="comment">// 返回同目录的最短路径</span></div><div class="line">    dir_a := <span class="string">"/usr/../etc/../etc/ssh"</span></div><div class="line">    fmt.Println(path.Clean(dir_a)) <span class="comment">// /etc/ssh</span></div><div class="line"> </div><div class="line">    <span class="comment">// 正则是否匹配路径</span></div><div class="line">    is_match, err := path.Match(<span class="string">"*.xml"</span>, <span class="string">"a.xml"</span>)</div><div class="line">    fmt.Println(is_match, err) <span class="comment">// true &amp;lt;nil&amp;gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="path-filepath-包"><a href="#path-filepath-包" class="headerlink" title="path/filepath 包"></a>path/filepath 包</h1><p>filepath 包实现了兼容各操作系统的文件路径操作函数。</p>
<ul>
<li>filepath.Separator // 预定义变量，表示路径分隔符 /</li>
<li>filepath.ListSeparator // 预定义变量，表示环境变量分隔符 :</li>
<li>func Abs(path string) (string, error) // 返回path 相对当前路径的绝对路径</li>
<li>func Clean(path string) string // 返回path 的最短路径</li>
<li>func Rel(basepath, targpath string) (string, error) // 返回targpath 相对 basepath路径</li>
<li>func EvalSymlinks(path string) (string, error) // 返回软链指向的路径</li>
<li>func VolumeName(path string) string // 返回路径最前面的卷名</li>
<li>func ToSlash(path string) string // 路径分隔符替换为 /</li>
<li>func FromSlash(path string) string // / 替换为路径分隔符</li>
<li>func SplitList(path string) []string // 分隔环境变量里面的路径</li>
<li>func Walk(root string, walkFn WalkFunc) error // 遍历 root 目录下的文件树，并调用 walkFn</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// go 标准库 path/filepath</span></div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"path/filepath"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment">// 打印路径名称</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathName</span><span class="params">(path <span class="keyword">string</span>, info os.FileInfo, err error)</span> <span class="title">error</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> err</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        fmt.Println(path)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 预定义变量</span></div><div class="line">    fmt.Println(<span class="keyword">string</span>(filepath.Separator), <span class="keyword">string</span>(filepath.ListSeparator))</div><div class="line"> </div><div class="line">    <span class="comment">// 返回path 相对当前路径的绝对路径</span></div><div class="line">    dir := <span class="string">"~/gocode/src/go_note/package/filepath"</span></div><div class="line">    real_dir, err := filepath.Abs(dir)</div><div class="line">    fmt.Println(real_dir, err)</div><div class="line"> </div><div class="line">    <span class="comment">// 返回path 的最短路径</span></div><div class="line">    dir = <span class="string">"/usr/../etc/../tmp"</span></div><div class="line">    clear_dir := filepath.Clean(dir)</div><div class="line">    fmt.Println(clear_dir) <span class="comment">// /tmp</span></div><div class="line"> </div><div class="line">    <span class="comment">// 返回targpath 相对 basepath路径</span></div><div class="line">    basepath, targpath := <span class="string">"/usr/local"</span>, <span class="string">"/usr/local/go/bin"</span></div><div class="line">    rel_dir, err := filepath.Rel(basepath, targpath)</div><div class="line">    fmt.Println(rel_dir, err) <span class="comment">// go/bin &amp;lt;nil&amp;gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">// 返回软链指向的路径</span></div><div class="line">    symlink := <span class="string">"/usr/local"</span></div><div class="line">    real_dir, err = filepath.EvalSymlinks(symlink)</div><div class="line">    fmt.Println(real_dir, err) <span class="comment">// /usr/local &amp;lt;nil&amp;gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">// 返回路径最前面的卷名</span></div><div class="line">    root := <span class="string">"/usr/local/go"</span></div><div class="line">    vol := filepath.VolumeName(root)</div><div class="line">    fmt.Println(vol) <span class="comment">// ''</span></div><div class="line"> </div><div class="line">    <span class="comment">// 路径分隔符替换为 `/`</span></div><div class="line">    slash_dir := filepath.ToSlash(root)</div><div class="line">    fmt.Println(slash_dir) <span class="comment">// /usr/local/go</span></div><div class="line"> </div><div class="line">    <span class="comment">//  `/` 替换为路径分隔符</span></div><div class="line">    from_slash := filepath.FromSlash(slash_dir)</div><div class="line">    fmt.Println(from_slash) <span class="comment">// /usr/local/go</span></div><div class="line"> </div><div class="line">    <span class="comment">// 分隔环境变量里面的路径</span></div><div class="line">    env_path := <span class="string">"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/go/bin"</span></div><div class="line">    env_slice := filepath.SplitList(env_path)</div><div class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> env_slice &#123;</div><div class="line">        fmt.Println(k, v)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 0 /usr/local/bin</span></div><div class="line">    <span class="comment">// 1 /usr/bin</span></div><div class="line">    <span class="comment">// 2 /bin</span></div><div class="line">    <span class="comment">// 3 /usr/sbin</span></div><div class="line">    <span class="comment">// 4 /sbin</span></div><div class="line">    <span class="comment">// 5 /opt/X11/bin</span></div><div class="line">    <span class="comment">// 6 /usr/local/go/bin</span></div><div class="line"> </div><div class="line">    <span class="comment">// 遍历 root 目录下的文件树，并调用 walkFn</span></div><div class="line">    root_dir, err := os.Getwd()</div><div class="line">    err = filepath.Walk(root_dir, pathName)</div><div class="line">    fmt.Println(err)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;path-包&quot;&gt;&lt;a href=&quot;#path-包&quot; class=&quot;headerlink&quot; title=&quot;path 包&quot;&gt;&lt;/a&gt;path 包&lt;/h1&gt;&lt;p&gt;path实现了对斜杠分隔的路径进行操作的函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;func IsAbs(path s
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go 标准库介绍③os</title>
    <link href="http://liuguoquan727.github.io/2017/05/14/Go%20%E6%A0%87%E5%87%86%E5%BA%93%E2%91%A2os/"/>
    <id>http://liuguoquan727.github.io/2017/05/14/Go 标准库③os/</id>
    <published>2017-05-14T13:50:53.000Z</published>
    <updated>2017-06-19T13:48:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>os 包提供了不依赖平台的操作系统函数接口。错误处理设计为go 风格，失败的调用会返回错误值而非错误码。通常错误值里包含更多信息。</p>
<h1 id="os-常用导出函数"><a href="#os-常用导出函数" class="headerlink" title="os 常用导出函数"></a>os 常用导出函数</h1><ul>
<li>func Hostname() (name string, err error) // Hostname返回内核提供的主机名</li>
<li>func Environ() []string // Environ返回表示环境变量的格式为”key=value”的字符串的切片拷贝</li>
<li>func Getenv(key string) string // Getenv检索并返回名为key的环境变量的值</li>
<li>func Getpid() int // Getpid返回调用者所在进程的进程ID</li>
<li>func Exit(code int) // Exit让当前程序以给出的状态码code退出。一般来说，状态码0表示成功，非0表示出错。程序会立刻终止，defer的函数不会被执行</li>
<li>func Stat(name string) (fi FileInfo, err error) // 获取文件信息</li>
<li>func Getwd() (dir string, err error) // Getwd返回一个对应当前工作目录的根路径</li>
<li>func Mkdir(name string, perm FileMode) error // 使用指定的权限和名称创建一个目录</li>
<li>func MkdirAll(path string, perm FileMode) error // 使用指定的权限和名称创建一个目录，包括任何必要的上级目录，并返回nil，否则返回错误</li>
<li>func Remove(name string) error // 删除name指定的文件或目录</li>
<li>func TempDir() string // 返回一个用于保管临时文件的默认目录</li>
<li>var Args []string Args保管了命令行参数，第一个是程序名。</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// go 标准库 os</span></div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 预定义变量, 保存命令行参数</span></div><div class="line">    fmt.Println(os.Args)</div><div class="line"> </div><div class="line">    <span class="comment">// 获取host name</span></div><div class="line">    fmt.Println(os.Hostname())</div><div class="line">    fmt.Println(os.Getpid())</div><div class="line"> </div><div class="line">    <span class="comment">// 获取全部环境变量</span></div><div class="line">    env := os.Environ()</div><div class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> env &#123;</div><div class="line">        fmt.Println(k, v)</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// 终止程序</span></div><div class="line">    <span class="comment">// os.Exit(1)</span></div><div class="line"> </div><div class="line">    <span class="comment">// 获取一条环境变量</span></div><div class="line">    fmt.Println(os.Getenv(<span class="string">"PATH"</span>))</div><div class="line"> </div><div class="line">    <span class="comment">// 获取当前目录</span></div><div class="line">    dir, err := os.Getwd()</div><div class="line">    fmt.Println(dir, err)</div><div class="line"> </div><div class="line">    <span class="comment">// 创建目录</span></div><div class="line">    err = os.Mkdir(dir+<span class="string">"/new_file"</span>, <span class="number">0755</span>)</div><div class="line">    fmt.Println(err)</div><div class="line"> </div><div class="line">    <span class="comment">// 创建目录</span></div><div class="line">    err = os.MkdirAll(dir+<span class="string">"/new"</span>, <span class="number">0755</span>)</div><div class="line">    fmt.Println(err)</div><div class="line"> </div><div class="line">    <span class="comment">// 删除目录</span></div><div class="line">    err = os.Remove(dir + <span class="string">"/new_file"</span>)</div><div class="line">    err = os.Remove(dir + <span class="string">"/new"</span>)</div><div class="line">    fmt.Println(err)</div><div class="line"> </div><div class="line">    <span class="comment">// 创建临时目录</span></div><div class="line">    tmp_dir := os.TempDir()</div><div class="line">    fmt.Println(tmp_dir)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="File-结构体"><a href="#File-结构体" class="headerlink" title="File 结构体"></a>File 结构体</h1><ul>
<li>func Create(name string) (file *File, err error) // Create采用模式0666（任何人都可读写，不可执行）创建一个名为name的文件，如果文件已存在会截断它（为空文件）</li>
<li>func Open(name string) (file *File, err error) // Open打开一个文件用于读取。如果操作成功，返回的文件对象的方法可用于读取数据；对应的文件描述符具有O_RDONLY模式</li>
<li>func (f *File) Stat() (fi FileInfo, err error) // Stat返回描述文件f的FileInfo类型值</li>
<li>func (f *File) Readdir(n int) (fi []FileInfo, err error) // Readdir读取目录f的内容，返回一个有n个成员的[]FileInfo，这些FileInfo是被Lstat返回的，采用目录顺序</li>
<li>func (f *File) Read(b []byte) (n int, err error) // Read方法从f中读取最多len(b)字节数据并写入b</li>
<li>func (f *File) WriteString(s string) (ret int, err error) // 向文件中写入字符串</li>
<li>func (f *File) Sync() (err error) // Sync递交文件的当前内容进行稳定的存储。一般来说，这表示将文件系统的最近写入的数据在内存中的拷贝刷新到硬盘中稳定保存</li>
<li>func (f *File) Close() error // Close关闭文件f，使文件不能用于读写</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// go 标准库 os.File</span></div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 获取当前目录</span></div><div class="line">    dir, err := os.Getwd()</div><div class="line">    fmt.Println(dir, err)</div><div class="line"> </div><div class="line">    file := dir + <span class="string">"/new"</span></div><div class="line">    <span class="keyword">var</span> fh *os.File</div><div class="line"> </div><div class="line">    fi, _ := os.Stat(file)</div><div class="line">    <span class="keyword">if</span> fi == <span class="literal">nil</span> &#123;</div><div class="line">        fh, _ = os.Create(file) <span class="comment">// 文件不存在就创建</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        fh, _ = os.OpenFile(file, os.O_RDWR, <span class="number">0666</span>) <span class="comment">// 文件存在就打开</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    w := []<span class="keyword">byte</span>(<span class="string">"hello go language"</span> + time.Now().String())</div><div class="line">    n, err := fh.Write(w)</div><div class="line">    fmt.Println(n, err)</div><div class="line"> </div><div class="line">    <span class="comment">// 设置下次读写位置</span></div><div class="line">    ret, err := fh.Seek(<span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    fmt.Println(<span class="string">"当前文件指针位置"</span>, ret, err)</div><div class="line"> </div><div class="line">    b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">128</span>)</div><div class="line">    n, err = fh.Read(b)</div><div class="line">    fmt.Println(n, err, <span class="keyword">string</span>(b))</div><div class="line"> </div><div class="line">    fh.Close()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="FileInfo-结构体"><a href="#FileInfo-结构体" class="headerlink" title="FileInfo 结构体"></a>FileInfo 结构体</h1><p>FileInfo用来描述一个文件对象</p>
<p>结构体定义:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> FileInfo <span class="keyword">interface</span> &#123;</div><div class="line">    Name() <span class="keyword">string</span>       <span class="comment">// base name of the file</span></div><div class="line">    Size() <span class="keyword">int64</span>        <span class="comment">// length in bytes for regular files; system-dependent for others</span></div><div class="line">    Mode() FileMode     <span class="comment">// file mode bits</span></div><div class="line">    ModTime() time.Time <span class="comment">// modification time</span></div><div class="line">    IsDir() <span class="keyword">bool</span>        <span class="comment">// abbreviation for Mode().IsDir()</span></div><div class="line">    Sys() <span class="keyword">interface</span>&#123;&#125;   <span class="comment">// underlying data source (can return nil)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>func Stat(name string) (fi FileInfo, err error) // Stat 返回描述文件的FileInfo。如果指定的文件对象是一个符号链接，返回的FileInfo描述该符号链接指向的文件的信息，本函数会尝试跳转该链接</li>
<li>func Lstat(name string) (fi FileInfo, err error) // Lstat 返回描述文件对象的FileInfo。如果指定的文件对象是一个符号链接，返回的FileInfo描述该符号链接的信息，本函数不会试图跳转该链接。</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fi, _ := os.Stat(file)</div><div class="line"><span class="keyword">if</span> fi == <span class="literal">nil</span> &#123;</div><div class="line">    fh, _ = os.Create(file) <span class="comment">// 文件不存在就创建</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    fh, _ = os.OpenFile(file, os.O_RDWR, <span class="number">0666</span>) <span class="comment">// 文件存在就打开</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;os 包提供了不依赖平台的操作系统函数接口。错误处理设计为go 风格，失败的调用会返回错误值而非错误码。通常错误值里包含更多信息。&lt;/p&gt;
&lt;h1 id=&quot;os-常用导出函数&quot;&gt;&lt;a href=&quot;#os-常用导出函数&quot; class=&quot;headerlink&quot; title=&quot;o
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go 标准库介绍②time</title>
    <link href="http://liuguoquan727.github.io/2017/05/13/Go%20%E6%A0%87%E5%87%86%E5%BA%93%E2%91%A1time/"/>
    <id>http://liuguoquan727.github.io/2017/05/13/Go 标准库②time/</id>
    <published>2017-05-13T13:50:53.000Z</published>
    <updated>2017-06-19T13:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间处理类型"><a href="#时间处理类型" class="headerlink" title="时间处理类型"></a>时间处理类型</h1><p>Go 中时间处理依赖的数据类型: time.Time, time.Month, time.Weekday, time.Duration, time.Location。</p>
<h2 id="time-Time时间点"><a href="#time-Time时间点" class="headerlink" title="time.Time时间点"></a>time.Time时间点</h2><p>time.Time 代表一个纳秒精度的时间点。Time结构体定义如下:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Time <span class="keyword">struct</span> &#123;</div><div class="line">    sec <span class="keyword">int64</span> <span class="comment">// 从1年1月1日 00:00:00 UTC 至今过去的秒数</span></div><div class="line">    nsec <span class="keyword">int32</span> <span class="comment">// 最近一秒到下一秒过去的纳秒数</span></div><div class="line">    loc *Location <span class="comment">// 时区</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> t time.Time <span class="comment">// 定义 time.Time 类型变量</span></div><div class="line">t = time.Now()  <span class="comment">// 获取当前时间</span></div><div class="line">fmt.Printf(<span class="string">"时间: %v, 时区:  %v,  时间类型: %T\n"</span>, t, t.Location(), t)</div><div class="line"><span class="comment">// 时间: 2017-02-22 09:06:05.816187261 +0800 CST, 时区:  Local,  时间类型: time.Time</span></div><div class="line"> </div><div class="line"><span class="comment">// time.UTC() time 返回UTC 时区的时间</span></div><div class="line">fmt.Printf(<span class="string">"时间: %v, 时区:  %v,  时间类型: %T\n"</span>, t.UTC(), t.UTC().Location(), t)</div><div class="line"><span class="comment">// 时间: 2017-02-22 01:07:15.179280004 +0000 UTC, 时区:  UTC,  时间类型: time.Time</span></div><div class="line"></div><div class="line">fmt.Printf(<span class="string">"year: %d "</span>,t.Year())</div><div class="line">fmt.Printf(<span class="string">"month: %d "</span>,t.Month())</div><div class="line">fmt.Printf(<span class="string">"day: %d\n"</span>,t.Day())</div><div class="line"></div><div class="line">fmt.Printf(<span class="string">"hour: %d "</span>,t.Hour())</div><div class="line">fmt.Printf(<span class="string">"minute: %d "</span>,t.Minute())</div><div class="line">fmt.Printf(<span class="string">"second: %d \n"</span>,t.Second())</div></pre></td></tr></table></figure>
<p>代码中应使用time.Time 类型值来保存和传递时间，而不能用指针。表示时间的变量和字段，应为time.Time类型，而不是*time.Time类型。</p>
<h2 id="time-Month月份"><a href="#time-Month月份" class="headerlink" title="time.Month月份"></a>time.Month月份</h2><p>time.Month 代表一年中的某个月</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Month <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="comment">//Month相关的常量</span></div><div class="line"><span class="keyword">const</span> (</div><div class="line">    January Month = <span class="number">1</span> + <span class="literal">iota</span></div><div class="line">    February</div><div class="line">    March</div><div class="line">    April</div><div class="line">    May</div><div class="line">    June</div><div class="line">    July</div><div class="line">    August</div><div class="line">    September</div><div class="line">    October</div><div class="line">    November</div><div class="line">    December</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="time-Weekday星期"><a href="#time-Weekday星期" class="headerlink" title="time.Weekday星期"></a>time.Weekday星期</h2><p>time.Weekday 代表一周的周几。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Weekday <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="comment">//Weekday相关的常量</span></div><div class="line"><span class="keyword">const</span> (</div><div class="line">    Sunday Weekday = <span class="literal">iota</span></div><div class="line">    Monday</div><div class="line">    Tuesday</div><div class="line">    Wednesday</div><div class="line">    Thursday</div><div class="line">    Friday</div><div class="line">    Saturday</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="time-Duration时间段"><a href="#time-Duration时间段" class="headerlink" title="time.Duration时间段"></a>time.Duration时间段</h2><p>time.Duration 类型代表两个时间点之间经过的纳秒数，可表示的最长时间段约为290年。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Duration <span class="keyword">int64</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">    Nanosecond  Duration = <span class="number">1</span></div><div class="line">    Microsecond          = <span class="number">1000</span> * Nanosecond</div><div class="line">    Millisecond          = <span class="number">1000</span> * Microsecond</div><div class="line">    Second               = <span class="number">1000</span> * Millisecond</div><div class="line">    Minute               = <span class="number">60</span> * Second</div><div class="line">    Hour                 = <span class="number">60</span> * Minute</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="time-Location时区"><a href="#time-Location时区" class="headerlink" title="time.Location时区"></a>time.Location时区</h2><p>Location代表一个地点，以及该地点所在的时区信息。北京时间可以使用 <code>Asia/Shanghai</code>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Location <span class="keyword">struct</span> &#123;</div><div class="line">    name <span class="keyword">string</span></div><div class="line">    zone []zone</div><div class="line">    tx   []zoneTrans</div><div class="line">    cacheStart <span class="keyword">int64</span></div><div class="line">    cacheEnd   <span class="keyword">int64</span></div><div class="line">    cacheZone  *zone</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="time-Time-方法"><a href="#time-Time-方法" class="headerlink" title="time.Time 方法"></a>time.Time 方法</h1><h2 id="获取一个时间的方法"><a href="#获取一个时间的方法" class="headerlink" title="获取一个时间的方法"></a>获取一个时间的方法</h2><ul>
<li>func Now() Time {} // 当前本地时间</li>
<li>func Unix(sec int64, nsec int64) Time {} // 根据时间戳返回本地时间</li>
<li>func Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time {} // 返回指定时间</li>
</ul>
<h2 id="时间显示"><a href="#时间显示" class="headerlink" title="时间显示"></a>时间显示</h2><ul>
<li>func (t Time) UTC() Time {} // 获取指定时间在UTC 时区的时间表示</li>
<li>func (t Time) Local() Time {} // 以本地时区表示</li>
<li>func (t Time) In(loc *Location) Time {} // 时间在指定时区的表示</li>
<li>func (t Time) Format(layout string) string {} // 按指定格式显示时间</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取指定时间在UTC 时区的时间表示</span></div><div class="line">t_by_utc := t.UTC()</div><div class="line">fmt.Println(<span class="string">"'t.UTC': "</span>, t_by_utc)</div><div class="line"> </div><div class="line"><span class="comment">// 获取本地时间表示</span></div><div class="line">t_by_local := t.Local()</div><div class="line">fmt.Println(<span class="string">"'t.Local': "</span>, t_by_local)</div><div class="line"> </div><div class="line"><span class="comment">// 时间在指定时区的表示</span></div><div class="line">t_in := t.In(time.UTC)</div><div class="line">fmt.Println(<span class="string">"'t.In': "</span>, t_in)</div><div class="line"> </div><div class="line"><span class="comment">// Format</span></div><div class="line">fmt.Println(<span class="string">"t.Format"</span>, t.Format(time.RFC3339))</div></pre></td></tr></table></figure>
<h2 id="获取日期信息"><a href="#获取日期信息" class="headerlink" title="获取日期信息"></a>获取日期信息</h2><ul>
<li>func (t Time) Date() (year int, month Month, day int) {} // 返回时间的日期信息</li>
<li>func (t Time) Year() int {} // 返回年</li>
<li>func (t Time) Month() Month {} // 月</li>
<li>func (t Time) Day() int {} // 日</li>
<li>func (t Time) Weekday() Weekday {} // 星期</li>
<li>func (t Time) ISOWeek() (year, week int) {} // 返回年，星期范围编号</li>
<li>func (t Time) Clock() (hour, min, sec int) {} // 返回时间的时分秒</li>
<li>func (t Time) Hour() int {} // 返回小时</li>
<li>func (t Time) Minute() int {} // 分钟</li>
<li>func (t Time) Second() int {} // 秒</li>
<li>func (t Time) Nanosecond() int {} // 纳秒</li>
<li>func (t Time) YearDay() int {} // 一年中对应的天</li>
<li>func (t Time) Location() *Location {} // 时间的时区</li>
<li>func (t Time) Zone() (name string, offset int) {} // 时间所在时区的规范名和想对UTC 时间偏移量</li>
<li>func (t Time) Unix() int64 {} // 时间转为时间戳</li>
<li>func (t Time) UnixNano() int64 {} // 时间转为时间戳（纳秒）</li>
</ul>
<h2 id="时间比较与计算"><a href="#时间比较与计算" class="headerlink" title="时间比较与计算"></a>时间比较与计算</h2><ul>
<li>func (t Time) IsZero() bool {} // 是否是零时时间</li>
<li>func (t Time) After(u Time) bool {} // 时间在u 之前</li>
<li>func (t Time) Before(u Time) bool {} // 时间在u 之后</li>
<li>func (t Time) Equal(u Time) bool {} // 时间与u 相同</li>
<li>func (t Time) Add(d Duration) Time {} // 返回t +d 的时间点</li>
<li>func (t Time) Sub(u Time) Duration {} // 返回 t-u</li>
<li>func (t Time) AddDate(years int, months int, days int) Time {} 返回增加了给出的年份、月份和天数的时间点Time</li>
</ul>
<h2 id="时间序列化"><a href="#时间序列化" class="headerlink" title="时间序列化"></a>时间序列化</h2><ul>
<li>func (t Time) MarshalBinary() ([]byte, error) {} // 时间序列化</li>
<li>func (t Time) UnmarshalBinary(data []byte) error {} // 反序列化</li>
<li>func (t Time) MarshalJSON() ([]byte, error) {} // 时间序列化</li>
<li>func (t Time) MarshalText() ([]byte, error) {} // 时间序列化</li>
<li>func (t Time) GobEncode() ([]byte, error) {} // 时间序列化</li>
<li>func (t Time) GobDecode() ([]byte, error) {} // 时间序列化</li>
</ul>
<h1 id="time-Duration-方法"><a href="#time-Duration-方法" class="headerlink" title="time.Duration 方法"></a>time.Duration 方法</h1><ul>
<li>func (d Duration) String() string // 格式化输出 Duration</li>
<li>func (d Duration) Nanoseconds() int64 // 将时间段表示为纳秒</li>
<li>func (d Duration) Seconds() float64 // 将时间段表示为秒</li>
<li>func (d Duration) Minutes() float64 // 将时间段表示为分钟</li>
<li>func (d Duration) Hours() float64 // 将时间段表示为小时</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// time.Duration 时间段</span></div><div class="line">fmt.Println(<span class="string">"time.Duration 时间段"</span>)</div><div class="line">d = time.Duration(<span class="number">10000000000000</span>)</div><div class="line"> </div><div class="line">fmt.Printf(<span class="string">"'String: %v', 'Nanoseconds: %v', 'Seconds: %v', 'Minutes: %v', 'Hours: %v'\n"</span>, </div><div class="line">d.String(), d.Nanoseconds(), d.Seconds(), d.Minutes(), d.Hours())</div></pre></td></tr></table></figure>
<h1 id="time-Location-方法"><a href="#time-Location-方法" class="headerlink" title="time.Location 方法"></a>time.Location 方法</h1><ul>
<li>func (l *Location) String() string // 输出时区名</li>
<li>func FixedZone(name string, offset int) *Location // FixedZone 使用给定的地点名name和时间偏移量offset（单位秒）创建并返回一个Location</li>
<li>func LoadLocation(name string) (*Location, error) // LoadLocation 使用给定的名字创建Location</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> local *time.Location</div><div class="line">local, ok := time.LoadLocation(<span class="string">"Asia/Shanghai"</span>)</div><div class="line">fmt.Printf(<span class="string">"%v, %T, %v\n"</span>, local, local, ok)</div></pre></td></tr></table></figure>
<h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><ul>
<li>func Sleep(d Duration) // Sleep阻塞当前go线程至少d代表的时间段。d&lt;=0时，Sleep会立刻返回。</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d_second := time.Second</div><div class="line">time.Sleep(d_second)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;时间处理类型&quot;&gt;&lt;a href=&quot;#时间处理类型&quot; class=&quot;headerlink&quot; title=&quot;时间处理类型&quot;&gt;&lt;/a&gt;时间处理类型&lt;/h1&gt;&lt;p&gt;Go 中时间处理依赖的数据类型: time.Time, time.Month, time.Weekday, 
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go 标准库介绍①string</title>
    <link href="http://liuguoquan727.github.io/2017/05/12/Go%20%E6%A0%87%E5%87%86%E5%BA%93%E2%91%A0strings/"/>
    <id>http://liuguoquan727.github.io/2017/05/12/Go 标准库①strings/</id>
    <published>2017-05-12T13:50:53.000Z</published>
    <updated>2017-06-19T13:46:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>strings 包实现了用于操作字符串的简单函数，包括 string 导出函数和 Reader, Replacer 两个结构体。</p>
<h1 id="strings-常用导出函数"><a href="#strings-常用导出函数" class="headerlink" title="strings 常用导出函数"></a>strings 常用导出函数</h1><h2 id="判断字符串与子串关系"><a href="#判断字符串与子串关系" class="headerlink" title="判断字符串与子串关系"></a>判断字符串与子串关系</h2><ul>
<li>func EqualFold(s, t string) bool // 判断两个utf-8编码字符串，大小写不敏感</li>
<li>func HasPrefix(s, prefix string) bool // 判断s是否有前缀字符串prefix</li>
<li>func Contains(s, substr string) bool // 判断字符串s是否包含子串substr</li>
<li>func ContainsAny(s, chars string) bool // 判断字符串s是否包含字符串chars中的任一字符</li>
<li>func Count(s, sep string) int // 返回字符串s中有几个不重复的sep子串</li>
<li><p>获取字符串中子串位置</p>
</li>
<li><p>func Index(s, sep string) int // 子串sep在字符串s中第一次出现的位置，不存在则返回-1</p>
</li>
<li>func IndexByte(s string, c byte) int // 字符c在s中第一次出现的位置，不存在则返回-</li>
<li>func IndexAny(s, chars string) int // 字符串chars中的任一utf-8码值在s中第一次出现的位置，如果不存在或者chars为空字符串则返回-1</li>
<li>func IndexFunc(s string, f func(rune) bool) int // s中第一个满足函数f的位置i（该处的utf-8码值r满足f(r)==true），不存在则返回-1</li>
<li>func LastIndex(s, sep string) int // 子串sep在字符串s中最后一次出现的位置，不存在则返回-1</li>
</ul>
<h2 id="字符处理"><a href="#字符处理" class="headerlink" title="字符处理"></a>字符处理</h2><ul>
<li>func Title(s string) string // 返回s中每个单词的首字母都改为标题格式的字符串拷贝</li>
<li>func ToLower(s string) string // 返回将所有字母都转为对应的小写版本的拷贝</li>
<li>func ToUpper(s string) string // 返回将所有字母都转为对应的大写版本的拷贝</li>
<li>func Repeat(s string, count int) string // 返回count个s串联的字符串</li>
<li>func Replace(s, old, new string, n int) string // 返回将s中前n个不重叠old子串都替换为new的新字符串，如果n&lt;0会替换所有old子串</li>
<li>func Map(mapping func(rune) rune, s string) string // 将s的每一个unicode码值r都替换为mapping(r)，返回这些新码值组成的字符串拷贝。如果mapping返回一个负值，将会丢弃该码值而不会被替换</li>
</ul>
<h2 id="字符串前后端处理"><a href="#字符串前后端处理" class="headerlink" title="字符串前后端处理"></a>字符串前后端处理</h2><ul>
<li>func Trim(s string, cutset string) string // 返回将s前后端所有cutset包含的utf-8码值都去掉的字符串</li>
<li>func TrimSpace(s string) string // 返回将s前后端所有空白（unicode.IsSpace指定）都去掉的字符串</li>
<li>func TrimFunc(s string, f func(rune) bool) string // 返回将s前后端所有满足f的unicode码值都去掉的字符串</li>
</ul>
<h2 id="分割与合并"><a href="#分割与合并" class="headerlink" title="分割与合并"></a>分割与合并</h2><ul>
<li>func Fields(s string) []string // 返回将字符串按照空白（通过unicode.IsSpace判断，可以是一到多个连续的空白字符）分割的多个字符串</li>
<li>func Split(s, sep string) []string // 用去掉s中出现的sep的方式进行分割，会分割到结尾，并返回生成的所有片段组成的切片</li>
<li>func Join(a []string, sep string) string // 将一系列字符串连接为一个字符串，之间用sep来分隔</li>
</ul>
<h1 id="Reader结构体"><a href="#Reader结构体" class="headerlink" title="Reader结构体"></a>Reader结构体</h1><p>Reader 类型从一个字符串读取数据，实现了io.Reader, io.Seeker等接口。</p>
<ul>
<li>func NewReader(s string) *Reader // 通过字符串 s 创建一个 Reader</li>
<li>func (r *Reader) Len() int // 返回 r 还没有读取部分的长度</li>
<li>func (r *Reader) Read(b []byte) (n int, err error) // 读取部分数据到 b 中，读取的长度取决于 b 的容量</li>
<li>func (r *Reader) ReadByte() (b byte, err error) // 从 r 中读取一字节数据</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// go 标准库 strings.Reader</span></div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    s := <span class="string">"hello world"</span></div><div class="line">    <span class="comment">// 创建 Reader</span></div><div class="line">    r := strings.NewReader(s)</div><div class="line"> </div><div class="line">    fmt.Println(r) <span class="comment">// &amp;amp;&#123;hello world 0 -1&#125;</span></div><div class="line">    fmt.Println(r.Size()) <span class="comment">// 11 获取字符串长度</span></div><div class="line">    fmt.Println(r.Len()) <span class="comment">// 11 获取未读取长度</span></div><div class="line"> </div><div class="line">    <span class="comment">// 读取前6个字符</span></div><div class="line">    <span class="keyword">for</span> r.Len() &lt; <span class="number">5</span> &#123;</div><div class="line">        b, err := r.ReadByte() <span class="comment">// 读取1 byte</span></div><div class="line">        fmt.Println(<span class="keyword">string</span>(b), err, r.Len(), r.Size())</div><div class="line">        <span class="comment">// h &amp;lt;nil&amp;gt; 10 11</span></div><div class="line">        <span class="comment">// e &amp;lt;nil&amp;gt; 9 11</span></div><div class="line">        <span class="comment">// l &amp;lt;nil&amp;gt; 8 11</span></div><div class="line">        <span class="comment">// l &amp;lt;nil&amp;gt; 7 11</span></div><div class="line">        <span class="comment">// o &amp;lt;nil&amp;gt; 6 11</span></div><div class="line">        <span class="comment">//   &amp;lt;nil&amp;gt; 5 11</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// 读取还未被读取字符串中5字符的数据</span></div><div class="line">    b_s := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)</div><div class="line">    n, err := r.Read(b_s)</div><div class="line">    fmt.Println(<span class="keyword">string</span>(b_s), n ,err) <span class="comment">// world 5 &amp;lt;nil&amp;gt;</span></div><div class="line">    fmt.Println(r.Size()) <span class="comment">// 11</span></div><div class="line">    fmt.Println(r.Len()) <span class="comment">// 0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Replacer-结构体"><a href="#Replacer-结构体" class="headerlink" title="Replacer 结构体"></a>Replacer 结构体</h1><p>Replacer 类型实现字符串替换的操作</p>
<ul>
<li>func NewReplacer(oldnew …string) <em>Replacer // 使用提供的多组old、new字符串对创建一个</em>Replacer</li>
<li>func (r *Replacer) Replace(s string) string // 返回s 所有替换完后的拷贝</li>
<li>func (r *Replacer) WriteString(w io.Writer, s string) (n int, err error) // 向w中写入s替换完后的拷贝</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// go 标准库 strings.Replacer</div><div class="line">package main</div><div class="line"> </div><div class="line">import (</div><div class="line">    "fmt"</div><div class="line">    "strings"</div><div class="line">    "os"</div><div class="line">)</div><div class="line"> </div><div class="line">func main() &#123;</div><div class="line">    s := "</div><div class="line"> </div><div class="line">Go Language</div><div class="line"> </div><div class="line">"</div><div class="line">    r := strings.NewReplacer("&amp;lt;", "&amp;lt;", "&amp;gt;", "&amp;gt;")</div><div class="line">    fmt.Println(r.Replace(s))</div><div class="line"> </div><div class="line">    r.WriteString(os.Stdout, s)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;strings 包实现了用于操作字符串的简单函数，包括 string 导出函数和 Reader, Replacer 两个结构体。&lt;/p&gt;
&lt;h1 id=&quot;strings-常用导出函数&quot;&gt;&lt;a href=&quot;#strings-常用导出函数&quot; class=&quot;headerlink&quot;
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础⑨Go接口和嵌入类型</title>
    <link href="http://liuguoquan727.github.io/2017/05/11/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E2%91%A8Go%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B5%8C%E5%85%A5%E7%B1%BB%E5%9E%8B/"/>
    <id>http://liuguoquan727.github.io/2017/05/11/Go语言基础⑨Go接口和嵌入类型/</id>
    <published>2017-05-11T13:50:53.000Z</published>
    <updated>2017-06-11T00:00:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是一种约定，它是一个抽象的类型，和我们见到的具体的类型如int、map、slice等不一样。具体的类型，我们可以知道它是什么，并且可以知道可以用它做什么；但是接口不一样，接口是抽象的，它只有一组接口方法，我们并不知道它的内部实现，所以我们不知道接口是什么，但是我们知道可以利用它提供的方法做什么。</p>
<p>抽象就是接口的优势，它不用和具体的实现细节绑定在一起，我们只需定义接口，告诉编码人员它可以做什么，这样我们可以把具体实现分开，这样编码就会更加灵活方面，适应能力也会非常强。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> b bytes.Buffer</div><div class="line">	fmt.Fprint(&amp;b,<span class="string">"Hello World"</span>)</div><div class="line">	fmt.Println(b.String())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是一个使用接口的例子，我们先看下fmt.Fprint函数的实现。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprint</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">	p := newPrinter()</div><div class="line">	p.doPrint(a)</div><div class="line">	n, err = w.Write(p.buf)</div><div class="line">	p.free()</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的源代码中，我们可以看到，<code>fmt.Fprint</code>函数的第一个参数是<code>io.Writer</code>这个接口，所以只要实现了这个接口的具体类型都可以作为参数传递给fmt.Fprint函数，而bytes.Buffer恰恰实现了<code>io.Writer</code>接口，所以可以作为参数传递给<code>fmt.Fprint</code>函数。</p>
<h2 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h2><p>我们前面提过接口是用来定义行为的类型，它是抽象的，这些定义的行为不是由接口直接实现，而是通过方法由用户定义的类型实现。如果用户定义的类型，实现了接口类型声明的所有方法，那么这个用户定义的类型就实现了这个接口，所以这个用户定义类型的值就可以赋值给接口类型的值。</p>
<p>赋值操作执行后，如果我们对接口方法执行调用，其实是调用存储的用户定义类型的对应方法，这里我们可以把用户定义的类型称之为<strong>实体类型</strong>。</p>
<p>我们可以定义很多类型，让它们实现一个接口，那么这些类型都可以赋值给这个接口，这时候接口方法的调用，其实就是对应实体类型对应方法的调用，这就是多态。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> a animal</div><div class="line">	<span class="keyword">var</span> c cat</div><div class="line">	a=c</div><div class="line">	a.printInfo()</div><div class="line">	<span class="comment">//使用另外一个类型赋值</span></div><div class="line">	<span class="keyword">var</span> d dog</div><div class="line">	a=d</div><div class="line">	a.printInfo()</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> animal <span class="keyword">interface</span> &#123;</div><div class="line">	printInfo()</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> cat <span class="keyword">int</span></div><div class="line"><span class="keyword">type</span> dog <span class="keyword">int</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cat)</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(<span class="string">"a cat"</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(<span class="string">"a dog"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">a cat</div><div class="line">a cat</div><div class="line">a dog</div><div class="line">a dog</div></pre></td></tr></table></figure>
<p>以上例子演示了一个多态。我们定义了一个接口animal,然后定义了两种类型cat和dog实现了接口animal。在使用的时候，分别把类型cat的值c、类型dog的值d赋值给接口animal的值a,然后分别执行a的printInfo方法，可以看到不同的输出。</p>
<blockquote>
<p>接口的值是一个两个字长度的数据结构，第一个字<strong>包含一个指向内部表结构的指针</strong>，这个内部表里存储的有实体类型的信息以及相关联的方法集；第二个字<strong>包含的是一个指向存储的实体类型值的指针</strong>。所以接口的值结构其实是两个指针，这也可以说明接口其实一个引用类型。</p>
</blockquote>
<h2 id="方法集"><a href="#方法集" class="headerlink" title="方法集"></a>方法集</h2><p>我们都知道，如果要实现一个接口，必须实现这个接口提供的所有方法，但是实现方法的时候，我们可以使用指针接收者实现，也可以使用值接收者实现，这两者是有区别的，下面我们就好好分析下这两者的区别。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> c cat</div><div class="line">	<span class="comment">//值作为参数传递</span></div><div class="line">	invoke(c)</div><div class="line">&#125;</div><div class="line"><span class="comment">//需要一个animal接口作为参数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">invoke</span><span class="params">(a animal)</span></span>&#123;</div><div class="line">	a.printInfo()</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> animal <span class="keyword">interface</span> &#123;</div><div class="line">	printInfo()</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> cat <span class="keyword">int</span></div><div class="line"><span class="comment">//值接收者实现animal接口</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cat)</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(<span class="string">"a cat"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还是原来的例子改改，增加一个invoke函数，该函数接收一个animal接口类型的参数，例子中传递参数的时候，也是以类型cat的值c传递的，运行程序可以正常执行。现在我们稍微改造一下，使用类型cat的指针&amp;c作为参数传递。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> c cat</div><div class="line">	<span class="comment">//指针作为参数传递</span></div><div class="line">	invoke(&amp;c)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只修改这一处，其他保持不变，我们运行程序，发现也可以正常执行。通过这个例子我们可以得出结论：<strong>实体类型以值接收者实现接口的时候，不管是实体类型的值，还是实体类型值的指针，都实现了该接口</strong>。</p>
<p>下面我们把接收者改为指针试试。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> c cat</div><div class="line">	<span class="comment">//值作为参数传递</span></div><div class="line">	invoke(c)</div><div class="line">&#125;</div><div class="line"><span class="comment">//需要一个animal接口作为参数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">invoke</span><span class="params">(a animal)</span></span>&#123;</div><div class="line">	a.printInfo()</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> animal <span class="keyword">interface</span> &#123;</div><div class="line">	printInfo()</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> cat <span class="keyword">int</span></div><div class="line"><span class="comment">//指针接收者实现animal接口</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cat)</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(<span class="string">"a cat"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子中把实现接口的接收者改为指针，但是传递参数的时候，我们还是按值进行传递，点击运行程序，会出现以下异常提示：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./main.go:<span class="number">10</span>: cannot use c (<span class="keyword">type</span> cat) <span class="keyword">as</span> <span class="keyword">type</span> animal <span class="keyword">in</span> argument <span class="keyword">to</span> invoke:</div><div class="line">	cat does <span class="keyword">not</span> implement animal (printInfo <span class="function"><span class="keyword">method</span> <span class="title">has</span> <span class="title">pointer</span> <span class="title">receiver</span>)</span></div></pre></td></tr></table></figure>
<p>提示中告诉我们，说cat没有实现animal接口，因为printInfo方法有一个指针接收者，所以cat类型的值c不能作为接口类型animal传参使用。下面我们再稍微修改下，改为以指针作为参数传递。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> c cat</div><div class="line">	<span class="comment">//指针作为参数传递</span></div><div class="line">	invoke(&amp;c)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他都不变，只是把以前使用值的参数，改为使用指针作为参数，我们再运行程序，就可以正常运行了。由此可见<strong>实体类型以指针接收者实现接口的时候，只有指向这个类型的指针才被认为实现了该接口</strong>。</p>
<h1 id="嵌入类型"><a href="#嵌入类型" class="headerlink" title="嵌入类型"></a>嵌入类型</h1><p>嵌入类型，或者嵌套类型，这是一种可以把已有的类型声明在新的类型里的一种方式，这种功能对代码复用非常重要。</p>
<p>在其他语言中，有继承可以做同样的事情，但是在Go语言中，没有继承的概念，Go提倡的代码复用的方式是组合，所以这也是嵌入类型的意义所在，组合而不是继承，所以Go才会更灵活。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</div><div class="line">	Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</div><div class="line">	Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> Closer <span class="keyword">interface</span> &#123;</div><div class="line">	Close() error</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</div><div class="line">	Reader</div><div class="line">	Writer</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> ReadCloser <span class="keyword">interface</span> &#123;</div><div class="line">	Reader</div><div class="line">	Closer</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> WriteCloser <span class="keyword">interface</span> &#123;</div><div class="line">	Writer</div><div class="line">	Closer</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是标准库io包里，我们常用的接口，可以看到ReadWriter接口是嵌入Reader和Reader接口而组合成的新接口，这样我们就不用重复的定义被嵌入接口里的方法，直接通过嵌入就可以了。嵌入类型同样适用于结构体类型，我们再来看个例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</div><div class="line">	name <span class="keyword">string</span></div><div class="line">	email <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> admin <span class="keyword">struct</span> &#123;</div><div class="line">	user</div><div class="line">	level <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>嵌入后，被嵌入的类型称之为内部类型、新定义的类型称之为外部类型，这里user就是内部类型，而admin是外部类型。</p>
<p>通过嵌入类型，与内部类型相关联的所有字段、方法、标志符等等所有，都会被外包类型所拥有，就像外部类型自己的一样，这就达到了代码快捷复用组合的目的，而且定义非常简单，只需声明这个类型的名字就可以了。</p>
<p>同时，外部类型还可以添加自己的方法、字段属性等，可以很方便的扩展外部类型的功能。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	ad:=admin&#123;user&#123;<span class="string">"张三"</span>,<span class="string">"zhangsan@flysnow.org"</span>&#125;,<span class="string">"管理员"</span>&#125;</div><div class="line">	fmt.Println(<span class="string">"可以直接调用,名字为："</span>,ad.name)</div><div class="line">	fmt.Println(<span class="string">"也可以通过内部类型调用,名字为："</span>,ad.user.name)</div><div class="line">	fmt.Println(<span class="string">"但是新增加的属性只能直接调用，级别为："</span>,ad.level)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是嵌入类型的使用，可以看到，我们在初始化的时候，采用的是字面值的方式，所以要按其定义的结构进行初始化，先初始化user这个内部类型的，再初始化新增的level 属性。</p>
<p>对于内部类型的属性和方法访问上，我们可以用外部类型直接访问，也可以通过内部类型进行访问；但是我们为<strong>外部类型新增的方法属性字段，只能使用外部类型访问，因为内部类型没有这些</strong>。</p>
<p>当然，外部类型也可以声明同名的字段或者方法，来覆盖内部类型的，这种情况方法比较多，我们以方法为例</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	ad:=admin&#123;user&#123;<span class="string">"张三"</span>,<span class="string">"zhangsan@flysnow.org"</span>&#125;,<span class="string">"管理员"</span>&#125;</div><div class="line">	ad.user.sayHello()</div><div class="line">	ad.sayHello()</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</div><div class="line">	name <span class="keyword">string</span></div><div class="line">	email <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> admin <span class="keyword">struct</span> &#123;</div><div class="line">	user</div><div class="line">	level <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(<span class="string">"Hello，i am a user"</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a admin)</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(<span class="string">"Hello，i am a admin"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内部类型user有一个sayHello方法，外部类型对其进行了覆盖，同名重写sayHello，然后我们在main方法里分别访问这两个类型的方法，打印输出:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hello，i am a user</div><div class="line">Hello，i am a admin</div></pre></td></tr></table></figure>
<p>嵌入类型的强大，还体现在：<strong>如果内部类型实现了某个接口，那么外部类型也被认为实现了这个接口</strong>。我们稍微改造下例子看下。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	ad:=admin&#123;user&#123;<span class="string">"张三"</span>,<span class="string">"zhangsan@flysnow.org"</span>&#125;,<span class="string">"管理员"</span>&#125;</div><div class="line">	sayHello(ad.user)<span class="comment">//使用user作为参数</span></div><div class="line">	sayHello(ad)<span class="comment">//使用admin作为参数</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> Hello <span class="keyword">interface</span> &#123;</div><div class="line">	hello()</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(<span class="string">"Hello，i am a user"</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(h Hello)</span></span>&#123;</div><div class="line">	h.hello()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现这个接口，最后我们定义了一个sayHello方法，它接受一个Hello接口类型的参数，最终我们在main函数演示的时候，发现不管是user类型，还是admin类型作为参数传递给sayHello方法的时候，都可以正常调用。</p>
<p>这里就可以说明admin实现了接口Hello,但是我们又没有显示的声明类型admin实现，所以这个实现是通过内部类型user实现的，因为admin包含了user所有的方法函数，所以也就实现了接口Hello。</p>
<p>当然外部类型也可以重新实现，只需要像上面例子一样覆盖同名的方法即可。这里要说明的是，不管我们如何同名覆盖，都不会影响内部类型，我们还可以通过访问内部类型来访问它的方法、属性字段等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;p&gt;接口是一种约定，它是一个抽象的类型，和我们见到的具体的类型如int、map、slice等不一样。具体的类型，我们可以知道它是什么，并且可以知
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础⑧Go Map</title>
    <link href="http://liuguoquan727.github.io/2017/05/10/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E2%91%A7Go%20Map/"/>
    <id>http://liuguoquan727.github.io/2017/05/10/Go语言基础⑧Go Map/</id>
    <published>2017-05-10T13:50:53.000Z</published>
    <updated>2017-06-06T06:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Map是基于散列表来实现，就是我们常说的Hash表，所以我们每次迭代Map的时候，打印的Key和Value是无序的，<strong>Map存储的是无序的键值对集合。</strong></p>
<h1 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h1><ul>
<li><strong>make方式</strong></li>
</ul>
<p>示例中创建了一个键类型为string的，值类型为int的map，并存储一个键值对</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dict:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</div><div class="line">dict[<span class="string">"张三"</span>] = <span class="number">43</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>使用map字面量的方式创建和初始化map</strong></li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"张三"</span>:<span class="number">43</span>&#125;</div><div class="line">dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"张三"</span>:<span class="number">43</span>,<span class="string">"李四"</span>:<span class="number">50</span>&#125;</div><div class="line">dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125; <span class="comment">//空Map</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>创建nil的Map</strong></li>
</ul>
<p>nil的Map是未初始化的，所以我们可以只声明一个变量，既不能使用map字面量，也不能使用make函数分配内存。<br>我们是不能对nil的Map操作存储键值对的，必须要初始化后才可以，比如使用make函数,为其开启一块可以存储数据的内存，也就是初始化。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dict <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">dict = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>) <span class="comment">//开辟内存</span></div><div class="line">dict[<span class="string">"张三"</span>] = <span class="number">43</span></div><div class="line">fmt.Println(dict)</div></pre></td></tr></table></figure>
<blockquote>
<p>Map的键可以是任何值，键的类型可以是内置的类型，也可以是结构类型，但是不管怎么样，这个键可以使用<code>==</code>运算符进行比较，所以像切片、函数以及含有切片的结构类型就不能用于Map的键了，因为他们具有引用的语义，不可比较。对于Map的值来说，就没有什么限制了，切片这种在键里不能用的，完全可以用在值里。</p>
</blockquote>
<h1 id="使用Map"><a href="#使用Map" class="headerlink" title="使用Map"></a>使用Map</h1><h2 id="访问Map"><a href="#访问Map" class="headerlink" title="访问Map"></a>访问Map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dict := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</div><div class="line">dict[<span class="string">"张三"</span>] = <span class="number">43</span></div><div class="line">age := dict[<span class="string">"张三"</span>]</div><div class="line">age,exists := dict[<span class="string">"李四"</span>]</div><div class="line"><span class="built_in">delete</span>(dict,<span class="string">"张三"</span>) <span class="comment">//删除</span></div></pre></td></tr></table></figure>
<ul>
<li><p><code>age,exists := dict[&quot;李四&quot;]</code>第一个返回值是键的值；第二个返回值标记这个键是否存在，这是一个boolean类型的变量，我们判断它就知道该键是否存在了。</p>
</li>
<li><p>delete函数删除不存在的键也是可以的，只是没有任何作用。</p>
</li>
</ul>
<h2 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"张三"</span>: <span class="number">43</span>&#125;</div><div class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> dict &#123;</div><div class="line">	fmt.Println(key, value)</div><div class="line">&#125;</div><div class="line"></div><div class="line">dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"王五"</span>: <span class="number">60</span>, <span class="string">"张三"</span>: <span class="number">43</span>&#125;</div><div class="line"><span class="keyword">var</span> names []<span class="keyword">string</span></div><div class="line"><span class="keyword">for</span> name := <span class="keyword">range</span> dict &#123;</div><div class="line">	names = <span class="built_in">append</span>(names, name)</div><div class="line">&#125;</div><div class="line">sort.Strings(names) <span class="comment">//排序</span></div><div class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> names &#123; <span class="comment">//range 一个Map的时候，也可以使用一个返回值，这个默认的返回值就是Map的键。</span></div><div class="line">	fmt.Println(key, dict[key])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>range 一个Map的时候，也可以使用一个返回值，这个默认的返回值就是Map的键。</p>
</blockquote>
<h1 id="函数间传递Map"><a href="#函数间传递Map" class="headerlink" title="函数间传递Map"></a>函数间传递Map</h1><p>函数间传递Map是不会拷贝一个该Map的副本的，也就是说如果一个Map传递给一个函数，该函数对这个Map做了修改，那么这个Map的所有引用，都会同步这个修改。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"王五"</span>: <span class="number">60</span>, <span class="string">"张三"</span>: <span class="number">43</span>&#125;</div><div class="line">	modify(dict)</div><div class="line">	fmt.Println(dict[<span class="string">"张三"</span>])</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(dict <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	dict[<span class="string">"张三"</span>] = <span class="number">10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.flysnow.org/2017/03/23/go-in-action-go-map.html" target="_blank" rel="external">Go Map</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Map是基于散列表来实现，就是我们常说的Hash表，所以我们每次迭代Map的时候，打印的Key和Value是无序的，&lt;strong&gt;Map存储的是无序的键值对集合。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;声明和初始化&quot;&gt;&lt;a href=&quot;#声明和初始化&quot; class=&quot;
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础⑦Go Slice</title>
    <link href="http://liuguoquan727.github.io/2017/05/10/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E2%91%A6Go%20Slice/"/>
    <id>http://liuguoquan727.github.io/2017/05/10/Go语言基础⑦Go Slice/</id>
    <published>2017-05-10T13:40:53.000Z</published>
    <updated>2017-05-11T09:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>切片是基于数组实现的，它的底层是数组，它自己本身非常小，可以理解为对底层数组的抽象。因为基于数组实现，所以它的底层的内存是连续分配的，效率非常高，还可以通过索引或迭代获得数据。</p>
<p>切片对象非常小，是因为它是只有3个字段的数据结构：一个是指向底层数组的指针，一个是切片的长度，一个是切片的容量。这3个字段，就是Go语言操作底层数组的元数据，有了它们，我们就可以任意的操作切片了。</p>
<h1 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h1><ul>
<li><strong>make方式</strong></li>
</ul>
<p>使用内置的make函数时，需要传入一个参数，指定切片的长度，例子中我们使用的时5，这时候切片的容量也是5。当然我们也可以单独指定切片的容量。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">slice:=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">5</span>) <span class="comment">//5是长度</span></div><div class="line">slice:=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">5</span>,<span class="number">10</span>) <span class="comment">//10是容量</span></div></pre></td></tr></table></figure>
<p>因为切片的底层是数组，所以创建切片时，如果不指定字面值的话，默认值就是数组的元素的零值。这里我们所以指定了容量是10，但是我们只能访问5个元素，因为切片的长度是5，剩下的5个元素，需要切片扩充后才可以访问。</p>
<blockquote>
<p>容量必须&gt;=长度，我们是不能创建长度大于容量的切片的。</p>
</blockquote>
<ul>
<li><strong>使用字面量，就是指定初始化的值</strong></li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">slice:=[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; <span class="comment">//不用指定[]的值</span></div><div class="line">slice:=[]<span class="keyword">int</span>&#123;<span class="number">4</span>:<span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>基于现有的数组或者切片创建</strong></li>
</ul>
<p>基于现有的切片或者数组创建，使用[i:j]这样的操作符即可，她表示以i索引开始，到j索引结束,截取原数组或者切片，创建而成的新切片，新切片的值包含原切片的i索引，但是不包含j索引。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">slice1 := slice[:]</div><div class="line">slice2 := slice[<span class="number">0</span>:]</div><div class="line">slice3 := slice[:<span class="number">5</span>]</div><div class="line"></div><div class="line">fmt.Println(slice1)</div><div class="line">fmt.Println(slice2)</div><div class="line">fmt.Println(slice3)</div></pre></td></tr></table></figure>
<p>i如果省略，默认是0；j如果省略默认是原数组或者切片的长度,所以例子中的三个新切片的值是一样的。这里注意的是i和j都不能超过原切片或者数组的索引。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">newSlice := slice[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line">newSlice[<span class="number">0</span>] = <span class="number">10</span></div><div class="line">	</div><div class="line">fmt.Println(slice)</div><div class="line">fmt.Println(newSlice)</div></pre></td></tr></table></figure>
<p>新的切片和原切片共用的是一个底层数组，所以当修改的时候，底层数组的值就会被改变，所以原切片的值也改变了。当然对于基于数组的切片也一样的。</p>
<h1 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h1><p>切片算是一个动态数组，所以它可以按需增长，我们使用内置append函数即可。append函数可以为一个切片追加一个元素，至于如何增加、返回的是原切片还是一个新切片、长度和容量如何改变这些细节，append函数都会帮我们自动处理。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">newSlice := slice[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line">	</div><div class="line">newSlice=<span class="built_in">append</span>(newSlice,<span class="number">10</span>)</div><div class="line">fmt.Println(newSlice)</div><div class="line">fmt.Println(slice)</div><div class="line"><span class="comment">//Output</span></div><div class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">10</span>]</div><div class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">10</span> <span class="number">5</span>]</div></pre></td></tr></table></figure>
<p>append函数会智能的增长底层数组的容量，目前的算法是：容量小于1000个时，总是成倍的增长，一旦容量超过1000个，增长因子设为1.25，也就是说每次会增加25%的容量。</p>
<h1 id="使用切片"><a href="#使用切片" class="headerlink" title="使用切片"></a>使用切片</h1><h2 id="访问切片"><a href="#访问切片" class="headerlink" title="访问切片"></a>访问切片</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">fmt.Println(slice[<span class="number">2</span>]) <span class="comment">//获取值</span></div><div class="line">slice[<span class="number">2</span>] = <span class="number">10</span> <span class="comment">//修改值</span></div><div class="line">fmt.Println(slice[<span class="number">2</span>]) <span class="comment">//输出10</span></div></pre></td></tr></table></figure>
<h2 id="迭代切片"><a href="#迭代切片" class="headerlink" title="迭代切片"></a>迭代切片</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//for range</span></div><div class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line"><span class="keyword">for</span> i,v:=<span class="keyword">range</span> slice&#123;</div><div class="line">	fmt.Printf(<span class="string">"索引:%d,值:%d\n"</span>,i,v)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//for range</span></div><div class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line"><span class="keyword">for</span> _,v:=<span class="keyword">range</span> slice&#123; <span class="comment">// _ 忽略索引</span></div><div class="line">	fmt.Printf(<span class="string">"值:%d\n"</span>,v)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//len</span></div><div class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(slice); i++ &#123;</div><div class="line">	fmt.Printf(<span class="string">"值:%d\n"</span>, slice[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="在函数间传递切片"><a href="#在函数间传递切片" class="headerlink" title="在函数间传递切片"></a>在函数间传递切片</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">	fmt.Printf(<span class="string">"%p\n"</span>, &amp;slice)</div><div class="line">	modify(slice)</div><div class="line">	fmt.Println(slice)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(slice []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	fmt.Printf(<span class="string">"%p\n"</span>, &amp;slice)</div><div class="line">	slice[<span class="number">1</span>] = <span class="number">10</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="number">0xc420082060</span></div><div class="line"><span class="number">0xc420082080</span></div><div class="line">[<span class="number">1</span> <span class="number">10</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</div></pre></td></tr></table></figure>
<p>这两个切片的地址不一样，所以可以确认切片在函数间传递是复制的。而我们修改一个索引的值后，发现原切片的值也被修改了，说明它们共用一个底层数组。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.flysnow.org/2017/03/14/go-in-action-go-slice.html" target="_blank" rel="external">Go 切片</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;切片是基于数组实现的，它的底层是数组，它自己本身非常小，可以理解为对底层数组的抽象。因为基于数组实现，所以它的底层的内存是连续分配的，效率非常高，还可以通过索引或迭代获得数据。&lt;/p&gt;
&lt;p&gt;切片对象非常小，是因为它是只有3个字段的数据结构：一个是指向底层数组的指针，一个是
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础⑥数组</title>
    <link href="http://liuguoquan727.github.io/2017/05/10/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E2%91%A5Go%E6%95%B0%E7%BB%84/"/>
    <id>http://liuguoquan727.github.io/2017/05/10/Go语言基础⑥Go数组/</id>
    <published>2017-05-10T13:30:53.000Z</published>
    <updated>2017-05-11T09:20:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p>
<p>数组是长度固定的数据类型，必须存储一段相同类型的元素，而且这些元素是连续的。数组存储的类型可以是内置类型，比如整型或者字符串，也可以是自定义的数据结构。因为是连续的，所以索引比较好计算，所以我们可以很快的索引数组中的任何数据。</p>
<h1 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h1><p>数组的声明和初始化，和其他类型差不多。声明的原则是：</p>
<ol>
<li>指明存储数据的类型。</li>
<li>存储元素的数量，也就是数组长度。</li>
</ol>
<p>数组一旦声明后，其元素类型和大小都不能变了，如果还需要存储更多的元素怎么办？那么只能通过创建一个新的数组，然后把原来数组的数据复制过去。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array [<span class="number">5</span>]<span class="keyword">int</span> <span class="comment">//初始值为0</span></div><div class="line">array = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; <span class="comment">//初始化</span></div></pre></td></tr></table></figure>
<p>Go为我们提供了:=操作符，可以让我们在创建数组的时候直接初始化。这种简短变量声明的方式不仅适用于数组，还适用于任何数据类型，这也是Go语言中常用的方式。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array:=[<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</div></pre></td></tr></table></figure>
<p>有时候我们更懒，连数组的长度都不想指定，不过没有关系，使用…代替就好了，Go会自动推导出数组的长度。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array:=[...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</div></pre></td></tr></table></figure>
<p>假如我们只想给索引为1和3的数组初始化相应的值，其他都为0怎么做呢，直接的办法有：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array:=[<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<p>还有一种更好的办法，上面讲默认初始化为零值，那么我们就可以利用这个特性，只初始化索引1和3的值</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array:=[<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">3</span>:<span class="number">4</span>&#125; <span class="comment">//只初始化索引1和3的值</span></div></pre></td></tr></table></figure>
<h1 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h1><h2 id="索引访问"><a href="#索引访问" class="headerlink" title="索引访问"></a>索引访问</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">array:=[<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">3</span>:<span class="number">4</span>&#125;</div><div class="line">fmt.Printf(<span class="string">"%d\n"</span>,array[<span class="number">1</span>])</div><div class="line">array[<span class="number">1</span>] = <span class="number">3</span></div><div class="line">fmt.Printf(<span class="string">"%d\n"</span>,array[<span class="number">1</span>])</div></pre></td></tr></table></figure>
<h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//for</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">4</span>&#125;</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</div><div class="line">		fmt.Printf(<span class="string">"索引:%d,值:%d\n"</span>, i, array[i])</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//for range</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">4</span>&#125;</div><div class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> array &#123;</div><div class="line">		fmt.Printf(<span class="string">"索引:%d,值:%d\n"</span>, i, v)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h2><p>同样类型的数组是可以相互赋值的，不同类型的不行，会编译错误。那么什么是同样类型的数组呢？Go语言规定，必须是长度一样，并且每个元素的类型也一样的数组，才是同样类型的数组。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">4</span>&#125;</div><div class="line"><span class="keyword">var</span> array1 [<span class="number">5</span>]<span class="keyword">int</span> = array <span class="comment">//success</span></div><div class="line"><span class="keyword">var</span> array2 [<span class="number">4</span>]<span class="keyword">int</span> = array1 <span class="comment">//error</span></div></pre></td></tr></table></figure>
<h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>下面创建了一个指针数组，它的元素类型是指针，并且为索引1和3都创建了内存空间，其他索引是指针的零值nil。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">array := [<span class="number">5</span>]*<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="built_in">new</span>(<span class="keyword">int</span>), <span class="number">3</span>:<span class="built_in">new</span>(<span class="keyword">int</span>)&#125;</div><div class="line">*array[<span class="number">1</span>] = <span class="number">1</span> <span class="comment">//修改指针元素的值</span></div><div class="line"></div><div class="line"><span class="comment">//给未初始化的元素赋值</span></div><div class="line">array[<span class="number">0</span>] =<span class="built_in">new</span>(<span class="keyword">int</span>) <span class="comment">//分配内存</span></div><div class="line">*array[<span class="number">0</span>] = <span class="number">2</span> <span class="comment">//赋值</span></div><div class="line">fmt.Println(*array[<span class="number">0</span>]) <span class="comment">//取值</span></div></pre></td></tr></table></figure>
<h1 id="函数间传递数组"><a href="#函数间传递数组" class="headerlink" title="函数间传递数组"></a>函数间传递数组</h1><h2 id="数组传递"><a href="#数组传递" class="headerlink" title="数组传递"></a>数组传递</h2><blockquote>
<p>不改变原数组的值</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>:<span class="number">4</span>&#125;</div><div class="line">	modify(array)</div><div class="line">	fmt.Println(array)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(a [5]<span class="keyword">int</span>)</span></span>&#123;</div><div class="line">	a[<span class="number">1</span>] =<span class="number">3</span></div><div class="line">	fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数组指针传递"><a href="#数组指针传递" class="headerlink" title="数组指针传递"></a>数组指针传递</h2><blockquote>
<p>数组与原数组会同时改变</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>:<span class="number">4</span>&#125;</div><div class="line">	modify(&amp;array)</div><div class="line">	fmt.Println(array)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(a *[5]<span class="keyword">int</span>)</span></span>&#123;</div><div class="line">	a[<span class="number">1</span>] =<span class="number">3</span></div><div class="line">	fmt.Println(*a)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.flysnow.org/2017/03/13/go-in-action-go-array.html" target="_blank" rel="external">Go 数组</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;数组是长度固定的数据类型，必须存储一段相同类型的元素，而且这些元素是连续的。数组存储的类型可以是内置类型，比如整型或者字符串，也可以是自定义的数据结构。因为是连续的，所以索引比较好计算，所以我们可以很快的索引数组中的任何数据。&lt;/p&gt;
&lt;h1 id
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础⑤流程控制</title>
    <link href="http://liuguoquan727.github.io/2017/05/09/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E2%91%A4%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://liuguoquan727.github.io/2017/05/09/Go语言基础⑤流程控制/</id>
    <published>2017-05-09T13:30:53.000Z</published>
    <updated>2017-05-09T13:27:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="for"><a href="#for" class="headerlink" title="for"></a>for</h1><p>Go 只有一种循环结构：for 循环。基本的 for 循环由三部分组成，用分号隔开：</p>
<ul>
<li>初始化语句：在第一次迭代前执行</li>
<li>条件表达式：在每次迭代前求值</li>
<li>后置语句：在每次迭代的结尾执行</li>
</ul>
<p>初始化语句通常为一句短变量声明，该变量声明仅在 for 语句的作用域中可见。Go 的 for 语句后面没有小括号，大括号 { } 则是必须的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	sum := <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++ &#123;</div><div class="line">		sum += i</div><div class="line">	&#125;</div><div class="line">	fmt.Println(<span class="string">"sum:"</span>, sum) <span class="comment">// sum: 45</span></div><div class="line"></div><div class="line">	<span class="comment">// 初始化语句和后置语句是可选的</span></div><div class="line">	sum = <span class="number">1</span></div><div class="line">	<span class="keyword">for</span> ; sum &lt; <span class="number">1000</span>; &#123;</div><div class="line">		sum += sum</div><div class="line">	&#125;</div><div class="line">	fmt.Println(<span class="string">"sum:"</span>, sum) <span class="comment">// sum: 1024</span></div><div class="line"></div><div class="line">	<span class="comment">// 去掉分号 `;`, `for` 是 Go 中的 `while`</span></div><div class="line">	sum = <span class="number">1</span></div><div class="line">	<span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</div><div class="line">		sum += sum</div><div class="line">	&#125;</div><div class="line">	fmt.Println(<span class="string">"sum:"</span>, sum) <span class="comment">// sum: 1024</span></div><div class="line">	</div><div class="line">	<span class="comment">//无限循环</span></div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">	</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * go if 控制语句</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"math"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">    <span class="comment">// 表达式外无需小括号</span></div><div class="line">    <span class="keyword">if</span> x &lt;= <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> sqrt(-x) + <span class="string">"i"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fmt.Sprint(math.Sqrt(x))</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line">    <span class="comment">// 条件表达式前可以执行一个简单的语句</span></div><div class="line">    <span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</div><div class="line">        <span class="keyword">return</span> v</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 表达式前执行简单的语句，语句声明的变量作用域仅在 if 和对应的 else 块中使用</span></div><div class="line">        fmt.Printf(<span class="string">"%g &amp;gt;= %g\n"</span>, v, lim)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> lim</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(sqrt(<span class="number">2</span>), sqrt(<span class="number">-4</span>))</div><div class="line"> </div><div class="line">    fmt.Println(</div><div class="line">        pow(<span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>),</div><div class="line">        pow(<span class="number">3</span>, <span class="number">3</span>, <span class="number">20</span>),</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Go 的 if 语句与 for 循环类似，表达式外无需小括号 ( ) ，而大括号 { } 则是必须的。</p>
<h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * go switch 控制语句</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">switch</span> i := <span class="number">1</span>; i &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        fmt.Println(<span class="number">0</span>)</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        fmt.Println(<span class="number">1</span>)</div><div class="line">        <span class="keyword">fallthrough</span> <span class="comment">// 继续运行下面的代码，否则终止</span></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        fmt.Println(<span class="number">2</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 以上代码段输出</span></div><div class="line">    <span class="comment">// 1</span></div><div class="line">    <span class="comment">// 2</span></div><div class="line"> </div><div class="line">    <span class="comment">// 没有条件的 switch</span></div><div class="line">    t := time.Now()</div><div class="line">    <span class="keyword">switch</span> &#123;</div><div class="line">    <span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</div><div class="line">        fmt.Println(<span class="string">"早上好!"</span>)</div><div class="line">    <span class="keyword">case</span> t.Hour() &lt; <span class="number">17</span>:</div><div class="line">        fmt.Println(<span class="string">"下午好!"</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        fmt.Println(<span class="string">"晚上好!"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果在执行完每个分支的代码后，还希望继续执行后续分支的代码，可以使用 fallthrough 关键字来达到目的。。switch 的 case 语句从上到下顺次执行，直到匹配成功时停止。</p>
<p>没有条件的 switch 同 switch true 一样，这种形式能将一长串 if-then-else 写得更加清晰</p>
<h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><p>defer 语句会将函数推迟到外层函数返回之后执行，通常用于释放资源或错误处理。推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。推迟的函数调用会被压入一个栈中。 当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">"world"</span>)</div><div class="line">	fmt.Println(<span class="string">"hello"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="built_in">print</span>()</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"counting"</span>)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">		<span class="keyword">defer</span> fmt.Println(i)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(<span class="string">"done"</span>)</div><div class="line">	<span class="comment">//hello </span></div><div class="line">	<span class="comment">// world</span></div><div class="line">	<span class="comment">// counting</span></div><div class="line">	<span class="comment">// done</span></div><div class="line">	<span class="comment">// 9</span></div><div class="line">	<span class="comment">// 8</span></div><div class="line">	<span class="comment">// 7</span></div><div class="line">	<span class="comment">// 6</span></div><div class="line">	<span class="comment">// 5</span></div><div class="line">	<span class="comment">// 4</span></div><div class="line">	<span class="comment">// 3</span></div><div class="line">	<span class="comment">// 2</span></div><div class="line">	<span class="comment">// 1</span></div><div class="line">	<span class="comment">// 0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Break-与-continue"><a href="#Break-与-continue" class="headerlink" title="Break 与 continue"></a>Break 与 continue</h1><ul>
<li>break 语句的作用结果是跳过整个代码块，执行后续的代码。</li>
<li>continue 跳过本次循环的语句而直接进入下一次循环的过程。</li>
<li>关键字 break 可用于 for、switch、select 语句中，关键字 continue 仅能用于 for 循环中。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;for&quot;&gt;&lt;a href=&quot;#for&quot; class=&quot;headerlink&quot; title=&quot;for&quot;&gt;&lt;/a&gt;for&lt;/h1&gt;&lt;p&gt;Go 只有一种循环结构：for 循环。基本的 for 循环由三部分组成，用分号隔开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化语句：在第一次
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础④函数方法</title>
    <link href="http://liuguoquan727.github.io/2017/05/09/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E2%91%A3%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/"/>
    <id>http://liuguoquan727.github.io/2017/05/09/Go语言基础④函数方法/</id>
    <published>2017-05-09T12:52:53.000Z</published>
    <updated>2017-05-09T13:36:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数和方法，虽然概念不同，但是定义非常相似。函数的定义声明没有接收者，所以我们直接在go文件里，go包之下定义声明即可。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">**</div><div class="line"> * function 函数相关概念</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment">// 数字相加</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">substract</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> x - y</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 字符交换位置  多值返回</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> y, x</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 命名返回值</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    x = sum * <span class="number">4</span> / <span class="number">9</span></div><div class="line">    y = sum - x</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><ul>
<li>函数可以没有参数或接受多个参数。add 函数接受两个 int 类型的参数。需要注意类型在变量名后面。</li>
<li>当两个或多个连续的函数命名参数是同一类型，则除了最后一个类型之外，其他都可以省略。</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x <span class="built_in">string</span>, y <span class="built_in">string</span></div><div class="line">x, y <span class="built_in">string</span></div></pre></td></tr></table></figure>
<h2 id="多值返回"><a href="#多值返回" class="headerlink" title="多值返回"></a>多值返回</h2><p>函数可以返回任意数量的返回值。swap 函数返回了两个字符串。</p>
<ul>
<li>不能用容器对象接收多返回值。</li>
<li>多返回值可直接作为其他函数调用的实参。</li>
</ul>
<h2 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h2><p>Go 的返回值可以被命名，并且就像在函数体开头声明的变量那样使用。返回值的名称应当具有一定的意义，可以作为文档使用。没有参数的 return 语句返回各个返回变量的当前值。</p>
<h2 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h2><p>参数列表本质上就是 slice ，只能有一个，且必须是最后一个。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(s <span class="keyword">string</span>, n ...<span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;    <span class="keyword">var</span> x <span class="keyword">int</span>    <span class="keyword">for</span> _, i := <span class="keyword">range</span> n &#123;        x += i&#125;    <span class="keyword">return</span> fmt.Sprintf(s, x)&#125;<span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;    <span class="built_in">println</span>(test(<span class="string">"sum: %d"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))&#125;</div></pre></td></tr></table></figure>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>例子中的函数名称是小写开头的，它的作用域只属于所声明的包内使用，不能被其他包使用，如果我们把函数名以大写字母开头，该函数的作用域就大了，可以被其他包调用。这也是Go语言中大小写的用处。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>方法的声明和函数类似，他们的区别是：方法在定义的时候，会在func和方法名之间增加一个参数，这个参数就是接收者，这样我们定义的这个方法就和接收者绑定在了一起，称之为这个接收者的方法。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</div><div class="line">	name <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"the person name is "</span>+p.name</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	p:=person&#123;name:<span class="string">"张三"</span>&#125;</div><div class="line">	fmt.Println(p.String())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>func和方法名之间增加的参数<code>(p person)</code>,这个就是接收者。</p>
<h2 id="值接收者"><a href="#值接收者" class="headerlink" title="值接收者"></a>值接收者</h2><p>使用值类型接收者定义的方法，在调用的时候，使用的其实是值接收者的一个副本，所以对该值的任何操作，不会影响原来的类型变量。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	p:=person&#123;name:<span class="string">"张三"</span>&#125;</div><div class="line">	p.modify() <span class="comment">//值接收者，修改无效</span></div><div class="line">	fmt.Println(p.String())</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</div><div class="line">	name <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"the person name is "</span>+p.name</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">modify</span><span class="params">()</span></span>&#123;</div><div class="line">	p.name = <span class="string">"李四"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="指针接收者"><a href="#指针接收者" class="headerlink" title="指针接收者"></a>指针接收者</h2><p>如果我们使用一个指针作为接收者，那么就会其作用了，因为指针接收者传递的是一个指向原值指针的副本，指针的副本，指向的还是原来类型的值，所以修改时，同时也会影响原来类型变量的值。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	p:=person&#123;name:<span class="string">"张三"</span>&#125;</div><div class="line">	p.modify() <span class="comment">//指针接收者，修改有效 == (&amp;p).modify() </span></div><div class="line">	fmt.Println(p.String())</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</div><div class="line">	name <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"the person name is "</span>+p.name</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span> <span class="title">modify</span><span class="params">()</span></span>&#123;</div><div class="line">	p.name = <span class="string">"李四"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在调用方法的时候，传递的接收者本质上都是副本，只不过一个是这个值副本，一是指向这个值指针的副本。指针具有指向原有值的特性，所以修改了指针指向的值，也就修改了原有的值。我们可以简单的理解为值接收者使用的是值的副本来调用方法，而指针接收者使用实际的值来调用方法。</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.flysnow.org/2017/03/31/go-in-action-go-method.html" target="_blank" rel="external">Go 函数方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;p&gt;函数和方法，虽然概念不同，但是定义非常相似。函数的定义声明没有接收者，所以我们直接在go文件里，go包之下定义声明即可。&lt;/p&gt;
&lt;figu
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础③类型</title>
    <link href="http://liuguoquan727.github.io/2017/05/08/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E2%91%A2%E7%B1%BB%E5%9E%8B/"/>
    <id>http://liuguoquan727.github.io/2017/05/08/Go语言基础③类型/</id>
    <published>2017-05-08T13:30:53.000Z</published>
    <updated>2017-05-09T13:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>常量的定义与变量类似，使用 const 关键字修饰，用于存储不会改变的数据。常量只可以是字符、字符串、布尔或数字类型（整数型、浮点型和复数）的值。常量不能使用 := 语法定义。一个未指定类型的常量由上下文来决定其类型。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment">// 隐式类型数值常量</span></div><div class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></div><div class="line"></div><div class="line"><span class="comment">//显示类型</span></div><div class="line"><span class="keyword">const</span> b <span class="keyword">string</span> = <span class="string">"abc"</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 字符常量</span></div><div class="line">    <span class="keyword">const</span> World = <span class="string">"world"</span></div><div class="line"> </div><div class="line">    fmt.Println(<span class="string">"Hello "</span>, World)</div><div class="line">    fmt.Println(<span class="string">"the value of Pi is "</span>, Pi)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><code>var</code> 语句定义了一个变量的列表。跟函数的参数列表一样，类型在后面，<code>var</code> 语句可以定义在包或函数级别。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * variable 变量相关概念</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> a, b *<span class="keyword">int</span> <span class="comment">//声明指针类型</span></div><div class="line"><span class="keyword">var</span> c, python, java <span class="keyword">bool</span> <span class="comment">// 定义变量，类型在后面</span></div><div class="line"><span class="keyword">var</span> x, y, s = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"hello"</span> <span class="comment">// 初始化是使用表达式，则可以省略类型，变量从初始值中获得类型</span></div><div class="line"></div><div class="line"><span class="comment">//一般用于声明全局变量</span></div><div class="line"><span class="keyword">var</span> (</div><div class="line">    d <span class="keyword">int</span></div><div class="line">    f <span class="keyword">bool</span></div><div class="line">    str <span class="keyword">string</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> i <span class="keyword">int</span></div><div class="line">    fmt.Println(i, c, python, java)</div><div class="line"> </div><div class="line">    a, b := <span class="number">1</span>, <span class="string">"hello"</span> <span class="comment">// `:=` 简洁赋值语句用在明确类型的地方，用于替代 `var` 定义</span></div><div class="line">    fmt.Println(x, y, s, a, b)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h2><p>变量定义可以包含初始值，每个变量对应一个。如果初始化是使用表达式，则可以省略类型，变量将从初始值中获得类型。</p>
<h2 id="短声明变量"><a href="#短声明变量" class="headerlink" title="短声明变量"></a>短声明变量</h2><p>在函数中， := 简洁赋值语句用在明确类型的地方，用于替代 var 定义。:= 结构不能使用在函数外，函数外的每个语句都必须以关键字开始（ var 、 func 、等等）。</p>
<h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> <span class="comment">//布尔类型</span></div><div class="line"><span class="keyword">string</span>  <span class="comment">//字符串</span></div><div class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span>  <span class="comment">//整型</span></div><div class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span> <span class="comment">//无符号整数</span></div><div class="line"><span class="keyword">byte</span> <span class="comment">// uint8 的别名</span></div><div class="line"><span class="keyword">rune</span> <span class="comment">// int32 的别名, 代表一个Unicode码</span></div><div class="line"><span class="keyword">float32</span> <span class="keyword">float64</span> <span class="comment">//浮点数</span></div><div class="line"><span class="keyword">complex64</span> (<span class="number">32</span> 位实数和虚数)</div><div class="line"><span class="keyword">complex128</span> (<span class="number">64</span> 位实数和虚数)</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * go 数据类型</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"math"</span></div><div class="line">    <span class="string">"math/cmplx"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment">// 同导入语句一样，变量的定义“打包”在一个语法块中。</span></div><div class="line"><span class="keyword">var</span> (</div><div class="line">    ToBe   <span class="keyword">bool</span>       = <span class="literal">false</span></div><div class="line">    MaxInt <span class="keyword">uint64</span>     = <span class="number">1</span>&amp;lt;&amp;lt;<span class="number">64</span> - <span class="number">1</span></div><div class="line">    z      <span class="keyword">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">const</span> f = <span class="string">"%T(%v)\n"</span></div><div class="line">    fmt.Printf(f, ToBe, ToBe)     <span class="comment">// bool(false)</span></div><div class="line">    fmt.Printf(f, MaxInt, MaxInt) <span class="comment">// uint64(18446744073709551615)</span></div><div class="line">    fmt.Printf(f, z, z)           <span class="comment">// complex128((2+3i))</span></div><div class="line"> </div><div class="line">    <span class="comment">// 变量在定义时没有明确的初始化时会赋值为零值</span></div><div class="line">    <span class="keyword">var</span> i <span class="keyword">int</span></div><div class="line">    <span class="keyword">var</span> fl <span class="keyword">float64</span></div><div class="line">    <span class="keyword">var</span> b <span class="keyword">bool</span></div><div class="line">    <span class="keyword">var</span> s <span class="keyword">string</span></div><div class="line">    fmt.Printf(<span class="string">"%v %v %v %q\n"</span>, i, fl, b, s) <span class="comment">// 0 0 false ""</span></div><div class="line"> </div><div class="line">    <span class="comment">// 类型推导: 在定义一个变量却并不显式指定其类型时， 变量的类型由（等号）右侧的值推导得出</span></div><div class="line">    <span class="keyword">var</span> m <span class="keyword">int</span></div><div class="line">    n := m</div><div class="line">    fmt.Printf(f, m, m) <span class="comment">// int(0)</span></div><div class="line">    fmt.Printf(f, n, n) <span class="comment">// int(0)</span></div><div class="line"> </div><div class="line">    <span class="comment">// 类型转换</span></div><div class="line">    x, y := <span class="number">3</span>, <span class="number">4</span></div><div class="line">    z := math.Sqrt(<span class="keyword">float64</span>(x*x + y*y))</div><div class="line">    u := <span class="keyword">uint</span>(z)</div><div class="line">    fmt.Printf(f, x, x) <span class="comment">// int(3)</span></div><div class="line">    fmt.Printf(f, y, y) <span class="comment">// int(4)</span></div><div class="line">    fmt.Printf(f, z, z) <span class="comment">// float64(5)</span></div><div class="line">    fmt.Printf(f, u, u) <span class="comment">// uint(5)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>int，uint 和 uintptr 类型在32位的系统上一般是32位，而在64位系统上是64位。当你需要使用一个整数类型时，你应该首选 int，仅当有特别的理由才使用定长整数类型或者无符号整数类型</li>
<li>尽可能地使用 float64，因为 math 包中所有有关数学运算的函数都会要求接收这个类型</li>
<li>你可以通过增加前缀 0 来表示 8 进制数（如：077），增加前缀 0x 来表示 16 进制数（如：0xFF），以及使用 e 来表示 10 的连乘（如： 1e3 = 1000，或者 6.022e23 = 6.022 x 1e23）。</li>
<li>Go 中不允许不同类型之间的混合使用，但是对于常量的类型限制非常少，因此允许常量之间的混合使用。</li>
</ul>
<h2 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h2><p>变量在定义时没有明确的初始化时会赋值为零值</p>
<ul>
<li>int 数值类型为 0</li>
<li>bool 布尔类型为 false</li>
<li>string 字符串为 “” （空字符串）</li>
</ul>
<h2 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h2><p>在定义一个变量却并不显式指定其类型时（使用 := 语法或者 var = 表达式语法‘）， 变量的类型由（等号）右侧的值推导得出。</p>
<p>当右值定义了类型时，新变量的类型与其相同：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i <span class="keyword">int</span></div><div class="line">j := i <span class="comment">// j 也是一个 int</span></div></pre></td></tr></table></figure>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>表达式 <code>T(v)</code> 将值 v 转换为类型 T。Go 不同类型之间的项目赋值时需要显式转换。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">42</span></div><div class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</div><div class="line"><span class="keyword">var</span> u <span class="keyword">uint</span> = <span class="keyword">uint</span>(f)</div></pre></td></tr></table></figure>
<p>##格式化说明符</p>
<p>在格式化字符串里，%d 用于格式化整数（%x 和 %X 用于格式化 16 进制表示的数字），%g 用于格式化浮点型（%f 输出浮点数，%e 输出科学计数表示法），%0d 用于规定输出定长的整数，其中开头的数字 0 是必须的。</p>
<p>%n.mg 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f，例如：使用格式化字符串 %5.2e 来输出 3.4 的结果为 3.40e+00。</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h3><ul>
<li>按位与 &amp;</li>
<li>按位或 |</li>
<li>按位异或 ^</li>
<li>位清除 &amp;^：将指定位置上的值设置为 0。</li>
</ul>
<h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><ul>
<li>按位补足 ^</li>
<li>位左移 &lt;&lt;</li>
</ul>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span>&lt;&lt; <span class="number">10</span> // 等于 <span class="number">1</span> KB</div><div class="line"><span class="symbol">1 </span>&lt;&lt; <span class="number">20</span> // 等于 <span class="number">1</span> MB</div><div class="line"><span class="symbol">1 </span>&lt;&lt; <span class="number">30</span> // 等于 <span class="number">1</span> GB</div></pre></td></tr></table></figure>
<ul>
<li>位右移 &gt;&gt;</li>
</ul>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>Go 中拥有以下逻辑运算符：<code>==、!= 、&lt;、&lt;=、&gt;、&gt;=、&amp;&amp;、||、！</code>。</p>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>常见可用于整数和浮点数的二元运算符有<code>+、-、* 和 /</code>。</p>
<ul>
<li>/ 对于整数运算而言，结果依旧为整数，例如：<code>9 / 4 -&gt; 2</code></li>
<li>取余运算符只能作用于整数：<code>9 % 4 -&gt; 1</code></li>
</ul>
<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"math/rand"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">        a := rand.Int()</div><div class="line">        fmt.Printf(<span class="string">"%d / "</span>, a)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</div><div class="line">        r := rand.Intn(<span class="number">8</span>)</div><div class="line">        fmt.Printf(<span class="string">"%d / "</span>, r)</div><div class="line">    &#125;</div><div class="line">    fmt.Println()</div><div class="line">    timens := <span class="keyword">int64</span>(time.Now().Nanosecond())</div><div class="line">    rand.Seed(timens)</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">        fmt.Printf(<span class="string">"%2.2f / "</span>, <span class="number">100</span>*rand.Float32())</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><p>引用类型和原始的基本类型恰恰相反，它的修改可以影响到任何引用到它的变量。在Go语言中，引用类型有slice、map、接口、函数类型以及channel。</p>
<p>引用类型之所以可以引用，是因为我们创建引用类型的变量，其实是一个标头值，标头值里包含一个指针，指向底层的数据结构，当我们在函数中传递引用类型时，其实传递的是这个标头值的副本，它所指向的底层结构并没有被复制传递，这也是引用类型传递高效的原因。</p>
<blockquote>
<p>本质上，我们可以理解函数的传递都是值传递，只不过引用类型传递的是一个指向底层数据的指针，所以我们在操作的时候，可以修改共享的底层数据的值，进而影响到所有引用到这个共享底层数据的变量。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	ages := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"张三"</span>: <span class="number">20</span>&#125;</div><div class="line">	fmt.Println(ages)</div><div class="line">	modify(ages)</div><div class="line">	fmt.Println(ages)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	m[<span class="string">"张三"</span>] = <span class="number">10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h1><p>GO语言支持指针类型 <em>T，指针的指针 **T，以及包含包名前缀的 </em><package>.T。</package></p>
<ul>
<li>默认值 nil，没有 NULL 常量。</li>
<li>操作符 “&amp;” 取变量地址，”*” 透过指针访问 标对象。</li>
<li>不支持指针运算，不支持 “-&gt;” 运算符，直接用 “.” 访问 标成员。</li>
<li>&amp; 操作符会生成一个指向其操作数的指针</li>
<li><ul>
<li>操作符表示指针指向的底层值</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * go 语言指针</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    i, j := <span class="number">42</span>, <span class="number">36</span></div><div class="line"> </div><div class="line">    p := &amp;i <span class="comment">//&amp; 操作符会生成一个指向其操作数的指针。</span></div><div class="line">    fmt.Println(*p) <span class="comment">// 42 * 操作符表示指针指向的底层值。</span></div><div class="line">    *p = <span class="number">21</span></div><div class="line">    fmt.Println(i) <span class="comment">// 21</span></div><div class="line"> </div><div class="line">    p = &amp;j</div><div class="line">    *p = *p / <span class="number">4</span></div><div class="line">    fmt.Println(j) <span class="comment">// 9</span></div><div class="line">    mt.Println(p) <span class="comment">//打印指针地址</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>一个结构体（ struct ）就是一个字段的集合，结构体字段使用点号来访问。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment">//定义结构体</span></div><div class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</div><div class="line">    X <span class="keyword">int</span></div><div class="line">    Y <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> (</div><div class="line">    p1  = Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">//初始化 x=1 y = 2</span></div><div class="line">    p2  = Point&#123;X: <span class="number">1</span>&#125; <span class="comment">//初始化 x=1 y = 0</span></div><div class="line">    p3  = Point&#123;&#125;</div><div class="line">    pt1 = &amp;Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;)</div><div class="line"> </div><div class="line">    p := Point&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">    p.X = <span class="number">4</span> <span class="comment">// 结构体字段使用点号来访问</span></div><div class="line">    fmt.Println(p, p.Y)</div><div class="line"> </div><div class="line">    pt := &amp;p</div><div class="line">    pt.X = <span class="number">5</span> <span class="comment">// 使用隐式间接引用，直接写 `pt.X`</span></div><div class="line">    (*pt).Y = <span class="number">6</span> <span class="comment">// 通过 `(*pt).Y` 来访问其字段 `Y`</span></div><div class="line">    fmt.Println(p)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p>结构体字段可以通过结构体指针来访问。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pt := &amp;p</div><div class="line">pt.X = <span class="number">5</span> <span class="comment">// 使用隐式间接引用，直接写 `pt.X`</span></div><div class="line">(*pt).Y = <span class="number">6</span> <span class="comment">// 通过 `(*pt).Y` 来访问其字段 `Y`</span></div></pre></td></tr></table></figure>
<h2 id="结构体语法"><a href="#结构体语法" class="headerlink" title="结构体语法"></a>结构体语法</h2><ul>
<li>结构体文法通过直接列出字段的值来新分配一个结构体。</li>
<li>使用 Name: 语法可以仅列出部分字段。（字段名的顺序无关。）</li>
<li>特殊的前缀 &amp; 返回一个指向结构体的指针。</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">    p1  = Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</div><div class="line">    p2  = Point&#123;X: <span class="number">1</span>&#125;</div><div class="line">    p3  = Point&#123;&#125;</div><div class="line">    pt1 = &amp;amp;Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h1 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h1><p>Go语言支持我们自定义类型，比如刚刚上面的结构体类型，就是我们自定义的类型，这也是比较常用的自定义类型的方法。另外一个自定义类型的方法是基于一个已有的类型，就是基于一个现有的类型创造新的类型，这种也是使用<code>type</code>关键字。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Duration <span class="keyword">int64</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> i Duration = <span class="number">100</span></div><div class="line"><span class="keyword">var</span> j <span class="keyword">int64</span> = <span class="number">100</span></div></pre></td></tr></table></figure>
<p>但是本质上，他们并不是同一种类型，所以对于Go这种强类型语言，他们是不能相互赋值的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Duration <span class="keyword">int64</span></div><div class="line"><span class="keyword">var</span> dur Duration</div><div class="line">dur=<span class="keyword">int64</span>(<span class="number">100</span>) <span class="comment">//error</span></div><div class="line">fmt.Println(dur)</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.flysnow.org/2017/03/26/go-in-action-go-type.html" target="_blank" rel="external">Go 类型</a></p>
<p><a href="http://ironxu.com/709" target="_blank" rel="external">Go 之旅三: 复杂类型</a></p>
<p><a href=""></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常量&quot;&gt;&lt;a href=&quot;#常量&quot; class=&quot;headerlink&quot; title=&quot;常量&quot;&gt;&lt;/a&gt;常量&lt;/h1&gt;&lt;p&gt;常量的定义与变量类似，使用 const 关键字修饰，用于存储不会改变的数据。常量只可以是字符、字符串、布尔或数字类型（整数型、浮点型和复数）
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础②Go开发工具</title>
    <link href="http://liuguoquan727.github.io/2017/05/08/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E2%91%A1Go%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://liuguoquan727.github.io/2017/05/08/Go语言基础②Go开发工具/</id>
    <published>2017-05-08T13:00:53.000Z</published>
    <updated>2017-05-09T13:35:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Go语言中，我们很多操作都是通过go命令进行的，比如我们要执行go文件的编译，就需要使用go build命令，除了build命令之外，还有很多常用的命令，这一次我们就统一进行介绍，对常用命令有一个了解，这样我们就可以更容易的开发我们的Go程序了。</p>
<h1 id="go命令概览"><a href="#go命令概览" class="headerlink" title="go命令概览"></a>go命令概览</h1><p>打开 Mac 终端，运行 go 命令。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">➜  ~ <span class="keyword">go</span></div><div class="line">Go is a tool <span class="keyword">for</span> managing Go source code.</div><div class="line"></div><div class="line">Usage:</div><div class="line"></div><div class="line">	<span class="keyword">go</span> command [arguments]</div><div class="line"></div><div class="line">The commands are:</div><div class="line"></div><div class="line">	build       compile packages and dependencies</div><div class="line">	clean       remove object files</div><div class="line">	doc         show documentation <span class="keyword">for</span> <span class="keyword">package</span> or symbol</div><div class="line">	env         <span class="built_in">print</span> Go environment information</div><div class="line">	bug         start a bug report</div><div class="line">	fix         run <span class="keyword">go</span> tool fix on packages</div><div class="line">	fmt         run gofmt on <span class="keyword">package</span> sources</div><div class="line">	generate    generate Go files by processing source</div><div class="line">	get         download and install packages and dependencies</div><div class="line">	install     compile and install packages and dependencies</div><div class="line">	list        list packages</div><div class="line">	run         compile and run Go program</div><div class="line">	test        test packages</div><div class="line">	tool        run specified <span class="keyword">go</span> tool</div><div class="line">	version     <span class="built_in">print</span> Go version</div><div class="line">	vet         run <span class="keyword">go</span> tool vet on packages</div><div class="line"></div><div class="line">Use <span class="string">"go help [command]"</span> <span class="keyword">for</span> more information about a command.</div><div class="line"></div><div class="line">Additional help topics:</div><div class="line"></div><div class="line">	c           calling between Go and C</div><div class="line">	buildmode   description of build modes</div><div class="line">	filetype    file types</div><div class="line">	gopath      GOPATH environment variable</div><div class="line">	environment environment variables</div><div class="line">	importpath  <span class="keyword">import</span> path syntax</div><div class="line">	packages    description of <span class="keyword">package</span> lists</div><div class="line">	testflag    description of testing flags</div><div class="line">	testfunc    description of testing functions</div><div class="line"></div><div class="line">Use <span class="string">"go help [topic]"</span> <span class="keyword">for</span> more information about that topic.</div></pre></td></tr></table></figure>
<h1 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h1><p><strong>go build</strong>,是非常常用的命令，它可以启动编译，把我们的包和相关的依赖编译成一个可执行的文件。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usage: go build <span class="string">[-o output]</span> <span class="string">[-i]</span> <span class="string">[build flags]</span> <span class="string">[packages]</span></div></pre></td></tr></table></figure>
<p><code>go build</code>的使用比较简洁，所有的参数都可以忽略，直到只有go build，这个时候意味着使用当前目录进行编译，下面的几条命令是等价的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> build</div><div class="line"><span class="keyword">go</span> build .</div><div class="line"><span class="keyword">go</span> build hello.<span class="keyword">go</span></div></pre></td></tr></table></figure>
<p>以上这三种写法，都是使用当前目录编译的意思。因为我们忽略了packages,所以自然就使用当前目录进行编译了。从这里我们也可以推测出，go build本质上需要的是一个路径，让编译器可以找到哪些需要编译的go文件。packages其实是一个相对路径，是相对于我们定义的GOROOT和GOPATH这两个环境变量的，所以有了packages这个参数后，go build就可以知道哪些需要编译的go文件了。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">go</span> <span class="keyword">build </span>github/tools</div></pre></td></tr></table></figure>
<p>这种方式是指定包的方式，这样会明确的编译我们这个包。当然我们也可以使用通配符。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> build github.<span class="keyword">com</span>/tools/...</div></pre></td></tr></table></figure>
<p>3个点表示匹配所有字符串，这样go build就会编译tools目录下的所有包。</p>
<h1 id="go-clean"><a href="#go-clean" class="headerlink" title="go clean"></a>go clean</h1><p>在我们使用<code>go build</code>编译的时候，会产生编译生成的文件，尤其是在我们签入代码的时候，并不想把我们生成的文件也签入到我们的Git代码库中，这时候我们可以手动删除生成的文件，但是有时候会忘记，也很麻烦，不小心还是会提交到Git中。要解决这个问题，我们可以使用<code>go clean</code>,它可以清理我们编译生成的文件，比如生成的可执行文件，生成obj对象等等。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usage: go clean <span class="string">[-i]</span> <span class="string">[-r]</span> <span class="string">[-n]</span> <span class="string">[-x]</span> <span class="string">[build flags]</span> <span class="string">[packages]</span></div></pre></td></tr></table></figure>
<h1 id="go-run"><a href="#go-run" class="headerlink" title="go run"></a>go run</h1><p>go build是先编译，然后我们在执行可以执行文件来运行我们的程序，需要两步。go run这个命令就是可以把这两步合成一步的命令，通过go run命令，我们可以直接看到输出的结果。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  ~ go <span class="keyword">help</span> run</div><div class="line"><span class="keyword">usage</span>: <span class="keyword">go</span> run [<span class="keyword">build</span> flags] [-exec xprog] gofiles... [arguments...]</div><div class="line"></div><div class="line">Run compiles <span class="keyword">and</span> runs the <span class="keyword">main</span> <span class="keyword">package</span> comprising the named <span class="keyword">Go</span> <span class="keyword">source</span> files.</div><div class="line">A <span class="keyword">Go</span> <span class="keyword">source</span> <span class="keyword">file</span> <span class="keyword">is</span> defined <span class="keyword">to</span> be a <span class="keyword">file</span> ending <span class="keyword">in</span> a literal <span class="string">".go"</span> suffix.</div><div class="line"></div><div class="line"><span class="keyword">By</span> <span class="keyword">default</span>, <span class="string">'go run'</span> runs the <span class="keyword">compiled</span> <span class="built_in">binary</span> directly: <span class="string">'a.out arguments...'</span>.</div><div class="line"><span class="keyword">If</span> the -exec flag <span class="keyword">is</span> given, <span class="string">'go run'</span> invokes the <span class="built_in">binary</span> <span class="keyword">using</span> xprog:</div><div class="line">	<span class="string">'xprog a.out arguments...'</span>.</div><div class="line"><span class="keyword">If</span> the -exec flag <span class="keyword">is</span> <span class="keyword">not</span> given, GOOS <span class="keyword">or</span> GOARCH <span class="keyword">is</span> different <span class="keyword">from</span> the <span class="keyword">system</span></div><div class="line"><span class="keyword">default</span>, <span class="keyword">and</span> a program named go_$GOOS_$GOARCH_exec can be <span class="keyword">found</span></div><div class="line"><span class="keyword">on</span> the <span class="keyword">current</span> <span class="keyword">search</span> <span class="keyword">path</span>, <span class="string">'go run'</span> invokes the <span class="built_in">binary</span> <span class="keyword">using</span> that program,</div><div class="line"><span class="keyword">for</span> example <span class="string">'go_nacl_386_exec a.out arguments...'</span>. This allows execution <span class="keyword">of</span></div><div class="line"><span class="keyword">cross</span>-<span class="keyword">compiled</span> programs <span class="keyword">when</span> a simulator <span class="keyword">or</span> other execution method <span class="keyword">is</span></div><div class="line">available.</div></pre></td></tr></table></figure>
<p>go run 命令需要一个go文件作为参数，这个go文件必须包含main包和main函数，这样才可以运行，其他的参数和go build差不多。在运行go run的时候，如果需要的话，我们可以给我们的程序传递参数，比如：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(<span class="string">"输入的参数为："</span>,os.Args[<span class="number">1</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line">打开终端，输入如下命令执行：</div><div class="line"><span class="keyword">go</span> run main.<span class="keyword">go</span> <span class="number">12</span></div><div class="line"></div><div class="line">打印：</div><div class="line">输入的参数为： <span class="number">12</span></div></pre></td></tr></table></figure>
<h1 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a>go test</h1><p>该命令用于Go的单元测试，它也是接受一个包名作为参数，如果没有指定，使用当前目录。<br>go test运行的单元测试必须符合go的测试要求。</p>
<ol>
<li>写有单元测试的文件名，必须以_test.go结尾。</li>
<li>测试文件要包含若干个测试函数。</li>
<li>这些测试函数要以Test为前缀，还要接收一个*testing.T类型的参数。</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//testing</span></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(x <span class="keyword">int</span> ,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> x + y</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"testing"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> Add(<span class="number">1</span>,<span class="number">2</span>) == <span class="number">3</span> &#123;</div><div class="line">		t.Log(<span class="string">"1+2=3"</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> Add(<span class="number">1</span>,<span class="number">1</span>) == <span class="number">3</span> &#123;</div><div class="line">		t.Error(<span class="string">"1+1=3"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个单元测试，保存在<code>main_test.go</code>文件中，对main包里的<code>Add(a,b int)</code>函数进行单元测试。<br>如果要运行这个单元测试，在该文件目录下，执行go test 即可。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  main go test</div><div class="line">PASS</div><div class="line">ok      _<span class="regexp">/Users/</span>liuguoquan<span class="regexp">/GoglandProjects/m</span>ain <span class="number">0.006</span>s</div></pre></td></tr></table></figure>
<h1 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h1><p>它和go build类似，不过它可以在编译后，把生成的可执行文件或者库安装到对应的目录下，以供使用。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  hello go <span class="keyword">help</span> <span class="keyword">install</span></div><div class="line"><span class="keyword">usage</span>: <span class="keyword">go</span> <span class="keyword">install</span> [<span class="keyword">build</span> flags] [packages]</div><div class="line"><span class="keyword">Install</span> compiles <span class="keyword">and</span> installs the packages named <span class="keyword">by</span> the <span class="keyword">import</span> paths,</div><div class="line">along <span class="keyword">with</span> their dependencies.</div></pre></td></tr></table></figure>
<p>它的用法和go build差不多，如果不指定一个包名，就使用当前目录。安装的目录都是约定好的，如果生成的是可执行文件，那么安装在$GOPATH/bin目录下；如果是可引用的库，那么安装在$GOPATH/pkg目录下。</p>
<h1 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h1><p><strong>go get</strong>命令，可以从网上下载更新指定的包以及依赖的包，并对它们进行编译和安装。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/astaxie/beego</div></pre></td></tr></table></figure>
<p>以上示例，我们就可以从github上直接下载这个go库到我们GOPATH工作空间中，以供我们使用。下载的是整个源代码工程，并且会根据它们编译和安装，和执行go install类似。</p>
<p><strong>go get</strong>支持大多数版本控制系统(VCS)，比如我们常用的git，通过它和包依赖管理结合，我们可以在代码中直接导入网络上的包以供我们使用。</p>
<p>如果我们需要更新网络上的一个go工程，加<code>-u</code> 标记即可。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/astaxie/beego</div></pre></td></tr></table></figure>
<p>类似的，启用-v标记，可以看到下载的进度以及更多的调试信息。</p>
<h1 id="go-fmt"><a href="#go-fmt" class="headerlink" title="go fmt"></a>go fmt</h1><p><code>go fmt</code>可以格式化我们的源代码的布局和Go源代码一样的风格，也就是统一代码风格，这样我们再也不用为大括号要不要放到行尾还是另起一行，缩进是使用空格还是tab而争论不休了，都给我们统一了。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; </div><div class="line">	fmt.Println(<span class="string">"输入的参数为："</span>, os.Args[<span class="number">1</span>]) &#125;</div></pre></td></tr></table></figure>
<p>比如以上代码，我们执行<code>go fmt</code> 格式化后，会变成如下这样：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(<span class="string">"输入的参数为："</span>, os.Args[<span class="number">1</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>go fmt也是接受一个包名作为参数，如果不传递，则使用当前目录。go fmt会自动格式化代码文件并保存，它本质上其实是调用的gofmt -l -w这个命令，我们看下gofmt的使用帮助。</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  hello gofmt -h  </div><div class="line">usage: gofmt [flags] [path ...]</div><div class="line">  -<span class="ruby">cpuprofile string</span></div><div class="line">    	write cpu profile to this file</div><div class="line">  -<span class="ruby">d	display diffs instead of rewriting files</span></div><div class="line">  -<span class="ruby">e	report all errors (<span class="keyword">not</span> just the first <span class="number">10</span> on different lines)</span></div><div class="line">  -<span class="ruby">l	list files whose formatting differs from gofmt<span class="string">'s</span></span></div><div class="line">  -<span class="ruby"><span class="string">r string</span></span></div><div class="line">    	rewrite rule (e.g., 'a[b:len(a)] -&gt; a[b:]')</div><div class="line">  -<span class="ruby"><span class="string">s	simplify code</span></span></div><div class="line">  -<span class="ruby"><span class="string">w	write result to (source) file instead of stdout</span></span></div></pre></td></tr></table></figure>
<h1 id="go-vet"><a href="#go-vet" class="headerlink" title="go vet"></a>go vet</h1><p><code>go vet</code>它会帮助我们检查我们代码中常见的错误。</p>
<ol>
<li>Printf这类的函数调用时，类型匹配了错误的参数。</li>
<li>定义常用的方法时，方法签名错误。</li>
<li>错误的结构标签。</li>
<li>没有指定字段名的结构字面量。</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Printf(<span class="string">" 哈哈"</span>,<span class="number">3.14</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子是一个明显错误的例子，新手经常会犯，这里我们忘记输入了格式化的指令符，这种编辑器是检查不出来的，但是如果我们使用go vet就可以帮我们检查出这类常见的小错误。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  hello <span class="keyword">go</span> vet</div><div class="line">main.<span class="keyword">go</span>:<span class="number">8</span>: <span class="keyword">no</span> formatting directive in Printf <span class="keyword">call</span></div></pre></td></tr></table></figure>
<h1 id="go-env"><a href="#go-env" class="headerlink" title="go env"></a>go env</h1><p><code>go env</code> 用于查看编译环境</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">➜  ~ go env</div><div class="line">GOARCH=<span class="string">"amd64"</span> <span class="comment">//目标处理器架构</span></div><div class="line">GOBIN=<span class="string">""</span></div><div class="line">GOEXE=<span class="string">""</span></div><div class="line">GOHOSTARCH=<span class="string">"amd64"</span></div><div class="line">GOHOSTOS=<span class="string">"darwin"</span></div><div class="line">GOOS=<span class="string">"darwin"</span> <span class="comment">//目标操作系统</span></div><div class="line">GOPATH=<span class="string">"/Users/liuguoquan/go"</span></div><div class="line">GORACE=<span class="string">""</span></div><div class="line">GOROOT=<span class="string">"/usr/local/go"</span> <span class="comment">//</span></div><div class="line">GOTOOLDIR=<span class="string">"/usr/local/go/pkg/tool/darwin_amd64"</span></div><div class="line">GCCGO=<span class="string">"gccgo"</span></div><div class="line">CC=<span class="string">"clang"</span></div><div class="line">GOGCCFLAGS=<span class="string">"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/ph/tdtx7f3167z3fzl3nqj3ht4w0000gn/T/go-build886960492=/tmp/go-build -gno-record-gcc-switches -fno-common"</span></div><div class="line">CXX=<span class="string">"clang++"</span></div><div class="line">CGO_ENABLED=<span class="string">"1"</span></div><div class="line">PKG_CONFIG=<span class="string">"pkg-config"</span></div><div class="line">CGO_CFLAGS=<span class="string">"-g -O2"</span></div><div class="line">CGO_CPPFLAGS=<span class="string">""</span></div><div class="line">CGO_CXXFLAGS=<span class="string">"-g -O2"</span></div><div class="line">CGO_FFLAGS=<span class="string">"-g -O2"</span></div><div class="line">CGO_LDFLAGS=<span class="string">"-g -O2"</span></div></pre></td></tr></table></figure>
<p>GOOS指的是目标操作系统，它的可用值为：</p>
<ul>
<li>darwin</li>
<li>freebsd</li>
<li>linux</li>
<li>windows</li>
<li>android</li>
<li>dragonfly</li>
<li>netbsd</li>
<li>openbsd</li>
<li>plan9</li>
<li>solaris</li>
</ul>
<p>GOARCH指的是目标处理器的架构，目前支持的有：</p>
<ul>
<li>arm</li>
<li>arm64</li>
<li>386</li>
<li>amd64</li>
<li>ppc64</li>
<li>ppc64le</li>
<li>mips64</li>
<li>mips64le</li>
<li>s390x</li>
</ul>
<p>GOOS和GOARCH组合起来，支持生成的可执行程序种类很多，具体组合参考<a href="https://golang.org/doc/install/source#environment" target="_blank" rel="external">https://golang.org/doc/install/source#environment</a>。如果我们要生成不同平台架构的可执行程序，只要改变这两个环境变量就可以了，比如要生成linux 64位的程序，命令如下：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">GOOS</span>=linux GOARCH=amd64 go build github.com/hello</div></pre></td></tr></table></figure>
<h1 id="go-help"><a href="#go-help" class="headerlink" title="go help"></a>go help</h1><p><code>go help</code> 用于查看命令的具体作用，比如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">go <span class="keyword">help</span> <span class="keyword">build</span></div><div class="line"><span class="keyword">go</span> <span class="keyword">help</span> <span class="keyword">test</span></div></pre></td></tr></table></figure>
<h1 id="Go文档"><a href="#Go文档" class="headerlink" title="Go文档"></a>Go文档</h1><p>在Go语言中，Go为我们提供了快速生成文档以及查看文档的工具，让我们可以很容易的编写查看文档。</p>
<p>Go提供了两种查看文档的方式，一种是使用go doc命令在终端查看，这种适用于使用VIM等工具在终端开发的人员，它们不用离开终端，既可以查看想查看的文档，又可以编码。</p>
<p>第二种方式，是使用浏览器查看的方式，通过godoc命令可以在本机启动一个web服务，我们可以通过打开浏览器，访问这个服务来查看我们的Go文档。</p>
<h2 id="从终端查看文档"><a href="#从终端查看文档" class="headerlink" title="从终端查看文档"></a>从终端查看文档</h2><p>这种方式适用于在终端开发的，它们一般不像离开终端，查完即可继续编码，这时候使用go doc命令是很不错的选择。</p>
<h2 id="在线浏览文档"><a href="#在线浏览文档" class="headerlink" title="在线浏览文档"></a>在线浏览文档</h2><p>go doc终端查看的方式，虽然也很便捷，不过效率不高，并且没有查看细节以及进行跳转，为此Go为我们提供了基于浏览器使用的网页方式进行浏览API 文档，我们只用点点鼠标，就可以查看了，还可以在方法、包等之间进行跳转，更简洁方便。</p>
<p>要想启动一个Web在线API文档服务很简单，使用<strong>godoc</strong>就可以了。</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">godoc -http=:<span class="number">6060</span></div></pre></td></tr></table></figure>
<p>后面的http是要指定Web服务监听的IP和Port，运行后，我们就可以打开浏览器，输入<code>http://127.0.0.1:6060</code>进行访问了，你会发现打开的页面，和GoLang的官方网站一样，没错，这个其实就是官网的一个拷贝，但是包的文档<code>http://127.0.0.1:6060/pkg/</code>会和官网不一样,你自己启动的这个服务，是基于你电脑上<code>GOROOT</code>和<code>GOPATH</code>这两个路径下的所有包生成的文档，会比官网只是标准库的文档要多。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.flysnow.org/2017/03/08/go-in-action-go-tools.html" target="_blank" rel="external">Go开发工具</a><br><a href="http://wiki.jikexueyuan.com/project/go-command-tutorial/0.0.html" target="_blank" rel="external">标准命令详解</a><br><a href="http://www.flysnow.org/2017/03/09/go-in-action-go-doc.html" target="_blank" rel="external">Go Doc</a><br><a href="http://wiki.jikexueyuan.com/project/go-command-tutorial/0.5.html" target="_blank" rel="external">go doc与godoc</a></p>
<p>《Go语言实战》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Go语言中，我们很多操作都是通过go命令进行的，比如我们要执行go文件的编译，就需要使用go build命令，除了build命令之外，还有很多常用的命令，这一次我们就统一进行介绍，对常用命令有一个了解，这样我们就可以更容易的开发我们的Go程序了。&lt;/p&gt;
&lt;h1 id=&quot;
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础①Go包管理</title>
    <link href="http://liuguoquan727.github.io/2017/05/08/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E2%91%A0Go%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>http://liuguoquan727.github.io/2017/05/08/Go语言基础①Go包管理/</id>
    <published>2017-05-08T12:52:53.000Z</published>
    <updated>2017-05-09T13:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我们在使用其他语言，比如Java，是有包的概念的，它是Java语言中组织我们的Java文件的一个概念，比如java.lang这个包，他里面有很多我们常用的类，比如String。在Go语言中，包也是类似的概念，它是把我们的go文件组织起来，可以方便进行归类、复用等目的。 比如Go内置的net包</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">net</div><div class="line">├── http</div><div class="line">├── internal</div><div class="line">├── mail</div><div class="line">├── rpc</div><div class="line">├── smtp</div><div class="line">├── testdata</div><div class="line">├── textproto</div><div class="line">└── url</div></pre></td></tr></table></figure>
<p>以上是net包的一个目录结构，net本身是一个包，net目录下的http又是一个包。从这个大家可以看到，go语言的包其实就是我们计算机里的目录，或者叫文件夹，通过它们进行目录结构和文件组织，go只是对目录名字做了一个翻译，叫【包】而已。比如这里的net包其实就是net目录，http包其实就是http目录，这也是go语言中的一个命名习惯，包名和文件所在的目录名是一样的。</p>
<h1 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h1><p>go 语言包的命名，<strong>遵循简洁、小写、和 go 文件所在目录同名的原则</strong>，这样就便于我们引用，书写以及快速定位查找。</p>
<p>比如go自带的http这个包，它这个http目录下的所有go文件都属于这个http包,所以我们使用http包里的函数、接口的时候，导入这个http包就可以了。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	http.ListenAndServe(<span class="string">"127.0.0.1:8080"</span>,handler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这个例子可以看到，我们导入的是<strong>net/http</strong>,在这里叫做全路径，因为 http 包在 net 里面，net 是最顶级的包，所以必须使用全路径导入，go 编译程序才能找到 http 这个包，和我们文件系统的目录路径是一样的。</p>
<p>因为有了全路径，<strong>所以命名的包名可以和其他库的一样，只要它们的全路径不同就可以了</strong>，使用全路径的导入，也增加了包名命名的灵活性。</p>
<p>对于自己或者公司开发的程序而言，我们一般采用域名作为顶级包名的方式，这样就不用担心和其他开发者包名重复的问题了，假设我的个人域名是 <strong>www.deason.com</strong>,那么我自己开发的go程序都以 <strong>deason.com</strong> 作为全路径中的最顶层部分，比如导入我开发的一个工具包:</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> <span class="title">main</span></div><div class="line">import <span class="string">"deason.com/tools"</span></div></pre></td></tr></table></figure>
<p>如果你没有自己的域名，怎么办呢？这时候可以使用 <strong>github.com</strong>。这时候我们就可以使用 <strong>github.com/<username></username></strong> 作为你的顶级路径了，别人是不会和你重名的。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> <span class="title">main</span></div><div class="line">import <span class="string">"github.com/liuguoquan/tools"</span></div></pre></td></tr></table></figure>
<p>这就是换成github.com命名的方式。</p>
<h1 id="main包"><a href="#main包" class="headerlink" title="main包"></a>main包</h1><p>当把一个go文件的包名声明为main时，就等于告诉go编译程序，我这个是一个可执行的程序，那么go编译程序就会尝试把它编译为一个二进制的可执行文件。</p>
<p>一个main的包，一定会包含一个<strong>main()</strong>函数，比如C和Java都有main()函数,它是一个程序的入口，没这个函数，程序就无法执行。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(<span class="string">"Hello, 世界"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设该go文件叫hello.go,放在<strong>$GOPATH/src/hello</strong>目录下，那么我们在这个目录下执行go build命令就会生成二进制的可执行文件，在window系统下生成的是hello.exe，在Unix，MAC和Linux下生成的是hello,我们在CMD或者终端里执行它，就可以看到控制台打印的:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello, 世界</div></pre></td></tr></table></figure>
<h1 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h1><p>要想使用一个包，必须先导入它才可以使用，Go语言提供了import关键字来导入一个包，这个关键字告诉Go编译器到磁盘的哪里去找要想导入的包，所以导入的包必须是一个全路径的包，也就是包所在的位置。</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div></pre></td></tr></table></figure>
<p><strong>如果要导入多个包怎么办呢？Go语言还为我们提供的导入块</strong>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>对于多于一个路径的包名，在代码中引用的时候，使用全路径最后一个包名作为引用的包名，比如net/http,我们在代码使用的是http，而不是net。</p>
</blockquote>
<p>现在我导入了包，那么编译的时候，go编译器去什么位置找他们呢？这里就要介绍下Go的环境变量了。Go有两个很重要的环境变量<strong>GOROOT</strong>和<strong>GOPATH</strong>,这是两个定义路径的环境变量，GOROOT是安装Go的路径，比如<strong>/usr/local/go</strong>；<strong>GOPATH</strong> 是我们自己定义的开发者个人的工作空间，比如/home/liuguoquan/go。</p>
<p>编译器会使用我们设置的这两个路径，再加上<strong>import</strong>导入的相对全路径来查找磁盘上的包，比如我们导入的fmt包，编译器最终找到的是/usr/local/go/fmt这个位置。</p>
<p>值得了解的是：对于<strong>包的查找，是有优先级的</strong>，编译器会优先在GOROOT里搜索，其次是GOPATH,一旦找到，就会马上停止搜索。如果最终都没找到，就报编译异常了。</p>
<h1 id="远程包导入"><a href="#远程包导入" class="headerlink" title="远程包导入"></a>远程包导入</h1><p>如果有的Go包共享在Github上，我们一样有办法使用他们，这就是远程导入包了，或者是网络导入，Go天生就支持这种情况，所以我们可以很随意的使用Github上的Go库开发程序。</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/astaxie/beego"</span></div></pre></td></tr></table></figure>
<p>这种导入，前提必须是该包托管在一个分布式的版本控制系统上，比如Github、Bitbucket等，并且是Public的权限，可以让我们直接访问它们。</p>
<p>编译在导入它们的时候，会先在<strong>GOPATH</strong>下搜索这个包，如果没有找到，就会使用go get工具从版本控制系统（GitHub）获取，并且会把获取到的源代码存储在GOPATH目录下对应URL的目录里，以供编译使用。</p>
<p><code>go get</code>工具可以递归获取依赖包，如果<code>github.com/astaxie/beego</code>也引用了其他的远程包，该工具可以一并下载下来。</p>
<h1 id="命名导入包"><a href="#命名导入包" class="headerlink" title="命名导入包"></a>命名导入包</h1><p>我们知道，在使用<code>import</code>关键字导入包之后，我们就可以在代码中通过包名使用该包下相应的函数、接口等。如果我们导入的包名正好有重复的怎么办呢？针对这种情况，Go语言可以让我们对导入的包重新命名，这就是命名导入。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	myfmt <span class="string">"mylib/fmt"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println()</div><div class="line">	myfmt.Println()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果没有重新命名，那么对于编译器来说，这两个fmt它是区分不清楚的。重命名也很简单，在我们导入的时候，在包名的左侧，起一个新的包名就可以了。</p>
<p><strong>Go语言规定，导入的包必须要使用，否则会包编译错误</strong>，这是一个非常好的规则，因为这样可以避免我们引用很多无用的代码而导致的代码臃肿和程序的庞大，因为很多时候，我们都不知道哪些包是否使用，这在C和Java上会经常遇到，有时候我们不得不借助工具来查找我们没有使用的文件、类型、方法和变量等，把它们清理掉。</p>
<p>但是有时候，我们需要导入一个包，但是又不使用它，按照规则，这是不行的，为此Go语言给我们提供了一个空白标志符<code>_</code>,只需要我们使用<code>_</code>重命名我们导入的包就可以了。</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="literal">_</span> <span class="string">"mylib/fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="literal">_</span> <span class="string">"mylib/fmt"</span></div></pre></td></tr></table></figure>
<h1 id="包的init函数"><a href="#包的init函数" class="headerlink" title="包的init函数"></a>包的init函数</h1><p>每个包都可以有任意多个init函数，这些init函数都会在main函数之前执行。init函数通常用来做初始化变量、设置包或者其他需要在程序执行前的引导工作。比如上面我们讲的需要使用_空标志符来导入一个包的目的，就是想执行这个包里的init函数。</p>
<p>我们以数据库的驱动为例，Go语言为了统一关于数据库的访问，使用databases/sql抽象了一层数据库的操作，可以满足我们操作MYSQL、Postgre等数据库，这样不管我们使用这些数据库的哪个驱动，编码操作都是一样的，想换驱动的时候，就可以直接换掉，而不用修改具体的代码。</p>
<p>这些数据库驱动的实现，就是具体的，可以由任何人实现的，它的原理就是定义了init函数，在程序运行之前，把实现好的驱动注册到sql包里，这样我们就使用使用它操作数据库了。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mysql</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"database/sql"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">	sql.Register(<span class="string">"mysql"</span>, &amp;MySQLDriver&#123;&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为我们只是想执行这个mysql包的init方法，并不想使用这个包，所以我们在导入这个包的时候，需要使用<code>_</code>重命名包名，避免编译错误。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"database/sql"</span></div><div class="line"><span class="keyword">import</span> _ <span class="string">"github.com/go-sql-driver/mysql"</span></div><div class="line"></div><div class="line">db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"user:password@/dbname"</span>)</div></pre></td></tr></table></figure>
<p>看非常简洁，剩下针对的数据库的操作，都是使用的<code>database/sql</code>标准接口，如果我们想换一个<code>mysql</code>的驱动的话，只需要换个导入就可以了，灵活方便，这也是面向接口编程的便利。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.flysnow.org/2017/03/04/go-in-action-go-package.html" target="_blank" rel="external">Go包管理</a></p>
<p>《Go语言实战》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;我们在使用其他语言，比如Java，是有包的概念的，它是Java语言中组织我们的Java文件的一个概念，比如java.lang这个包，他里面有
    
    </summary>
    
      <category term="Go" scheme="http://liuguoquan727.github.io/categories/Go/"/>
    
    
      <category term="Go基础" scheme="http://liuguoquan727.github.io/tags/Go%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础⑪数据存储</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%AA%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础⑪数据存储/</id>
    <published>2017-05-07T13:14:53.000Z</published>
    <updated>2017-05-09T06:06:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h1><p>pickle是标准库中的一个模块，在Python 2中还有一个cpickle，两者的区别就是后者更快。所以，下面操作中，不管是用<code>import pickle</code>，还是用<code>import cpickle as pickle</code>，在功能上都是一样的。</p>
<p>而在Python 3中，你只需要<code>import pickle</code>即可，因为它已经在Python 3中具备了Python 2中的cpickle同样的性能。</p>
<p><code>pickle.dump(obj,file[,protocol])</code></p>
<ul>
<li>obj：序列化对象，在上面的例子中是一个列表，它是基本类型，也可以序列化自己定义的对象。</li>
<li>file：要写入的文件。可以更广泛地可以理解为为拥有<code>write()</code>方法的对象，并且能接受字符串为为参数，所以，它还可以是一个<code>StringIO</code>对象，或者其它自定义满足条件的对象。</li>
<li>protocol：可选项。默认为False（或者说0），是以ASCII格式保存对象；如果设置为1或者True，则以压缩的二进制格式保存对象。</li>
</ul>
<h2 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>integers = range(<span class="number">9999</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"i"</span>] = integers        <span class="comment">#下面将这个字典类型的对象存入文件</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"22902.dat"</span>, <span class="string">"wb"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(d, f)           <span class="comment">#文件中以ascii格式保存数据</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"22903.dat"</span>, <span class="string">"wb"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(d, f, <span class="keyword">True</span>)     <span class="comment">#文件中以二进制格式保存数据,文件较小，推荐方式</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = os.stat(<span class="string">"22902.dat"</span>).st_size    <span class="comment">#得到两个文件的大小</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = os.stat(<span class="string">"22903.dat"</span>).st_size</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"%d, %d, %.2f%%"</span> % (s1, s2, (s2+<span class="number">0.0</span>)/s1*<span class="number">100</span>)    <span class="comment">#Python 3: print("&#123;0:d&#125;, &#123;1:d&#125;, &#123;2:.2f&#125;".format (s1, s2, (s2+0.0)/s1*100))</span></div><div class="line"><span class="number">68903</span>, <span class="number">29774</span>, <span class="number">43.21</span>%</div></pre></td></tr></table></figure>
<h2 id="反序列化对象"><a href="#反序列化对象" class="headerlink" title="反序列化对象"></a>反序列化对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">将数据保存入文件，还有另外一个目标，就是要读出来，也称之为反序列化。</div><div class="line"></div><div class="line">    &gt;&gt;&gt; integers = pickle.load(open(<span class="string">"22901.dat"</span>, <span class="string">"rb"</span>))</div><div class="line">    &gt;&gt;&gt; <span class="keyword">print</span> integers    <span class="comment">#Python 3: print(integers)</span></div><div class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line">再看看以二进制存入的那个文件：</div><div class="line"></div><div class="line">    &gt;&gt;&gt; f = open(<span class="string">"22903.dat"</span>, <span class="string">"rb"</span>)</div><div class="line">    &gt;&gt;&gt; d = pickle.load(f)</div><div class="line">    &gt;&gt;&gt; <span class="keyword">print</span> d</div><div class="line">    &#123;<span class="string">'i'</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, ....   <span class="comment">#省略后面的数字&#125;</span></div><div class="line">    &gt;&gt;&gt; f.close()</div></pre></td></tr></table></figure>
<h2 id="读取自定义对象"><a href="#读取自定义对象" class="headerlink" title="读取自定义对象"></a>读取自定义对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    &gt;&gt;&gt; <span class="keyword">import</span> cPickle <span class="keyword">as</span> pickle        <span class="comment">#这是Python 2的引入方式，如果是Python 3，直接使用import pickle</span></div><div class="line">    &gt;&gt;&gt; <span class="keyword">import</span> StringIO                 <span class="comment">#标准库中的一个模块，跟file功能类似，只不过是在内存中操作“文件”</span></div><div class="line">    </div><div class="line">    &gt;&gt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(object)</span>:</span>             <span class="comment">#自定义一种类型</span></div><div class="line">    ...     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line">    ...         self.name = name</div><div class="line">    ...     <span class="function"><span class="keyword">def</span> <span class="title">my_book</span><span class="params">(self)</span>:</span></div><div class="line">    ...         <span class="keyword">print</span> <span class="string">"my book is: "</span>, self.name        <span class="comment">#Python 3: print("my book is: ", self.name)</span></div><div class="line">    ... </div><div class="line">    </div><div class="line"><span class="comment"># 存数据</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>file = StringIO.StringIO()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(pybook, file, <span class="number">1</span>)</div><div class="line">    </div><div class="line"><span class="comment"># 取数据</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>file.seek(<span class="number">0</span>)       <span class="comment">#找到对应类型  </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pybook2 = pickle.load(file)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pybook2.my_book()</div><div class="line">my book <span class="keyword">is</span>:  &lt;<span class="keyword">from</span> beginner to master&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>file.close()</div></pre></td></tr></table></figure>
<h1 id="shelve"><a href="#shelve" class="headerlink" title="shelve"></a>shelve</h1><p>由于数据的复杂性，<code>pickle</code>只能完成一部分工作，在另外更复杂的情况下，它就稍显麻烦了。于是，又有了<code>shelve</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 写操作</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> shelve</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = shelve.open(<span class="string">"22901.db"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="string">"name"</span>] = <span class="string">"www.itdiffer.com"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="string">"lang"</span>] = <span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="string">"pages"</span>] = <span class="number">1000</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="string">"contents"</span>] = &#123;<span class="string">"first"</span>:<span class="string">"base knowledge"</span>,<span class="string">"second"</span>:<span class="string">"day day up"</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.close()</div><div class="line">  </div><div class="line"><span class="comment"># 读操作</span></div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = shelve.open(<span class="string">"22901.db"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = s[<span class="string">"name"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> name        <span class="comment">#Python 3: print(name)</span></div><div class="line">www.itdiffer.com</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>contents = s[<span class="string">"contents"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> contents        <span class="comment">#Python 3: print(contents)</span></div><div class="line">&#123;<span class="string">'second'</span>: <span class="string">'day day up'</span>, <span class="string">'first'</span>: <span class="string">'base knowledge'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># for循环读</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k <span class="keyword">in</span> s:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> k, s[k]</div><div class="line"><span class="meta">... </span></div><div class="line">contents &#123;<span class="string">'second'</span>: <span class="string">'day day up'</span>, <span class="string">'first'</span>: <span class="string">'base knowledge'</span>&#125;</div><div class="line">lang python</div><div class="line">pages <span class="number">1000</span></div><div class="line">name www.itdiffer.com</div></pre></td></tr></table></figure>
<p>所建立的对象被变量<code>s</code>所引用，就如同字典一样，可称之为类字典对象。所以，可以如同操作字典那样来操作它。</p>
<p>但是，要小心坑：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">    &gt;&gt;&gt; f = shelve.open(<span class="string">"22901.db"</span>)</div><div class="line">    &gt;&gt;&gt; f[<span class="string">"author"</span>]</div><div class="line">    [<span class="string">'qiwsir'</span>]</div><div class="line">    &gt;&gt;&gt; f[<span class="string">"author"</span>].append(<span class="string">"Hetz"</span>)    <span class="comment">#试图增加一个</span></div><div class="line">    &gt;&gt;&gt; f[<span class="string">"author"</span>]                   <span class="comment">#坑就在这里</span></div><div class="line">    [<span class="string">'qiwsir'</span>]</div><div class="line">    &gt;&gt;&gt; f.close()</div><div class="line"></div><div class="line">当试图修改一个已有键的值时没有报错，但是并没有修改成功。要填平这个坑，需要这样做：</div><div class="line">    </div><div class="line">    &gt;&gt;&gt; f = shelve.open(<span class="string">"22901.db"</span>, writeback=<span class="keyword">True</span>)    <span class="comment">#多一个参数True</span></div><div class="line">    &gt;&gt;&gt; f[<span class="string">"author"</span>].append(<span class="string">"Hetz"</span>)</div><div class="line">    &gt;&gt;&gt; f[<span class="string">"author"</span>]                   <span class="comment">#没有坑了</span></div><div class="line">    [<span class="string">'qiwsir'</span>, <span class="string">'Hetz'</span>]</div><div class="line">    &gt;&gt;&gt; f.close()</div><div class="line"></div><div class="line">还用`<span class="keyword">for</span>`循环一下：</div><div class="line"></div><div class="line">    &gt;&gt;&gt; f = shelve.open(<span class="string">"22901.db"</span>)</div><div class="line">    &gt;&gt;&gt; <span class="keyword">for</span> k,v <span class="keyword">in</span> f.items():</div><div class="line">    ...     <span class="keyword">print</span> k,<span class="string">": "</span>,v        <span class="comment">#Python 3: print(k,": ",v)</span></div><div class="line">    ... </div><div class="line">    contents :  &#123;<span class="string">'second'</span>: <span class="string">'day day up'</span>, <span class="string">'first'</span>: <span class="string">'base knowledge'</span>&#125;</div><div class="line">    lang :  python</div><div class="line">    pages :  <span class="number">1000</span></div><div class="line">    author :  [<span class="string">'qiwsir'</span>, <span class="string">'Hetz'</span>]</div><div class="line">    name :  www.itdiffer.com</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;pickle&quot;&gt;&lt;a href=&quot;#pickle&quot; class=&quot;headerlink&quot; title=&quot;pickle&quot;&gt;&lt;/a&gt;pickle&lt;/h1&gt;&lt;p&gt;pickle是标准库中的一个模块，在Python 2中还有一个cpickle，两者的区别就是后者更快。所以，
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础⑩模块</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A9%E6%A8%A1%E5%9D%97/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础⑩模块/</id>
    <published>2017-05-07T13:12:53.000Z</published>
    <updated>2017-05-09T06:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写模块"><a href="#编写模块" class="headerlink" title="编写模块"></a>编写模块</h1><h2 id="模块是程序"><a href="#模块是程序" class="headerlink" title="模块是程序"></a>模块是程序</h2><p>模块就是一个扩展名为<code>.py</code>的Python程序。</p>
<h3 id="编写模块-1"><a href="#编写模块-1" class="headerlink" title="编写模块"></a>编写模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line">lang = <span class="string">"python"</span></div></pre></td></tr></table></figure>
<h3 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path.append(<span class="string">"~/Documents/VBS/StartLearningPython/2code/pm.py"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pm</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pm.lang</div><div class="line"><span class="string">'python'</span></div></pre></td></tr></table></figure>
<p>当Python解释器读取了<code>.py</code>文件，先将它变成由字节码组成的<code>.pyc</code>文件，然后这个<code>.pyc</code>文件交给一个叫做Python虚拟机的东西去运行（那些号称编译型的语言也是这个流程，不同的是它们先有一个明显的编译过程，编译好了之后再运行）。如果<code>.py</code>文件修改了，Python解释器会重新编译，只是这个编译过程不是完全显示给你看的。</p>
<p>我这里说的比较笼统，要深入了解Python程序的执行过程，可以阅读这篇文章：<a href="http://www.cnblogs.com/kym/archive/2012/05/14/2498728.html" target="_blank" rel="external">说说Python程序的执行过程</a></p>
<p>有了<code>.pyc</code>文件后，每次运行就不需要重新让解释器来编译<code>.py</code>文件了，除非<code>.py</code>文件修改了。这样，Python运行的就是那个编译好了的<code>.pyc</code>文件。</p>
<h3 id="if-name-“main“"><a href="#if-name-“main“" class="headerlink" title="if name == “main“"></a>if <strong>name</strong> == “<strong>main</strong>“</h3><p>如果要作为程序执行，则<code>__name__ == &quot;__main__&quot;</code>；如果作为模块引入，则<code>pm.__name__ == &quot;pm&quot;</code>，即属性<code>__name__</code>的值是模块名称。</p>
<h2 id="模块的位置"><a href="#模块的位置" class="headerlink" title="模块的位置"></a>模块的位置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pprint</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pprint.pprint(sys.path)  <span class="comment">#查看所有模块的位置</span></div></pre></td></tr></table></figure>
<h2 id="all-在模块中的作用"><a href="#all-在模块中的作用" class="headerlink" title="__all__在模块中的作用"></a><code>__all__</code>在模块中的作用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># /usr/bin/env python</span></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"></div><div class="line">__all__ = [<span class="string">'_private_variable'</span>, <span class="string">'public_teacher'</span>]</div><div class="line"></div><div class="line">public_variable = <span class="string">"Hello, I am a public variable."</span></div><div class="line">_private_variable = <span class="string">"Hi, I am a private variable."</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">public_teacher</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"I am a public teacher, I am from JP."</span>    <span class="comment">#Python 3: print("I am a public teacher, I am from JP.")</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_teacher</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"I am a private teacher, I am from CN."</span>    <span class="comment">#Python 3:  print("I am a private teacher, I am from CN.")</span></div></pre></td></tr></table></figure>
<p><code>__all__</code>属性以及相应的值，在<code>__all__</code>属性列表中包含了一个私有变量的名字和一个函数的名字。这是在告诉引用本模块的解释器，这两个东西是有权限被访问的，而且只有这两个东西。</p>
<h2 id="包或者库"><a href="#包或者库" class="headerlink" title="包或者库"></a>包或者库</h2><p>包或者库，应该是比“模块”大的。也的确如此，一般来讲，一个“包”里面会有多个模块，当然，“库”是一个更大的概念了，比如Python标准库中的每个库都有好多个包，每个包都有若干个模块。</p>
<p>一个包是由多个模块组成，即多个<code>.py</code>的文件，那么这个所谓“包”也就是我们熟悉的一个目录罢了。现在就需要解决如何引用某个目录中的模块问题了。解决方法就是在该目录中放一个<code>__init__.py</code>文件。<code>__init__.py</code>是一个空文件，将它放在某个目录中，就可以将该目录中的其它<code>.py</code>文件作为模块被引用。</p>
<h1 id="自带电池"><a href="#自带电池" class="headerlink" title="自带电池"></a>自带电池</h1><p>在Python被安装的时候，就有不少模块也随着安装到本地的计算机上了。这些东西就如同“能源”、“电力”一样，让Python拥有了无限生机，能够非常轻而易举地免费使用很多模块。所以，称之为“自带电池”。</p>
<p>那些在安装Python时就默认已经安装好的模块被统称为“标准库”。</p>
<h2 id="引用的方式"><a href="#引用的方式" class="headerlink" title="引用的方式"></a>引用的方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> pprint <span class="comment">#引入模块</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint <span class="comment">#引入该模块下的方法</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> * <span class="comment">#引入该模块下的所有方法</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pprint <span class="keyword">as</span> pr <span class="comment">#重命名模块</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint <span class="keyword">as</span> pt  <span class="comment">#重命名方法</span></div></pre></td></tr></table></figure>
<h2 id="深入探究"><a href="#深入探究" class="headerlink" title="深入探究"></a>深入探究</h2><ul>
<li><code>dir()</code>,查看对象的属性和方法</li>
<li><code>help()</code>查看对象的含义</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="帮助、文档和源码"><a href="#帮助、文档和源码" class="headerlink" title="帮助、文档和源码"></a>帮助、文档和源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> pprint.__doc__  <span class="comment">#查看文档</span></div><div class="line"><span class="keyword">print</span> pprint.__file__ <span class="comment">#查看模块的位置，根据这个位置查到源代码</span></div></pre></td></tr></table></figure>
<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><h3 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h3><p>sys.argv是专门用来向python解释器传递参数，名曰“命令行参数”。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python --version <span class="comment"># --veriosn就是命令行参数</span></div><div class="line">Python <span class="number">2.7</span><span class="number">.6</span></div></pre></td></tr></table></figure>
<h3 id="sys-exit"><a href="#sys-exit" class="headerlink" title="sys.exit()"></a>sys.exit()</h3><p>退出当前程序.</p>
<p>在大多数函数中会用到return，其含义是终止当前的函数，并向调用函数的位置返回相应值（如果没有就是None）。但是<code>sys.exit()</code>的含义是退出当前程序——不仅仅是函数，并发起<code>SystemExit</code>异常。这就是两者的区别了。</p>
<p>如果使用<code>sys.exit(0)</code>表示正常退出。若需要在退出的时候有一个对人友好的提示，可以用<code>sys.exit(&quot;I wet out at here.&quot;)</code>，那么字符串信息就被打印出来。</p>
<h3 id="sys-stdout"><a href="#sys-stdout" class="headerlink" title="sys.stdout"></a>sys.stdout</h3><p>与Python中的函数功能对照，<code>sys.stdin</code>获得输入（等价于Python 2中的raw_input()，Python 3中的input()），<code>sys.stdout</code>负责输出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"stdout.md"</span>, <span class="string">"w"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout = f  <span class="comment">#重定向到文件</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"Learn Python: From Beginner to Master"</span>        <span class="comment">#Python 3: print("Learn Python: From Beginner to Master")</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure>
<h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line">copy.copy() <span class="comment">#浅拷贝</span></div><div class="line">copy.deepcopy() <span class="comment">#深拷贝</span></div></pre></td></tr></table></figure>
<h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">os.rename(<span class="string">"22201.py"</span>, <span class="string">"newtemp.py"</span>) <span class="comment">#重命名文件</span></div><div class="line">os.remove(<span class="string">"123.txt"</span>) <span class="comment">#删除一个文件，不能是目录</span></div></pre></td></tr></table></figure>
<h3 id="操作目录"><a href="#操作目录" class="headerlink" title="操作目录"></a>操作目录</h3><p><strong>os.listdir</strong>：显示目录中的内容（包括文件和子目录）<br><strong>os.getcwd</strong>：获取当前工作目录；<br><strong>os.pardir</strong>:获得上一级目录<br><strong>os.chdir</strong>：改变当前工作目录<br><strong>os.makedirs, os.removedirs</strong>：创建和删除目录</p>
<h3 id="文件和目录属性"><a href="#文件和目录属性" class="headerlink" title="文件和目录属性"></a>文件和目录属性</h3><p><code>os.stat(p)</code>显示文件或目录的属性<br><code>os.chmod()</code>改变权限</p>
<h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><p><code>os</code>模块中提供了这样的方法，许可程序员在Python程序中使用操作系统的命令。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p</div><div class="line"><span class="string">'/home/qw/Documents/VBS/StarterLearningPython'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>command = <span class="string">"ls "</span> + p <span class="comment">#命令复制给Command变量</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>command</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(command) <span class="comment">#执行命令</span></div></pre></td></tr></table></figure>
<p>需要注意的是，<code>os.system()</code>是在当前进程中执行命令，直到它执行结束。如果需要一个新的进程，可以使用<code>os.exec</code>或者<code>os.execvp</code>。对此有兴趣详细了解的读者，可以查看帮助文档了解。另外，<code>os.system()</code>是通过shell执行命令，执行结束后将控制权返回到原来的进程，但是<code>os.exec()</code>及相关的函数，则在执行后不将控制权返回到原继承，从而使Python失去控制。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> webbrowser</div><div class="line">webbrowser.open(<span class="string">"http://www.baidu.com"</span>) <span class="comment">#跨平台打开浏览器</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="heapq-堆"><a href="#heapq-堆" class="headerlink" title="heapq:堆"></a>heapq:堆</h2><h3 id="headpq模块"><a href="#headpq模块" class="headerlink" title="headpq模块"></a>headpq模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> heapq</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.__all__</div><div class="line">[<span class="string">'heappush'</span>, <span class="string">'heappop'</span>, <span class="string">'heapify'</span>, <span class="string">'heapreplace'</span>, <span class="string">'merge'</span>, <span class="string">'nlargest'</span>, <span class="string">'nsmallest'</span>, <span class="string">'heappushpop'</span>]</div></pre></td></tr></table></figure>
<p><strong>heappush(heap, x)</strong>：将x压入堆heap</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> heapq</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap = []    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappush(heap, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappush(heap, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappush(heap, <span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappush(heap, <span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappush(heap, <span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappush(heap, <span class="number">8</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
<p><strong>heappop(heap)</strong>：删除最小元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heappop(heap)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap</div><div class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
<p><strong>heapify()</strong>：将列表转换为堆</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hl = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heapify(hl)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hl</div><div class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
<p><strong>heapreplace()</strong>是<code>heappop()</code>和<code>heappush()</code>的联合，也就是删除一个，同时加入一个</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap</div><div class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heapreplace(heap, <span class="number">3.14</span>)</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heap</div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">3.14</span>, <span class="number">9</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
<h2 id="deque-双端队列"><a href="#deque-双端队列" class="headerlink" title="deque:双端队列"></a>deque:双端队列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst.append(<span class="number">5</span>)        <span class="comment">#从右边增加</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst</div><div class="line">deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst.appendleft(<span class="number">7</span>)    <span class="comment">#从左边增加</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst</div><div class="line">deque([<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst.pop() <span class="comment">#右边删除一个元素</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst</div><div class="line">deque([<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst.popleft() <span class="comment"># 左边删除一个元素</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst</div><div class="line">deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst.rotate(<span class="number">3</span>) <span class="comment">#循环移动n个位置</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>qlst</div><div class="line">deque([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>])</div></pre></td></tr></table></figure>
<h2 id="calendar-日历"><a href="#calendar-日历" class="headerlink" title="calendar:日历"></a>calendar:日历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> calendar</div><div class="line">cal = calendar.month(<span class="number">2016</span>,<span class="number">8</span>)</div><div class="line"><span class="keyword">print</span> cal</div><div class="line"></div><div class="line">    August <span class="number">2016</span></div><div class="line">Mo Tu We Th Fr Sa Su</div><div class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></div><div class="line"> <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span></div><div class="line"><span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span></div><div class="line"><span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span></div><div class="line"><span class="number">29</span> <span class="number">30</span> <span class="number">31</span></div></pre></td></tr></table></figure>
<p><strong>calendar(year,w=2,l=1,c=6)</strong><br>返回year年的年历，3个月一行，间隔距离为c。 每日宽度间隔为w字符。每行长度为<code>21* w+18+2* c</code>。l是每星期行数。</p>
<p><strong>isleap(year)</strong>判断是否为闰年，是则返回true，否则false.</p>
<p><strong>leapdays(y1, y2)</strong>返回在y1，y2两年之间的闰年总数，包括y1，但不包括y2.</p>
<p><strong>month(year, month, w=2, l=1)</strong>返回year年month月日历，两行标题，一周一行。每日宽度间隔为w字符。每行的长度为7* w+6，l是每星期的行数。</p>
<p><strong>monthcalendar(year,month)</strong>返回一个列表，列表内的元素还是列表。每个子列表代表一个星期，都是从星期一到星期日，如果没有本月的日期，则为0。</p>
<p><strong>monthrange(year, month)</strong>返回一个元组，里面有两个整数。第一个整数代表着该月的第一天从星期几是（从0开始，依次为星期一、星期二，直到6代表星期日）。第二个整数是该月一共多少天。</p>
<p><strong>weekday(year,month,day)</strong>输入年月日，知道该日是星期几（注意，返回值依然按照从0到6依次对应星期一到星期六）。</p>
<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><strong>time()</strong>获得的是当前时间（严格说是时间戳），只不过这个时间对人不友好，它是以1970年1月1日0时0分0秒为计时起点，到当前的时间长度（不考虑闰秒）。</p>
<p><strong>localtime()</strong>得到的结果可以称之为时间元组（也有括号），其各项的含义是：</p>
<table>
<thead>
<tr>
<th>索引</th>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>tm_year</td>
<td>年</td>
</tr>
<tr>
<td>1</td>
<td>tm_mon</td>
<td>月</td>
</tr>
<tr>
<td>2</td>
<td>tm_mday</td>
<td>日</td>
</tr>
<tr>
<td>3</td>
<td>tm_hour</td>
<td>时</td>
</tr>
<tr>
<td>4</td>
<td>tm_min</td>
<td>分</td>
</tr>
<tr>
<td>5</td>
<td>tm_sec</td>
<td>秒</td>
</tr>
<tr>
<td>6</td>
<td>tm_wday</td>
<td>一周中的第几天</td>
</tr>
<tr>
<td>7</td>
<td>tm_yday</td>
<td>一年中的第几天</td>
</tr>
<tr>
<td>8</td>
<td>tm_isdst</td>
<td>夏令时</td>
</tr>
</tbody>
</table>
<p><strong>gmtime()</strong>localtime()得到的是本地时间，如果要国际化，就最好使用格林威治时间。</p>
<p><strong>asctime()</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.asctime()</div><div class="line"><span class="string">'Mon May  4 21:46:13 2015'</span></div><div class="line"></div><div class="line">time.asctime(h) <span class="comment">#参数必须是时间元组，即localtime返回的值</span></div></pre></td></tr></table></figure>
<p><strong>ctime()</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.ctime()</div><div class="line"><span class="string">'Mon May  4 21:52:22 2015'</span></div><div class="line">    </div><div class="line"> &gt;&gt;&gt; time.ctime(<span class="number">1000000</span>)  <span class="comment">#参数是时间戳</span></div><div class="line"><span class="string">'Mon Jan 12 21:46:40 1970'</span></div></pre></td></tr></table></figure>
<p><strong>mktime()</strong>mktime()也是以时间元组为参数，但是它返回的是时间戳</p>
<p><strong>strftime()</strong>将时间元组按照指定格式要求转化为字符串。如果不指定时间元组，就默认为<code>localtime()</code>值。</p>
<table>
<thead>
<tr>
<th>格式</th>
<th>含义</th>
<th>取值范围（格式）</th>
</tr>
</thead>
<tbody>
<tr>
<td>%y</td>
<td>去掉世纪的年份</td>
<td>00-99，如”15”</td>
</tr>
<tr>
<td>%Y</td>
<td>完整的年份</td>
<td>如”2015”</td>
</tr>
<tr>
<td>%j</td>
<td>指定日期是一年中的第几天</td>
<td>001-366</td>
</tr>
<tr>
<td>%m</td>
<td>返回月份</td>
<td>01-12</td>
</tr>
<tr>
<td>%b</td>
<td>本地简化月份的名称</td>
<td>简写英文月份</td>
</tr>
<tr>
<td>%B</td>
<td>本地完整月份的名称</td>
<td>完整英文月份</td>
</tr>
<tr>
<td>%d</td>
<td>该月的第几日</td>
<td>如5月1日返回”01”</td>
</tr>
<tr>
<td>%H</td>
<td>该日的第几时（24小时制）</td>
<td>00-23</td>
</tr>
<tr>
<td>%l</td>
<td>该日的第几时（12小时制）</td>
<td>01-12</td>
</tr>
<tr>
<td>%M</td>
<td>分钟</td>
<td>00-59</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
<td>00-59</td>
</tr>
<tr>
<td>%U</td>
<td>在该年中的第多少星期（以周日为一周起点）</td>
<td>00-53</td>
</tr>
<tr>
<td>%W</td>
<td>同上，只不过是以周一为起点</td>
<td>00-53</td>
</tr>
<tr>
<td>%w</td>
<td>一星期中的第几天</td>
<td>0-6</td>
</tr>
<tr>
<td>%Z</td>
<td>时区</td>
<td>在中国大陆测试，返回CST，即China Standard Time</td>
</tr>
<tr>
<td>%x</td>
<td>日期</td>
<td>日/月/年</td>
</tr>
<tr>
<td>%X</td>
<td>时间</td>
<td>时:分:秒</td>
</tr>
<tr>
<td>%c</td>
<td>详细日期时间</td>
<td>日/月/年 时:分:秒</td>
</tr>
<tr>
<td>%%</td>
<td>‘%’字符</td>
<td>‘%’字符</td>
</tr>
<tr>
<td>%p</td>
<td>上下午</td>
<td>AM    or    PM</td>
</tr>
</tbody>
</table>
<p><strong>strptime()</strong>作用是将字符串转化为时间元组,其参数要指定两个，一个是时间字符串，另外一个是时间字符串所对应的格式，格式符号用上表中的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>today = time.strftime(<span class="string">"%y/%m/%d"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>today</div><div class="line"><span class="string">'15/05/05'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.strptime(today, <span class="string">"%y/%m/%d"</span>)</div><div class="line">time.struct_time(tm_year=<span class="number">2015</span>, tm_mon=<span class="number">5</span>, tm_mday=<span class="number">5</span>, tm_hour=<span class="number">0</span>, tm_min=<span class="number">0</span>, tm_sec=<span class="number">0</span>, tm_wday=<span class="number">1</span>, tm_yday=<span class="number">125</span>, tm_isdst=<span class="number">-1</span>)</div></pre></td></tr></table></figure>
<h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><p><code>datetime</code>模块中有几个类：</p>
<ul>
<li>datetime.date：日期类，常用的属性有year/month/day</li>
<li>datetime.time：时间类，常用的有hour/minute/second/microsecond</li>
<li>datetime.datetime：日期时间类</li>
<li>datetime.timedelta：时间间隔，即两个时间点之间的时间长度</li>
<li>datetime.tzinfo：时区类</li>
</ul>
<h3 id="date类"><a href="#date类" class="headerlink" title="date类"></a>date类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 生成日期对象</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>today = datetime.date.today()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>today</div><div class="line">datetime.date(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># 操作日期对象</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> today        <span class="comment">#Python 3: print(today)</span></div><div class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-05</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> today.ctime()        <span class="comment">#Python 3: print(today.ctime())</span></div><div class="line">Tue May  <span class="number">5</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="number">2015</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> today.timetuple()        <span class="comment">#Python 3: print(today.timetuple())</span></div><div class="line">time.struct_time(tm_year=<span class="number">2015</span>, tm_mon=<span class="number">5</span>, tm_mday=<span class="number">5</span>, tm_hour=<span class="number">0</span>, tm_min=<span class="number">0</span>, tm_sec=<span class="number">0</span>, tm_wday=<span class="number">1</span>, tm_yday=<span class="number">125</span>, tm_isdst=<span class="number">-1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> today.toordinal()        <span class="comment">#Python 3: print(today.toordinal())</span></div><div class="line"><span class="number">735723</span></div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> today.year</div><div class="line"><span class="number">2015</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> today.month</div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> today.day</div><div class="line"><span class="number">5</span></div><div class="line">    </div><div class="line"><span class="comment"># 时间戳与格式化时间格式的转换</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>to = today.toordinal()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>to</div><div class="line"><span class="number">735723</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> datetime.date.fromordinal(to)</div><div class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-05</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = time.time()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line"><span class="number">1430787994.80093</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> datetime.date.fromtimestamp(t)</div><div class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-05</span></div><div class="line"></div><div class="line"><span class="comment"># 修改日期。</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = datetime.date(<span class="number">2015</span>,<span class="number">5</span>,<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> d1</div><div class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-01</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = d1.replace(year=<span class="number">2005</span>, day=<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> d2</div><div class="line"><span class="number">2005</span><span class="number">-05</span><span class="number">-05</span></div></pre></td></tr></table></figure>
<h3 id="time类"><a href="#time类" class="headerlink" title="time类"></a>time类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 生成time对象</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = datetime.time(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> t</div><div class="line"><span class="number">01</span>:<span class="number">02</span>:<span class="number">03</span></div><div class="line"></div><div class="line"><span class="comment"># 常用属性：</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> t.hour</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> t.minute</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> t.second</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t.microsecond</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> t.tzinfo</div><div class="line"><span class="keyword">None</span></div></pre></td></tr></table></figure>
<h3 id="timedelta类"><a href="#timedelta类" class="headerlink" title="timedelta类"></a>timedelta类</h3><p>主要用来做时间的运算。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    &gt;&gt;&gt; now = datetime.datetime.now()</div><div class="line">    &gt;&gt;&gt; <span class="keyword">print</span> now        <span class="comment">#Python 3: print(now)</span></div><div class="line">    <span class="number">2015</span><span class="number">-05</span><span class="number">-05</span> <span class="number">09</span>:<span class="number">22</span>:<span class="number">43.142520</span></div><div class="line"></div><div class="line"><span class="comment"># 对`now`增加5个小时；</span></div><div class="line"></div><div class="line">    &gt;&gt;&gt; b = now + datetime.timedelta(hours=<span class="number">5</span>)</div><div class="line">    &gt;&gt;&gt; <span class="keyword">print</span> b        <span class="comment">#Python 3: print(b)</span></div><div class="line">    <span class="number">2015</span><span class="number">-05</span><span class="number">-05</span> <span class="number">14</span>:<span class="number">22</span>:<span class="number">43.142520</span></div><div class="line"></div><div class="line"><span class="comment"># 增加两周；</span></div><div class="line"></div><div class="line">    &gt;&gt;&gt; c = now + datetime.timedelta(weeks=<span class="number">2</span>)</div><div class="line">    &gt;&gt;&gt; <span class="keyword">print</span> c        <span class="comment">#Python 3: print(c)</span></div><div class="line">    <span class="number">2015</span><span class="number">-05</span><span class="number">-19</span> <span class="number">09</span>:<span class="number">22</span>:<span class="number">43.142520</span></div><div class="line"></div><div class="line"><span class="comment"># 计算时间差：</span></div><div class="line"></div><div class="line">    &gt;&gt;&gt; d = c - b</div><div class="line">    &gt;&gt;&gt; <span class="keyword">print</span> d        <span class="comment">#Python 3: print(d)</span></div><div class="line">    <span class="number">13</span> days, <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p><code>urllib</code>模块用于读取来自网上（服务器上）的数据，比如不少人用Python做爬虫程序，就可以使用这个模块。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在Python 2中，这样操作：</span></div><div class="line">    &gt;&gt;&gt; <span class="keyword">import</span> urllib</div><div class="line">    &gt;&gt;&gt; itdiffer =  urllib.urlopen(<span class="string">"http://www.itdiffer.com"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 但是如果读者使用的是Python 3，必须换个姿势：</span></div><div class="line"></div><div class="line">    &gt;&gt;&gt; <span class="keyword">import</span> urllib.request</div><div class="line">    &gt;&gt;&gt; itdiffer = urllib.request.urlopen(<span class="string">"http://www.itdiffer.com"</span>)</div><div class="line">    </div><div class="line">    &gt;&gt;&gt; <span class="keyword">print</span> itdiffer.read() <span class="comment">#得到网页的内容</span></div></pre></td></tr></table></figure>
<h3 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen()"></a>urlopen()</h3><p><code>urlopen()</code>主要用于打开url文件，然后就获得指定url的数据，然后就如同在操作文件那样来操作,得到的对象叫做类文件对象。</p>
<p>参数说明一下：</p>
<ul>
<li>url：远程数据的路径，常常是网址</li>
<li>data：如果使用post方式，这里就是所提交的数据</li>
<li>proxies：设置代理</li>
</ul>
<h3 id="url编码、解码"><a href="#url编码、解码" class="headerlink" title="url编码、解码"></a>url编码、解码</h3><p>url对其中的字符有严格的编码要求，要对url进行编码和解码。</p>
<ul>
<li>quote(string[, safe])：对字符串进行编码。参数safe指定了不需要编码的字符</li>
<li>urllib.unquote(string) ：对字符串进行解码</li>
<li>quote_plus(string [ , safe ] ) ：与urllib.quote类似，但这个方法用’+’来替换空格<code>&#39; &#39;</code>，而quote用’%20’来代替空格</li>
<li>unquote_plus(string ) ：对字符串进行解码；</li>
<li>urllib.urlencode(query[, doseq])：将dict或者包含两个元素的元组列表转换成url参数。例如{‘name’: ‘laoqi’, ‘age’: 40}将被转换为”name=laoqi&amp;age=40”</li>
<li>pathname2url(path)：将本地路径转换成url路径</li>
<li>url2pathname(path)：将url路径转换成本地路径</li>
</ul>
<h3 id="urlretrieve"><a href="#urlretrieve" class="headerlink" title="urlretrieve()"></a>urlretrieve()</h3><p>将远程文件保存在本地存储器中.</p>
<p><code>urllib.urlretrieve(url[, filename[, reporthook[, data]]])</code></p>
<ul>
<li>url：文件所在的网址</li>
<li>filename：可选。将文件保存到本地的文件名，如果不指定，urllib会生成一个临时文件来保存</li>
<li>reporthook：可选。是回调函数，当链接服务器和相应数据传输完毕时触发本函数</li>
<li>data：可选。如果用post方式所发出的数据</li>
</ul>
<p>函数执行完毕，返回的结果是一个元组(filename, headers)，filename是保存到本地的文件名，headers是服务器响应头信息。</p>
<h2 id="urllib2"><a href="#urllib2" class="headerlink" title="urllib2"></a>urllib2</h2><p>仅仅是针对Python 2的，在Python 3中，已经没有<code>urllib2</code>这个模块了，取代它的是<code>urllib.request</code>。</p>
<p><strong>Request类</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;req = urllib2.Request(<span class="string">"http://www.itdiffer.com"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Python2</span></div><div class="line">	&gt;&gt;&gt; response = urllib2.urlopen(req)</div><div class="line">	&gt;&gt;&gt; page = response.read()</div><div class="line">	&gt;&gt;&gt; <span class="keyword">print</span> page</div><div class="line"></div><div class="line">Python <span class="number">3</span>:</div><div class="line"></div><div class="line">    &gt;&gt;&gt; response = urllib.request.urlopen(req)</div><div class="line">    &gt;&gt;&gt; page = response.read()</div><div class="line">    &gt;&gt;&gt; print(page)</div></pre></td></tr></table></figure>
<p><code>urllib2</code>或者<code>urllib.request</code>的东西还很多，比如还可以:</p>
<ul>
<li>设置HTTP Proxy</li>
<li>设置Timeout值</li>
<li>自动redirect</li>
<li>处理cookie</li>
</ul>
<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>Python提供了多种模块来处理XML。</p>
<ul>
<li>xml.dom.* 模块：Document Object Model。适合用于处理 DOM API。它能够将XML数据在内存中解析成一个树，然后通过对树的操作来操作XML。但是，这种方式由于将XML数据映射到内存中的树，导致比较慢，且消耗更多内存。</li>
<li>xml.sax.* 模块：simple API for XML。由于SAX以流式读取XML文件，从而速度较快，切少占用内存，但是操作上稍复杂，需要用户实现回调函数。</li>
<li>xml.parser.expat：是一个直接的，低级一点的基于 C 的 expat 的语法分析器。 expat接口基于事件反馈，有点像 SAX 但又不太像，因为它的接口并不是完全规范于 expat 库的。</li>
<li>xml.etree.ElementTree (以下简称 ET)：元素树。它提供了轻量级的Python式的API，相对于DOM，ET快了很多<br>，而且有很多令人愉悦的API可以使用；相对于SAX，ET也有ET.iterparse提供了 “在空中” 的处理方式，没有必要加载整个文档到内存，节省内存。ET的性能的平均值和SAX差不多，但是API的效率更高一点而且使用起来很方便。</li>
</ul>
<p><code>ElementTree</code>在标准库中有两种实现。一种是纯Python实现：<code>xml.etree.ElementTree</code> ，另外一种是速度快一点：<code>xml.etree.cElementTree</code> 。</p>
<p>如果使用的是Python 2，可以像这样引入模块：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div></pre></td></tr></table></figure>
<p>如果是Python 3以上，就没有这个必要了，只需要一句话<code>import xml.etree.ElementTree as ET</code>即可，然后由模块自动来寻找适合的方式。显然Python 3相对Python 2有了很大进步。</p>
<h3 id="常用属性和方法总结"><a href="#常用属性和方法总结" class="headerlink" title="常用属性和方法总结"></a>常用属性和方法总结</h3><p>ET里面的属性和方法不少，这里列出常用的，供使用中备查。</p>
<h4 id="Element对象"><a href="#Element对象" class="headerlink" title="Element对象"></a>Element对象</h4><p>常用属性：</p>
<ul>
<li>tag：string，元素数据种类</li>
<li>text：string，元素的内容</li>
<li>attrib：dictionary，元素的属性字典</li>
<li>tail：string，元素的尾形</li>
</ul>
<p>针对属性的操作</p>
<ul>
<li>clear()：清空元素的后代、属性、text和tail也设置为None</li>
<li>get(key, default=None)：获取key对应的属性值，如该属性不存在则返回default值</li>
<li>items()：根据属性字典返回一个列表，列表元素为(key, value）</li>
<li>keys()：返回包含所有元素属性键的列表</li>
<li>set(key, value)：设置新的属性键与值</li>
</ul>
<p>针对后代的操作</p>
<ul>
<li>append(subelement)：添加直系子元素</li>
<li>extend(subelements)：增加一串元素对象作为子元素 </li>
<li>find(match)：寻找第一个匹配子元素，匹配对象可以为tag或path</li>
<li>findall(match)：寻找所有匹配子元素，匹配对象可以为tag或path</li>
<li>findtext(match)：寻找第一个匹配子元素，返回其text值。匹配对象可以为tag或path</li>
<li>insert(index, element)：在指定位置插入子元素</li>
<li>iter(tag=None)：生成遍历当前元素所有后代或者给定tag的后代的迭代器</li>
<li>iterfind(match)：根据tag或path查找所有的后代</li>
<li>itertext()：遍历所有后代并返回text值</li>
<li>remove(subelement)：删除子元素</li>
</ul>
<h4 id="ElementTree对象"><a href="#ElementTree对象" class="headerlink" title="ElementTree对象"></a>ElementTree对象</h4><ul>
<li>find(match)</li>
<li>findall(match)</li>
<li>findtext(match, default=None)</li>
<li>getroot()：获取根节点.</li>
<li>iter(tag=None)</li>
<li>iterfind(match)</li>
<li>parse(source, parser=None)：装载xml对象，source可以为文件名或文件类型对象.</li>
<li>write(file, encoding=”us-ascii”, xml_declaration=None, default_namespace=None,method=”xml”)　</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">bookstore</span> <span class="attr">liu</span>=<span class="string">"a"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"COOKING"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"CHILDREN"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"WEB"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">author</span>&gt;</span>Erik T. Ray<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div><div class="line"></div><div class="line">fd = open(<span class="string">"xml.xml"</span>)</div><div class="line"></div><div class="line">data = fd.read()</div><div class="line"></div><div class="line">tree = ET.ElementTree(file=<span class="string">"xml.xml"</span>)</div><div class="line"><span class="keyword">print</span> tree</div><div class="line"></div><div class="line"><span class="comment">#获得根元素</span></div><div class="line">root = tree.getroot()</div><div class="line"><span class="keyword">print</span> root.tag</div><div class="line"><span class="keyword">print</span> root.attrib</div><div class="line"></div><div class="line"><span class="comment">#获得根元素下面的元素</span></div><div class="line"><span class="keyword">for</span> child <span class="keyword">in</span> root:</div><div class="line">    <span class="keyword">print</span> child.tag,child.attrib</div><div class="line">    <span class="keyword">for</span> gen <span class="keyword">in</span> child:</div><div class="line">        <span class="keyword">print</span> gen.tag,gen.text</div></pre></td></tr></table></figure>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON建构于两种结构：</p>
<ul>
<li>“名称/值”对的集合（A collection of name/value pairs）。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。</li>
<li>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。</li>
</ul>
<p>python标准库中有JSON模块，主要是执行序列化和反序列化功能：</p>
<ul>
<li>序列化：encoding，把一个Python对象编码转化成JSON字符串</li>
<li>反序列化：decoding，把JSON格式字符串解码转换为Python数据对象</li>
</ul>
<h3 id="encoding-dumps"><a href="#encoding-dumps" class="headerlink" title="encoding: dumps()"></a>encoding: dumps()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data_json = json.dumps(data)</div><div class="line">json.dumps(data, sort_keys=<span class="keyword">True</span>, indent=<span class="number">2</span>) <span class="comment">#格式化输出json数据</span></div></pre></td></tr></table></figure>
<h3 id="decoding-loads"><a href="#decoding-loads" class="headerlink" title="decoding: loads()"></a>decoding: loads()</h3><h3 id="大json字符串"><a href="#大json字符串" class="headerlink" title="大json字符串"></a>大json字符串</h3><p>如果数据不是很大，上面的操作足够了。但现在是所谓“大数据”时代了，随便一个什么业务都在说自己是大数据，显然不能总让JSON很小，事实上真正的大数据，再“大”的JSON也不行了。前面的操作方法是将数据都读入内存，如果数据太大了就会内存溢出。怎么办？JSON提供了<code>load()</code>和<code>dump()</code>函数解决这个问题，注意，跟上面已经用过的函数相比，是不同的，请仔细观察。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> tempfile    <span class="comment">#临时文件模块</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data</div><div class="line">[&#123;<span class="string">'lang'</span>: (<span class="string">'python'</span>, <span class="string">'english'</span>), <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'name'</span>: <span class="string">'qiwsir'</span>&#125;]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = tempfile.NamedTemporaryFile(mode=<span class="string">'w+'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>json.dump(data, f)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.flush()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> open(f.name, <span class="string">"r"</span>).read()        <span class="comment">#Python 3: print(open(f.name, "r").read())</span></div><div class="line">[&#123;<span class="string">"lang"</span>: [<span class="string">"python"</span>, <span class="string">"english"</span>], <span class="string">"age"</span>: <span class="number">40</span>, <span class="string">"name"</span>: <span class="string">"qiwsir"</span>&#125;]</div></pre></td></tr></table></figure>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"code"</span>:<span class="number">20</span>,<span class="attr">"data"</span>:<span class="string">"liuguoquan"</span>,<span class="attr">"person"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"zhang"</span>,<span class="attr">"age"</span>:<span class="number">19</span>,<span class="attr">"sex"</span>:<span class="string">"male"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"zhang"</span>,<span class="attr">"age"</span>:<span class="number">20</span>,<span class="attr">"sex"</span>:<span class="string">"male"</span>&#125;]&#125;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.age = <span class="number">0</span></div><div class="line">        self.name = <span class="string">""</span></div><div class="line">        self.sex = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span>  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.code = <span class="number">2</span></div><div class="line">        self.data = <span class="string">""</span></div><div class="line">        self.person = []</div><div class="line">    </div><div class="line"></div><div class="line">f = open(<span class="string">"sample.json"</span>)</div><div class="line">value = f.read();</div><div class="line"><span class="keyword">print</span> value</div><div class="line"></div><div class="line">ret = json.loads(value)</div><div class="line"><span class="keyword">print</span> type(ret)</div><div class="line"></div><div class="line">a = A()</div><div class="line"><span class="comment">#对象转为字典</span></div><div class="line">a.__dict__ = ret</div><div class="line"><span class="keyword">print</span> a.code</div><div class="line"><span class="keyword">print</span> a.data</div><div class="line"><span class="keyword">print</span> a.person</div><div class="line"><span class="keyword">print</span> type(a.person)</div><div class="line"></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> a.person:</div><div class="line">    b = B()</div><div class="line">    b.__dict__ = item;</div><div class="line">    <span class="keyword">print</span> b.age</div><div class="line">    <span class="keyword">print</span> b.name</div><div class="line">    <span class="keyword">print</span> b.sex</div></pre></td></tr></table></figure>
<h1 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h1><h2 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h2><h2 id="利用源码安装"><a href="#利用源码安装" class="headerlink" title="利用源码安装"></a>利用源码安装</h2><p>在github.com网站可以下载第三方库的源码,通常会看见一个 setup.py 的文件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<h2 id="pip管理工具"><a href="#pip管理工具" class="headerlink" title="pip管理工具"></a>pip管理工具</h2><blockquote>
<p>pip是一个以Python计算机程序语言写成的软件包管理系统，它可以安装和管理软件包，另外不少的软件包也可以在“Python软件包索引”（英语：Python Package Index，简称PyPI）中找到。</p>
</blockquote>
<p><code>pip install XXXXXX</code>（XXXXXX代表第三方库的名字）即可安装第三方库。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编写模块&quot;&gt;&lt;a href=&quot;#编写模块&quot; class=&quot;headerlink&quot; title=&quot;编写模块&quot;&gt;&lt;/a&gt;编写模块&lt;/h1&gt;&lt;h2 id=&quot;模块是程序&quot;&gt;&lt;a href=&quot;#模块是程序&quot; class=&quot;headerlink&quot; title=&quot;模块是程序&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础⑨错误和异常</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A8%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础⑨错误和异常/</id>
    <published>2017-05-07T13:10:53.000Z</published>
    <updated>2017-05-09T06:07:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</div><div class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</div><div class="line">                    ^</div><div class="line">SyntaxError: invalid syntax</div></pre></td></tr></table></figure>
<p>上面那句话因为缺少冒号<code>:</code>，导致解释器无法解释，于是报错。这个报错行为是由Python的语法分析器完成的，并且检测到了错误所在文件和行号（<code>File &quot;&lt;stdin&gt;&quot;, line 1</code>），还以向上箭头<code>^</code>标识错误位置（后面缺少<code>:</code>），最后显示错误类型。</p>
<p>另一种常见错误是逻辑错误。逻辑错误可能是由于不完整或者不合法的输入导致，也可能是无法生成、计算等，或者是其它逻辑问题。</p>
<p>当Python检测到一个错误时，解释器就无法继续执行下去，于是抛出提示信息，即为异常。</p>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>下表中列出常见的异常</p>
<table>
<thead>
<tr>
<th>异常</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>NameError</td>
<td>尝试访问一个没有申明的变量</td>
</tr>
<tr>
<td>ZeroDivisionError</td>
<td>除数为0</td>
</tr>
<tr>
<td>SyntaxError</td>
<td>语法错误</td>
</tr>
<tr>
<td>IndexError</td>
<td>索引超出序列范围</td>
</tr>
<tr>
<td>KeyError</td>
<td>请求一个不存在的字典关键字</td>
</tr>
<tr>
<td>IOError</td>
<td>输入输出错误（比如你要读的文件不存在）</td>
</tr>
<tr>
<td>AttributeError</td>
<td>尝试访问未知的对象属性</td>
</tr>
</tbody>
</table>
<h2 id="NameError"><a href="#NameError" class="headerlink" title="NameError"></a>NameError</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>bar</div><div class="line">Traceback (most recent call last):</div><div class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'bar'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div></pre></td></tr></table></figure>
<p>Python中变量虽然不需在使用变量之前先声明类型，但也需要对变量进行赋值，然后才能使用。不被赋值的变量，不能再Python中存在，因为变量相当于一个标签，要把它贴到对象上才有意义。</p>
<h2 id="ZeroDivisionError"><a href="#ZeroDivisionError" class="headerlink" title="ZeroDivisionError"></a>ZeroDivisionError</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/<span class="number">0</span></div><div class="line">Traceback (most recent call last):</div><div class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ZeroDivisionError: integer division <span class="keyword">or</span> modulo by zero</div></pre></td></tr></table></figure>
<h2 id="SyntaxError"><a href="#SyntaxError" class="headerlink" title="SyntaxError"></a>SyntaxError</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</div><div class="line">                     ^</div><div class="line">SyntaxError: invalid syntax</div></pre></td></tr></table></figure>
<p>这种错误发生在Python代码编译的时候，当编译到这一句时，解释器不能讲代码转化为Python字节码，就报错。</p>
<h2 id="IndexError和KeyError"><a href="#IndexError和KeyError" class="headerlink" title="IndexError和KeyError"></a>IndexError和KeyError</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">4</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">IndexError: list index out of range</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">"python"</span>:<span class="string">"itdiffer.com"</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"java"</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">KeyError: <span class="string">'java'</span></div></pre></td></tr></table></figure>
<h2 id="IOError"><a href="#IOError" class="headerlink" title="IOError"></a>IOError</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"foo"</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">IOError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'foo'</span></div></pre></td></tr></table></figure>
<h2 id="AttributeError"><a href="#AttributeError" class="headerlink" title="AttributeError"></a>AttributeError</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span> <span class="keyword">pass</span>        <span class="comment">#Python 3: class A: pass</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.foo</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'A'</span> object has no attribute <span class="string">'foo'</span></div></pre></td></tr></table></figure>
<h1 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">"this is a division program."</span></div><div class="line">   c = raw_input(<span class="string">"input 'c' continue, otherwise logout:"</span>)</div><div class="line">   <span class="keyword">if</span> c == <span class="string">'c'</span>:</div><div class="line">       a = raw_input(<span class="string">"first number:"</span>)</div><div class="line">       b = raw_input(<span class="string">"second number:"</span>)</div><div class="line">       <span class="keyword">try</span>:</div><div class="line">           <span class="keyword">print</span> float(a)/float(b)</div><div class="line">           <span class="keyword">print</span> <span class="string">"*************************"</span></div><div class="line">       <span class="keyword">except</span> ZeroDivisionError:</div><div class="line">           <span class="keyword">print</span> <span class="string">"The second number can't be zero!"</span></div><div class="line">           <span class="keyword">print</span> <span class="string">"*************************"</span></div><div class="line">   <span class="keyword">else</span>:</div><div class="line">       <span class="keyword">break</span></div></pre></td></tr></table></figure>
<h2 id="try…except"><a href="#try…except" class="headerlink" title="try…except"></a>try…except</h2><p>对于上述程序，只看<code>try</code>和<code>except</code>部分，如果没有异常发生，<code>except</code>子句在<code>try</code>语句执行之后被忽略；如果<code>try</code>子句中有异常可，该部分的其它语句被忽略，直接跳到<code>except</code>部分，执行其后面指定的异常类型及其子句。</p>
<p><code>except</code>后面也可以没有任何异常类型，即无异常参数。如果这样，不论<code>try</code>部分发生什么异常，都会执行<code>except</code>。</p>
<p>在<code>except</code>子句中，可以根据异常或者别的需要，进行更多的操作。比如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span><span class="params">(object)</span>:</span></div><div class="line">   is_raise = <span class="keyword">True</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(self, express)</span>:</span></div><div class="line">       <span class="keyword">try</span>:</div><div class="line">           <span class="keyword">return</span> eval(express) <span class="comment">#运行表达式</span></div><div class="line">       <span class="keyword">except</span> ZeroDivisionError:</div><div class="line">           <span class="keyword">if</span> self.is_raise:</div><div class="line">               <span class="keyword">print</span> <span class="string">"zero can not be division."</span>        <span class="comment">#Python 3:  "zero can not be division."</span></div><div class="line">           <span class="keyword">else</span>:</div><div class="line">               <span class="keyword">raise</span> <span class="comment">#抛出异常信息</span></div></pre></td></tr></table></figure>
<h2 id="处理多个异常"><a href="#处理多个异常" class="headerlink" title="处理多个异常"></a>处理多个异常</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Python <span class="number">2</span>:</div><div class="line"></div><div class="line">    <span class="comment">#!/usr/bin/env python</span></div><div class="line">    <span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"this is a division program."</span></div><div class="line">        c = raw_input(<span class="string">"input 'c' continue, otherwise logout:"</span>)</div><div class="line">        <span class="keyword">if</span> c == <span class="string">'c'</span>:</div><div class="line">            a = raw_input(<span class="string">"first number:"</span>)</div><div class="line">            b = raw_input(<span class="string">"second number:"</span>)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">print</span> float(a)/float(b)</div><div class="line">                <span class="keyword">print</span> <span class="string">"*************************"</span></div><div class="line">            <span class="keyword">except</span> ZeroDivisionError:</div><div class="line">                <span class="keyword">print</span> <span class="string">"The second number can't be zero!"</span></div><div class="line">                <span class="keyword">print</span> <span class="string">"*************************"</span></div><div class="line">            <span class="keyword">except</span> ValueError:</div><div class="line">                <span class="keyword">print</span> <span class="string">"please input number."</span></div><div class="line">                <span class="keyword">print</span> <span class="string">"************************"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">            </div><div class="line"> <span class="keyword">or</span></div><div class="line"> </div><div class="line"><span class="keyword">except</span> (ZeroDivisionError, ValueError): <span class="comment">#括号内也可以包含多个异常</span></div><div class="line">   <span class="keyword">print</span> <span class="string">"please input rightly."</span></div><div class="line">   <span class="keyword">print</span> <span class="string">"********************"</span></div></pre></td></tr></table></figure>
<h2 id="打印异常，但程序不中断"><a href="#打印异常，但程序不中断" class="headerlink" title="打印异常，但程序不中断"></a>打印异常，但程序不中断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"this is a division program."</span></div><div class="line">        c = raw_input(<span class="string">"input 'c' continue, otherwise logout:"</span>)</div><div class="line">        <span class="keyword">if</span> c == <span class="string">'c'</span>:</div><div class="line">            a = raw_input(<span class="string">"first number:"</span>)</div><div class="line">            b = raw_input(<span class="string">"second number:"</span>)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">print</span> float(a)/float(b)</div><div class="line">                <span class="keyword">print</span> <span class="string">"*************************"</span></div><div class="line">            <span class="keyword">except</span> (ZeroDivisionError, ValueError), e: <span class="comment">#类似java</span></div><div class="line">                <span class="keyword">print</span> e</div><div class="line">                <span class="keyword">print</span> <span class="string">"********************"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line"></div><div class="line">Python <span class="number">3</span>:</div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        print(<span class="string">"this is a division program."</span>)</div><div class="line">        c = input(<span class="string">"input 'c' continue, otherwise logout:"</span>)</div><div class="line">        <span class="keyword">if</span> c == <span class="string">'c'</span>:</div><div class="line">            a = input(<span class="string">"first number:"</span>)</div><div class="line">            b = input(<span class="string">"second number:"</span>)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                print(float(a)/float(b))</div><div class="line">                print(<span class="string">"*************************"</span>)</div><div class="line">            <span class="keyword">except</span> (ZeroDivisionError, ValueError) <span class="keyword">as</span> e:</div><div class="line">                print(e)</div><div class="line">                print(<span class="string">"********************"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div></pre></td></tr></table></figure>
<h2 id="else语句"><a href="#else语句" class="headerlink" title="else语句"></a>else语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"I am try"</span>        <span class="comment">#Python 3: print("I am try")，</span></div><div class="line"><span class="meta">... </span><span class="keyword">except</span>:                </div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"I am except"</span></div><div class="line"><span class="meta">... </span><span class="keyword">else</span>:                     <span class="comment">#处理except就不会运行else</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"I am else"</span></div><div class="line"><span class="meta">... </span></div><div class="line">I am <span class="keyword">try</span></div><div class="line">I am <span class="keyword">else</span></div></pre></td></tr></table></figure>
<p>else语句应用，只有输入正确的内容，循环才会终止</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        x = raw_input(<span class="string">"the first number:"</span>)</div><div class="line">        y = raw_input(<span class="string">"the second number:"</span>)</div><div class="line"></div><div class="line">        r = float(x)/float(y)</div><div class="line">        <span class="keyword">print</span> r</div><div class="line">    <span class="keyword">except</span> Exception, e:  <span class="comment">#python3为 Exception as e:</span></div><div class="line">        <span class="keyword">print</span> e</div><div class="line">        <span class="keyword">print</span> <span class="string">"try again."</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<h2 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h2><p>如果有了<code>finally</code>，不管前面执行的是<code>try</code>，还是<code>except</code>，最终都要执行它。类似java</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</div><div class="line"><span class="meta">... </span>    x = <span class="number">1</span>/<span class="number">0</span></div><div class="line"><span class="meta">... </span><span class="keyword">except</span> Exception, e:        <span class="comment">#Python 3:  except Exception as e:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> e        <span class="comment">#Python 3: print(e)</span></div><div class="line"><span class="meta">... </span><span class="keyword">finally</span>:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"del x"</span>        <span class="comment">#Python 3:  print(e)</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">del</span> x</div><div class="line"><span class="meta">... </span></div><div class="line">integer division <span class="keyword">or</span> modulo by zero</div><div class="line"><span class="keyword">del</span> x</div></pre></td></tr></table></figure>
<h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><p><code>assert</code>是一句等价于布尔真的判定，发生异常就意味着表达式为假。当程序运行到某个节点的时候，就断定某个变量的值必然是什么，或者对象必然拥有某个属性等，简单说就是断定什么东西必然是什么，如果不是，就抛出异常。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line">            </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    a = <span class="number">8</span></div><div class="line">    <span class="keyword">assert</span> a &lt; <span class="number">0</span></div><div class="line">    <span class="keyword">print</span> a</div><div class="line">    </div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"/Users/liuguoquan/Documents/workspace/PythonDemo/main.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">assert</span> a &lt; <span class="number">0</span></div><div class="line">AssertionError</div></pre></td></tr></table></figure>
<p>这就是断言assert的引用。什么是使用断言的最佳时机？有文章做了总结：</p>
<p>如果没有特别的目的，断言应该用于如下情况：</p>
<ul>
<li>防御性的编程</li>
<li>运行时对程序逻辑的检测</li>
<li>合约性检查（比如前置条件，后置条件）</li>
<li>程序中的常量</li>
<li>检查文档</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础⑧类</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A7%E7%B1%BB/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础⑧类/</id>
    <published>2017-05-07T13:06:53.000Z</published>
    <updated>2017-05-09T06:07:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><ul>
<li>第一形式</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span> <span class="comment">#object表示继承自object类，Python3中可省略次内容</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    This is a sample of Class</div><div class="line">    """</div><div class="line">    breast = <span class="number">90</span>  <span class="comment">#类的属性 是静态变量</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span> <span class="comment">#初始化方法  self为对象实例本身</span></div><div class="line">        self.name = name</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span>  <span class="comment">#类的方法</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(self,color)</span>:</span></div><div class="line">        d = &#123;&#125;</div><div class="line">        d[self.name] = color;</div><div class="line">        <span class="keyword">return</span> d</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    girl = Person(<span class="string">"songjia"</span>)</div><div class="line">    <span class="keyword">print</span> girl.name</div><div class="line">    girl.name =<span class="string">"liu"</span></div><div class="line">    <span class="keyword">print</span> girl.get_name()</div><div class="line">    <span class="keyword">print</span> girl.color(<span class="string">"white"</span>)</div><div class="line">    girl.breast = <span class="number">80</span> <span class="comment">#修改实例的属性</span></div><div class="line">    <span class="keyword">print</span> girl.breast</div><div class="line">    <span class="keyword">print</span> Person.breast <span class="comment">#类属性不会随实例属性的改变而改变</span></div><div class="line">    Person.breast = <span class="number">100</span></div><div class="line">    <span class="keyword">print</span> Person.breast</div><div class="line">    <span class="keyword">print</span> girl.breast</div></pre></td></tr></table></figure>
<ul>
<li>第二种形式</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; __metaclass__ = type</div><div class="line">&gt;&gt;&gt; class CC:</div><div class="line">...     pass</div><div class="line">... </div><div class="line">&gt;&gt;&gt; cc = CC()</div><div class="line">&gt;&gt;&gt; cc.__class__</div><div class="line">&lt;class '__main__.CC'&gt;</div><div class="line">&gt;&gt;&gt; type(cc)</div><div class="line">&lt;class '__main__.CC'&gt;</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">girl = Person(<span class="string">"songjia"</span>)</div></pre></td></tr></table></figure>
<h2 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span>    <span class="comment">#Python 3: class A:</span></div><div class="line"><span class="meta">... </span>        x = <span class="number">7</span>  <span class="comment">#类的属性</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>下面列出类的几种特殊属性的含义:</p>
<ul>
<li><code>C.__name__</code>：以字符串的形式，返回类的名字，注意这时候得到的仅仅是一个字符串，它不是一个类对象</li>
<li><code>C.__doc__</code>：显示类的文档</li>
<li><code>C.__base__</code>：类C的所有父类。如果是按照上面方式定义的类，应该显示<code>object</code>，因为以上所有类都继承了它。等到学习了“继承”，再来看这个属性，内容就丰富了</li>
<li><code>C.__dict__</code>：以字典形式显示类的所有属性</li>
<li><code>C.__module__</code>：类所在的模块</li>
</ul>
<h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span>    <span class="comment">#Python 3: class A:</span></div><div class="line"><span class="meta">... </span>        x = <span class="number">7</span>  <span class="comment">#类的属性</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo = A()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo.x <span class="comment">#实例属性</span></div></pre></td></tr></table></figure>
<h3 id="类中变量引用可变数据"><a href="#类中变量引用可变数据" class="headerlink" title="类中变量引用可变数据"></a>类中变量引用可变数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">    </div><div class="line">   &gt;&gt;&gt; B.y         <span class="comment">#类属性</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bar = B()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bar.y       <span class="comment">#实例属性</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bar.y.append(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bar.y</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B.y</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B.y.append(<span class="string">"aa"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>B.y</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'aa'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bar.y</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'aa'</span>]</div></pre></td></tr></table></figure>
<p>当类中变量引用的是可变对象是，类属性和实例属性都能直接修改这个对象，从而影响另一方的值。</p>
<h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    This is a sample of Class</div><div class="line">    """</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span> <span class="comment">#初始化方法  self为对象实例本身</span></div><div class="line">        self.__name = name <span class="comment">#__xx双下划线表示类的私有变量</span></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span>  <span class="comment">#类的方法</span></div><div class="line">        <span class="keyword">return</span> self.__name <span class="comment">#类的内部可以访问</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    girl = Person(<span class="string">"songjia"</span>)</div><div class="line">    <span class="keyword">print</span> girl.get_name()</div><div class="line">    <span class="keyword">print</span> girl._name <span class="comment">#无法访问类的私有变量</span></div></pre></td></tr></table></figure>
<h2 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h2><p>在函数、类或者文件开头的部分写文档字符串说明，一般采用三重引号。这样写的最大好处是能够用help()函数看。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""This is python lesson"""</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_func</span><span class="params">(arg)</span>:</span></div><div class="line">   <span class="string">"""This is a function."""</span></div><div class="line">   <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></div><div class="line">   <span class="string">"""This is my class."""</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">my_method</span><span class="params">(self,arg)</span>:</span></div><div class="line">       <span class="string">"""This is my method."""</span></div><div class="line">       <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span>        <span class="comment">#Python 3: class Person:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self, m)</span>:</span></div><div class="line">        h = dict(([<span class="string">"height"</span>, m],))</div><div class="line">        <span class="keyword">return</span> h</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">breast</span><span class="params">(self, n)</span>:</span></div><div class="line">        b = dict(([<span class="string">"breast"</span>, n],))</div><div class="line">        <span class="keyword">return</span> b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span><span class="params">(Person)</span>:</span>  <span class="comment">#继承</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    cang = Girl(<span class="string">"liuguoquan"</span>)</div><div class="line">    <span class="keyword">print</span> cang.get_name()        <span class="comment">#Python 3: print(cang.get_name())，下同，从略</span></div><div class="line">    <span class="keyword">print</span> cang.height(<span class="number">160</span>)</div><div class="line">    <span class="keyword">print</span> cang.breast(<span class="number">90</span>)</div></pre></td></tr></table></figure>
<h2 id="调用覆盖的方法"><a href="#调用覆盖的方法" class="headerlink" title="调用覆盖的方法"></a>调用覆盖的方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span><span class="params">(Person)</span>:</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">       <span class="comment">#Person.__init__(self, name) #调用父类的方法</span></div><div class="line">       super(Girl, self).__init__(name) <span class="comment">#调用父类的方法常用写法</span></div><div class="line">       self.real_name = <span class="string">"Aoi sola"</span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">return</span> self.name</div><div class="line">       </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">   cang = Girl(<span class="string">"canglaoshi"</span>)</div><div class="line">   <span class="keyword">print</span> cang.real_name</div><div class="line">   <span class="keyword">print</span> cang.get_name()</div><div class="line">   <span class="keyword">print</span> cang.height(<span class="number">160</span>)</div><div class="line">   <span class="keyword">print</span> cang.breast(<span class="number">90</span>)</div><div class="line"></div><div class="line">执行结果为：</div><div class="line"></div><div class="line">    Aoi sola</div><div class="line">    canglaoshi</div><div class="line">    &#123;<span class="string">'height'</span>: <span class="number">160</span>&#125;</div><div class="line">    &#123;<span class="string">'breast'</span>: <span class="number">90</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span>        <span class="comment">#Python 3: class Person:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eye</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"two eyes"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">breast</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"The breast is: "</span>,n</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span><span class="params">(object)</span>:</span>        <span class="comment">#Python 3: class Gril:</span></div><div class="line">    age = <span class="number">28</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"The girl is white"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HotGirl</span><span class="params">(Person, Girl)</span>:</span> <span class="comment">#多重继承</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    kong = HotGirl()</div><div class="line">    kong.eye()</div><div class="line">    kong.breast(<span class="number">90</span>)</div><div class="line">    kong.color()</div><div class="line">    <span class="keyword">print</span> kong.age</div><div class="line">    </div><div class="line">two eyes</div><div class="line">The breast <span class="keyword">is</span>:  <span class="number">90</span></div><div class="line">The girl <span class="keyword">is</span> white</div><div class="line"><span class="number">28</span></div></pre></td></tr></table></figure>
<h2 id="多重继承的顺序-广度优先"><a href="#多重继承的顺序-广度优先" class="headerlink" title="多重继承的顺序-广度优先"></a>多重继承的顺序-广度优先</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">K1</span><span class="params">(object)</span>:</span>        <span class="comment">#Python 3: class K1:</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">print</span> <span class="string">"K1-foo"</span>    <span class="comment">#Python 3: print("K1-foo")，下同，从略</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">K2</span><span class="params">(object)</span>:</span>        <span class="comment">#Python 3: class K2:</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">print</span> <span class="string">"K2-foo"</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">print</span> <span class="string">"K2-bar"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">J1</span><span class="params">(K1, K2)</span>:</span></div><div class="line">   <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">J2</span><span class="params">(K1, K2)</span>:</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">print</span> <span class="string">"J2-bar"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(J1, J2)</span>:</span></div><div class="line"><span class="keyword">pass</span></div><div class="line">   </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"><span class="keyword">print</span> C.__mro__</div><div class="line">m = C()</div><div class="line">m.foo()</div><div class="line">m.bar()</div><div class="line">   </div><div class="line">K1-foo</div><div class="line">J2-bar</div></pre></td></tr></table></figure>
<p>代码中的<code>print C.__mro__</code>是要打印出类的继承顺序。从上面清晰看出来了。如果要执行<code>foo()</code>方法，首先看<code>J1</code>，没有，看<code>J2</code>，还没有，看<code>J1</code>里面的<code>K1</code>，有了，即C==&gt;J1==&gt;J2==&gt;K1；<code>bar()</code>也是按照这个顺序，在<code>J2</code>中就找到了一个。</p>
<p>这种对继承属性和方法搜索的顺序称之为“广度优先”。<br>Python 2的新式类，以及Python 3中都是按照此顺序原则搜寻属性和方法的。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="绑定方法"><a href="#绑定方法" class="headerlink" title="绑定方法"></a>绑定方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span>        <span class="comment">#Python 3: class Person:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eye</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"two eyes"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">breast</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"The breast is: "</span>,n</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span><span class="params">(object)</span>:</span>        <span class="comment">#Python 3: class Gril:</span></div><div class="line">    age = <span class="number">28</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"The girl is white"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HotGirl</span><span class="params">(Person, Girl)</span>:</span> <span class="comment">#多重继承</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    kong = HotGirl() <span class="comment">#实例化实现了方法和实例的绑</span></div><div class="line">    kong.eye() <span class="comment">#调用绑定方法</span></div></pre></td></tr></table></figure>
<h2 id="非绑定方法"><a href="#非绑定方法" class="headerlink" title="非绑定方法"></a>非绑定方法</h2><p>在子类中，父类的方法就是<strong>非绑定方法</strong>，因为在子类中，没有建立父类的实例，却要是用父类的方法。</p>
<h2 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf-8</div><div class="line"></div><div class="line">__metaclass__ = type</div><div class="line"></div><div class="line">class StaticMethod: #静态方法</div><div class="line">    @staticmethod</div><div class="line">    def foo():</div><div class="line">        print "This is static method foo()."</div><div class="line"></div><div class="line">class ClassMethod: #类方法</div><div class="line">    @classmethod</div><div class="line">    def bar(cls): #类方法必须有cls参数</div><div class="line">        print "This is class method bar()."</div><div class="line">        print "bar() is part of class:", cls.__name__</div><div class="line"></div><div class="line">if __name__ == "__main__":</div><div class="line">    static_foo = StaticMethod()    #实例化</div><div class="line">    static_foo.foo()               #实例调用静态方法</div><div class="line">    StaticMethod.foo()             #通过类来调用静态方法</div><div class="line">    print "********"</div><div class="line">    class_bar = ClassMethod()</div><div class="line">    class_bar.bar()</div><div class="line">    ClassMethod.bar()</div><div class="line">    </div><div class="line">This is static method foo().</div><div class="line">This is static method foo().</div><div class="line">********</div><div class="line">This is class method bar().</div><div class="line">bar() is part of class: ClassMethod</div><div class="line">This is class method bar().</div><div class="line">bar() is part of class: ClassMethod</div></pre></td></tr></table></figure>
<p>在python中：</p>
<ul>
<li><code>@staticmethod</code>表示下面的方法是静态方法</li>
<li><code>@classmethod</code>表示下面的方法是类方法</li>
</ul>
<h1 id="多态和封装"><a href="#多态和封装" class="headerlink" title="多态和封装"></a>多态和封装</h1><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">print</span> <span class="string">"meow!"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">print</span> <span class="string">"woof!"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bob</span>:</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">bow</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">print</span> <span class="string">"thank you, thank you!"</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">print</span> <span class="string">"hello, welcome to the neighborhood!"</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">drive</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">print</span> <span class="string">"beep, beep!"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(pet)</span>:</span></div><div class="line">   pet.speak()</div><div class="line"></div><div class="line">pets = [ Cat(), Dog(), Bob() ]</div><div class="line"></div><div class="line"><span class="keyword">for</span> pet <span class="keyword">in</span> pets:</div><div class="line">   command(pet)</div></pre></td></tr></table></figure>
<p>Python中的多态特点,Python不检查传入对象的类型，这种方式被称之为“隐式类型”（laten typing）或者“结构式类型”（structural typing），也被通俗的称为“鸭子类型”(duck typeing)，Python是弱类型语言。</p>
<p>Java会检查传入对象的类型，所以是强类型语言。</p>
<h2 id="封装和私有化"><a href="#封装和私有化" class="headerlink" title="封装和私有化"></a>封装和私有化</h2><p>要了解封装，离不开“私有化”，就是将类或者函数中的某些属性限制在某个区域之内，外部无法调用。</p>
<p>Python中私有化的方法也比较简单，就是在准备私有化的属性（包括方法、数据）名字前面加双下划线。例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProtectMe</span><span class="params">(object)</span>:</span>        <span class="comment">#Python 3: class ProtectMe:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.me = <span class="string">"qiwsir"</span></div><div class="line">        self.__name = <span class="string">"kivi"</span> <span class="comment">#私有变量</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__python</span><span class="params">(self)</span>:</span> <span class="comment">#私有方法</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"I love Python."</span>        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">code</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Which language do you like?"</span></div><div class="line">        self.__python()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    p = ProtectMe()</div><div class="line">    <span class="keyword">print</span> p.me</div><div class="line">    <span class="keyword">print</span> p.code()</div></pre></td></tr></table></figure>
<h3 id="如何将一个方法变成属性调用？"><a href="#如何将一个方法变成属性调用？" class="headerlink" title="如何将一个方法变成属性调用？"></a>如何将一个方法变成属性调用？</h3><p>可以使用<code>property</code>函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProtectMe</span><span class="params">(object)</span>:</span>        <span class="comment">#Python 3: class ProtectMe:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.me = <span class="string">"qiwsir"</span></div><div class="line">        self.__name = <span class="string">"kivi"</span> <span class="comment">#私有变量</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__python</span><span class="params">(self)</span>:</span> <span class="comment">#私有方法</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"I love Python."</span>        </div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">code</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Which language do you like?"</span></div><div class="line">        self.__python</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    p = ProtectMe()</div><div class="line">    <span class="keyword">print</span> p.me</div><div class="line">    <span class="keyword">print</span> p.code <span class="comment">#调用方法名即可</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h1&gt;&lt;h2 id=&quot;创建类&quot;&gt;&lt;a href=&quot;#创建类&quot; class=&quot;headerlink&quot; title=&quot;创建类&quot;&gt;&lt;/a&gt;创建类&lt;/h2&gt;&lt;ul&gt;
&lt;
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础⑦函数</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A6%E5%87%BD%E6%95%B0/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础⑦函数/</id>
    <published>2017-05-07T13:04:53.000Z</published>
    <updated>2017-05-09T06:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="建立函数"><a href="#建立函数" class="headerlink" title="建立函数"></a>建立函数</h2><p>在Python中，规定了一种定义函数的格式，下面的举例就是一个函数，以这个函数为例来说明定义函数的格式和调用函数的方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_function</span><span class="params">(a, b)</span>:</span> <span class="comment">#冒号必须</span></div><div class="line">   c = a + b  <span class="comment">#缩进必须</span></div><div class="line">   <span class="keyword">return</span> c</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">   result = add_function(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line">   <span class="keyword">print</span> result               <span class="comment">#python3: print(result)</span></div></pre></td></tr></table></figure>
<p>定义函数的格式为：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数<span class="number">1</span>，参数<span class="number">2</span>，...，参数n)</span></span>：</div><div class="line"></div><div class="line">   函数体（语句块）</div></pre></td></tr></table></figure>
<p>几点说明：</p>
<ul>
<li>函数名的命名规则要符合Python中的命名要求。一般用小写字母和单下划线、数字等组合，有人习惯用aaBb的样式，但我不推荐</li>
<li>def是定义函数的关键词，这个简写来自英文单词define</li>
<li>函数名后面是圆括号，括号里面，可以有参数列表，也可以没有参数</li>
<li>千万不要忘记了括号后面的冒号</li>
<li>函数体（语句块），相对于def缩进，按照python习惯，缩进四个空格</li>
</ul>
<h2 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h2><p>Python对命名的一般要求:</p>
<ul>
<li><p>文件名:全小写,可使用下划线</p>
</li>
<li><p>函数名:小写，可以用下划线风格单词以增加可读性。如：myfunction，my_example_function。<em>注意</em>：混合大小写仅被允许用于这种风格已经占据优势的时候，以便保持向后兼容。有的人，喜欢用这样的命名风格：myFunction，除了第一个单词首字母外，后面的单词首字母大写。这也是可以的，因为在某些语言中就习惯如此。但我不提倡，这是我非常鲜明的观点。</p>
</li>
<li><p>函数的参数：命名方式同变量（本质上就是变量）。如果一个参数名称和Python保留的关键字冲突，通常使用一个后缀下划线会好于使用缩写或奇怪的拼写。</p>
</li>
<li><p>变量:变量名全部小写，由下划线连接各个单词。如color = WHITE，this_is_a_variable = 1。</p>
</li>
</ul>
<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>定义函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span>       <span class="comment">#为了能够更明了显示参数赋值特点，重写此函数</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"x="</span>,x         <span class="comment">#分别打印参数赋值结果</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"y="</span>,y</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x+y</div><div class="line">...</div></pre></td></tr></table></figure>
<p>普通调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">10</span>, <span class="number">3</span>)           <span class="comment">#x=10,y=3</span></div><div class="line">x= <span class="number">10</span></div><div class="line">y= <span class="number">3</span></div><div class="line"><span class="number">13</span></div></pre></td></tr></table></figure>
<p>还可以直接把赋值语句写到里面，就明确了参数和对象的关系。当然，这时候顺序就不重要了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(x=<span class="number">10</span>, y=<span class="number">3</span>)       </div><div class="line">x= <span class="number">10</span></div><div class="line">y= <span class="number">3</span></div><div class="line"><span class="number">13</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(y=<span class="number">10</span>, x=<span class="number">3</span>)</div><div class="line">x= <span class="number">3</span></div><div class="line">y= <span class="number">10</span></div><div class="line"><span class="number">13</span></div></pre></td></tr></table></figure>
<p>多态调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">times</span><span class="params">(x, y=<span class="number">2</span>)</span>:</span>       <span class="comment">#y的默认值为2</span></div><div class="line">    ...     <span class="keyword">print</span> <span class="string">"x="</span>,x                 <span class="comment">#Python 3: print("x=&#123;&#125;".format(x))，以下类似，从略。</span></div><div class="line">    ...     <span class="keyword">print</span> <span class="string">"y="</span>,y</div><div class="line">    ...     <span class="keyword">return</span> x*y</div><div class="line">    ... </div><div class="line">    &gt;&gt;&gt; times(<span class="number">3</span>)                <span class="comment">#x=3,y=2</span></div><div class="line">    x= <span class="number">3</span></div><div class="line">    y= <span class="number">2</span></div><div class="line">    <span class="number">6</span></div><div class="line"></div><div class="line">    &gt;&gt;&gt; times(x=<span class="number">3</span>)              <span class="comment">#同上</span></div><div class="line">    x= <span class="number">3</span></div><div class="line">    y= <span class="number">2</span></div><div class="line">    <span class="number">6</span></div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>times(<span class="number">3</span>, <span class="number">4</span>)              <span class="comment">#x=3,y=4,y的值不再是2</span></div><div class="line">x= <span class="number">3</span></div><div class="line">y= <span class="number">4</span></div><div class="line"><span class="number">12</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>times(<span class="string">"qiwsir"</span>)         <span class="comment">#再次体现了多态特点</span></div><div class="line">x= qiwsir</div><div class="line">y= <span class="number">2</span></div><div class="line"><span class="string">'qiwsirqiwsir'</span></div></pre></td></tr></table></figure>
<p>##注意事项</p>
<p>下面的若干条，是常见编写代码的注意事项：</p>
<ol>
<li>别忘了冒号。一定要记住复合语句首行末尾输入“：”（if,while,for等的第一行）</li>
<li>从第一行开始。要确定顶层（无嵌套）程序代码从第一行开始。</li>
<li>空白行在交互模式提示符下很重要。模块文件中符合语句内的空白行常被忽视。但是，当你在交互模式提示符下输入代码时，空白行则是会结束语句。</li>
<li>缩进要一致。避免在块缩进中混合制表符和空格。</li>
<li>使用简洁的for循环，而不是while or range.相比，for循环更易写，运行起来也更快</li>
<li>要注意赋值语句中的可变对象。</li>
<li>不要期待在原处修改的函数会返回结果,比如list.append()，这在可修改的对象中特别注意</li>
<li>调用函数是，函数名后面一定要跟随着括号，有时候括号里面就是空空的，有时候里面放参数。</li>
<li>不要在导入和重载中使用扩展名或路径。</li>
</ol>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>所谓返回值，就是函数向调用函数的地方返回的数据。</p>
<p>编写一个斐波那契数列函数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibs</span><span class="params">(n)</span>:</span></div><div class="line">   result = [<span class="number">0</span>,<span class="number">1</span>]</div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-2</span>):</div><div class="line">       result.append(result[<span class="number">-2</span>] + result[<span class="number">-1</span>])</div><div class="line">   <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">   lst = fibs(<span class="number">10</span>)</div><div class="line">   <span class="keyword">print</span> lst</div></pre></td></tr></table></figure>
<h3 id="返回多个值元组"><a href="#返回多个值元组" class="headerlink" title="返回多个值元组"></a>返回多个值元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_fun</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = my_fun()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>对这个函数，我们还可以用这样的方式来接收函数的返回值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = my_fun()</div><div class="line">   &gt;&gt;&gt; x</div><div class="line">   <span class="number">1</span></div><div class="line">   &gt;&gt;&gt; y</div><div class="line">   <span class="number">2</span></div><div class="line">   &gt;&gt;&gt; z</div><div class="line">   <span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="函数文档"><a href="#函数文档" class="headerlink" title="函数文档"></a>函数文档</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibs</span><span class="params">(n)</span>:</span></div><div class="line">   <span class="string">"""</span></div><div class="line">   This is a Fibonacci sequence. #函数文档</div><div class="line">   """</div><div class="line">   result = [<span class="number">0</span>,<span class="number">1</span>]</div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-2</span>):</div><div class="line">       result.append(result[<span class="number">-2</span>] + result[<span class="number">-1</span>])</div><div class="line">   <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">   lst = fibs(<span class="number">10</span>)</div><div class="line">   <span class="keyword">print</span> lst</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_fun</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="string">"""</span></div><div class="line"><span class="meta">... </span>    This is my function.</div><div class="line"><span class="meta">... </span>    """</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"I am a craft."</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_fun.__doc__  <span class="comment">#调用打印函数文档</span></div><div class="line"><span class="string">'\n    This is my function.\n    '</span></div></pre></td></tr></table></figure>
<h1 id="参数收集"><a href="#参数收集" class="headerlink" title="参数收集"></a>参数收集</h1><p>函数参数的个数也有不确定的时候，怎么解决这个问题呢？Python用这样的方式解决参数个数的不确定性。</p>
<h2 id="元组形式"><a href="#元组形式" class="headerlink" title="元组形式"></a>元组形式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, *arg)</span>:</span> </div><div class="line">    <span class="keyword">print</span> x         <span class="comment">#Python 3请自动修改为print()的格式，下同，从略。</span></div><div class="line">    result = x</div><div class="line">    <span class="keyword">print</span> arg       <span class="comment">#输出通过*arg方式得到的值</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</div><div class="line">        result +=i</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">print</span> func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)    <span class="comment">#赋给函数的参数个数不仅仅是2个</span></div></pre></td></tr></table></figure>
<h2 id="字典形式"><a href="#字典形式" class="headerlink" title="字典形式"></a>字典形式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(**kargs)</span>:</span></div><div class="line"> ...     <span class="keyword">print</span> kargs        <span class="comment">#Python 3:  print(kargs)</span></div><div class="line"> ...</div><div class="line"> &gt;&gt;&gt; foo(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)    <span class="comment">#注意观察这次赋值的方式和打印的结果</span></div><div class="line"> &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="一种优雅的方式"><a href="#一种优雅的方式" class="headerlink" title="一种优雅的方式"></a>一种优雅的方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="number">5</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bars = (<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(*bars)</div><div class="line"><span class="number">5</span></div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bars = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">#元组中元素的个数，要跟函数所要求的变量个数一致,不然如下报错</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(*bars)</div><div class="line">Traceback (most recent call last):</div><div class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: add() takes exactly <span class="number">2</span> arguments (<span class="number">3</span> given)</div></pre></td></tr></table></figure>
<h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><h3 id="def-foo-p1-p2-p3-…"><a href="#def-foo-p1-p2-p3-…" class="headerlink" title="def foo(p1, p2, p3, …)"></a>def foo(p1, p2, p3, …)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; def foo(p1, p2, p3):</div><div class="line">...     print "p1==&gt;",p1        #Python 3用户修改为print()格式，下同</div><div class="line">...     print "p2==&gt;",p2</div><div class="line">...     print "p3==&gt;",p3</div><div class="line">... </div><div class="line">&gt;&gt;&gt; foo("python", 1, ["qiwsir","github","io"])   </div><div class="line">p1==&gt; python</div><div class="line">p2==&gt; 1</div><div class="line">p3==&gt; ['qiwsir', 'github', 'io']</div></pre></td></tr></table></figure>
<h3 id="def-foo-p1-value1-p2-value2-…"><a href="#def-foo-p1-value1-p2-value2-…" class="headerlink" title="def foo(p1=value1, p2=value2, …)"></a>def foo(p1=value1, p2=value2, …)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt;&gt;&gt; foo(p3=3, p1=10, p2=222)</div><div class="line">    p1==&gt; 10</div><div class="line">    p2==&gt; 222</div><div class="line">    p3==&gt; 3</div><div class="line"></div><div class="line">&gt;&gt;&gt; def foo(p1, p2=22, p3=33):    #设置了两个参数p2, p3的默认值</div><div class="line">...     print "p1==&gt;",p1</div><div class="line">...     print "p2==&gt;",p2</div><div class="line">...     print "p3==&gt;",p3</div><div class="line">... </div><div class="line">&gt;&gt;&gt; foo(11)     #p1=11，其它的参数为默认赋值</div><div class="line">p1==&gt; 11</div><div class="line">p2==&gt; 22</div><div class="line">p3==&gt; 33</div><div class="line">&gt;&gt;&gt; foo(11, 222)     #按照顺序，p2=222, p3依旧维持原默认值</div><div class="line">p1==&gt; 11</div><div class="line">p2==&gt; 222</div><div class="line">p3==&gt; 33</div><div class="line">&gt;&gt;&gt; foo(11, 222, 333)  #按顺序赋值</div><div class="line">p1==&gt; 11</div><div class="line">p2==&gt; 222</div><div class="line">p3==&gt; 333</div><div class="line"></div><div class="line">&gt;&gt;&gt; foo(11, p2=122)</div><div class="line">p1==&gt; 11</div><div class="line">p2==&gt; 122</div><div class="line">p3==&gt; 33</div><div class="line"></div><div class="line">&gt;&gt;&gt; foo(p2=122)     #p1没有默认值，必须要赋值的，否则报错</div><div class="line">Traceback (most recent call last):</div><div class="line"> File "&lt;stdin&gt;", line 1, in &lt;module&gt;</div><div class="line">TypeError: foo() takes at least 1 argument (1 given)</div></pre></td></tr></table></figure>
<h3 id="def-foo-args"><a href="#def-foo-args" class="headerlink" title="def foo(*args)"></a>def foo(*args)</h3><p>这种方式适合于不确定参数个数的时候，在参数args前面加一个<code>*</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args)</span>:</span> </div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> args</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="string">"qiwsir.github.io"</span>)</div><div class="line">(<span class="string">'qiwsir.github.io'</span>,)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="string">"qiwsir.github.io"</span>,<span class="string">"python"</span>)</div><div class="line">(<span class="string">'qiwsir.github.io'</span>, <span class="string">'python'</span>)</div></pre></td></tr></table></figure>
<h3 id="def-foo-args-1"><a href="#def-foo-args-1" class="headerlink" title="def foo(**args)"></a>def foo(**args)</h3><p>这种方式跟上面的区别在于，必须接收类似<code>arg=val</code>形式的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(**args)</span>:</span>    </div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> args</div><div class="line"><span class="meta">... </span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   </div><div class="line">Traceback (most recent call last):</div><div class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: foo() takes exactly <span class="number">0</span> arguments (<span class="number">3</span> given)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<h1 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h1><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y = <span class="number">3</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line">ret = add(<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> ret</div><div class="line"></div><div class="line">lam = <span class="keyword">lambda</span> x : x + <span class="number">3</span></div><div class="line">ret = lam(<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> ret</div><div class="line"></div><div class="line">lam = <span class="keyword">lambda</span> x,y : x + y</div><div class="line">ret = lam(<span class="number">5</span>,<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> ret</div><div class="line"></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<p>lambda函数的使用方法：</p>
<ul>
<li>lambda后面直接跟变量；</li>
<li>变量后面是冒号；</li>
<li>冒号后面是表达式，表达式计算结果就是本函数的返回值；</li>
</ul>
<blockquote>
<p>lambda函数不能包含太多的命令，包含的表达式不能超过一个，不要试图向lambda函数中塞入太多的东西，如果需要更复杂的东西，应该定义一个普通的函数。</p>
</blockquote>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y = <span class="number">3</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line">numbers = range(<span class="number">9</span>)</div><div class="line"><span class="keyword">print</span> numbers</div><div class="line"></div><div class="line">ret = map(add, numbers) <span class="comment">#只引用函数名即可</span></div><div class="line"><span class="keyword">print</span> ret</div><div class="line"></div><div class="line">ret = map(<span class="keyword">lambda</span> x : x + <span class="number">4</span>, numbers) <span class="comment">#</span></div><div class="line"><span class="keyword">print</span> ret</div><div class="line"></div><div class="line">ret = [x + <span class="number">4</span> <span class="keyword">for</span> x <span class="keyword">in</span> numbers] <span class="comment">#列表解析的方式实现</span></div><div class="line"><span class="keyword">print</span> ret</div></pre></td></tr></table></figure>
<p>map()是Python的一个内置函数，它的基本样式是：<br><code>map(fun,seq)</code></p>
<p>func是一个函数，seq是一个序列对象。在执行的时候，序列对象中的每个对象，按照从左到右的顺序依次被取出来，塞入到func函数里面，并将func的返回值依次存到一个列表中。</p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>reduce()是横着逐个元素进行运算</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span> <span class="comment">#连续相加</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x,y)</span>:</span> <span class="comment">#连续相乘</span></div><div class="line">    <span class="keyword">return</span> x * y</div><div class="line"></div><div class="line">numbers = range(<span class="number">9</span>)</div><div class="line"><span class="keyword">print</span> numbers</div><div class="line"></div><div class="line">ret = reduce(add, numbers) </div><div class="line"><span class="keyword">print</span> ret</div><div class="line"></div><div class="line">ret = reduce(mul, numbers) </div><div class="line"><span class="keyword">print</span> ret</div><div class="line"></div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="number">36</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line">numbers = range(<span class="number">-5</span>,<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> numbers</div><div class="line"></div><div class="line">ret = filter(<span class="keyword">lambda</span> x : x &gt; <span class="number">0</span>, numbers) <span class="comment">#过滤掉x &lt; 0的数</span></div><div class="line"><span class="keyword">print</span> ret</div><div class="line"></div><div class="line">ret = [x <span class="keyword">for</span> x <span class="keyword">in</span> numbers <span class="keyword">if</span> x &gt; <span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> ret</div><div class="line"></div><div class="line">ret = filter(<span class="keyword">lambda</span> c : c != <span class="string">'i'</span>, <span class="string">"liuguoquan"</span>) <span class="comment">#过滤掉字符i</span></div><div class="line"><span class="keyword">print</span> ret</div></pre></td></tr></table></figure>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="求解一元二次方程"><a href="#求解一元二次方程" class="headerlink" title="求解一元二次方程"></a>求解一元二次方程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"> 求解一元二次方程</div><div class="line"> </div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic_equation</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    delta = b * b - <span class="number">4</span> * a * c</div><div class="line">    <span class="keyword">if</span> delta &lt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">elif</span> delta == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> -(b / (<span class="number">2</span> * a))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        sqrt_delat = math.sqrt(delta)</div><div class="line">        x1 = (-b + sqrt_delat) / (<span class="number">2</span> * a)</div><div class="line">        x2 = (-b - sqrt_delat) / (<span class="number">2</span> * a)</div><div class="line">        <span class="keyword">return</span> x1,x2</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"a quadratic equation: x^2 + 2x + 1 = 0"</span></div><div class="line">    coefficients = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</div><div class="line">    roots = quadratic_equation(*coefficients)</div><div class="line">    <span class="keyword">if</span> roots:</div><div class="line">        <span class="keyword">print</span> <span class="string">"the result is: "</span>,roots</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"this equation has no solution"</span></div><div class="line">        </div><div class="line">a quadratic equation: x^<span class="number">2</span> + <span class="number">2</span>x + <span class="number">1</span> = <span class="number">0</span></div><div class="line">the result <span class="keyword">is</span>:  <span class="number">-1.0</span></div></pre></td></tr></table></figure>
<h2 id="统计考试成绩"><a href="#统计考试成绩" class="headerlink" title="统计考试成绩"></a>统计考试成绩</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"> 统计考试成绩</div><div class="line"> </div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_score</span><span class="params">(scores)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        统计平均分</div><div class="line">    """</div><div class="line">    score_values = scores.values()</div><div class="line">    sum_scores = sum(score_values)</div><div class="line">    average = sum_scores / len(score_values)</div><div class="line">    <span class="keyword">return</span> average</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorted_score</span><span class="params">(scores)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        对成绩从高到低排序呢</div><div class="line">    """</div><div class="line">    score_list = [(scores[k],k) <span class="keyword">for</span> k <span class="keyword">in</span> scores]  <span class="comment">#将键-值互换位置 score_list是列表,里面的元素是一个元组</span></div><div class="line">    sort_lst = sorted(score_list,reverse = <span class="keyword">True</span>)</div><div class="line">    <span class="keyword">return</span> [(i[<span class="number">1</span>],i[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> sort_lst] <span class="comment">#将键-值互换位置</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_score</span><span class="params">(scores)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        成绩最高的姓名和分数</div><div class="line">    """</div><div class="line">    lst = sorted_score(scores)</div><div class="line">    max_score = lst[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> [(i[<span class="number">0</span>],i[<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> lst <span class="keyword">if</span> i[<span class="number">1</span>] == max_score]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_scroe</span><span class="params">(scores)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        成绩最低的姓名和分数</div><div class="line">    """</div><div class="line">    lst = sorted_score(scores)</div><div class="line">    min_score = lst[len(lst) - <span class="number">1</span>][<span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> [(i[<span class="number">0</span>],i[<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> lst <span class="keyword">if</span> i[<span class="number">1</span>] == min_score]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    scores = &#123;<span class="string">"google"</span>:<span class="number">98</span>,<span class="string">"facebook"</span>:<span class="number">99</span>,<span class="string">"baidu"</span>:<span class="number">52</span>,<span class="string">"alibab"</span>:<span class="number">80</span>,<span class="string">"yahoo"</span>:<span class="number">49</span>,<span class="string">"android"</span>:<span class="number">76</span>,<span class="string">"apple"</span>:<span class="number">99</span>,<span class="string">"amazon"</span>:<span class="number">99</span>&#125;</div><div class="line">    </div><div class="line">    ret = average_score(scores) <span class="comment">#平均分</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"average is: "</span>,ret</div><div class="line"></div><div class="line">    ret = sorted_score(scores) <span class="comment">#成绩表</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"list of scores is: "</span>,ret</div><div class="line">    </div><div class="line">    ret = max_score(scores) <span class="comment">#学霸们</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"学霸是: "</span>,ret</div><div class="line">    </div><div class="line">    ret = min_scroe(scores) <span class="comment">#学渣</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"学渣是: "</span>,ret</div><div class="line"></div><div class="line">average <span class="keyword">is</span>:  <span class="number">81.5</span></div><div class="line">list of scores <span class="keyword">is</span>:  [(<span class="string">'facebook'</span>, <span class="number">99</span>), (<span class="string">'apple'</span>, <span class="number">99</span>), (<span class="string">'amazon'</span>, <span class="number">99</span>), (<span class="string">'google'</span>, <span class="number">98</span>), (<span class="string">'alibab'</span>, <span class="number">80</span>), (<span class="string">'android'</span>, <span class="number">76</span>), (<span class="string">'baidu'</span>, <span class="number">52</span>), (<span class="string">'yahoo'</span>, <span class="number">49</span>)]</div><div class="line">学霸是:  [(<span class="string">'facebook'</span>, <span class="number">99</span>), (<span class="string">'apple'</span>, <span class="number">99</span>), (<span class="string">'amazon'</span>, <span class="number">99</span>)]</div><div class="line">学渣是:  [(<span class="string">'yahoo'</span>, <span class="number">49</span>)]</div></pre></td></tr></table></figure>
<h2 id="找质数"><a href="#找质数" class="headerlink" title="找质数"></a>找质数</h2><p>质数又称素数，指在大于1的自然数中，除了1和此整数自身外，无法被其他自然整数整除的数（也可定义为只有1和本身两个因数的数）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">寻找质数</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    判断一个数是否是质数</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> n &lt;=<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,int(math.sqrt(n) + <span class="number">1</span>)):</div><div class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    </div><div class="line">    primes = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">100</span>) <span class="keyword">if</span> is_prime(i)]</div><div class="line">    <span class="keyword">print</span> primes</div><div class="line"></div><div class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">47</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">63</span>, <span class="number">65</span>, <span class="number">67</span>, <span class="number">69</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">83</span>, <span class="number">85</span>, <span class="number">87</span>, <span class="number">89</span>, <span class="number">91</span>, <span class="number">93</span>, <span class="number">95</span>, <span class="number">97</span>, <span class="number">99</span>]</div></pre></td></tr></table></figure>
<h2 id="编写函数的注意事项"><a href="#编写函数的注意事项" class="headerlink" title="编写函数的注意事项"></a>编写函数的注意事项</h2><ul>
<li>尽量不要使用全局变量</li>
<li>如果参数是可变数据类型，则在函数内不要修改它</li>
<li>每个函数的功能和目的要单一，不要一个函数试图做很多事情</li>
<li>函数的代码行数尽量少</li>
<li>函数的独立性越强越好，不要跟其他的外部东西产生关联</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;建立函数&quot;&gt;&lt;a href=&quot;#建立函数&quot; class=&quot;headerlink&quot; title=&quot;建立函数&quot;&gt;&lt;/a&gt;建立函数&lt;/h
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础⑥文件</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A5%E6%96%87%E4%BB%B6/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础⑥文件/</id>
    <published>2017-05-07T13:02:53.000Z</published>
    <updated>2017-05-09T06:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h1><p>在某个文件夹下面建立了一个文件，名曰：130.txt，并且在里面输入了如下内容：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">learn python</div><div class="line"><span class="string">http:</span><span class="comment">//qiwsir.github.io</span></div><div class="line">qiwsir<span class="meta">@gmail</span>.com</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">"123.txt"</span>) <span class="comment">#打开已经存在的文件，此文件在当前目录，若在其他目录使用绝对路径</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">    <span class="keyword">print</span> line, <span class="comment">#Python 3: print(line, end='')</span></div><div class="line"></div><div class="line">learn python</div><div class="line">http://qiwsir.github.io</div><div class="line">liuguoquan@gmail.com</div></pre></td></tr></table></figure>
<p>紧接着做下面的操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line2 <span class="keyword">in</span> f:     <span class="comment">#在前面通过for循环读取了文件内容之后，再次读取，</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> line2         <span class="comment">#然后打印，结果就什么也显示，这是什么问题？</span></div><div class="line">...</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>这不是什么错误，是因为前一次已经读取了文件内容，并且到了文件的末尾了。再重复操作，就是从末尾开始继续读了。当然显示不了什么东西，但是Python并不认为这是错误。</p>
<blockquote>
<p>在这里，如果要再次读取，那就从新<code>f = open(&#39;130.txt&#39;)</code>。</p>
</blockquote>
<h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">"1234.txt"</span>,<span class="string">"w"</span>) <span class="comment">#创建文件</span></div><div class="line">f.write(<span class="string">"hello"</span>) <span class="comment">#向文件写入内容</span></div><div class="line">f.close() <span class="comment">#关闭文件流</span></div></pre></td></tr></table></figure>
<p>创建文件，我们同样是用<code>open()</code>这个函数，但是多了个<code>&quot;w&quot;</code>，这是在告诉Python用什么样的模式打开文件。也就是说，用<code>open()</code>操作文件，可以有不同的模式。看下表：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>以读方式打开文件，可读取文件信息。</td>
</tr>
<tr>
<td>w</td>
<td>以写方式打开文件，可向文件写入信息。如文件存在，则清空该文件，再写入新内容</td>
</tr>
<tr>
<td>a</td>
<td>以追加模式打开文件（即一打开文件，文件指针自动移到文件末尾），如果文件不存在则创建</td>
</tr>
<tr>
<td>r+</td>
<td>以读写方式打开文件，可对文件进行读和写操作。</td>
</tr>
<tr>
<td>w+</td>
<td>消除文件内容，然后以读写方式打开文件。</td>
</tr>
<tr>
<td>a+</td>
<td>以读写方式打开文件，并把文件指针移到文件尾。</td>
</tr>
<tr>
<td>b</td>
<td>以二进制模式打开文件，而不是以文本模式。该模式只对Windows或Dos有效，类Unix的文件是用二进制模式进行操作的。</td>
</tr>
</tbody>
</table>
<p>从表中不难看出，不同模式下打开文件，可以进行相关的读写。那么，如果什么模式都不写，像前面那样呢？那样就是默认为r模式，只读的方式打开文件。</p>
<h1 id="使用with"><a href="#使用with" class="headerlink" title="使用with"></a>使用with</h1><p>使用with实现安全的关闭文件，不用close操作了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">"130.txt"</span>,<span class="string">"a"</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    f.write(<span class="string">"\nThis is about 'with...as...'"</span>)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">"130.txt"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> f.read()</div><div class="line">...</div><div class="line">learn python</div><div class="line">http://qiwsir.github.io</div><div class="line">qiwsir@gmail.com</div><div class="line">hello</div><div class="line"></div><div class="line">This <span class="keyword">is</span> about <span class="string">'with...as...'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h1 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">file_stat = os.stat(<span class="string">"123.txt"</span>)</div><div class="line"><span class="keyword">print</span> file_stat</div><div class="line"></div><div class="line">posix.stat_result(st_mode=<span class="number">33188</span>, st_ino=<span class="number">13575445</span>, st_dev=<span class="number">16777220</span>, st_nlink=<span class="number">1</span>, st_uid=<span class="number">501</span>, st_gid=<span class="number">20</span>, st_size=<span class="number">57</span>,</div><div class="line">st_atime=<span class="number">1470988267</span>,</div><div class="line">st_mtime=<span class="number">1470988267</span>,</div><div class="line">st_ctime=<span class="number">1470988267</span>) <span class="comment">#文件创建时间</span></div></pre></td></tr></table></figure>
<h1 id="read-readLine-readLines"><a href="#read-readLine-readLines" class="headerlink" title="read/readLine/readLines"></a>read/readLine/readLines</h1><ul>
<li>read：如果指定了参数size，就按照该指定长度从文件中读取内容，否则，就读取全文。被读出来的内容，全部塞到一个字符串里面。这样有好处，就是东西都到内存里面了，随时取用，比较快捷；“成也萧何败萧何”，也是因为这点，如果文件内容太多了，内存会吃不消的。文档中已经提醒注意在“non-blocking”模式下的问题，关于这个问题，不是本节的重点，暂时不讨论。</li>
<li>readline：那个可选参数size的含义同上。它则是以行为单位返回字符串，也就是每次读一行，依次循环，如果不限定size，直到最后一个返回的是空字符串，意味着到文件末尾了(EOF)。</li>
<li>readlines：size同上。它返回的是以行为单位的列表，即相当于先执行<code>readline()</code>，得到每一行，然后把这一行的字符串作为列表中的元素塞到一个列表中，最后将此列表返回。</li>
</ul>
<p>有这样一个文档,you.md，其内容和基本格式如下：</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">You Raise <span class="keyword">Me</span> Up</div><div class="line"><span class="keyword">When</span> I am down <span class="keyword">and</span>, oh my soul, so weary;</div><div class="line"><span class="keyword">When</span> troubles come <span class="keyword">and</span> my heart burdened be;</div><div class="line"><span class="keyword">Then</span>, I am still <span class="keyword">and</span> wait here <span class="keyword">in</span> the silence,</div><div class="line"><span class="keyword">Until</span> you come <span class="keyword">and</span> sit awhile <span class="keyword">with</span> <span class="keyword">me</span>.</div><div class="line">You raise <span class="keyword">me</span> up, so I can stand <span class="keyword">on</span> mountains;</div><div class="line">You raise <span class="keyword">me</span> up, <span class="keyword">to</span> walk <span class="keyword">on</span> stormy seas;</div><div class="line">I am strong, <span class="keyword">when</span> I am <span class="keyword">on</span> your shoulders;</div><div class="line">You raise <span class="keyword">me</span> up: <span class="keyword">To</span> more than I can be.</div></pre></td></tr></table></figure>
<p>分别用上述三种函数读取这个文件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"you.md"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>content = f.read()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>content <span class="comment">#结果为字符串</span></div><div class="line"><span class="string">'You Raise Me Up\nWhen I am down and, oh my soul, so weary;\nWhen troubles come and my heart burdened be;\nThen, I am still and wait here in the silence,\nUntil you come and sit awhile with me.\nYou raise me up, so I can stand on mountains;\nYou raise me up, to walk on stormy seas;\nI am strong, when I am on your shoulders;\nYou raise me up: To more than I can be.\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> content</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"you.md"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</div><div class="line"><span class="string">'You Raise Me Up\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</div><div class="line"><span class="string">'When I am down and, oh my soul, so weary;\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</div><div class="line"><span class="string">'When troubles come and my heart burdened be;\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</div><div class="line"></div><div class="line">f = open(<span class="string">"you.md"</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">   line = f.readline()</div><div class="line">   <span class="keyword">if</span> <span class="keyword">not</span> line:         <span class="comment">#到EOF，返回空字符串，则终止循环</span></div><div class="line">       <span class="keyword">break</span></div><div class="line">   <span class="keyword">print</span> line ,         <span class="comment">#Python 3: print(line, end='')</span></div><div class="line"></div><div class="line">f.close()                <span class="comment">#别忘记关闭文件</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"you.md"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>content = f.readlines()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>content <span class="comment">#结果为列表</span></div><div class="line">[<span class="string">'You Raise Me Up\n'</span>, <span class="string">'When I am down and, oh my soul, so weary;\n'</span>, <span class="string">'When troubles come and my heart burdened be;\n'</span>, <span class="string">'Then, I am still and wait here in the silence,\n'</span>, <span class="string">'Until you come and sit awhile with me.\n'</span>, <span class="string">'You raise me up, so I can stand on mountains;\n'</span>, <span class="string">'You raise me up, to walk on stormy seas;\n'</span>, <span class="string">'I am strong, when I am on your shoulders;\n'</span>, <span class="string">'You raise me up: To more than I can be.\n'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> content:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> line ,         <span class="comment">#Python 3: print(line, end='')</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.close</div></pre></td></tr></table></figure>
<h1 id="读很大的文件fileinput"><a href="#读很大的文件fileinput" class="headerlink" title="读很大的文件fileinput"></a>读很大的文件fileinput</h1><p>如果文件太大，就不能用<code>read()</code>或者<code>readlines()</code>一次性将全部内容读入内存，可以使用while循环和<code>readline()</code>来完成这个任务。</p>
<p>此外，还有一个方法：<code>fileinput</code>模块</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fileinput</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(<span class="string">"you.md"</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> line ,        <span class="comment">#Python 3: print(line, end='')</span></div><div class="line">...</div><div class="line">You Raise Me Up</div><div class="line">When I am down <span class="keyword">and</span>, oh my soul, so weary;</div><div class="line">When troubles come <span class="keyword">and</span> my heart burdened be;</div><div class="line">Then, I am still <span class="keyword">and</span> wait here <span class="keyword">in</span> the silence,</div><div class="line">Until you come <span class="keyword">and</span> sit awhile <span class="keyword">with</span> me.</div><div class="line">You <span class="keyword">raise</span> me up, so I can stand on mountains;</div><div class="line">You <span class="keyword">raise</span> me up, to walk on stormy seas;</div><div class="line">I am strong, when I am on your shoulders;</div><div class="line">You <span class="keyword">raise</span> me up: To more than I can be.</div></pre></td></tr></table></figure>
<p>还有一种方法，更为常用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">  ...     <span class="keyword">print</span> line ,      <span class="comment">#Python 3:  print(line, end='')</span></div><div class="line">  ...</div><div class="line">  You Raise Me Up</div><div class="line">  When I am down <span class="keyword">and</span>, oh my soul, so weary;</div><div class="line">  When troubles come <span class="keyword">and</span> my heart burdened be;</div><div class="line">  Then, I am still <span class="keyword">and</span> wait here <span class="keyword">in</span> the silence,</div><div class="line">  Until you come <span class="keyword">and</span> sit awhile <span class="keyword">with</span> me.</div><div class="line">  You <span class="keyword">raise</span> me up, so I can stand on mountains;</div><div class="line">  You <span class="keyword">raise</span> me up, to walk on stormy seas;</div><div class="line">  I am strong, when I am on your shoulders;</div><div class="line">  You <span class="keyword">raise</span> me up: To more than I can be.</div></pre></td></tr></table></figure>
<p>之所以能够如此，是因为文件是可迭代的对象，直接用for来迭代即可。</p>
<h1 id="seek"><a href="#seek" class="headerlink" title="seek"></a>seek</h1><p>这个函数的功能是让指针移动。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"you.md"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</div><div class="line">    <span class="string">'You Raise Me Up\n'</span></div><div class="line">    &gt;&gt;&gt; f.readline()</div><div class="line">    <span class="string">'When I am down and, oh my soul, so weary;\n'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">0</span>)  <span class="comment">#回到文件的最开始位置</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</div><div class="line">    <span class="string">'You Raise Me Up\n'</span></div><div class="line"></div><div class="line">此时指针所在的位置，还可以用`tell()`来显示，如</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.tell()</div><div class="line">    <span class="number">17L</span></div></pre></td></tr></table></figure>
<p><code>seek()</code>还有别的参数，具体如下：</p>
<blockquote>
<p>seek(…)<br>   seek(offset[, whence]) -&gt; None.  Move to new file position.</p>
</blockquote>
<p>whence的值：</p>
<ul>
<li>默认值是0，表示从文件开头开始计算指针偏移的量（简称偏移量）。这是offset必须是大于等于0的整数。</li>
<li>是1时，表示从当前位置开始计算偏移量。offset如果是负数，表示从当前位置向前移动，整数表示向后移动。</li>
<li>是2时，表示相对文件末尾移动。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读文件&quot;&gt;&lt;a href=&quot;#读文件&quot; class=&quot;headerlink&quot; title=&quot;读文件&quot;&gt;&lt;/a&gt;读文件&lt;/h1&gt;&lt;p&gt;在某个文件夹下面建立了一个文件，名曰：130.txt，并且在里面输入了如下内容：&lt;/p&gt;
&lt;figure class=&quot;highli
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础⑤语句</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A4%E8%AF%AD%E5%8F%A5/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础⑤语句/</id>
    <published>2017-05-07T13:00:53.000Z</published>
    <updated>2017-05-09T06:04:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>前面已经讲过了四则运算，其中涉及到一些运算符：加减乘除，对应的符号分别是：+  -  *  /，此外，还有求余数的：%。这些都是算术运算符。其实，算术运算符不止这些。根据中学数学的知识，也应该想到，还应该有乘方、开方之类的。</p>
<p>下面列出一个表格，将所有的运算符表现出来。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加 - 两个对象相加</td>
<td>10+20 输出结果 30</td>
</tr>
<tr>
<td>-</td>
<td>减 - 得到负数或是一个数减去另一个数</td>
<td>10-20 输出结果 -10</td>
</tr>
<tr>
<td>*</td>
<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>
<td>10 * 20 输出结果 200</td>
</tr>
<tr>
<td>/</td>
<td>除 - x除以y</td>
<td>20/10 输出结果 2</td>
</tr>
<tr>
<td>%</td>
<td>取余 - 返回除法的余数</td>
<td>20%10 输出结果 0</td>
</tr>
<tr>
<td>**</td>
<td>幂 - 返回x的y次幂</td>
<td>10**2 输出结果 100</td>
</tr>
<tr>
<td>//</td>
<td>取整除 - 返回商的整数部分</td>
<td>9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</td>
</tr>
</tbody>
</table>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>以下假设<code>a=10</code>，<code>b=20</code>：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>等于 - 比较对象是否相等</td>
<td>(a == b) 返回 False。</td>
</tr>
<tr>
<td>!=</td>
<td>不等于 - 比较两个对象是否不相等</td>
<td>(a != b) 返回 True.</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于 - 返回x是否大于y</td>
<td>(a &gt; b) 返回 False。</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于 - 返回x是否小于y</td>
<td>(a &lt; b) 返回 True。</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于 - 返回x是否大于等于y。</td>
<td>(a &gt;= b) 返回 False。</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于 - 返回x是否小于等于y。</td>
<td>(a &lt;= b) 返回 True。</td>
</tr>
</tbody>
</table>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>（假设<code>a=10</code>，<code>b=20</code>）</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>and</td>
<td>布尔”与” - 如果x为False，x and y返回False，否则它返回y的计算值。</td>
<td>(a and b) 返回 20。</td>
</tr>
<tr>
<td>or</td>
<td>布尔”或” - 如果x是True，它返回True，否则它返回y的计算值。</td>
<td>(a or b) 返回 10。</td>
</tr>
<tr>
<td>not</td>
<td>布尔”非” - 如果x为True，返回False。如果x为False，它返回True。</td>
<td>not(a and b) 返回 false。</td>
</tr>
</tbody>
</table>
<ul>
<li>and</li>
</ul>
<p>and，翻译为“与”运算，但事实上，这种翻译容易引起望文生义的理解。</p>
<p>先说一下正确的理解。</p>
<p><code>A and B</code>，含义是：</p>
<p>首先运算A，如果A的值是True，就计算B，并将B的结果返回做为最终结果，如果B是False，那么<code>A and B</code>的最终结果就是False，如果B的结果是True，那么A and B的结果就是True；</p>
<p>如果A的值是False ，就不计算B了，直接返回<code>A and B</code>的结果为False.</p>
<h1 id="简单语句"><a href="#简单语句" class="headerlink" title="简单语句"></a>简单语句</h1><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p>在Python 2中，print是一个语句，但是在Python 3中它是一个函数了。这点请注意。</p>
<p>以Python 2为例，说明print语句。如果说读者使用的是Python 3，请自行将print xxx修改为print(xxx)，其它不变。</p>
<p>print发起的语句，在程序中主要是将某些东西打印出来，还记得在讲解字符串的时候，专门讲述了字符串的格式化输出吗？那就是用来print的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"hello, world"</span></div><div class="line">hello, world</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"hello"</span>,<span class="string">"world"</span> //逗号表示打印在同一行</div><div class="line">hello world</div></pre></td></tr></table></figure>
<p>本来，在print语句中，字符串后面会接一个\n符号。即换行。但是，如果要在一个字符串后面跟着逗号，那么换行就取消了，意味着两个字符串”hello”，”world”打印在同一行。</p>
<p>但是，在Python 3中情况有变。默认的end=’\n’，如果不打算换行，可以在使用print()函数的时候，修改end这个参数的值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]:</div><div class="line">    print(i, end=<span class="string">','</span>)</div><div class="line"></div><div class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,</div></pre></td></tr></table></figure>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>import引入模块的方法，是Python编程经常用到的。引用方法有如下几种：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>math.pow(<span class="number">3</span>,<span class="number">2</span>)</div><div class="line"><span class="number">9.0</span></div></pre></td></tr></table></figure>
<p>这是一种可读性非常好的引用方式，并且不同模块的同名函数不会产生冲突。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pow</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pow(<span class="number">3</span>,<span class="number">2</span>)</div><div class="line"><span class="number">9.0</span></div></pre></td></tr></table></figure>
<p>这种引用方法，比较适合于引入模块较少的时候。如果引入模块多了，可读性就下降了，会不知道那个函数来自那个模块。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pow <span class="keyword">as</span> pingfang</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pingfang(<span class="number">3</span>,<span class="number">2</span>)</div><div class="line"><span class="number">9.0</span></div></pre></td></tr></table></figure>
<p>将从某个模块引入的函数重命名，比如讲pow充命名为pingfang，然后使用pingfang()就相当于在使用pow()了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pow, e, pi</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pow(e,pi)</div><div class="line"><span class="number">23.140692632779263</span></div></pre></td></tr></table></figure>
<p>引入了math模块里面的pow,e,pi，pow()是一个乘方函数，e是那个欧拉数；pi就是π.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pow(<span class="number">3</span>,<span class="number">2</span>)</div><div class="line"><span class="number">9.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sqrt(<span class="number">9</span>)</div><div class="line"><span class="number">3.0</span></div></pre></td></tr></table></figure>
<p>一下将math中的所有函数都引过来了。不过，这种方式的结果是让可读性更降低了。仅适用于模块中的函数比较少的时候，并且在程序中应用比较频繁。</p>
<p>事实上，不仅函数可以引入，模块中还可以包括常数等，都可以引入。在编程中，模块中可以包括各样的对象，都可以引入。</p>
<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">3</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = <span class="number">1</span>, <span class="string">"python"</span>, [<span class="string">"hello"</span>, <span class="string">"world"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y</div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"itdiffer.com"</span>, <span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">(<span class="string">'itdiffer.com'</span>, <span class="string">'python'</span>)</div></pre></td></tr></table></figure>
<p>原来是将右边的两个值装入了一个元组，然后将元组赋给了变量a。</p>
<p>两个变量的值对调,python只要一行就完成了:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = b, a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<p>因为我前面已经数次提到的Python中变量和对象的关系。变量相当于贴在对象上的标签。这个操作只不过是将标签换个位置，就分别指向了不同的数据对象。</p>
<p>还有一种赋值方式，被称为“链式赋值”</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = n = <span class="string">"I use python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> m, n            <span class="comment">#Python 3：print(m, n)</span></div><div class="line">I use python I use python</div></pre></td></tr></table></figure>
<p>用这种方式，实现了一次性对两个变量赋值，并且值相同。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(m)</div><div class="line"><span class="number">3072659528L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(n)</div><div class="line"><span class="number">3072659528L</span></div></pre></td></tr></table></figure>
<p>用<code>id()</code>来检查一下，发现两个变量所指向的是同一个对象。</p>
<p>另外，还有一种判断方法，来检查两个变量所指向的值是否是同一个（注意，同一个和相等是有差别的。在编程中，同一个就是<code>id()</code>的结果一样。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m <span class="keyword">is</span> n</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>这是在检查m和n分别指向的对象是否是同一个，True说明是同一个。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"I use python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>这是跟上面链式赋值等效的。</p>
<p>但是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"I use python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">3072659608L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</div><div class="line"><span class="number">3072659568L</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>看出其中的端倪了吗？这次a、b两个变量虽然相等，但不是指向同一个对象。</p>
<p>还有一种赋值形式，如果从数学的角度看，是不可思议的，如：<code>x = x + 1</code>，在数学中，这个等式是不成立的。因为数学中的“=”是等于的含义，但是在编程语言中，它成立，因为”=”是赋值的含义，即将变量x增加1之后，再把得到的结果赋值变量x.</p>
<p>这种变量自己变化之后将结果再赋值给自己的形式，称之为“增量赋值”。<code>+、-、*、/、</code>%都可以实现类似这种操作。<br>为了让这个操作写起来省点事（要写两遍同样一个变量），可以写成：<code>x += 1</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x += <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<p>除了数字，字符串进行增量赋值，在实际中也很有价值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = <span class="string">"py"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m += <span class="string">"th"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line"><span class="string">'pyth'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m += <span class="string">"on"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line"><span class="string">'python'</span></div></pre></td></tr></table></figure>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">8</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a == <span class="number">8</span>: //冒号是必须的</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> a //四个空格的缩进是必须的</div><div class="line">...</div><div class="line"><span class="number">8</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>必须要通过缩进方式来表示语句块的开始和结束</li>
<li>缩进用四个空格也是必须的</li>
</ul>
<h2 id="if…elif…else"><a href="#if…elif…else" class="headerlink" title="if…elif…else"></a>if…elif…else</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">print</span> <span class="string">"请输入一个整数数字:"</span></div><div class="line">number = int(raw_input())</div><div class="line"></div><div class="line"><span class="keyword">if</span> number == <span class="number">10</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"您输入的数字是： %d"</span> % number</div><div class="line">    <span class="keyword">print</span> <span class="string">"You are smart"</span></div><div class="line"><span class="keyword">elif</span> number &gt; <span class="number">10</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"您输入的数字是： %d"</span> % number</div><div class="line">    <span class="keyword">print</span> <span class="string">"This number is more than 10."</span></div><div class="line"><span class="keyword">elif</span> number &lt; <span class="number">10</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"您输入的数字是： %d"</span> % number</div><div class="line">    <span class="keyword">print</span> <span class="string">"This number is less than 10."</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Are you a human?"</span></div><div class="line">    </div><div class="line">结果打印：</div><div class="line"></div><div class="line">请输入一个整数数字:</div><div class="line"><span class="number">12</span></div><div class="line">您输入的数字是： <span class="number">12</span></div><div class="line">This number <span class="keyword">is</span> more than <span class="number">10.</span></div><div class="line"></div><div class="line">请输入一个整数数字:</div><div class="line"><span class="number">10</span></div><div class="line">您输入的数字是： <span class="number">10</span></div><div class="line">You are smart</div><div class="line"></div><div class="line">请输入一个整数数字:</div><div class="line"><span class="number">9</span></div><div class="line">您输入的数字是： <span class="number">9</span></div><div class="line">This number <span class="keyword">is</span> less than <span class="number">10.</span></div></pre></td></tr></table></figure>
<h2 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符"></a>三元操作符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">"liuguoquan"</span> <span class="keyword">if</span> <span class="string">"deason"</span> <span class="keyword">else</span> <span class="string">"xiaoniu"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name</div><div class="line"><span class="string">'liuguoquan'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">"liuguoquan"</span> <span class="keyword">if</span> <span class="string">""</span> <span class="keyword">else</span> <span class="string">"xiaoniu"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name</div><div class="line"><span class="string">'xiaoniu'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">"liuguoquan"</span> <span class="keyword">if</span> <span class="string">"xiaoniu"</span> <span class="keyword">else</span> <span class="string">""</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name</div><div class="line"><span class="string">'liuguoquan'</span></div></pre></td></tr></table></figure>
<p>总结一下：A = Y if X else Z<br>根据上述例子可以看出：</p>
<ul>
<li>如果X为真，那么就执行A = Y</li>
<li>如果X为假，那么就执行A = Z</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"python"</span> <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> <span class="string">"java"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="string">'java'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"python"</span> <span class="keyword">if</span> x &lt; y <span class="keyword">else</span> <span class="string">"java"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="string">'python'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>For循环的基本结构是：</p>
<p>for 循环规则： //需要冒号<br>     操作语句        //语句要缩进</p>
<h2 id="简单的for循环"><a href="#简单的for循环" class="headerlink" title="简单的for循环"></a>简单的for循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hello = <span class="string">"liuguoquan"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> hello:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> i</div><div class="line">...</div><div class="line">l</div><div class="line">i</div><div class="line">u</div><div class="line">g</div><div class="line">u</div><div class="line">o</div><div class="line">q</div><div class="line">u</div><div class="line">a</div><div class="line">n</div><div class="line"></div><div class="line"><span class="keyword">or</span>:</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(len(hello)):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> i</div><div class="line">...</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="range（start-stop-step"><a href="#range（start-stop-step" class="headerlink" title="range（start,stop,[,step])"></a>range（start,stop,[,step])</h2><p>range是个内建函数，一般形式是range（start,stop,[,step])</p>
<p>关于range()函数注意一下几点：</p>
<ul>
<li>该函数可以创建一个数字元素组成的列表</li>
<li>该函数最常用于for循环</li>
<li>函数的参数必须是整数，默认从0开始</li>
<li>step默认值是1，不写就是默认值</li>
<li>step是正数，返回list最后的值不包含stop的值，即start + step的值小于stop；step是负数，start + step的值大于stop；</li>
<li>step不能等于0</li>
</ul>
<p>参数解释：</p>
<ul>
<li>start：开始数值，默认为0</li>
<li>stop：结束数值，必须要写</li>
<li>step：变化的步长，默认是1，不能为0</li>
</ul>
<p>正数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">9</span>)</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">0</span>,<span class="number">9</span>)</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">0</span>,<span class="number">9</span>,<span class="number">1</span>)</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>,<span class="number">9</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</div></pre></td></tr></table></figure>
<p>负数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>rang(<span class="number">-9</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'rang'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">0</span>,<span class="number">-9</span>,<span class="number">-1</span>)</div><div class="line">[<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-4</span>, <span class="number">-5</span>, <span class="number">-6</span>, <span class="number">-7</span>, <span class="number">-8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">0</span>,<span class="number">-9</span>,<span class="number">-2</span>)</div><div class="line">[<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-4</span>, <span class="number">-6</span>, <span class="number">-8</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="获取列表的索引值组成的列表"><a href="#获取列表的索引值组成的列表" class="headerlink" title="获取列表的索引值组成的列表"></a>获取列表的索引值组成的列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lgq = [<span class="string">"I"</span>,<span class="string">"am"</span>,<span class="string">"a"</span>,<span class="string">"Android"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>index = range(len(lgq))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>index</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="找出100以内的能够被3整除的正整数"><a href="#找出100以内的能够被3整除的正整数" class="headerlink" title="找出100以内的能够被3整除的正整数"></a>找出100以内的能够被3整除的正整数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line">result = []</div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</div><div class="line">    <span class="keyword">if</span> n % <span class="number">3</span> == <span class="number">0</span>:</div><div class="line">        result.append(n)</div><div class="line">        </div><div class="line"><span class="keyword">print</span> result</div><div class="line"></div><div class="line"><span class="keyword">or</span>:</div><div class="line"></div><div class="line"><span class="keyword">print</span> range(<span class="number">3</span>,<span class="number">100</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">[<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">36</span>, <span class="number">39</span>, <span class="number">42</span>, <span class="number">45</span>, <span class="number">48</span>, <span class="number">51</span>, <span class="number">54</span>, <span class="number">57</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">66</span>, <span class="number">69</span>, <span class="number">72</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">81</span>, <span class="number">84</span>, <span class="number">87</span>, <span class="number">90</span>, <span class="number">93</span>, <span class="number">96</span>, <span class="number">99</span>]</div></pre></td></tr></table></figure>
<h2 id="for对象"><a href="#for对象" class="headerlink" title="for对象"></a>for对象</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"> #coding:utf-8</div><div class="line"></div><div class="line">name = "liuguoquan"</div><div class="line"></div><div class="line">print "str"</div><div class="line">for i in name:</div><div class="line">    print i,</div><div class="line"></div><div class="line">print "list"</div><div class="line">name_list = list(name)</div><div class="line">print name_list</div><div class="line">for i in name_list:</div><div class="line">    print i,</div><div class="line">    </div><div class="line">print "set"</div><div class="line">name_set = set(name)</div><div class="line">print name_set</div><div class="line">for i in name_set:</div><div class="line">    print i,</div><div class="line">    </div><div class="line">print "tuple"</div><div class="line">name_tuple = set(name)</div><div class="line">print name_tuple</div><div class="line">for i in name_tuple:</div><div class="line">    print i,</div><div class="line">    </div><div class="line">print "dict"</div><div class="line">name_dict = &#123;"name":"liuguoquan","sex":"male","age":"18"&#125;</div><div class="line">print name_dict</div><div class="line">for i in name_dict:</div><div class="line">    print i,"--&gt;",name_dict[i]</div><div class="line">    </div><div class="line"> 结果打印:</div><div class="line"> </div><div class="line">str:</div><div class="line">l i u g u o q u a n </div><div class="line"></div><div class="line">list:</div><div class="line">['l', 'i', 'u', 'g', 'u', 'o', 'q', 'u', 'a', 'n']</div><div class="line">l i u g u o q u a n </div><div class="line"></div><div class="line">set:</div><div class="line">set(['a', 'g', 'i', 'l', 'o', 'n', 'q', 'u'])</div><div class="line">a g i l o n q u </div><div class="line"></div><div class="line">tuple</div><div class="line">('l', 'i', 'u', 'g', 'u', 'o', 'q', 'u', 'a', 'n')</div><div class="line">l i u g u o q u a n </div><div class="line"></div><div class="line">dict:</div><div class="line">&#123;'age': '18', 'name': 'liuguoquan', 'sex': 'male'&#125;</div><div class="line">age --&gt; 18</div><div class="line">name --&gt; liuguoquan</div><div class="line">sex --&gt; male</div></pre></td></tr></table></figure>
<h3 id="字典遍历的多种写法"><a href="#字典遍历的多种写法" class="headerlink" title="字典遍历的多种写法"></a>字典遍历的多种写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name_dict = &#123;<span class="string">"name"</span>:<span class="string">"liuguoquan"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="string">"18"</span>&#125;</div><div class="line"><span class="keyword">print</span> name_dict</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_dict:</div><div class="line">    <span class="keyword">print</span> i,<span class="string">"--&gt;"</span>,name_dict[i]</div></pre></td></tr></table></figure>
<p>注意到，上面的循环，其实是读取了字典的key。在字典中，有一个方法，dict.keys()，得到的是字典key列表。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取字典key列表</span></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> name_dict.keys():</div><div class="line">    <span class="keyword">print</span> k    <span class="comment">#Python 3: print(k)</span></div></pre></td></tr></table></figure>
<p>这种循环方法和上面的循环方法，结果是一样的，但是，这种方法并不提倡，以为它在执行速度上表现欠佳。</p>
<p>如果要获得字典的value怎么办？不要忘记dict.values()方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> name_dict.items():</div><div class="line">    <span class="keyword">print</span> k,<span class="string">"--&gt;"</span>,v</div></pre></td></tr></table></figure>
<p>用上面的方法，要把所有的内容都读入内存，内存东西多了，可能会出麻烦。为此，Python中提供了另外的方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> name_dict.iteritems(): <span class="comment">#注意：仅在Python2中可用，Python 3中已经做了优化，d.items()即有同等功能。</span></div><div class="line">    <span class="keyword">print</span> k,<span class="string">"--&gt;"</span>,v</div></pre></td></tr></table></figure>
<p>这里是循环一个迭代器，迭代器在循环中有很多优势。除了刚才的dict.iteritems()之外，还有dict.itervalues()，dict.iterkeys()供你选用（以上三个dict.iter*都只用在Python 2中，Python 3中已经不需要了）</p>
<h3 id="如何判断一个对象是不可迭代的？"><a href="#如何判断一个对象是不可迭代的？" class="headerlink" title="如何判断一个对象是不可迭代的？"></a>如何判断一个对象是不可迭代的？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</div></pre></td></tr></table></figure>
<p>引入collections这个标准库。要判断数字321是不是可迭代的，可以这么做：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">321</span>, collections.Iterable)</div><div class="line">    <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>返回了False，说明321这个整数类型的对象，是不可迭代的。再判断一个列表对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], collections.Iterable)</div><div class="line">   <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>从返回结果，我们知道，列表<code>[1,2,3]</code>是可迭代的。</p>
<p>当然，并不是要你在使用for循环之前，非要判断某个对象是否可迭代。因为至此，你已经知道了字符串str、列表list、字典dict、元组tuple、集合set都是可迭代的。</p>
<h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><p><code>zip()</code>——一个内建函数,Python 2中，参数是<code>seq1, seq2, ...</code>，意思是序列数据；在Python 3中，参数需要时可迭代对象。这点差别，通常是没有什么影响的，因为序列也是可迭代的。值得关注的是返回值，在Python 2中，返回值是一个列表对象，里面以元组为元素；而Python 3中返回的是一个zip对象。<br>通过实验来理解上面的文档：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Python <span class="number">2</span>：</div><div class="line">    &gt;&gt;&gt; a = <span class="string">"qiwsir"</span></div><div class="line">    &gt;&gt;&gt; b = <span class="string">"github"</span></div><div class="line">    &gt;&gt;&gt; zip(a, b)</div><div class="line">    [(<span class="string">'q'</span>, <span class="string">'g'</span>), (<span class="string">'i'</span>, <span class="string">'i'</span>), (<span class="string">'w'</span>, <span class="string">'t'</span>), (<span class="string">'s'</span>, <span class="string">'h'</span>), (<span class="string">'i'</span>, <span class="string">'u'</span>), (<span class="string">'r'</span>, <span class="string">'b'</span>)]</div><div class="line">    </div><div class="line">Python <span class="number">3</span>：</div><div class="line">    &gt;&gt;&gt; zip(a, b)</div><div class="line">    &lt;zip object at <span class="number">0x0000000003521D08</span>&gt;</div><div class="line">    &gt;&gt;&gt; list(zip(a, b))</div><div class="line">    [(<span class="string">'q'</span>, <span class="string">'g'</span>), (<span class="string">'i'</span>, <span class="string">'i'</span>), (<span class="string">'w'</span>, <span class="string">'t'</span>), (<span class="string">'s'</span>, <span class="string">'h'</span>), (<span class="string">'i'</span>, <span class="string">'u'</span>), (<span class="string">'r'</span>, <span class="string">'b'</span>)]</div></pre></td></tr></table></figure>
<p>如果序列长度不同，那么就以”the length of the shortest argument sequence”为准。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = [<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(c, d)        <span class="comment">#这是Python 2的结果，如果是Python 3，请仿照前面的方式显示查看</span></div><div class="line">[(<span class="number">1</span>, <span class="number">9</span>), (<span class="number">2</span>, <span class="number">8</span>), (<span class="number">3</span>, <span class="number">7</span>)]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">"name"</span>:<span class="string">"qiwsir"</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = &#123;<span class="string">"lang"</span>:<span class="string">"python"</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(s,t)</div><div class="line">[(<span class="string">'name'</span>, <span class="string">'lang'</span>)]</div></pre></td></tr></table></figure>
<p>zip是一个内置函数，它的参数必须是序列，如果是字典，那么键视为序列。然后将序列对应的元素依次组成元组，做为一个列表的元素。</p>
<h3 id="问题：有两个列表，分别是：a-1-2-3-4-5-b-9-8-7-6-5-，要计算这两个列表中对应元素的和。"><a href="#问题：有两个列表，分别是：a-1-2-3-4-5-b-9-8-7-6-5-，要计算这两个列表中对应元素的和。" class="headerlink" title="问题：有两个列表，分别是：a = [1, 2, 3, 4, 5], b = [9, 8, 7, 6, 5]，要计算这两个列表中对应元素的和。"></a><strong>问题：</strong>有两个列表，分别是：a = [1, 2, 3, 4, 5], b = [9, 8, 7, 6, 5]，要计算这两个列表中对应元素的和。</h3><ul>
<li>for循环实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line"><span class="meta">... </span>    c.append(a[i]+b[i])</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">[<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>]</div></pre></td></tr></table></figure>
<ul>
<li>zip()实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x,y <span class="keyword">in</span> zip(a,b):</div><div class="line"><span class="meta">... </span>    d.append(x+y)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">[<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>]</div></pre></td></tr></table></figure>
<h3 id="问题：有一个字典，myinfor-“name”-”qiwsir”-“site”-”qiwsir-github-io”-“lang”-”python”-，将这个字典变换成：infor-“qiwsir”-”name”-“qiwsir-github-io”-”site”-“python”-”lang”"><a href="#问题：有一个字典，myinfor-“name”-”qiwsir”-“site”-”qiwsir-github-io”-“lang”-”python”-，将这个字典变换成：infor-“qiwsir”-”name”-“qiwsir-github-io”-”site”-“python”-”lang”" class="headerlink" title="问题：有一个字典，myinfor = {“name”:”qiwsir”, “site”:”qiwsir.github.io”, “lang”:”python”}，将这个字典变换成：infor = {“qiwsir”:”name”, “qiwsir.github.io”:”site”, “python”:”lang”}"></a><strong>问题</strong>：有一个字典，myinfor = {“name”:”qiwsir”, “site”:”qiwsir.github.io”, “lang”:”python”}，将这个字典变换成：infor = {“qiwsir”:”name”, “qiwsir.github.io”:”site”, “python”:”lang”}</h3><ul>
<li>for循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>myinfor = &#123;<span class="string">"name"</span>:<span class="string">"qiwsir"</span>, <span class="string">"site"</span>:<span class="string">"qiwsir.github.io"</span>, <span class="string">"lang"</span>:<span class="string">"python"</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>infor = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k,v <span class="keyword">in</span> myinfor.items():</div><div class="line"><span class="meta">... </span>    infor[v]=k</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>infor</div><div class="line">&#123;<span class="string">'python'</span>: <span class="string">'lang'</span>, <span class="string">'qiwsir.github.io'</span>: <span class="string">'site'</span>, <span class="string">'qiwsir'</span>: <span class="string">'name'</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li>zip()</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict(zip(myinfor.values(), myinfor.keys()))</div><div class="line">&#123;<span class="string">'python'</span>: <span class="string">'lang'</span>, <span class="string">'qiwsir.github.io'</span>: <span class="string">'site'</span>, <span class="string">'qiwsir'</span>: <span class="string">'name'</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><p><code>enumerate()</code>也是内建函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons))</div><div class="line">[(<span class="number">0</span>, <span class="string">'Spring'</span>), (<span class="number">1</span>, <span class="string">'Summer'</span>), (<span class="number">2</span>, <span class="string">'Fall'</span>), (<span class="number">3</span>, <span class="string">'Winter'</span>)]</div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class="number">1</span>))</div><div class="line">[(<span class="number">1</span>, <span class="string">'Spring'</span>), (<span class="number">2</span>, <span class="string">'Summer'</span>), (<span class="number">3</span>, <span class="string">'Fall'</span>), (<span class="number">4</span>, <span class="string">'Winter'</span>)]</div></pre></td></tr></table></figure>
<h3 id="如果要同时得到元素索引和元素怎么办？"><a href="#如果要同时得到元素索引和元素怎么办？" class="headerlink" title="如果要同时得到元素索引和元素怎么办？"></a>如果要同时得到元素索引和元素怎么办？</h3><ul>
<li>for循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">week = [<span class="string">"monday"</span>,<span class="string">"sunday"</span>,<span class="string">"friday"</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(week)):</div><div class="line">    <span class="keyword">print</span> week[i] + <span class="string">' is '</span> + str(i) <span class="comment">#注意，i是int类型，如果和前面的用+连接，必须是str类型</span></div></pre></td></tr></table></figure>
<ul>
<li>enumerate</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i,day) <span class="keyword">in</span> enumerate(week):</div><div class="line">    <span class="keyword">print</span> day + <span class="string">" is "</span> + str(i)</div></pre></td></tr></table></figure>
<h3 id="问题：将字符串中的某些字符替换为其它的字符串。原始字符串”Do-you-love-Canglaoshi-Canglaoshi-is-a-good-teacher-”，请将”Canglaoshi”替换为”PHP”"><a href="#问题：将字符串中的某些字符替换为其它的字符串。原始字符串”Do-you-love-Canglaoshi-Canglaoshi-is-a-good-teacher-”，请将”Canglaoshi”替换为”PHP”" class="headerlink" title="问题：将字符串中的某些字符替换为其它的字符串。原始字符串”Do you love Canglaoshi? Canglaoshi is a good teacher.”，请将”Canglaoshi”替换为”PHP”."></a><strong>问题：</strong>将字符串中的某些字符替换为其它的字符串。原始字符串”Do you love Canglaoshi? Canglaoshi is a good teacher.”，请将”Canglaoshi”替换为”PHP”.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">raw = <span class="string">"Do you love Canglaoshi? Canglaoshi is a good teacher."</span></div><div class="line"><span class="keyword">print</span> raw</div><div class="line"></div><div class="line"><span class="comment">#1. 先将字符串转换为列表</span></div><div class="line">raw_list = raw.split(<span class="string">" "</span>)</div><div class="line"><span class="keyword">print</span> type(raw_list)</div><div class="line"><span class="keyword">print</span> raw_list</div><div class="line"></div><div class="line"><span class="comment">#2. 对列表中的字符串进行替换</span></div><div class="line"><span class="keyword">for</span> i,string <span class="keyword">in</span> enumerate(raw_list):</div><div class="line">    <span class="keyword">if</span> <span class="string">"Canglaoshi"</span> <span class="keyword">in</span> string:</div><div class="line">        raw_list[i] = <span class="string">"PHP"</span></div><div class="line">        </div><div class="line"><span class="keyword">print</span> raw_list</div><div class="line"></div><div class="line"><span class="comment">#3. 将列表转换为字符串</span></div><div class="line"><span class="keyword">print</span> <span class="string">" "</span>.join(raw_list)</div></pre></td></tr></table></figure>
<h2 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h2><p>Python有一个非常强大的功能，就是列表解析，它这样使用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>squares</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mybag = [<span class="string">' glass'</span>,<span class="string">' apple'</span>,<span class="string">'green leaf '</span>]   <span class="comment">#有的前面有空格，有的后面有空格</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[one.strip() <span class="keyword">for</span> one <span class="keyword">in</span> mybag]              <span class="comment">#去掉元素前后的空格</span></div><div class="line">[<span class="string">'glass'</span>, <span class="string">'apple'</span>, <span class="string">'green leaf'</span>]</div></pre></td></tr></table></figure>
<p>在很多情况下，列表解析的执行效率高，代码简洁明了。是实际写程序中经常被用到的。<br>现在Python的两个版本，对列表解释上，还是有一点点差别的，请认真看下面的比较操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Python <span class="number">2</span>:</div><div class="line"></div><div class="line">    &gt;&gt;&gt; i = <span class="number">1</span></div><div class="line">    &gt;&gt;&gt; [ i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>)]</div><div class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line">    &gt;&gt;&gt; i</div><div class="line">    <span class="number">8</span></div><div class="line"></div><div class="line">Python <span class="number">3</span>:</div><div class="line"></div><div class="line">    &gt;&gt;&gt; i = <span class="number">1</span></div><div class="line">    &gt;&gt;&gt; [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>)]</div><div class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line">    &gt;&gt;&gt; i</div><div class="line">    <span class="number">1</span></div></pre></td></tr></table></figure>
<p>先<code>i = 1</code>，然后是一个列表解析式，非常巧合的是，列表解析式中也用了变量<code>i</code>。这种情况，在编程中是常常遇到的，我们通常把<code>i=1</code>中的变量<code>i</code>称为处于全局命名空间里面（命名空间，是一个新词汇，暂且用起来，后面会讲述），而列表解析式中的变量<code>i</code>是在列表解析内，称为处在局部命名空间。在Python 3中，for循环里的变量不再与全局命名空间的变量有关联了。</p>
<h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> i&lt; <span class="number">5</span>:</div><div class="line">    <span class="keyword">print</span> i</div><div class="line">    i += <span class="number">1</span></div><div class="line"><span class="keyword">print</span> <span class="string">"quit"</span></div><div class="line"></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line">quit</div></pre></td></tr></table></figure>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">i= <span class="number">10</span></div><div class="line"><span class="keyword">while</span> i:</div><div class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"%d is odd number"</span> %i</div><div class="line">        i = <span class="number">0</span></div><div class="line"><span class="keyword">print</span> <span class="string">"%d is even number"</span> %i</div><div class="line"></div><div class="line"><span class="number">10</span> <span class="keyword">is</span> even number</div></pre></td></tr></table></figure>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">i= <span class="number">10</span></div><div class="line"><span class="keyword">while</span> i:</div><div class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">        i -= <span class="number">1</span></div><div class="line">        <span class="keyword">continue</span>; <span class="comment"># 继续下一次循环</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"%d is odd number"</span> %i</div><div class="line">        i -= <span class="number">1</span></div><div class="line"><span class="keyword">print</span> <span class="string">"%d is even number"</span> %i</div></pre></td></tr></table></figure>
<h3 id="while…else"><a href="#while…else" class="headerlink" title="while…else"></a>while…else</h3><p><code>while...else</code>有点类似<code>if ... else</code>，只需要一个例子就可以理解。 当然，一遇到<code>else</code>了，就意味着已经不在while循环内了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">count = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</div><div class="line">   <span class="keyword">print</span> count, <span class="string">" is  less than 5"</span></div><div class="line">   count = count + <span class="number">1</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> count, <span class="string">" is not less than 5"</span></div><div class="line">   </div><div class="line">执行结果：</div><div class="line"></div><div class="line">    <span class="number">0</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line">    <span class="number">1</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line">    <span class="number">2</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line">    <span class="number">3</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line">    <span class="number">4</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line">    <span class="number">5</span> <span class="keyword">is</span> <span class="keyword">not</span> less than <span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="for…else"><a href="#for…else" class="headerlink" title="for…else"></a>for…else</h3><p>除了有<code>while...else</code>外，还可以有<code>for...else</code>。这个循环也通常用在当跳出循环之后要做的事情。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">99</span>, <span class="number">1</span>, <span class="number">-1</span>):</div><div class="line">        root = sqrt(n)</div><div class="line">        <span class="keyword">if</span> root == int(root):</div><div class="line">            <span class="keyword">print</span> n <span class="comment"># 满足此条件后,不执行else</span></div><div class="line">            <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Nothing."</span> <span class="comment"># break不执行就会执行else</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h1&gt;&lt;h2 id=&quot;算术运算符&quot;&gt;&lt;a href=&quot;#算术运算符&quot; class=&quot;headerlink&quot; title=&quot;算术运算符&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础④集合</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A3%E9%9B%86%E5%90%88/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础④集合/</id>
    <published>2017-05-07T12:58:53.000Z</published>
    <updated>2017-05-09T06:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>集合Set类似字典的特点，可以用{}花括号来定义；其中的元素是没有序列，也就是非序列类型的数据；而且集合中的元素不可重复，这就类似于dict键。</p>
<h1 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set(<span class="string">"qiswri"</span>) <span class="comment">#有两个i</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([<span class="string">'q'</span>, <span class="string">'i'</span>, <span class="string">'s'</span>, <span class="string">'r'</span>, <span class="string">'w'</span>]) <span class="comment">#只有一个i</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">123</span>,<span class="string">"google"</span>,<span class="string">"facebook"</span>,<span class="string">"book"</span>,<span class="string">"facebook"</span>]);</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2</div><div class="line">set([<span class="string">'facebook'</span>, <span class="number">123</span>, <span class="string">'google'</span>, <span class="string">'book'</span>]) <span class="comment">#只有一个facebook</span></div></pre></td></tr></table></figure>
<p>说明集合中的元素是不能重复的，在创建集合的时候，如果发现了重复的元素，就会自定过滤重复的元素。并且集合中的元素也是随机排序的。</p>
<p>除了用set()来创建集合，还可以使用{}的方式，但是这种方式不提倡使用，因为在某些情况下，Python搞不清楚是字典还是集合。</p>
<p>unhashtable（不可哈希的）表示可变数据，如列表和字典都能原地修改，就是unhastable的；<br>hastable（可哈希）表示不可变数据，如字符串不能修改。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([<span class="string">'q'</span>, <span class="string">'i'</span>, <span class="string">'s'</span>, <span class="string">'r'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1[<span class="number">1</span>] = <span class="string">"w"</span>   <span class="comment">#集合不是序列类型，不能用索引方式对其进行修改</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#9&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    s1[<span class="number">1</span>] = <span class="string">"w"</span></div><div class="line">TypeError: <span class="string">'set'</span> object does <span class="keyword">not</span> support item assignment</div></pre></td></tr></table></figure>
<p>list()和set()实现集合和列表两种对象之间的转化。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2</div><div class="line">set([<span class="string">'facebook'</span>, <span class="number">123</span>, <span class="string">'google'</span>, <span class="string">'book'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(s2)</div><div class="line">&lt;type <span class="string">'set'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = list(s2)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'facebook'</span>, <span class="number">123</span>, <span class="string">'google'</span>, <span class="string">'book'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(lst)</div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s3 = set(lst)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s3</div><div class="line">set([<span class="string">'google'</span>, <span class="number">123</span>, <span class="string">'facebook'</span>, <span class="string">'book'</span>])</div></pre></td></tr></table></figure>
<h1 id="集合的函数"><a href="#集合的函数" class="headerlink" title="集合的函数"></a>集合的函数</h1><p>dir(set)：列出集合的函数</p>
<h2 id="add和update"><a href="#add和update" class="headerlink" title="add和update"></a>add和update</h2><p>help(set.add)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.add(<span class="string">"abc"</span>) <span class="comment">#向集合中添加元素</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'abc'</span>])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.add([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">#不能添加列表，因为列表的数据是可变的</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#31&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    s1.add([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">TypeError: unhashable type: <span class="string">'list'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'abc'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.update(s2) <span class="comment">#集合s2添加到s1中</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'abc'</span>, <span class="string">'g'</span>, <span class="string">'f'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2</div><div class="line">set([<span class="string">'e'</span>, <span class="string">'g'</span>, <span class="string">'f'</span>])</div></pre></td></tr></table></figure>
<h2 id="pop、remove、discard、clear"><a href="#pop、remove、discard、clear" class="headerlink" title="pop、remove、discard、clear"></a>pop、remove、discard、clear</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'abc'</span>, <span class="string">'g'</span>, <span class="string">'f'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.pop() <span class="comment">#随机删除一个元素，并返回这个元素</span></div><div class="line"><span class="string">'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.pop()</div><div class="line"><span class="string">'c'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.pop(<span class="string">"b"</span>)  <span class="comment">#不能指定参数</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#43&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    s1.pop(<span class="string">"b"</span>)</div><div class="line">TypeError: pop() takes no arguments (<span class="number">1</span> given)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.remove(<span class="string">"b"</span>) <span class="comment">#删除集合中指定的元素</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([<span class="string">'e'</span>, <span class="string">'abc'</span>, <span class="string">'g'</span>, <span class="string">'f'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.remove()  <span class="comment">#remove必须指定参数</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#47&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    s1.remove()</div><div class="line">TypeError: remove() takes exactly one argument (<span class="number">0</span> given)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.discard(<span class="string">"g"</span>) <span class="comment">#存在则删除集合中的元素</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([<span class="string">'e'</span>, <span class="string">'abc'</span>, <span class="string">'f'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.discard(<span class="string">"i"</span>) <span class="comment">#不存在则不做处理，不抛出异常</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1.clear()  <span class="comment">#清空集合</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1</div><div class="line">set([])</div></pre></td></tr></table></figure>
<h1 id="不变的集合"><a href="#不变的集合" class="headerlink" title="不变的集合"></a>不变的集合</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = frozenset(<span class="string">"qwert"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1</div><div class="line">frozenset([<span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.add(<span class="string">"q"</span>) <span class="comment">#不能修改集合</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#62&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    f1.add(<span class="string">"q"</span>)</div><div class="line">AttributeError: <span class="string">'frozenset'</span> object has no attribute <span class="string">'add'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.remove(<span class="string">"r"</span>)</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#63&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    f1.remove(<span class="string">"r"</span>)</div><div class="line">AttributeError: <span class="string">'frozenset'</span> object has no attribute <span class="string">'remove'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.pop()</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#64&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    f1.pop()</div><div class="line">AttributeError: <span class="string">'frozenset'</span> object has no attribute <span class="string">'pop'</span></div></pre></td></tr></table></figure>
<h1 id="集合元素"><a href="#集合元素" class="headerlink" title="集合元素"></a>集合元素</h1><h2 id="元素与集合的关系"><a href="#元素与集合的关系" class="headerlink" title="元素与集合的关系"></a>元素与集合的关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>aset=set([<span class="string">"q"</span>,<span class="string">"w"</span>,<span class="string">"e"</span>,<span class="string">"r"</span>,<span class="string">"t"</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>aset</div><div class="line">set([<span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"q"</span> <span class="keyword">in</span> aset</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"a"</span> <span class="keyword">in</span> aset</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<h2 id="集合与集合的关系"><a href="#集合与集合的关系" class="headerlink" title="集合与集合的关系"></a>集合与集合的关系</h2><h3 id="A是否等于B"><a href="#A是否等于B" class="headerlink" title="A是否等于B"></a>A是否等于B</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">set([<span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = set([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a != b</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<h3 id="A是否是B的子集"><a href="#A是否是B的子集" class="headerlink" title="A是否是B的子集"></a>A是否是B的子集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = set([<span class="string">"q"</span>,<span class="string">"r"</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">set([<span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.issubset(a) <span class="comment">#判断c是否是a的子集</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.issuperset(c) <span class="comment">#判断a是否是c的超集</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<h3 id="AB的并集"><a href="#AB的并集" class="headerlink" title="AB的并集"></a>AB的并集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">set([<span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a | b</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>]) <span class="comment">#ab的并集</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.union(b)</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>]) <span class="comment">#ab的并集</span></div></pre></td></tr></table></figure>
<h3 id="AB的交集"><a href="#AB的交集" class="headerlink" title="AB的交集"></a>AB的交集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">set([<span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'q'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b   <span class="comment">#ab的交集</span></div><div class="line">set([<span class="string">'q'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.intersection(b)</div><div class="line">set([<span class="string">'q'</span>])</div></pre></td></tr></table></figure>
<h3 id="A相对B的差集"><a href="#A相对B的差集" class="headerlink" title="A相对B的差集"></a>A相对B的差集</h3><p>A相对B不同的部分元素集合</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">set([<span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'q'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a - b</div><div class="line">set([<span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.difference(b)</div><div class="line">set([<span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div></pre></td></tr></table></figure>
<h3 id="AB的差集"><a href="#AB的差集" class="headerlink" title="AB的差集"></a>AB的差集</h3><p>AB中不同元素的集合</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">set([<span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'q'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.symmetric_difference(b)</div><div class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>])</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;集合Set类似字典的特点，可以用{}花括号来定义；其中的元素是没有序列，也就是非序列类型的数据；而且集合中的元素不可重复，这就类似于dict键。&lt;/p&gt;
&lt;h1 id=&quot;创建集合&quot;&gt;&lt;a href=&quot;#创建集合&quot; class=&quot;headerlink&quot; title=&quot;创建集合
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础③字典</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A2%E5%AD%97%E5%85%B8/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础③字典/</id>
    <published>2017-05-07T12:56:53.000Z</published>
    <updated>2017-05-09T06:02:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Python中有一个叫作dictionary的对象类型，翻译过来就是“字典”，用dict表示。</p>
<h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><h3 id="创建空的字典"><a href="#创建空的字典" class="headerlink" title="创建空的字典"></a>创建空的字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mydict</div><div class="line">&#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(mydict)</div><div class="line">&lt;type <span class="string">'dict'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person=&#123;<span class="string">"name"</span>:<span class="string">"liu"</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"age"</span>:<span class="number">10</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</div></pre></td></tr></table></figure>
<p>字典dict是以键值对的形式存储数据。比如<code>&quot;name&quot;:&quot;liu&quot;</code>前面的name叫作键（key），后面的liu是前面的键所对应的值（value）。在一个字典中，键是唯一的，不能重复。值则对应于键，值可以重复。</p>
<p>键值之间用冒号隔开，每一对键值之间用逗号隔开。</p>
<h3 id="添加字典"><a href="#添加字典" class="headerlink" title="添加字典"></a>添加字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person[<span class="string">"hobby"</span>]=<span class="string">"reading"</span> <span class="comment">#增加键值对的方法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person</div><div class="line">&#123;<span class="string">'hobby'</span>: <span class="string">'reading'</span>, <span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person[<span class="string">"age"</span>]=<span class="number">20</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person</div><div class="line">&#123;<span class="string">'hobby'</span>: <span class="string">'reading'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(person)</div><div class="line"><span class="number">49368784</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person[<span class="string">"age"</span>]=<span class="number">30</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person</div><div class="line">&#123;<span class="string">'hobby'</span>: <span class="string">'reading'</span>, <span class="string">'age'</span>: <span class="number">30</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(person)</div><div class="line"><span class="number">49368784</span></div></pre></td></tr></table></figure>
<p>结果可以看出，字典可以原地地修改，即它是可变的，并且不会创建新的对象。</p>
<h3 id="利用元组创建字典"><a href="#利用元组创建字典" class="headerlink" title="利用元组创建字典"></a>利用元组创建字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = ([<span class="string">"first"</span>,<span class="string">"Google"</span>],[<span class="string">"second"</span>,<span class="string">"Yahoo"</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>website=dict(name)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>website</div><div class="line">&#123;<span class="string">'second'</span>: <span class="string">'Yahoo'</span>, <span class="string">'first'</span>: <span class="string">'Google'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(website)</div><div class="line">&lt;type <span class="string">'dict'</span>&gt;</div><div class="line"></div><div class="line">或者这样：</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ad = dict(name=<span class="string">"liu"</span>,age= <span class="number">26</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ad</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">26</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(ad)</div><div class="line">&lt;type <span class="string">'dict'</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="使用fromkeys创建字典"><a href="#使用fromkeys创建字典" class="headerlink" title="使用fromkeys创建字典"></a>使用fromkeys创建字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>website=&#123;&#125;.fromkeys((<span class="string">"third"</span>,<span class="string">"forth"</span>),(<span class="string">"facebook"</span>,<span class="string">"amazon"</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>website</div><div class="line">&#123;<span class="string">'forth'</span>: (<span class="string">'facebook'</span>, <span class="string">'amazon'</span>), <span class="string">'third'</span>: (<span class="string">'facebook'</span>, <span class="string">'amazon'</span>)&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>website=&#123;&#125;.fromkeys((<span class="string">"third"</span>,<span class="string">"forth"</span>),<span class="string">"facebook"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>website</div><div class="line">&#123;<span class="string">'forth'</span>: <span class="string">'facebook'</span>, <span class="string">'third'</span>: <span class="string">'facebook'</span>&#125;</div></pre></td></tr></table></figure>
<p>特别注意的是，字典中的键必须是不可变对象，值可以是任意类的对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd = &#123;(<span class="number">1</span>,<span class="number">2</span>):<span class="number">1</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd</div><div class="line">&#123;(<span class="number">1</span>, <span class="number">2</span>): <span class="number">1</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(dd)</div><div class="line">&lt;type <span class="string">'dict'</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd=&#123;[<span class="number">1</span>,<span class="number">2</span>]:<span class="number">1</span>&#125;</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#52&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    dd=&#123;[<span class="number">1</span>,<span class="number">2</span>]:<span class="number">1</span>&#125;</div><div class="line">TypeError: unhashable type: <span class="string">'list'</span></div></pre></td></tr></table></figure>
<h2 id="访问字典的值"><a href="#访问字典的值" class="headerlink" title="访问字典的值"></a>访问字典的值</h2><p>字典类型的对象是以键值对的形式存储数据的，所以只要知道键就能得到值，这在本质上就是一种映射关系。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person</div><div class="line">&#123;<span class="string">'hobby'</span>: <span class="string">'reading'</span>, <span class="string">'age'</span>: <span class="number">30</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person[<span class="string">"age"</span>]</div><div class="line"><span class="number">30</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person[<span class="string">"hobby"</span>]</div><div class="line"><span class="string">'reading'</span></div></pre></td></tr></table></figure>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="len-d"><a href="#len-d" class="headerlink" title="len(d)"></a>len(d)</h3><p>返回字典d中键值对的数量</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code = &#123;<span class="string">"beijing"</span>:<span class="string">"010"</span>,<span class="string">"shanghai"</span>:<span class="string">"021"</span>,<span class="string">"guangzhou"</span>:<span class="string">"020"</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(city_code)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="d-key"><a href="#d-key" class="headerlink" title="d[key]"></a>d[key]</h3><p>返回字典d中的键key的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code</div><div class="line">&#123;<span class="string">'beijing'</span>: <span class="string">'010'</span>, <span class="string">'shanghai'</span>: <span class="string">'021'</span>, <span class="string">'guangzhou'</span>: <span class="string">'020'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code[<span class="string">"beijing"</span>]</div><div class="line"><span class="string">'010'</span></div></pre></td></tr></table></figure>
<h3 id="d-key-value"><a href="#d-key-value" class="headerlink" title="d[key] = value"></a>d[key] = value</h3><p>将值赋给字典d中的键key</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code</div><div class="line">&#123;<span class="string">'beijing'</span>: <span class="string">'010'</span>, <span class="string">'shanghai'</span>: <span class="string">'021'</span>, <span class="string">'guangzhou'</span>: <span class="string">'020'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code[<span class="string">"beijing"</span>]=<span class="string">"01110"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code</div><div class="line">&#123;<span class="string">'beijing'</span>: <span class="string">'01110'</span>, <span class="string">'shanghai'</span>: <span class="string">'021'</span>, <span class="string">'guangzhou'</span>: <span class="string">'020'</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="del-d-key"><a href="#del-d-key" class="headerlink" title="del d[key]"></a>del d[key]</h3><p>删除字典d中的键key值对</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code</div><div class="line">&#123;<span class="string">'beijing'</span>: <span class="string">'01110'</span>, <span class="string">'shanghai'</span>: <span class="string">'021'</span>, <span class="string">'guangzhou'</span>: <span class="string">'020'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> city_code[<span class="string">"beijing"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code</div><div class="line">&#123;<span class="string">'shanghai'</span>: <span class="string">'021'</span>, <span class="string">'guangzhou'</span>: <span class="string">'020'</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="key-in-d"><a href="#key-in-d" class="headerlink" title="key in d"></a>key in d</h3><p>检查字典d中是否含有键为key的项</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code</div><div class="line">&#123;<span class="string">'shanghai'</span>: <span class="string">'021'</span>, <span class="string">'guangzhou'</span>: <span class="string">'020'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"shanghai"</span> <span class="keyword">in</span> city_code</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"beijing"</span> <span class="keyword">in</span> city_code</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<h2 id="字符串格式化输出"><a href="#字符串格式化输出" class="headerlink" title="字符串格式化输出"></a>字符串格式化输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>city_code</div><div class="line">&#123;<span class="string">'shanghai'</span>: <span class="string">'021'</span>, <span class="string">'guangzhou'</span>: <span class="string">'020'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Shanghai is a wonderful city,its area code is %(shanghai)s"</span> % city_code</div><div class="line"><span class="string">'Shanghai is a wonderful city,its area code is 021'</span></div></pre></td></tr></table></figure>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><p>在计算机科学中，关联数组又称为映射（Map）、字典（Dictionary），是一个抽象的数据结构，它包含着类似于键值的有序对。这种数据结构包含以下几种常见的操作：</p>
<ul>
<li>向关联数组添加键值对</li>
<li>从关联数组内删除键值对</li>
<li>修改关联数组内的键值对</li>
<li>根据已知的键寻找值</li>
</ul>
<p>字典问题是设计一种能够具备关联数组特性的数据结构。解决字典问题的常用方法是散列表，但有些情况也可以直接使用有地址的数组、二叉树，或者其他结构。</p>
<h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><p>散列表（hash table，也叫哈希表），是根据关键字而直接访问在内存存储位置的数据结构。即把键值通过一个函数的计算，映射到表中的一个位置来访问记录，加快了查找速度。这个映射函数称为散列函数，存放记录的数组称为散列表。</p>
<h2 id="字典的函数"><a href="#字典的函数" class="headerlink" title="字典的函数"></a>字典的函数</h2><h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>浅拷贝：Python在所执行的复制动作中，如果是基本类型的数据，就在内存中新建一个地址存储，如果不是基本类型，就不会新建一个地址，而是用标签引用原来的对象。copy()实现的是浅拷贝</p>
<p>深拷贝：无论是基本数据类型还是其他类型都会新建一个地址来存储。deepcopy()实现的是深拷贝</p>
<h4 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ad=&#123;<span class="string">"name"</span>:<span class="string">"liu"</span>,<span class="string">"age"</span>:<span class="number">20</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(ad)</div><div class="line"><span class="number">49368640</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cd= ad.copy()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cd</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(cd)  <span class="comment">#与ad是不同的对象</span></div><div class="line"><span class="number">49225776</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cd[<span class="string">"age"</span>]=<span class="number">40</span>  <span class="comment">#修改cd没有对ad造成影响</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cd</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ad</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x=&#123;<span class="string">"name"</span>:<span class="string">"liu"</span>,<span class="string">"lang"</span>:[<span class="string">"python"</span>,<span class="string">"java"</span>,<span class="string">"c"</span>]&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = x.copy()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</div><div class="line"><span class="number">49226496</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</div><div class="line"><span class="number">49228800</span></div><div class="line"></div><div class="line"><span class="comment">##y是从x拷贝过来的，两个在内存中是不同的对象</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="string">"lang"</span>].remove(<span class="string">"c"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>, <span class="string">'java'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>, <span class="string">'java'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</div><div class="line"><span class="number">49226496</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</div><div class="line"><span class="number">49228800</span></div><div class="line"></div><div class="line">y中删除元素“c“后，x的键lang的值也发生了变化</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="string">"lang"</span>])</div><div class="line"><span class="number">49607424</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(y[<span class="string">"lang"</span>])</div><div class="line"><span class="number">49607424</span></div><div class="line"></div><div class="line">x与y中的列表是同一个对象，但是作为字符串的那个键值对属于不同的对象。</div></pre></td></tr></table></figure>
<h4 id="deepcopy"><a href="#deepcopy" class="headerlink" title="deepcopy()"></a>deepcopy()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>, <span class="string">'java'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy <span class="comment">#导入一个模块</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z = copy.deepcopy(x) <span class="comment">#深拷贝</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>, <span class="string">'java'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(x[<span class="string">"lang"</span>])</div><div class="line"><span class="number">49607424</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(z[<span class="string">"lang"</span>])</div><div class="line"><span class="number">49607184</span></div><div class="line"></div><div class="line"><span class="comment">#此时x和z中的列表不属于同个对象</span></div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="string">"lang"</span>].remove(<span class="string">"java"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>, <span class="string">'java'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">#此时，修改一个列表的值，就不会影响另外一个列表的值了。</span></div></pre></td></tr></table></figure>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>clear的作用是将字典清空，得到的是空字典。del是将字典删除，内存中就没有它了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x.clear()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line">&#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x  <span class="comment">#x已删除</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#147&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    x</div><div class="line">NameError: name <span class="string">'x'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>如果要清空一个字典，还能够使用x = {}这种方法，但这种方法的本质是将变量a的引用转向了{}这个对象，那么原来的对象呢？原来的对象称为了断了线的风筝，这样的东西称为在Python中称为垃圾，而且Python能够自动将这样的垃圾回收。</p>
<h3 id="get和setdefault"><a href="#get和setdefault" class="headerlink" title="get和setdefault"></a>get和setdefault</h3><p>得到字典中的某个值</p>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>, <span class="string">'java'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z[<span class="string">"lang"</span>].remove(<span class="string">"java"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z.get(<span class="string">"name"</span>)</div><div class="line"><span class="string">'liu'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> z.get(<span class="string">"age"</span>) <span class="comment">#返回None</span></div><div class="line"><span class="keyword">None</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"age"</span>]  <span class="comment">#抛出异常</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#160&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    d[<span class="string">"age"</span>]</div><div class="line">NameError: name <span class="string">'d'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z.get(<span class="string">"age"</span>,<span class="number">30</span>) <span class="comment">#如果age不存在，则返回默认值30</span></div><div class="line"><span class="number">30</span></div></pre></td></tr></table></figure>
<p>dict.get()和dict[key]的区别在于：如果键不在字典中，前者返回None，后者抛出异常</p>
<h4 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault"></a>setdefault</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>], <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z.setdefault(<span class="string">"age"</span>,<span class="number">30</span>)  <span class="comment">#如果age不存在，则返回默认值30，同时将这对键值对添加到字典中</span></div><div class="line"><span class="number">30</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>], <span class="string">'age'</span>: <span class="number">30</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z.setdefault(<span class="string">"web"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line">&#123;<span class="string">'lang'</span>: [<span class="string">'python'</span>], <span class="string">'web'</span>: <span class="keyword">None</span>, <span class="string">'age'</span>: <span class="number">30</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="items-iteritems-keys-iterkeys-values-itervalues"><a href="#items-iteritems-keys-iterkeys-values-itervalues" class="headerlink" title="items/iteritems,keys/iterkeys,values/itervalues"></a>items/iteritems,keys/iterkeys,values/itervalues</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd = &#123;<span class="string">"name"</span>:<span class="string">"liu"</span>,<span class="string">"age"</span>:<span class="number">40</span>,<span class="string">"websit"</span>:<span class="string">"www.liuguoquan.com"</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd_kv = dd.items()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd_kv</div><div class="line">[(<span class="string">'websit'</span>, <span class="string">'www.liuguoquan.com'</span>), (<span class="string">'age'</span>, <span class="number">40</span>), (<span class="string">'name'</span>, <span class="string">'liu'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(dd_kv)</div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(dd_kv)</div><div class="line">[(<span class="string">'websit'</span>, <span class="string">'www.liuguoquan.com'</span>), (<span class="string">'age'</span>, <span class="number">40</span>), (<span class="string">'name'</span>, <span class="string">'liu'</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd_iter=dd.iteritems()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(dd_iter)</div><div class="line">&lt;type <span class="string">'dictionary-itemiterator'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd_iter</div><div class="line">&lt;dictionary-itemiterator object at <span class="number">0x02F5F420</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(dd_iter)  <span class="comment">#必须用list()迭代遍历</span></div><div class="line">[(<span class="string">'websit'</span>, <span class="string">'www.liuguoquan.com'</span>), (<span class="string">'age'</span>, <span class="number">40</span>), (<span class="string">'name'</span>, <span class="string">'liu'</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd</div><div class="line">&#123;<span class="string">'websit'</span>: <span class="string">'www.liuguoquan.com'</span>, <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd.keys() <span class="comment">#列出键的列表</span></div><div class="line">[<span class="string">'websit'</span>, <span class="string">'age'</span>, <span class="string">'name'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd.values() <span class="comment">#列出值的列表</span></div><div class="line">[<span class="string">'www.liuguoquan.com'</span>, <span class="number">40</span>, <span class="string">'liu'</span>]</div></pre></td></tr></table></figure>
<h3 id="pop和popitem"><a href="#pop和popitem" class="headerlink" title="pop和popitem"></a>pop和popitem</h3><p>删除字典键值对</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd</div><div class="line">&#123;<span class="string">'websit'</span>: <span class="string">'www.liuguoquan.com'</span>, <span class="string">'age'</span>: <span class="number">40</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd.pop(<span class="string">"name"</span>) <span class="comment">#删除指定键</span></div><div class="line"><span class="string">'liu'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd</div><div class="line">&#123;<span class="string">'websit'</span>: <span class="string">'www.liuguoquan.com'</span>, <span class="string">'age'</span>: <span class="number">40</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd.pop() <span class="comment">#参数不能省略</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#198&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    dd.pop()</div><div class="line">TypeError: pop expected at least <span class="number">1</span> arguments, got <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd</div><div class="line">&#123;<span class="string">'websit'</span>: <span class="string">'www.liuguoquan.com'</span>, <span class="string">'age'</span>: <span class="number">40</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd.popitem() <span class="comment">#随机删除一个键值对</span></div><div class="line">(<span class="string">'websit'</span>, <span class="string">'www.liuguoquan.com'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">40</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd.popitem()</div><div class="line">(<span class="string">'age'</span>, <span class="number">40</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>更新字典</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1=&#123;<span class="string">"name"</span>:<span class="string">"liu"</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2=&#123;<span class="string">"age"</span>:<span class="number">20</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1.update(d2) <span class="comment">#将字典到d2添加到d1中，更新字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'liu'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">20</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2.update([(<span class="string">"name"</span>,<span class="string">"lee"</span>),(<span class="string">"lang"</span>,<span class="string">"python"</span>)]) <span class="comment">#更新字典</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2</div><div class="line">&#123;<span class="string">'lang'</span>: <span class="string">'python'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'lee'</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="has-key"><a href="#has-key" class="headerlink" title="has_key"></a>has_key</h3><p>判断字典中是否存在某个键</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2</div><div class="line">&#123;<span class="string">'lang'</span>: <span class="string">'python'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'lee'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2.has_key(<span class="string">"name"</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2.has_key(<span class="string">"web"</span>)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;Python中有一个叫作dictionary的对象类型，翻译过来就是“字典”，用dict表示。&lt;/p&gt;
&lt;h2 id=&quot;创建字典&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础②字符串列表元组</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础②字符串列表元组/</id>
    <published>2017-05-07T12:54:53.000Z</published>
    <updated>2017-05-09T06:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python字符串"><a href="#Python字符串" class="headerlink" title="Python字符串"></a>Python字符串</h2><p>在Python中，万物皆对象，显然字符串是对象类型，用str表示。字符串类型通常用单引号或者双引号包裹起来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Hello,world"</span></div><div class="line"><span class="string">'Hello,world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello,world'</span></div><div class="line"><span class="string">'Hello,world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">"Hello,world"</span>)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="变量和字符串"><a href="#变量和字符串" class="headerlink" title="变量和字符串"></a>变量和字符串</h3><p>在Python中变量无类型，对象有类型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"hello,world"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="string">'hello,world'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> b</div><div class="line">hello,world</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"py"</span> + <span class="string">"thon"</span></div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1989</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"free"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> a + b</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#195&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">print</span> a + b</div><div class="line">TypeError: unsupported operand type(s) <span class="keyword">for</span> +: <span class="string">'int'</span> <span class="keyword">and</span> <span class="string">'str'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> b + `a` <span class="comment">#反引号将整数a转化为字符串</span></div><div class="line">free1989</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>用“+”拼接起来的字符串的两个对象必须是同一类型的。如果是数字则是求和，如果是字符串则得到一个新的字符串。</p>
<p>还有其他两种方法可以将整数转化为字符串：</p>
<ul>
<li>str():将整数对象转换为字符串对象</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print <span class="keyword">b </span>+ <span class="keyword">str(a)</span></div><div class="line"><span class="symbol">free1989</span></div></pre></td></tr></table></figure>
<ul>
<li>repr():相当于反引号``</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; print b + repr(a)</div><div class="line">free1989</div></pre></td></tr></table></figure>
<ul>
<li>int():将字符串对象转换为整数对象</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = <span class="string">"250"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; b = int(a)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; b</div><div class="line"><span class="number">250</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; type(b)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>在字符串中，总会有一些特殊的符号，就需要用转义符。所谓转义，就是不采用符号本来的含义，而采用另外一含义。下面表格中列出常用的转义符：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\</td>
<td>(在行尾时) 续行符</td>
</tr>
<tr>
<td>\</td>
<td>反斜杠符号</td>
</tr>
<tr>
<td>\’</td>
<td>单引号</td>
</tr>
<tr>
<td>\”</td>
<td>双引号</td>
</tr>
<tr>
<td>\a</td>
<td>响铃</td>
</tr>
<tr>
<td>\b</td>
<td>退格(Backspace)</td>
</tr>
<tr>
<td>\e</td>
<td>转义</td>
</tr>
<tr>
<td>\000</td>
<td>空</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\v</td>
<td>纵向制表符</td>
</tr>
<tr>
<td>\t</td>
<td>横向制表符</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\f</td>
<td>换页</td>
</tr>
<tr>
<td>\oyy</td>
<td>八进制数，yy代表的字符，例如：\o12代表换行</td>
</tr>
<tr>
<td>\xyy</td>
<td>十六进制数，yy代表的字符，例如：\x0a代表换行</td>
</tr>
<tr>
<td>\other</td>
<td>其它的字符以普通格式输出</td>
</tr>
</tbody>
</table>
<h3 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><p>用转义符能够让字符串中的某些符号表示原来的含义，而不是被解析成某种具有特别能力的符号。下面看看这个代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dos = <span class="string">"c:\news"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dos</div><div class="line"><span class="string">'c:\news'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dos <span class="comment">#当用print打印时就出现问题了</span></div><div class="line">c:</div><div class="line">ews</div></pre></td></tr></table></figure>
<p>如何避免上述代码的问题？有两种方法，其一是前面介绍的转义符解决。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dos = <span class="string">"c:\\news"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dos</div><div class="line">c:\news</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>其二是声明为原始字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dos = <span class="string">r"c:\news"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dos</div><div class="line">c:\news</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dos = <span class="string">r"c:\news\python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> dos</div><div class="line">c:\news\python</div></pre></td></tr></table></figure>
<p>如<code>r&quot;c:\news&quot;</code>，由r开头引起的字符串就是声明了后面引号里的东西是原始字符串，在里面放任何字符都表示该字符的原始含义，不需要再用转义符了。</p>
<h3 id="raw-input和print"><a href="#raw-input和print" class="headerlink" title="raw_input和print"></a>raw_input和print</h3><p>下面实现接收和打印用户通过键盘输入的内容：</p>
<p>不过在写这个功能前，要了解函数：</p>
<ul>
<li>Python 2：<code>raw_input()</code></li>
<li>Python 3: <code>input()</code></li>
</ul>
<p>这是Python的内建函数（built-in function）。关于内建函数，可以分别通过下面的链接查看：</p>
<ul>
<li><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">Python 2的内建函数</a></li>
<li><a href="https://docs.python.org/3.5/library/functions.html" target="_blank" rel="external">Python 3的内建函数</a></li>
</ul>
<p>关于Python的内建函数，下面列出来，供参考：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">abs</span>()	<span class="selector-tag">divmod</span>()	<span class="selector-tag">input</span>()	<span class="selector-tag">open</span>()	<span class="selector-tag">staticmethod</span>()</div><div class="line"><span class="keyword">all</span>()	<span class="selector-tag">enumerate</span>()	<span class="selector-tag">int</span>()	<span class="selector-tag">ord</span>()	<span class="selector-tag">str</span>()</div><div class="line"><span class="selector-tag">any</span>()	<span class="selector-tag">eval</span>()	<span class="selector-tag">isinstance</span>()	<span class="selector-tag">pow</span>()	<span class="selector-tag">sum</span>()</div><div class="line"><span class="selector-tag">basestring</span>()	<span class="selector-tag">execfile</span>()	<span class="selector-tag">issubclass</span>()	<span class="selector-tag">print</span>()	<span class="selector-tag">super</span>()</div><div class="line"><span class="selector-tag">bin</span>()	<span class="selector-tag">file</span>()	<span class="selector-tag">iter</span>()	<span class="selector-tag">property</span>()	<span class="selector-tag">tuple</span>()</div><div class="line"><span class="selector-tag">bool</span>()	<span class="selector-tag">filter</span>()	<span class="selector-tag">len</span>()	<span class="selector-tag">range</span>()	<span class="selector-tag">type</span>()</div><div class="line"><span class="selector-tag">bytearray</span>()	<span class="selector-tag">float</span>()	<span class="selector-tag">list</span>()	<span class="selector-tag">raw_input</span>()	<span class="selector-tag">unichr</span>()</div><div class="line"><span class="selector-tag">callable</span>()	<span class="selector-tag">format</span>()	<span class="selector-tag">locals</span>()	<span class="selector-tag">reduce</span>()	<span class="selector-tag">unicode</span>()</div><div class="line"><span class="selector-tag">chr</span>()	<span class="selector-tag">frozenset</span>()	<span class="selector-tag">long</span>()	<span class="selector-tag">reload</span>()	<span class="selector-tag">vars</span>()</div><div class="line"><span class="selector-tag">classmethod</span>()	<span class="selector-tag">getattr</span>()	<span class="selector-tag">map</span>()	<span class="selector-tag">repr</span>()	<span class="selector-tag">xrange</span>()</div><div class="line"><span class="selector-tag">cmp</span>()	<span class="selector-tag">globals</span>()	<span class="selector-tag">max</span>()	<span class="selector-tag">reversed</span>()	<span class="selector-tag">zip</span>()</div><div class="line"><span class="selector-tag">compile</span>()	<span class="selector-tag">hasattr</span>()	<span class="selector-tag">memoryview</span>()	<span class="selector-tag">round</span>()	<span class="selector-tag">__import__</span>()</div><div class="line"><span class="selector-tag">complex</span>()	<span class="selector-tag">hash</span>()	<span class="selector-tag">min</span>()	<span class="selector-tag">set</span>()	</div><div class="line"><span class="selector-tag">delattr</span>()	<span class="selector-tag">help</span>()	<span class="selector-tag">next</span>()	<span class="selector-tag">setattr</span>()	</div><div class="line"><span class="selector-tag">dict</span>()	<span class="selector-tag">hex</span>()	<span class="selector-tag">object</span>()	<span class="selector-tag">slice</span>()	</div><div class="line"><span class="selector-tag">dir</span>()	<span class="selector-tag">id</span>()	<span class="selector-tag">oct</span>()	<span class="selector-tag">sorted</span>()</div></pre></td></tr></table></figure>
<p>怎么才能知道哪个函数怎么用，并且用来干什么的呢？</p>
<ul>
<li>help(abs)命令</li>
<li><p><a href="https://docs.python.org/2/library/functions.html" target="_blank" rel="external">Python的官网https://docs.python.org/2/library/functions.html</a></p>
</li>
<li><p>raw_input</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; raw_input("input your name: ")</div><div class="line">input your name: michael</div><div class="line">'michael'</div><div class="line">&gt;&gt;&gt; name = raw_input("input your name: ")</div><div class="line">input your name: michael</div><div class="line">&gt;&gt;&gt; name</div><div class="line">'michael'</div><div class="line">&gt;&gt;&gt; type name</div><div class="line">SyntaxError: invalid syntax</div><div class="line">&gt;&gt;&gt; type(name)</div><div class="line">&lt;type 'str'&gt;</div><div class="line">&gt;&gt;&gt; age = raw_input("How old are you? ");</div><div class="line">How old are you? 25  #输入数字</div><div class="line">&gt;&gt;&gt; age</div><div class="line">'25'</div><div class="line">&gt;&gt;&gt; type(age)</div><div class="line">&lt;type 'str'&gt;  #返回仍是str类型</div></pre></td></tr></table></figure>
<ul>
<li>print</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"Hello, world"</span></div><div class="line">Hello, world</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> a</div><div class="line">python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"good"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> a,b</div><div class="line">python good</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>特别提醒的是，print的返回值默认是以<code>\n</code>结尾的，所以每个输出语句之后自动换行。</p>
<h3 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>在Python中，把像字符串这样的对象类型统称为<strong>序列</strong>，顾名思义，序列就是有序排列。在这个序列中，每个人都有编号，编号和每个字符一一对应，在Python中这些编号称为<strong>索引</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang = <span class="string">"study python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang[<span class="number">0</span>]</div><div class="line"><span class="string">'s'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang[<span class="number">1</span>]</div><div class="line"><span class="string">'t'</span></div></pre></td></tr></table></figure>
<p>也可以这样做：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"study python"</span>[<span class="number">0</span>]</div><div class="line"><span class="string">'s'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"study python"</span>[<span class="number">1</span>]</div><div class="line"><span class="string">'t'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>通过字符找到其在字符串中的索引值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang = <span class="string">"study python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang.index(<span class="string">"p"</span>)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang.<span class="keyword">in</span></div><div class="line">SyntaxError: invalid syntax</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang.index(<span class="string">"y"</span>)</div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>不管是得到一个字符还是多个字符，通过索引得到字符的过程称为<strong>切片</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang = <span class="string">"study python"</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang[<span class="number">2</span>:<span class="number">9</span>] <span class="comment">#得到从2号到9号之间的字符串（包括2号但不包括9号）</span></div><div class="line"><span class="string">'udy pyt'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = lang[<span class="number">1</span>:] <span class="comment">#得到从1号到最末尾的字符</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="string">'tudy python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = lang[:] <span class="comment">#得到所有的字符</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line"><span class="string">'study python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = lang[:<span class="number">10</span>] <span class="comment">#得到从0到10号之前的字符</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line"><span class="string">'study pyth'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang[<span class="number">1</span>:<span class="number">12</span>] </div><div class="line"><span class="string">'tudy python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang[<span class="number">0</span>:<span class="number">13</span>] <span class="comment">#如果第二个数字的长度大于字符串的长度，得到的返回结果就自动到最大长度终止，但是这种获得切片的方法是值得提倡的。特别是如果在循环中，这样做很可能会遇到麻烦。</span></div><div class="line"><span class="string">'study python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang[<span class="number">0</span>:<span class="number">14</span>]</div><div class="line"><span class="string">'study python</span></div></pre></td></tr></table></figure>
<p>如果在切片的时候，冒号左右都不写数字，就是前面所操作的<code>c = lang[:]</code>,其结果是变量的值c与源字符串lang一样，即复制了一份，那是不是真的复制呢？下面的方式检验一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</div><div class="line"><span class="number">44841944</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(lang)</div><div class="line"><span class="number">44841944</span></div></pre></td></tr></table></figure>
<p>从上面可以看出,两个内存地址一样，说明c和lang两个变量指向的是同一个对象。用<code>c = lang[:]</code>的方式并没有生成一个新的字符串，而是将变量c这个标签页贴在原来那个字符串上了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang = <span class="string">"study python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = lang</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</div><div class="line"><span class="number">50456160</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(lang)</div><div class="line"><span class="number">50456160</span></div></pre></td></tr></table></figure>
<p>上述这种情况，变量c和lang也指向同一个对象。</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>所有序列都有如下操作，字符串是序列的子集。</p>
<ul>
<li>len():返回序列长度</li>
<li>+:连接两个序列</li>
<li>*:重复序列元素</li>
<li>in: 判断元素是否存在于序列中</li>
<li>max():返回最大值</li>
<li>min():返回最小值</li>
<li>cmp(str1,str2): 比较两个序列值是否相同</li>
</ul>
<h4 id="“-”连接字符串"><a href="#“-”连接字符串" class="headerlink" title="“+”连接字符串"></a>“+”连接字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">"study"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 + str2</div><div class="line"><span class="string">'studypython'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 + <span class="string">"--&gt;"</span> + str2</div><div class="line"><span class="string">'study--&gt;python'</span></div></pre></td></tr></table></figure>
<h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><p>in用来判断某个字符串是不是在另外一个字符串内，或者判断某个字符串内是否包含某个字符串，包含则返回True，否则返回false。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"study python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"s"</span> <span class="keyword">in</span> str</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"i"</span> <span class="keyword">in</span> str</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"su"</span> <span class="keyword">in</span> str</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"stu"</span> <span class="keyword">in</span> str</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<blockquote>
<p>str = “python”<br>max(str)<br>‘y’<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"python"</span></div><div class="line"><span class="string">'y'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>min(str)</div><div class="line"><span class="string">'h'</span></div></pre></td></tr></table></figure>
<h4 id="cmp"><a href="#cmp" class="headerlink" title="cmp()"></a>cmp()</h4><p>将两个字符串进行比较，首先将字符串中的符号转化为对应的数字，然后再比较</p>
<ul>
<li>如果返回的数值小于0，说明前者小于后者</li>
<li>等于0，表示两者相等</li>
<li>大于0，表示前者大于后者</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(<span class="string">"aaa"</span>,<span class="string">"abc"</span>)  <span class="comment">#</span></div><div class="line"><span class="number">-1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(<span class="string">"abc"</span>,<span class="string">"aaa"</span>);</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(<span class="string">"abc"</span>,<span class="string">"abc"</span>);</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">"a"</span>) <span class="comment">#返回字符的ASCII值</span></div><div class="line"><span class="number">97</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">97</span>)  <span class="comment">#返回ASCII值所对应的字符</span></div><div class="line"><span class="string">'a'</span></div></pre></td></tr></table></figure>
<h4 id="“-”"><a href="#“-”" class="headerlink" title="“*”"></a>“*”</h4><p>以指定的次数重复打印字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str * <span class="number">4</span></div><div class="line"><span class="string">'pythonpythonpythonpython'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"-"</span> * <span class="number">20</span></div><div class="line">--------------------</div></pre></td></tr></table></figure>
<h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4><p>len()返回字符串的长度，返回值类型是int型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"hello"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = len(a)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(m)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="常用的字符串方法"><a href="#常用的字符串方法" class="headerlink" title="常用的字符串方法"></a>常用的字符串方法</h3><p>字符串的方法有很多，可以通过dir来查看：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; dir(str)</div><div class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getnewargs__'</span>, <span class="string">'__getslice__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mod__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__rmod__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'_formatter_field_name_split'</span>, <span class="string">'_formatter_parser'</span>, <span class="string">'capitalize'</span>, <span class="string">'center'</span>, <span class="string">'count'</span>, <span class="string">'decode'</span>, <span class="string">'encode'</span>, <span class="string">'endswith'</span>, <span class="string">'expandtabs'</span>, <span class="string">'find'</span>, <span class="string">'format'</span>, <span class="string">'index'</span>, <span class="string">'isalnum'</span>, <span class="string">'isalpha'</span>, <span class="string">'isdigit'</span>, <span class="string">'islower'</span>, <span class="string">'isspace'</span>, <span class="string">'istitle'</span>, <span class="string">'isupper'</span>, <span class="string">'join'</span>, <span class="string">'ljust'</span>, <span class="string">'lower'</span>, <span class="string">'lstrip'</span>, <span class="string">'partition'</span>, <span class="string">'replace'</span>, <span class="string">'rfind'</span>, <span class="string">'rindex'</span>, <span class="string">'rjust'</span>, <span class="string">'rpartition'</span>, <span class="string">'rsplit'</span>, <span class="string">'rstrip'</span>, <span class="string">'split'</span>, <span class="string">'splitlines'</span>, <span class="string">'startswith'</span>, <span class="string">'strip'</span>, <span class="string">'swapcase'</span>, <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</div></pre></td></tr></table></figure>
<h4 id="判断字符串是否全是字母"><a href="#判断字符串是否全是字母" class="headerlink" title="判断字符串是否全是字母"></a>判断字符串是否全是字母</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"python"</span>.isalpha()  <span class="comment">#字符串全是字母，返回TRUE</span></div><div class="line">True</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"2python"</span>.isalpha() <span class="comment">#字符串含有非字母，返回FALSE</span></div><div class="line">False</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;</div></pre></td></tr></table></figure>
<h4 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h4><p>split()作用是将字符串根据某个分隔符进行分割。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; str = <span class="string">"I love Beijing"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.split(<span class="string">" "</span>)</div><div class="line">[<span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'Beijing'</span>]  <span class="comment">#返回值为名叫列表（list）的类型</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str = <span class="string">"www.baidu.com"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.split(<span class="string">","</span>)</div><div class="line">[<span class="string">'www'</span>, <span class="string">'baidu'</span>, <span class="string">'com'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;</div></pre></td></tr></table></figure>
<h4 id="去掉字符串两头的空格"><a href="#去掉字符串两头的空格" class="headerlink" title="去掉字符串两头的空格"></a>去掉字符串两头的空格</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; str = <span class="string">"  python  "</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.strip()  <span class="comment">#去掉字符串左右空格</span></div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.lstrip() <span class="comment">#去掉字符串左边空格</span></div><div class="line"><span class="string">'python  '</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.rstrip() <span class="comment">#去掉字符串右边空格</span></div><div class="line"><span class="string">'  python'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt;</div></pre></td></tr></table></figure>
<h4 id="字符大小写转换"><a href="#字符大小写转换" class="headerlink" title="字符大小写转换"></a>字符大小写转换</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; str = <span class="string">"pyThon"</span> </div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.upper() <span class="comment">#将小写字母完全变为大写字母</span></div><div class="line"><span class="string">'PYTHON'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.lower() <span class="comment">#将大写字母完全变成小写字母</span></div><div class="line"><span class="string">'python'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.isupper() <span class="comment">#判断是否全是大写字母</span></div><div class="line">False</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.islower() <span class="comment">#判断是否全是小写字母</span></div><div class="line">False</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str = <span class="string">"this is book"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.capitalize() <span class="comment">#把所有单词的第一个字母转化为小写字母</span></div><div class="line"><span class="string">'This is book'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.istitle() <span class="comment">#判断每个单词的第一个字母是否为大写字母</span></div><div class="line">False</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;</div></pre></td></tr></table></figure>
<h4 id="join连接字符串"><a href="#join连接字符串" class="headerlink" title="join连接字符串"></a>join连接字符串</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; b = <span class="string">"www.baidu.com"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; c = b.split(<span class="string">"."</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; c</div><div class="line">[<span class="string">'www'</span>, <span class="string">'baidu'</span>, <span class="string">'com'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"."</span>.join(c)</div><div class="line"><span class="string">'www.baidu.com'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"**"</span>.join(c)</div><div class="line"><span class="string">'www**baidu**com'</span></div></pre></td></tr></table></figure>
<h3 id="字符串格式化输出"><a href="#字符串格式化输出" class="headerlink" title="字符串格式化输出"></a>字符串格式化输出</h3><h4 id="使用占位符"><a href="#使用占位符" class="headerlink" title="使用占位符"></a>使用占位符</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"I like %s"</span> % <span class="string">"Python"</span> <span class="comment">#%s表示字符串</span></div><div class="line"><span class="string">'I like Python'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"%d years old"</span> % <span class="number">25</span> <span class="comment">#%d表示整数</span></div><div class="line"><span class="string">'25 years old'</span></div><div class="line"><span class="string">"I like 'python'"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"%s is %d years old"</span> % (<span class="string">"deason"</span>,<span class="number">25</span>)</div><div class="line"><span class="string">'deason is 25 years old'</span></div></pre></td></tr></table></figure>
<ul>
<li>%s 字符串（采用str()的显示）</li>
<li>%r 字符串（采用repr（）的显示）</li>
<li>%c 单个字符</li>
<li>%b 二进制整数</li>
<li>%d 十进制整数</li>
<li>%e 指数（底数为e）</li>
<li>%f 浮点数</li>
</ul>
<h4 id="使用format格式化"><a href="#使用format格式化" class="headerlink" title="使用format格式化"></a>使用format格式化</h4><p>{}作为占位符</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; str = <span class="string">"I like &#123;&#125;"</span>.format(<span class="string">"python"</span>);</div><div class="line">&gt;&gt;&gt; str</div><div class="line"><span class="string">'I like python'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str = <span class="string">"&#123;0&#125; is &#123;1&#125; years old"</span>.format(<span class="string">"michael"</span>,<span class="number">25</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str</div><div class="line"><span class="string">'michael is 25 years old'</span></div></pre></td></tr></table></figure>
<h4 id="字典式格式化"><a href="#字典式格式化" class="headerlink" title="字典式格式化"></a>字典式格式化</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lang = <span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print <span class="string">"I love %(program)s"</span> <span class="string">%&#123;"program":lang&#125;</span></div><div class="line">I love python</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print <span class="string">"I love %(program)s"</span> <span class="string">%&#123;"program":"python"&#125;</span></div><div class="line">I love python</div></pre></td></tr></table></figure>
<p>综上，推荐使用:string.format()</p>
<h2 id="Python列表"><a href="#Python列表" class="headerlink" title="Python列表"></a>Python列表</h2><p>此前已经知道了Python的三种对象类型：int、float和str。下面开始学习一种新的Python对象类型：list。list在Python中具有非常强大的功能。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在Python中，用方括号表示一个list：[]，方括号里面的元素类型，可以是int型数据，也可以是str类型的数据，甚至也可以是bool类型数据。而像Java语言，数组里面只能存在一种类型的数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[]  <span class="comment">#定义了一个空的列表，变量a相当于一个贴在其上的标签</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)  <span class="comment">#用内置函数type()查看变量a引用对象的类型，为list</span></div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(a) <span class="comment">#用内置函数bool()查看a的布尔值，因为是空，所以为False</span></div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> a</div><div class="line">[]</div></pre></td></tr></table></figure>
<p>下面看看list具体的使用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="string">'a'</span>,<span class="number">3</span>,<span class="string">'hello'</span>,<span class="keyword">True</span>]  <span class="comment">#list中可以有多中数据类型</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'hello'</span>, <span class="keyword">True</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(a)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> a</div><div class="line">[<span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'hello'</span>, <span class="keyword">True</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>]</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a[<span class="number">3</span>])</div><div class="line">&lt;type <span class="string">'bool'</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="索引和切片-1"><a href="#索引和切片-1" class="headerlink" title="索引和切片"></a>索引和切片</h3><h4 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h4><p>和字符串中的索引类似，只不过list是以元素为单位，而不是以字符为单位进行索引。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">2</span>,<span class="number">3</span>,<span class="keyword">True</span>,<span class="string">"Hello,world"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="keyword">True</span>, <span class="string">'Hello,world'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>]</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>]</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>]</div><div class="line"><span class="string">'Hello,world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a[<span class="number">0</span>])</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a[<span class="number">2</span>])</div><div class="line">&lt;type <span class="string">'bool'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a[<span class="number">3</span>])</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">2</span>)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">3</span>)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="keyword">True</span>)</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">"Hello,world"</span>)</div><div class="line"><span class="number">3</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="string">'python'</span>,<span class="string">'java'</span>,<span class="string">'c++'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">-1</span>]</div><div class="line"><span class="string">'c++'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">-3</span>:<span class="number">-1</span>]</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">-1</span>:<span class="number">-3</span>]</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>序列的切片，一定要左边的数字小于右边的数字，lst[-1:-3]就没有遵守这个规则，返回的是一个空。</p>
<h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList[::<span class="number">-1</span>]</div><div class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mList</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>当然，也可以对字符串进行反转:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang=<span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang[::<span class="number">-1</span>]</div><div class="line"><span class="string">'nohtyp'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lang</div><div class="line"><span class="string">'python'</span></div></pre></td></tr></table></figure>
<p>可以看出，不管是str还是list，反转之后原来的值没有改变。这说明，这里的反转不是把原来的值倒过来，而是新生成了一个值，生成的值跟原来的值相比是倒过来的。</p>
<p>Python还有一种方法使list反转，且比较容易阅读和理解，特别推荐：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(reversed(mList))</div><div class="line">[<span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abcd'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(reversed(s))</div><div class="line">[<span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</div><div class="line"><span class="string">'abcd'</span></div></pre></td></tr></table></figure>
<h3 id="对list的操作"><a href="#对list的操作" class="headerlink" title="对list的操作"></a>对list的操作</h3><h4 id="len-1"><a href="#len-1" class="headerlink" title="len()"></a>len()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst=[<span class="string">'python'</span>,<span class="string">'java'</span>,<span class="string">'c++'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(lst)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h4 id="连接连个序列"><a href="#连接连个序列" class="headerlink" title="+,连接连个序列"></a>+,连接连个序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst=[<span class="string">'python'</span>,<span class="string">'java'</span>,<span class="string">'c++'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>alst =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst + alst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<h4 id="重复元素"><a href="#重复元素" class="headerlink" title="*,重复元素"></a>*,重复元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst * <span class="number">3</span></div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>]</div></pre></td></tr></table></figure>
<h4 id="in-1"><a href="#in-1" class="headerlink" title="in"></a>in</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'python'</span> <span class="keyword">in</span> lst</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<h4 id="max-和min"><a href="#max-和min" class="headerlink" title="max()和min()"></a>max()和min()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>max(alst)</div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>min(alst)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>max(lst)</div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>min(lst)</div><div class="line"><span class="string">'c++'</span></div></pre></td></tr></table></figure>
<h4 id="cmp-1"><a href="#cmp-1" class="headerlink" title="cmp()"></a>cmp()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">2</span>,<span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(a,b)</div><div class="line"><span class="number">-1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(b,a)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c=[<span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(a,c)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d=[<span class="string">'2'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(a,d)</div><div class="line"><span class="number">-1</span></div></pre></td></tr></table></figure>
<h4 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst.append(<span class="string">"html5"</span>) <span class="comment">#将元素追加到list的尾部</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="string">'html5'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst.append(<span class="number">100</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="string">'html5'</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure>
<p>等价于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="string">'html5'</span>, <span class="number">100</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst[len(lst):] = [<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="string">'html5'</span>, <span class="number">100</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(lst)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">6</span>:]=[<span class="string">'javascript'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="string">'html5'</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="string">'javascript'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="列表的函数"><a href="#列表的函数" class="headerlink" title="列表的函数"></a>列表的函数</h3><p>list是Python中的苦力，那么它都有哪些函数呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(list)</div><div class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__delitem__'</span>, <span class="string">'__delslice__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getslice__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__iadd__'</span>, <span class="string">'__imul__'</span>, <span class="string">'__init__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__reversed__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__setitem__'</span>, <span class="string">'__setslice__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'append'</span>, <span class="string">'count'</span>, <span class="string">'extend'</span>, <span class="string">'index'</span>, <span class="string">'insert'</span>, <span class="string">'pop'</span>, <span class="string">'remove'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span>]</div></pre></td></tr></table></figure>
<p>先不管以双下划线开始和结尾的函数，就剩下以下几个</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'append'</span>, <span class="string">'count'</span>, <span class="string">'extend'</span>, <span class="string">'index'</span>, <span class="string">'insert'</span>, <span class="string">'pop'</span>, <span class="string">'remove'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span></div></pre></td></tr></table></figure>
<h4 id="append和extend"><a href="#append和extend" class="headerlink" title="append和extend"></a>append和extend</h4><p>list.append(x),是将某个元素x添加到已知的一个列表的尾部。</p>
<p>list.extend(L),则是将两个列表合并，或者说将列表L追加到列表list中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="string">"lau"</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(b)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'lau'</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">[<span class="string">'lau'</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">"abc"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(b)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(c) </div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#20&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    a.extend(c)</div><div class="line">TypeError: <span class="string">'int'</span> object <span class="keyword">is</span> <span class="keyword">not</span> iterable</div></pre></td></tr></table></figure>
<p>如果extend的参数对象是数值型则报错。<br>所以，extend的参数对象是一个list，如果是str，则Python会先把它按照字符为单位转化为list再添加到目标list中。官方文档指出extend的元素对象必须是iterable（可迭代的）。</p>
<p><strong>判断一个对象是不是可迭代的？</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(s,<span class="string">'__iter__'</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(a,<span class="string">'__iter__'</span>)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>通过内建函数hasattr()判断一个对象是不是可迭代的，它的判断本质就是看那个类型中是否有<code>__iter__</code>函数。</p>
<p><strong>append和extend函数的相同点</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">49822856</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</div><div class="line"><span class="number">50066536</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(b)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">49822856</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">50068376</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">12</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">50068376</span></div></pre></td></tr></table></figure>
<p>由上面两段代码可知，append和extend函数的共同点：</p>
<ul>
<li>都是原地址修改列表，不会创建一个新的列表</li>
<li>没有返回值</li>
</ul>
<p><strong>append和extend函数的不同点</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst.append([<span class="string">"python"</span>,<span class="string">"java"</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'python'</span>, <span class="string">'java'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(lst)</div><div class="line"><span class="number">4</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst2.extend([<span class="string">"python"</span>,<span class="string">"java"</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst2</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'python'</span>, <span class="string">'java'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(lst2)</div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<p>可知，append是整体的追加，extend是单个的追加</p>
<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>count的作用是计算某个元素在该list中出现的次数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="number">1</span>)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="string">'a'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="string">'a'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'a'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="string">'a'</span>)</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="number">4</span>) <span class="comment">#不存在，则返回为0</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>index计算元素在该列表首次出现的位置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">4</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">6</span>) <span class="comment">#如果不存，就报错</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#85&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    a.index(<span class="number">6</span>)</div><div class="line">ValueError: <span class="number">6</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> list</div></pre></td></tr></table></figure>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>list.insert(i,x),想列表中指定的位置插入元素x。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">3</span>,<span class="number">7</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">8</span>,<span class="number">4</span>)  <span class="comment">#若超出列表长度，则将元素插入到列表末尾</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<h4 id="pop和remove"><a href="#pop和remove" class="headerlink" title="pop和remove"></a>pop和remove</h4><p>删除列表中元素的方法有两个，分别是：</p>
<ul>
<li>list.remove(x)</li>
</ul>
<p>删除列表中首次出现的元素x，如果不存在元素x，则报错</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">6</span>)</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#103&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    a.remove(<span class="number">6</span>)</div><div class="line">ValueError: list.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> list</div></pre></td></tr></table></figure>
<ul>
<li>list.pop([i])</li>
</ul>
<p>删除列表中位置i的元素并且返回该元素。如果没有指定位置i，则默认删除并返回列表的最后一个元素。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">0</span>) <span class="comment">#删除指定位置0</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop() <span class="comment">#删除默认位置</span></div><div class="line"><span class="number">4</span>  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">5</span>) <span class="comment">#超过列表长度则会报错</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;pyshell#116&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    a.pop(<span class="number">5</span>)</div><div class="line">IndexError: pop index out of range</div></pre></td></tr></table></figure>
<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p>将列表的元素顺序反过来,不会创建新的列表，因此没有返回值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.reverse()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="string">'ss'</span>,<span class="string">'aaa'</span>,<span class="string">'dd'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.reverse()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="string">'dd'</span>, <span class="string">'aaa'</span>, <span class="string">'ss'</span>]</div></pre></td></tr></table></figure>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort是对列表进行排序，不会创建新的列表，因此没有返回值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort() <span class="comment">#默认从小到大的排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort(reverse = <span class="keyword">True</span>) <span class="comment">#从大到小的排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst=[<span class="string">"python"</span>,<span class="string">"java"</span>,<span class="string">"c"</span>,<span class="string">"basic"</span>,<span class="string">"ruby"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst.sort(key=len) <span class="comment">#以字符串长度为关键词进行排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lst</div><div class="line">[<span class="string">'c'</span>, <span class="string">'java'</span>, <span class="string">'ruby'</span>, <span class="string">'basic'</span>, <span class="string">'python'</span>]</div></pre></td></tr></table></figure>
<h2 id="比较列表和字符串"><a href="#比较列表和字符串" class="headerlink" title="比较列表和字符串"></a>比较列表和字符串</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul>
<li>都属于序列，因此那些属于序列的操作对两者都适用</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>最大区别是，列表自身可以改变，字符串自身不可以改变</li>
<li>字符串只能通过创建一个新的str来改变，新的str不是原来的字符串对象</li>
</ul>
<h3 id="多维列表"><a href="#多维列表" class="headerlink" title="多维列表"></a>多维列表</h3><ul>
<li>在字符串中，每个元素只能是字符</li>
<li>在列表中，每个元素可以是任何类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(matrix)</div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix[<span class="number">0</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<h3 id="列表和字符串的相互转化"><a href="#列表和字符串的相互转化" class="headerlink" title="列表和字符串的相互转化"></a>列表和字符串的相互转化</h3><h4 id="str-split"><a href="#str-split" class="headerlink" title="str.split()"></a>str.split()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>line=<span class="string">"hello I am good"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>line.split(<span class="string">" "</span>)</div><div class="line">[<span class="string">'hello'</span>, <span class="string">'I'</span>, <span class="string">'am'</span>, <span class="string">'good'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = line.split(<span class="string">" "</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="string">'hello'</span>, <span class="string">'I'</span>, <span class="string">'am'</span>, <span class="string">'good'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div></pre></td></tr></table></figure>
<h4 id="“split”-join-list"><a href="#“split”-join-list" class="headerlink" title="“split”.join(list)"></a>“split”.join(list)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="string">'hello'</span>, <span class="string">'I'</span>, <span class="string">'am'</span>, <span class="string">'good'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">" "</span>.join(a)</div><div class="line"><span class="string">'hello I am good'</span></div></pre></td></tr></table></figure>
<h2 id="Python元组"><a href="#Python元组" class="headerlink" title="Python元组"></a>Python元组</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>元组（tuple）是用圆括号括起来的，元素之间用逗号隔开。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; t = <span class="number">123</span>,<span class="string">'abc'</span>,[<span class="string">"come"</span>,<span class="string">"here"</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; t</div><div class="line">(<span class="number">123</span>, <span class="string">'abc'</span>, [<span class="string">'come'</span>, <span class="string">'here'</span>])</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; type(t)</div><div class="line">&lt;type <span class="string">'tuple'</span>&gt;</div></pre></td></tr></table></figure>
<p>元组也是一种序列，这一点与列表、字符串类似。有以下特点：</p>
<ul>
<li>元组其中的元素不能更改，和字符串类似</li>
<li>元组中的元素可以是任何类型的数据，和列表类似</li>
</ul>
<h3 id="索引和切片-2"><a href="#索引和切片-2" class="headerlink" title="索引和切片"></a>索引和切片</h3><p>元组的索引和切片的基本操作和字符串、列表是一样的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="number">123</span>, <span class="string">'abc'</span>, [<span class="string">'come'</span>, <span class="string">'here'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>]</div><div class="line">[<span class="string">'come'</span>, <span class="string">'here'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">1</span>:]</div><div class="line">(<span class="string">'abc'</span>, [<span class="string">'come'</span>, <span class="string">'here'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">0</span>]</div><div class="line"><span class="string">'come'</span></div></pre></td></tr></table></figure>
<p>特别注意：如果一个元组中只有一个元素，应该在该元素后面加上一个半角的英文逗号：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=(<span class="number">3</span>,) <span class="comment">#加了逗号就是元组</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</div><div class="line">&lt;type <span class="string">'tuple'</span>&gt;</div></pre></td></tr></table></figure>
<p>列表和元组之间可以实现转换，分别使用list()和tuple()</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="number">123</span>, <span class="string">'abc'</span>, [<span class="string">'come'</span>, <span class="string">'here'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tlst = list(t)   <span class="comment"># tuple---&gt;list</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tlst</div><div class="line">[<span class="number">123</span>, <span class="string">'abc'</span>, [<span class="string">'come'</span>, <span class="string">'here'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(tlst)</div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t_tuple = tuple(tlst)  <span class="comment">#list---&gt;tuple</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t_tuple</div><div class="line">(<span class="number">123</span>, <span class="string">'abc'</span>, [<span class="string">'come'</span>, <span class="string">'here'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(t_tuple)</div><div class="line">&lt;type <span class="string">'tuple'</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul>
<li>元组比列表操作速度快。如果定义了一个值的常量集，并且唯一要用它做的是不断地遍历它，请使用元组代替列表</li>
<li>如果对不需要修改的数据进行“写保护”，可以使代码更安全，这时使用元组而不是列表。如果必须要改变这些值，则需要执行元组到列表的转换。</li>
<li>元组可以在字典中被用作key，但是列表不行。因为字典的key必须是不可变的，元组本身是不可变的。</li>
<li>元组可以用在字符串格式化中。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python字符串&quot;&gt;&lt;a href=&quot;#Python字符串&quot; class=&quot;headerlink&quot; title=&quot;Python字符串&quot;&gt;&lt;/a&gt;Python字符串&lt;/h2&gt;&lt;p&gt;在Python中，万物皆对象，显然字符串是对象类型，用str表示。字符串类型通常用单
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础①基本数据类型</title>
    <link href="http://liuguoquan727.github.io/2017/05/07/Python%E5%9F%BA%E7%A1%80%E2%91%A0%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://liuguoquan727.github.io/2017/05/07/Python基础①基本数据类型/</id>
    <published>2017-05-07T12:52:53.000Z</published>
    <updated>2017-05-09T06:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><ul>
<li><strong>基本类型</strong></li>
</ul>
<p>首先，进入Python交互模式中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//整数</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></div><div class="line"><span class="number">3</span></div><div class="line"></div><div class="line">//长整数</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">33333333333333333333333333</span></div><div class="line"><span class="number">33333333333333333333333333L</span></div><div class="line"></div><div class="line">//浮点数</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3.22222222222</span></div><div class="line"><span class="number">3.22222222222</span></div><div class="line"></div><div class="line">//负数</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-234</span></div><div class="line"><span class="number">-234</span></div><div class="line"></div><div class="line">//十六进制数</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0xff</span></div><div class="line"><span class="number">255</span></div><div class="line"></div><div class="line">//八进制</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">010</span></div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure>
<p>在交互模式下：</p>
<p>如果输入3，就显示3，称为整数</p>
<p>当输入一个比较大的整数时，Python会自动会将这个大整数进行转换，转换的结果是一个“长整数”类型，为了表示它，会在其末尾显示一个L。由于这个操作是Python自动完成的，所有在Python中没有单独将“长整数”作为一个类型。</p>
<p>如果输入一个负数，直接在数字前面加上符号即可</p>
<p>Python也支持二进制、八进制、十六进制数。</p>
<ul>
<li><strong>对象身份</strong></li>
</ul>
<p>每个数字在Python都是一个对象，每个对象，在内存中都有自己的一个地址，这就是它的身份，用内建函数id()可以查看每个对象的内存地址即身份。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(<span class="number">3</span>)</div><div class="line"><span class="number">39679608</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(<span class="number">-3</span>)</div><div class="line"><span class="number">39679680</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(<span class="number">2.33</span>)</div><div class="line"><span class="number">39712264</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(<span class="number">3.0</span>)</div><div class="line"><span class="number">48962672</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>以上四个不同的数字是四个不同的对象，具有四个不同的内存地址。特别要注意，在数学上，3和3.0是相等的，但在这里，它们是不同的对象。</p>
<ul>
<li><strong>对象类型</strong></li>
</ul>
<p>如果要查找一个对象的类型，则使用type()这个内建函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">3</span>)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">-3</span>)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">0.3</span>)</div><div class="line">&lt;type <span class="string">'float'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">222222222222222222222222222</span>)</div><div class="line">&lt;type <span class="string">'long'</span>&gt;</div></pre></td></tr></table></figure>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line"><span class="number">6</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在Python中，对象有类型，变量无类型</li>
<li>当Python中写入5、6时，计算机就自动在其内存中某个地方建立了这两个对象，这两个对象的类型就是Int</li>
<li>上述代码中的x就好比是个标签，当x=5时，就是将x这个标签拴在了5上，通过这个x，就找到了5，于是“&gt;&gt;&gt;x”输出的结果就是5。所以这个标签x没有类型之说，它不仅可以贴在整数类型的对象上，还可以贴在其他类型的对象上。</li>
</ul>
<h2 id="简单的四则运算"><a href="#简单的四则运算" class="headerlink" title="简单的四则运算"></a>简单的四则运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//加</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> + <span class="number">5</span></div><div class="line"><span class="number">8</span></div><div class="line"></div><div class="line">//减</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> - <span class="number">3</span></div><div class="line"><span class="number">2</span></div><div class="line"></div><div class="line">//乘</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> * <span class="number">3</span></div><div class="line"><span class="number">15</span></div><div class="line"></div><div class="line">//整除</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span> / <span class="number">4</span></div><div class="line"><span class="number">2</span></div><div class="line"></div><div class="line">//模除</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span> % <span class="number">3</span></div><div class="line"><span class="number">2</span></div><div class="line"></div><div class="line">//混合运算</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> * <span class="number">3</span> <span class="number">-4</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="整数溢出问题"><a href="#整数溢出问题" class="headerlink" title="整数溢出问题"></a>整数溢出问题</h2><p>在一些高级编程语言中，整数溢出是必须正视的，但是，在Python里就无需担心了，原因就是Python为我们解决了这个问题，它支持“无限精度”的整数，所以，不用考虑整数溢出的问题，Int类型与任意精度的Long整数类型可以无缝转换，超过Int范围情况都将自动转换成Long类型。</p>
<p>如下计算：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1234456678888914781548154815481</span> * <span class="number">618468146815418458154815481548</span></div><div class="line"><span class="number">763472134516343226654595368107241568115304361007546100244588L</span></div></pre></td></tr></table></figure>
<p>你还可以在交互模式下计算2的1000次幂，计算方法是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">1000</span></div><div class="line"><span class="number">10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376L</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><h3 id="整数与整数相除"><a href="#整数与整数相除" class="headerlink" title="整数与整数相除"></a>整数与整数相除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> / <span class="number">5</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.0</span> / <span class="number">5</span></div><div class="line"><span class="number">0.4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> / <span class="number">5.0</span></div><div class="line"><span class="number">0.4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.0</span> / <span class="number">5.0</span></div><div class="line"><span class="number">0.4</span></div></pre></td></tr></table></figure>
<p>Python2.x中</p>
<ul>
<li>整数除整数，商是整数</li>
<li>整数除浮点数或浮点数除整数，商是浮点数</li>
</ul>
<h3 id="整数与浮点数相除"><a href="#整数与浮点数相除" class="headerlink" title="整数与浮点数相除"></a>整数与浮点数相除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9.0</span> / <span class="number">2</span></div><div class="line"><span class="number">4.5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span> / <span class="number">2.0</span></div><div class="line"><span class="number">4.5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9.0</span> / <span class="number">2.0</span></div><div class="line"><span class="number">4.5</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>不管是除数或者被除数，只要有一个数是浮点数，结果就是浮点数。</li>
</ul>
<p>然而，下面的计算可能会有点不好理解：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10.0</span> / <span class="number">3</span></div><div class="line"><span class="number">3.3333333333333335</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span> + <span class="number">0.2</span></div><div class="line"><span class="number">0.30000000000000004</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span> + <span class="number">0.1</span> - <span class="number">0.2</span></div><div class="line"><span class="number">0.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> - <span class="number">0.3</span></div><div class="line"><span class="number">5.551115123125783e-17</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> - <span class="number">0.2</span></div><div class="line"><span class="number">0.10000000000000003</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>原因在于十进制和二进制的转换上，计算机使用的是二进制进行计算，在上面的例子中，我们输入的是十进制，就要把十进制转换成二进制，然后在计算。但是在转化中，浮点数转化为二进制后，不会精确等于十进制的0.1。因为计算机存储的位数是有限制的，所有就出现了上述现象。</p>
<p>一般情况下，只要简单地将最终显示的结果用“四舍五入”到所期望的十进制位数，就会得到期望的最终结果。</p>
<p>对于需要非常精确的情况，可以使用decimal模块，它实现的十进制运算适合高精度要求的应用。另外fractions模块支持另外一种形式的运算，它实现的运算基于有理数。最高要求则是使用有SciPy提供的Numerical Python包和其他用于数学和统计学的包。</p>
<h3 id="引用模块解决除法问题"><a href="#引用模块解决除法问题" class="headerlink" title="引用模块解决除法问题"></a>引用模块解决除法问题</h3><p>我们可以通过以下两种形式引入模块：</p>
<ul>
<li>形式1：import module-name。import后面跟空格，然后是模块名称，例如 import os</li>
<li>形式2：from module1 import module11。module1是一个大模块，里面还有子模块module11，只想用module11，就这么写。</li>
</ul>
<p>如下是解决除法问题的模块：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> /<span class="number">2</span></div><div class="line"><span class="number">2.5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span> / <span class="number">2</span></div><div class="line"><span class="number">4.5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9.0</span> / <span class="number">2</span></div><div class="line"><span class="number">4.5</span></div></pre></td></tr></table></figure>
<p>引用了此模块后，不管什么情况，都能够得到浮点数的结果了。</p>
<h3 id="余数"><a href="#余数" class="headerlink" title="余数"></a>余数</h3><ul>
<li>模除，用%符号来取得两个数相除的余数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> % <span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span> % <span class="number">4</span></div><div class="line"><span class="number">1</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>内建函数divmod()</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>divmod(<span class="number">5</span>,<span class="number">2</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>divmod(<span class="number">9</span>,<span class="number">4</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>内建函数divmod()返回的是两个值，这两个值在一个圆括号内，圆括号内的数字第一个表示商，第二个表示余数。</p>
<h3 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h3><p>内建函数round（）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">1.234567</span>,<span class="number">2</span>)</div><div class="line"><span class="number">1.23</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">1.234567</span>,<span class="number">3</span>)</div><div class="line"><span class="number">1.235</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">10.0</span> /<span class="number">3</span> ,<span class="number">4</span>)</div><div class="line"><span class="number">3.3333</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>在round()中的第二个数，表示要保留的小数位数，返回值是一个四舍五入之后的数值。</p>
<p>接下里看下面的特殊情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">0.12345</span>,<span class="number">3</span>)</div><div class="line"><span class="number">0.123</span>  <span class="comment">#应该是1.235</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">2.235</span>,<span class="number">2</span>)</div><div class="line"><span class="number">2.23</span>   <span class="comment">#应该是2.24</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>这不是Python地Bug，归根到底是浮点数中的十进制转化为二进制引起的问题</p>
<h2 id="常用数学函数和运算优先级"><a href="#常用数学函数和运算优先级" class="headerlink" title="常用数学函数和运算优先级"></a>常用数学函数和运算优先级</h2><h3 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h3><p>math模块是Python标准库中的，所以不用安装就可以直接安装。使用方法是：</p>
<p><code>&gt;&gt;&gt; import math</code></p>
<p>这样就将math模块引用进来了，下面就可以使用这个模块提供的工具了，比如要得到圆周率：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>math.pi</div><div class="line"><span class="number">3.141592653589793</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>这个模块都能做些什么事情呢？可以用下面的方法看到：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(math)</div><div class="line">[<span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan'</span>, <span class="string">'atan2'</span>, <span class="string">'atanh'</span>, <span class="string">'ceil'</span>, <span class="string">'copysign'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'degrees'</span>, <span class="string">'e'</span>, <span class="string">'erf'</span>, <span class="string">'erfc'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'fabs'</span>, <span class="string">'factorial'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'frexp'</span>, <span class="string">'fsum'</span>, <span class="string">'gamma'</span>, <span class="string">'hypot'</span>, <span class="string">'isinf'</span>, <span class="string">'isnan'</span>, <span class="string">'ldexp'</span>, <span class="string">'lgamma'</span>, <span class="string">'log'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'modf'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'radians'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>, <span class="string">'trunc'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>dir(module)可以查看任何模块所包含的工具。<br>help(function)可以用来查看每个函数的使用情况。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>help(math.pow)</div><div class="line">Help on built-<span class="keyword">in</span> function pow <span class="keyword">in</span> module math:</div><div class="line"></div><div class="line">pow(...)</div><div class="line">    pow(x, y)</div><div class="line">    </div><div class="line">    Return x**y (x to the power of y).</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>下面来看看一些基本函数的使用：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#开平方</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; math.sqrt(<span class="number">9</span>)</div><div class="line"><span class="number">3.0</span></div><div class="line"></div><div class="line"><span class="comment">#绝对值</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; math.fabs(-<span class="number">2</span>)</div><div class="line"><span class="number">2.0</span></div><div class="line"></div><div class="line"><span class="comment">#模除</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; math.fmod(<span class="number">5</span>,<span class="number">3</span>)</div><div class="line"><span class="number">2.0</span></div></pre></td></tr></table></figure>
<h3 id="两个函数"><a href="#两个函数" class="headerlink" title="两个函数"></a>两个函数</h3><ul>
<li>1.求绝对值</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">10</span>)</div><div class="line"><span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-10</span>)</div><div class="line"><span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-1.2</span>)</div><div class="line"><span class="number">1.2</span></div></pre></td></tr></table></figure>
<ul>
<li>2.四舍五入</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">1.234</span>)</div><div class="line"><span class="number">1.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">1.234</span>,<span class="number">2</span>)</div><div class="line"><span class="number">1.23</span></div></pre></td></tr></table></figure>
<h3 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h3><p>运算规则表：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>lamba</td>
<td>Lamba表达式</td>
</tr>
<tr>
<td>or</td>
<td>布尔或</td>
</tr>
<tr>
<td>and</td>
<td>布尔与</td>
</tr>
<tr>
<td>not x</td>
<td>布尔非</td>
</tr>
<tr>
<td>in,not in</td>
<td>成员测试</td>
</tr>
<tr>
<td>is,is not</td>
<td>同一性测试</td>
</tr>
<tr>
<td>&lt;,&lt;=,&gt;,&gt;=,!=,==</td>
<td>比较</td>
</tr>
<tr>
<td>竖线</td>
<td>按位或</td>
</tr>
<tr>
<td>^</td>
<td>按位异或</td>
</tr>
<tr>
<td>&amp;</td>
<td>按位与</td>
</tr>
<tr>
<td>&lt;&lt;,&gt;&gt;</td>
<td>移位</td>
</tr>
<tr>
<td>+,-</td>
<td>加减 法</td>
</tr>
<tr>
<td>*,/,%</td>
<td>乘除、取余</td>
</tr>
<tr>
<td>+x,-x</td>
<td>正负号</td>
</tr>
<tr>
<td>~x</td>
<td>按位翻转</td>
</tr>
<tr>
<td>**</td>
<td>指数</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数字&quot;&gt;&lt;a href=&quot;#数字&quot; class=&quot;headerlink&quot; title=&quot;数字&quot;&gt;&lt;/a&gt;数字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先，进入Python交互模式中：&lt;/p&gt;
&lt;figur
    
    </summary>
    
      <category term="Python" scheme="http://liuguoquan727.github.io/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://liuguoquan727.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java8特性④Stream收集数据</title>
    <link href="http://liuguoquan727.github.io/2017/05/06/Java8%E7%89%B9%E6%80%A7%E2%91%A3Stream%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE/"/>
    <id>http://liuguoquan727.github.io/2017/05/06/Java8特性④Stream收集数据/</id>
    <published>2017-05-06T08:52:53.000Z</published>
    <updated>2017-05-06T08:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>收集器可以简洁而灵活地定义collect用来生成结果集合的标准。更具体地说，对流调用 collect 方法将对流中的元素触发一个归约操作（由Collector来参数化）。一般来说，Collector 会对元素应用一个转换函数（很多时候是不体现任何效果的恒等转换， 例如 toList ），并将结果累积在一个数据结构中，从而产生这一过程的最终输出。下面就来学习那些可以从Collectors 类提供的工厂方法（例如groupingBy）创建的收集器。</p>
</blockquote>
<h1 id="归约和汇总"><a href="#归约和汇总" class="headerlink" title="归约和汇总"></a>归约和汇总</h1><h2 id="查找流中的最大值和最小值"><a href="#查找流中的最大值和最小值" class="headerlink" title="查找流中的最大值和最小值"></a>查找流中的最大值和最小值</h2><p>Collectors.maxBy 和 Collectors.minBy 来计算流中的最大或最小值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Optional&lt;Dish&gt; maxDish = Dish.menu.stream().</div><div class="line">      collect(Collectors.maxBy(Comparator.comparing(Dish::getCalories)));</div><div class="line">maxDish.ifPresent(System.out::println);</div><div class="line"></div><div class="line">Optional&lt;Dish&gt; minDish = Dish.menu.stream().</div><div class="line">      collect(Collectors.minBy(Comparator.comparing(Dish::getCalories)));</div><div class="line">minDish.ifPresent(System.out::println);</div></pre></td></tr></table></figure>
<h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><p>Collectors.summingInt 汇总求和；<br>Collectors.averagingInt 汇总求平均值；<br>Collectors.summarizingInt 汇总所有信息包括数量、求和、平均值、最小值、最大值；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//求总热量</span></div><div class="line"><span class="keyword">int</span> totalColories = Dish.menu.stream().collect(Collectors.summingInt(Dish::getCalories));</div><div class="line">System.out.println(totalColories);</div><div class="line"></div><div class="line"><span class="comment">//求平均热量</span></div><div class="line"><span class="keyword">double</span> averageColories = Dish.menu.stream().collect(Collectors.averagingInt(Dish::getCalories));</div><div class="line">System.out.println(averageColories);</div><div class="line"></div><div class="line"><span class="comment">//汇总</span></div><div class="line">IntSummaryStatistics menuStatistics = Dish.menu.stream().collect(Collectors.summarizingInt(Dish::getCalories));</div><div class="line">System.out.println(menuStatistics);</div><div class="line">IntSummaryStatistics&#123;count=<span class="number">9</span>, sum=<span class="number">4300</span>, min=<span class="number">120</span>, average=<span class="number">477.777778</span>, max=<span class="number">800</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h2><p>joining 工厂方法返回的收集器会把对流中每一个对象应用toString方法得到的所有字符串连接成一个字符串。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String menu = Dish.menu.stream().map(Dish::getName).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">System.out.println(menu);</div><div class="line"><span class="comment">//pork,beef,chicken,french fries,rice,season fruit,pizza,prawns,salmon</span></div></pre></td></tr></table></figure>
<h2 id="Collectors-reducing"><a href="#Collectors-reducing" class="headerlink" title="Collectors.reducing"></a>Collectors.reducing</h2><p>Collectors.reducing 工厂方法是上面所有工厂方法的一般情况，它完全可以实现上述方法的功能。它需要三个参数：</p>
<ul>
<li>第一个参数是归约操作的起始值，也是流中没有元素时的返回值，所以很显然对于数值和而言0是一个合适的值。 </li>
<li>第二个参数是一个 Function，就是具体的取值函数。</li>
<li>第三个参数是一个 BinaryOperator，将两个项目累积成一个同类型的值。。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> totalCalories = Dish.menu.stream().collect(Collectors.reducing( <span class="number">0</span>, Dish::getCalories, (i, j) -&gt; i + j));</div></pre></td></tr></table></figure>
<h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>用Collectors.groupingBy工厂方法返回的收集器可以实现分组任务，分组操作的结果是一个Map，把分组函数返回的值作为映射的键，把流中 所有具有这个分类值的项目的列表作为对应的映射值。</p>
<h2 id="多级分组"><a href="#多级分组" class="headerlink" title="多级分组"></a>多级分组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Dish的Type为键，Dish类型所对应的dish集合为值</span></div><div class="line">Map&lt;Dish.Type, List&lt;Dish&gt;&gt; dishesByType = Dish.menu.stream().collect(Collectors.groupingBy(Dish::getType));</div><div class="line">System.out.println(dishesByType);</div><div class="line"><span class="comment">//&#123;FISH=[prawns, salmon], OTHER=[french fries, rice, season fruit, pizza], MEAT=[pork, beef, chicken]&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//一级分类为Dish的Type，二级分类为Dish的CaloricLevel</span></div><div class="line">Map&lt;Dish.Type, Map&lt;Dish.CaloricLevel, List&lt;Dish&gt;&gt;&gt; dishes = Dish.menu.stream()</div><div class="line">      .collect(Collectors.groupingBy(Dish::getType, Collectors.groupingBy(Dish::getLevel)));</div><div class="line">System.out.println(dishes);</div><div class="line"><span class="comment">//&#123;FISH=&#123;NORMAL=[salmon], DIET=[prawns]&#125;, OTHER=&#123;NORMAL=[french fries, pizza], DIET=[rice, season fruit]&#125;, MEAT=&#123;NORMAL=[beef], FAT=[pork], DIET=[chicken]&#125;&#125;</span></div></pre></td></tr></table></figure>
<h2 id="按子集收集数据"><a href="#按子集收集数据" class="headerlink" title="按子集收集数据"></a>按子集收集数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Dish的Type为键，Dish类型所对应的dish集合的size为值</span></div><div class="line">Map&lt;Dish.Type, Long&gt; dishTypeCount = Dish.menu.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.counting()));</div><div class="line">System.out.println(dishTypeCount);</div><div class="line"><span class="comment">//&#123;FISH=2, OTHER=4, MEAT=3&#125;</span></div></pre></td></tr></table></figure>
<h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><p>分区是分组的特殊情况：由一个谓词（返回一个布尔值的函数）作为分类函数，它称分区函数。分区函数返回一个布尔值，这意味着得到的分组 Map 的键类型是 Boolean，于是它最多可以分为两组——true是一组，false是一组。分区的好处在于保留了分区函数返回true或false的两套流元素列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Map&lt;Boolean, Map&lt;Dish.Type, List&lt;Dish&gt;&gt;&gt; partitioningDish = Dish.menu.stream().collect(Collectors.partitioningBy(Dish::isVegetarian, Collectors.groupingBy(Dish::getType)));</div><div class="line">System.out.println(partitioningDish);</div><div class="line"><span class="comment">//false=&#123;FISH=[prawns, salmon], MEAT=[pork, beef, chicken]&#125;, </span></div><div class="line"><span class="comment">//true=&#123;OTHER=[french fries, rice, season fruit, pizza]&#125;</span></div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>下表展示 Collectors 类的静态工厂方法。</p>
<table>
<thead>
<tr>
<th>工厂方法</th>
<th>返回类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>toList</td>
<td><code>List&lt;T&gt;</code></td>
<td>把流中所有项目收集到一个 List</td>
</tr>
<tr>
<td>toSet</td>
<td><code>Set&lt;T&gt;</code></td>
<td>把流中所有项目收集到一个 Set，删除重复项</td>
</tr>
<tr>
<td>toCollection</td>
<td><code>Collection&lt;T&gt;</code></td>
<td>把流中所有项目收集到给定的供应源创建的集合<code>menuStream.collect(toCollection(), ArrayList::new)</code></td>
</tr>
<tr>
<td>counting</td>
<td>Long</td>
<td>计算流中元素的个数</td>
</tr>
<tr>
<td>sumInt</td>
<td>Integer</td>
<td>对流中项目的一个整数属性求和</td>
</tr>
<tr>
<td>averagingInt</td>
<td>Double</td>
<td>计算流中项目 Integer 属性的平均值</td>
</tr>
<tr>
<td>summarizingInt</td>
<td>IntSummaryStatistics</td>
<td>收集关于流中项目 Integer 属性的统计值，例如最大、最小、 总和与平均值</td>
</tr>
<tr>
<td>joining</td>
<td>String</td>
<td>连接对流中每个项目调用 toString 方法所生成的字符串<code>collect(joining(&quot;, &quot;))</code></td>
</tr>
<tr>
<td>maxBy</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>一个包裹了流中按照给定比较器选出的最大元素的 Optional， 或如果流为空则为 Optional.empty()</td>
</tr>
<tr>
<td>minBy</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>一个包裹了流中按照给定比较器选出的最小元素的 Optional， 或如果流为空则为 Optional.empty()</td>
</tr>
<tr>
<td>reducing</td>
<td>归约操作产生的类型</td>
<td>从一个作为累加器的初始值开始，利用 BinaryOperator 与流 中的元素逐个结合，从而将流归约为单个值<code>累加int totalCalories = menuStream.collect(reducing(0, Dish::getCalories, Integer::sum));</code></td>
</tr>
<tr>
<td>collectingAndThen</td>
<td>转换函数返回的类型</td>
<td>包裹另一个收集器，对其结果应用转换函数<code>int howManyDishes = menuStream.collect(collectingAndThen(toList(), List::size))</code></td>
</tr>
<tr>
<td>groupingBy</td>
<td><code>Map&lt;K, List&lt;T&gt;&gt;</code></td>
<td>根据项目的一个属性的值对流中的项目作问组，并将属性值作 为结果 Map 的键</td>
</tr>
<tr>
<td>partitioningBy</td>
<td><code>Map&lt;Boolean,List&lt;T&gt;&gt;</code></td>
<td>根据对流中每个项目应用谓词的结果来对项目进行分区</td>
</tr>
</tbody>
</table>
<h1 id="附录：Dish类"><a href="#附录：Dish类" class="headerlink" title="附录：Dish类"></a>附录：Dish类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.company.bean;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2017/4/26.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> vegetarian;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> Type type;</div><div class="line">    <span class="keyword">private</span> CaloricLevel level;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> CaloricLevel <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (calories &lt;= <span class="number">400</span>) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> CaloricLevel.DIET;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (calories &lt;= <span class="number">700</span>) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> CaloricLevel.NORMAL;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> CaloricLevel.FAT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(CaloricLevel level)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.level = level;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Type &#123; MEAT, FISH, OTHER &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> CaloricLevel &#123; DIET, NORMAL, FAT &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dish</span><span class="params">(String name, <span class="keyword">boolean</span> vegetarian, <span class="keyword">int</span> calories, Type type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</div><div class="line">        <span class="keyword">this</span>.calories = calories;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> vegetarian;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCalories</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> calories;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Dish&gt; menu =</div><div class="line">            Arrays.asList( <span class="keyword">new</span> Dish(<span class="string">"pork"</span>, <span class="keyword">false</span>, <span class="number">800</span>, Dish.Type.MEAT),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"beef"</span>, <span class="keyword">false</span>, <span class="number">700</span>, Dish.Type.MEAT),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"chicken"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.MEAT),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"french fries"</span>, <span class="keyword">true</span>, <span class="number">530</span>, Dish.Type.OTHER),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"rice"</span>, <span class="keyword">true</span>, <span class="number">350</span>, Dish.Type.OTHER),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"season fruit"</span>, <span class="keyword">true</span>, <span class="number">120</span>, Dish.Type.OTHER),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"pizza"</span>, <span class="keyword">true</span>, <span class="number">550</span>, Dish.Type.OTHER),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"prawns"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.FISH),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"salmon"</span>, <span class="keyword">false</span>, <span class="number">450</span>, Dish.Type.FISH));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;收集器可以简洁而灵活地定义collect用来生成结果集合的标准。更具体地说，对流调用 collect 方法将对流中的元素触发一个归约操作（由Collector来参数化）。一般来说，Collector 会对元素应用一个转换函数（很多时候是不体现任何效
    
    </summary>
    
      <category term="Java" scheme="http://liuguoquan727.github.io/categories/Java/"/>
    
    
      <category term="Java8" scheme="http://liuguoquan727.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Java8特性③Stream的使用</title>
    <link href="http://liuguoquan727.github.io/2017/05/02/Java8%E7%89%B9%E6%80%A7%E2%91%A2Stream%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://liuguoquan727.github.io/2017/05/02/Java8特性③Stream的使用/</id>
    <published>2017-05-02T12:52:53.000Z</published>
    <updated>2017-05-03T02:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="筛选和切片"><a href="#筛选和切片" class="headerlink" title="筛选和切片"></a>筛选和切片</h1><ul>
<li>filter 方法</li>
<li>distinct 方法</li>
<li>limit 方法</li>
<li>skip 方法</li>
</ul>
<h2 id="谓词筛选"><a href="#谓词筛选" class="headerlink" title="谓词筛选"></a>谓词筛选</h2><p>Stream 接口支持 filter 方法，该操作会接受一个谓词（一个返回 boolean的函数）作为参数，并返回一个包括所有符合谓词的元素的流。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Dish&gt; dishes = Dish.menu.stream()</div><div class="line">      .filter(Dish::isVegetarian)</div><div class="line">      .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<h2 id="筛选重复的元素"><a href="#筛选重复的元素" class="headerlink" title="筛选重复的元素"></a>筛选重复的元素</h2><p>Stream 接口支持 distinct 的方法， 它会返回一个元素各异（根据流所生成元素的 hashCode和equals方法实现）的流。例如，以下代码会筛选出列表中所有的偶数，并确保没有 重复。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);</div><div class="line">numbers.stream().filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">      .distinct() <span class="comment">//去重元素2</span></div><div class="line">      .forEach(System.out::println);</div></pre></td></tr></table></figure>
<h2 id="限制元素数量"><a href="#限制元素数量" class="headerlink" title="限制元素数量"></a>限制元素数量</h2><p>Stream 支持limit(n)方法，该方法会返回一个不超过给定长度的流。所需的长度作为参数传递 给limit。如果流是有序的，则最多会返回前n个元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Dish&gt; dishLimits = Dish.menu.stream()</div><div class="line">        .filter(d -&gt; d.getCalories() &gt; <span class="number">300</span>)</div><div class="line">        .limit(<span class="number">3</span>) <span class="comment">//只返回符合要求的前3个元素</span></div><div class="line">        .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<h2 id="跳过指定数量的元素"><a href="#跳过指定数量的元素" class="headerlink" title="跳过指定数量的元素"></a>跳过指定数量的元素</h2><p>Stream 支持 skip(n) 方法，返回一个扔掉了前n个元素的流。如果流中元素不足n个，则返回一 个空流。limit(n) 和 skip(n) 是互补的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;Dish&gt; dishSkip = Dish.menu.stream()</div><div class="line">        .filter(d -&gt; d.getCalories() &gt; <span class="number">300</span>)</div><div class="line">        .skip(<span class="number">2</span>) <span class="comment">//去掉符合要求的集合中的前2个元素后返回</span></div><div class="line">        .collect(Collectors.toList());</div><div class="line">dishSkip.forEach(System.out::println);</div></pre></td></tr></table></figure>
<h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><h2 id="map-操作"><a href="#map-操作" class="headerlink" title="map 操作"></a>map 操作</h2><p>Stream 支持 map 方法，它会接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映 射成一个新的元素</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; dishNames = Dish.menu.stream()</div><div class="line">      .map(Dish::getName)</div><div class="line">      .map(String::length)</div><div class="line">      .collect(Collectors.toList());</div><div class="line"> </div><div class="line">List&lt;String&gt; words = Arrays.asList(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</div><div class="line">List&lt;Integer&gt; wordLens = words.stream()</div><div class="line">      .map(String::length) <span class="comment">//转为字符串长度的集合</span></div><div class="line">      .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<h2 id="flatMap-操作"><a href="#flatMap-操作" class="headerlink" title="flatMap 操作"></a>flatMap 操作</h2><p>flatmap 方法让你把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用flatMap找出单词列表中各不相同的字符</span></div><div class="line">List&lt;String&gt; words = Arrays.asList(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</div><div class="line">List&lt;String&gt; wordMap = words.stream()</div><div class="line">      .map(word -&gt; word.split(<span class="string">""</span>))</div><div class="line">      .flatMap(Arrays::stream)</div><div class="line">      .distinct()</div><div class="line">      .collect(Collectors.toList());</div></pre></td></tr></table></figure>
<p><img src="http://ooqmyazc5.bkt.clouddn.com/flatMap.jpg" alt=""></p>
<blockquote>
<p>给定两个数字列表，如何返回所有的数对呢？例如，给定列表[1, 2, 3]和列表[3, 4]，应该返回[(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; num1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">List&lt;Integer&gt; num2 = Arrays.asList(<span class="number">4</span>, <span class="number">5</span>);</div><div class="line">List&lt;<span class="keyword">int</span>[]&gt; pairs = num1.stream()</div><div class="line">        .flatMap(i -&gt; num2.stream().map(j -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;))</div><div class="line">        .collect(Collectors.toList());</div><div class="line">pairs.stream().forEach( i -&gt; &#123;</div><div class="line">    Arrays.stream(i).forEach(System.out::println);</div></pre></td></tr></table></figure>
<h1 id="查找和匹配"><a href="#查找和匹配" class="headerlink" title="查找和匹配"></a>查找和匹配</h1><h2 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h2><p>流中是否有一个元素能匹配给定的谓词。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Dish.menu.stream().anyMatch(Dish::isVegetarian)) &#123;</div><div class="line">    System.out.println(<span class="string">"Vegetarion"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h2><p>流中是否有所有元素能匹配给定的谓词。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Dish.menu.stream().allMatch(d -&gt; d.getCalories() &lt; <span class="number">1000</span>)) &#123;</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"都有利于健康"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="nonMatch"><a href="#nonMatch" class="headerlink" title="nonMatch"></a>nonMatch</h2><p>流中是否有没有任何元素能匹配给定的谓词。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Dish.menu.stream().noneMatch(d -&gt; d.getCalories() &gt;= <span class="number">1000</span>)) &#123;</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"都有利于健康"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h2><p>findAny 方法将返回当前流中的任意一个元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Optional&lt;Dish&gt; dish = Dish.menu.stream().filter(Dish::isVegetarian)</div><div class="line">        .findAny();</div><div class="line">dish.ifPresent(d -&gt; System.out.println(d.toString()));</div></pre></td></tr></table></figure>
<h2 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h2><p>findAny 方法将返回当前流中的第一个元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; num1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">num1.stream().map(x -&gt; x * x)</div><div class="line">        .filter(x -&gt; x % <span class="number">3</span> == <span class="number">0</span>) <span class="comment">//平方能被3整除的数</span></div><div class="line">        .findFirst().ifPresent(x -&gt; System.out.println(x));</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p><code>Optional&lt;T&gt;</code>类（java.util.Optional）是一个容器类，代表一个值存在或不存在。Optional里面y有几种显式地检查值是否存在或处理值不存在的情形的方法：</p>
<ul>
<li><code>isPresent()</code>将在Optional包含值的时候返回true, 否则返回false。</li>
<li><code>ifPresent(Consumer&lt;T&gt; block)</code>)会在值存在的时候执行给定的代码块。</li>
<li><code>T get()</code>会在值存在时返回值，否则抛出一个NoSuchElement异常。</li>
<li><code>T orElse(T other)</code>会在值存在时返回值，否则返回一个默认值。</li>
</ul>
<h1 id="归约（reduce）"><a href="#归约（reduce）" class="headerlink" title="归约（reduce）"></a>归约（reduce）</h1><p>把一个流中的元素组合起来，使用 reduce 操作来表达更复杂的查 询，比如“计算菜单中的总卡路里”或“菜单中卡路里最高的菜是哪一个”。此类查询需要将流中所有元素反复结合起来，得到一个值，比如一个Integer。这样的查询可以被归类为归约操作 （将流归约成一个值）。</p>
<p>reduce操作是如何作用于一个流的：Lambda反复结合每个元素，直到流被归约成一个值。reduce方法接受两个参数：一个初始值，这里是0；一个 <code>BinaryOperator&lt;T&gt;</code> 来将两个元素结合起来产生一个新值， 这里我们用的是 <code>lambda (a, b) -&gt; a + b</code>。</p>
<h2 id="元素求和"><a href="#元素求和" class="headerlink" title="元素求和"></a>元素求和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"><span class="keyword">int</span> sum1 = numbers.stream().reduce(<span class="number">0</span>,(a, b) -&gt; a + b);</div><div class="line">System.out.println(sum1);</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum2 = numbers.stream().reduce(<span class="number">0</span>,Integer::sum);</div><div class="line">System.out.println(sum2);</div></pre></td></tr></table></figure>
<h2 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> max = numbers.stream().reduce(<span class="number">0</span>,Integer::max);</div><div class="line">System.out.println(max);</div></pre></td></tr></table></figure>
<h2 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//reduce不接受初始值，返回一个Optional对象（考虑流中没有任何元素的情况）</span></div><div class="line">Optional&lt;Integer&gt; min = numbers.stream().reduce(Integer::min);</div><div class="line">min.ifPresent(System.out::println);</div></pre></td></tr></table></figure>
<h1 id="数值流"><a href="#数值流" class="headerlink" title="数值流"></a>数值流</h1><h2 id="原始类型流特化"><a href="#原始类型流特化" class="headerlink" title="原始类型流特化"></a>原始类型流特化</h2><p>Java 8引入了三个原始类型特化流接口来解决这个问题： IntStream 、 DoubleStream 和 LongStream，分别将流中的元素特化为int、long和double，从而避免了暗含的装箱成本。每 个接口都带来了进行常用数值归约的新方法，比如对数值流求和的sum，找到最大元素的max。 此外还有在必要时再把它们转换回对象流的方法。这些特化的原因并不在于流的复杂性，而是装箱造成的复杂性——即类似int和Integer之间的效率差异。</p>
<ul>
<li><strong>映射到数值流：</strong>将流转换为特化版本的常用方法是mapToInt、mapToDouble和mapToLong。这些方法和前 面说的map方法的工作方式一样，只是它们返回的是一个特化流，而不是<code>Stream&lt;T&gt;</code>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> colories = Dish.menu.stream()</div><div class="line">        .mapToInt(Dish::getCalories) <span class="comment">//返回IntStream</span></div><div class="line">        .sum();</div></pre></td></tr></table></figure>
<ul>
<li><strong>转换回对象流</strong></li>
</ul>
<p>通过 box 方法可以将数值流转化为 Stream 非特化流。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IntStream intStream = menu.stream().mapToInt(Dish::getCalories); <span class="comment">//将Strean转化为数值流</span></div><div class="line">Stream&lt;Integer&gt; stream = intStream.boxed(); <span class="comment">//将数值流转化为Stream</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>默认值 OptionalInt</strong></li>
</ul>
<p>Optional 可以用 Integer、String等参考类型来参数化。对于三种原始流特化，也分别有一个Optional原始类 型特化版本：OptionalInt、OptionalDouble和OptionalLong。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Dish.menu.stream()</div><div class="line">        .mapToInt(Dish::getCalories) <span class="comment">//返回IntStream</span></div><div class="line">        .max().ifPresent(System.out::println);</div></pre></td></tr></table></figure>
<h2 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntStream.rangeClosed(<span class="number">1</span>, <span class="number">100</span>)</div><div class="line">        .filter(x -&gt; x % <span class="number">10</span> == <span class="number">0</span>)</div><div class="line">        .forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>Java 8引入了两个可以用于IntStream和LongStream的静态方法，帮助生成这种范围： range和rangeClosed。这两个方法都是第一个参数接受起始值，第二个参数接受结束值。但 range是不包含结束值的，而rangeClosed则包含结束值。</p>
<h2 id="数值流应用：勾股数"><a href="#数值流应用：勾股数" class="headerlink" title="数值流应用：勾股数"></a>数值流应用：勾股数</h2><p>生成 (5, 12, 13)、(6, 8, 10)和(7, 24, 25) 这样有效的勾股数数组集合。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Stream&lt;<span class="keyword">int</span>[]&gt; pythagoreanTriples = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">100</span>).boxed()</div><div class="line">        .flatMap(a -&gt; IntStream.rangeClosed(a,<span class="number">100</span>)</div><div class="line">                                .filter(b -&gt; Math.sqrt(a * a + b * b) % <span class="number">1</span> == <span class="number">0</span>).boxed()</div><div class="line">                                .map(b -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;a,b,(<span class="keyword">int</span>)Math.sqrt(a * a + b * b)&#125;)</div><div class="line">        );</div><div class="line">pythagoreanTriples.forEach(t -&gt; System.out.println(t[<span class="number">0</span>] + <span class="string">";"</span> + t[<span class="number">1</span>] +<span class="string">";"</span> + t[<span class="number">2</span>]));</div></pre></td></tr></table></figure>
<h1 id="构建流"><a href="#构建流" class="headerlink" title="构建流"></a>构建流</h1><h2 id="值创建流"><a href="#值创建流" class="headerlink" title="值创建流"></a>值创建流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; streams = Stream.of(<span class="string">"Java"</span>, <span class="string">"Python"</span>);</div><div class="line">streams.map(String::toUpperCase).forEach(System.out::println);</div><div class="line"></div><div class="line">Stream.concat(Stream.of(<span class="string">"Java"</span>, <span class="string">"Python"</span>), Stream.of(<span class="string">"C++"</span>, <span class="string">"Ruby"</span>)).forEach(System.out::println);</div></pre></td></tr></table></figure>
<h2 id="数组创建流"><a href="#数组创建流" class="headerlink" title="数组创建流"></a>数组创建流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line"><span class="keyword">int</span> sum = Arrays.stream(numbers).sum();</div></pre></td></tr></table></figure>
<h2 id="文件生成流"><a href="#文件生成流" class="headerlink" title="文件生成流"></a>文件生成流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String ret = Files.lines(Paths.get(<span class="string">"/Users/liuguoquan/Java/java8/src/com/company/data.txt"</span>), Charset.defaultCharset())</div><div class="line">        .reduce(<span class="string">""</span>, (a, b) -&gt; a + <span class="string">" "</span> + b);</div></pre></td></tr></table></figure>
<h2 id="函数生成流：创建无限流"><a href="#函数生成流：创建无限流" class="headerlink" title="函数生成流：创建无限流"></a>函数生成流：创建无限流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//迭代</span></div><div class="line">Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>)</div><div class="line">        .limit(<span class="number">10</span>)</div><div class="line">        .forEach(System.out::println);</div><div class="line"></div><div class="line"><span class="comment">//生成</span></div><div class="line">Stream.generate(Math::random)</div><div class="line">        .limit(<span class="number">5</span>)</div><div class="line">        .forEach(System.out::println);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="示例实战"><a href="#示例实战" class="headerlink" title="示例实战"></a>示例实战</h1><p>假设你是执行交易的交易员。你的经理让你为八个查询找到答案。你能做到吗？</p>
<ul>
<li>(1) 找出2016年发生的所有交易，并按交易额排序（从低到高）。</li>
<li>(2) 交易员都在哪些不同的城市工作过？</li>
<li>(3) 查找所有来自于北京的交易员，并按姓名排序。</li>
<li>(4) 返回所有交易员的姓名字符串，按字母顺序排序。</li>
<li>(5) 有没有交易员是在深圳工作的？</li>
<li>(6) 打印生活在北京的交易员的所有交易额。</li>
<li>(7) 所有交易中，最高的交易额是多少？</li>
<li>(8) 找到交易额最小的交易。</li>
</ul>
<p><strong>交易员类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 交易人</div><div class="line"> * Created by liuguoquan on 2017/4/28.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trader</span><span class="params">(String name, String city)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Trader&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", city='"</span> + city + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>交易类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 交易单</div><div class="line"> * Created by liuguoquan on 2017/4/28.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Trader trader;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Transaction</span><span class="params">(Trader trader, <span class="keyword">int</span> year, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.trader = trader;</div><div class="line">        <span class="keyword">this</span>.year = year;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Trader <span class="title">getTrader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> trader;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTrader</span><span class="params">(Trader trader)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.trader = trader;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> year;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.year = year;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Transaction&#123;"</span> +</div><div class="line">                <span class="string">"trader="</span> + trader +</div><div class="line">                <span class="string">", year='"</span> + year + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", value="</span> + value +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>计算</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionProcess</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        Trader liu = <span class="keyword">new</span> Trader(<span class="string">"Lau"</span>,<span class="string">"Beijing"</span>);</div><div class="line">        Trader lee = <span class="keyword">new</span> Trader(<span class="string">"Lee"</span>,<span class="string">"Shanghai"</span>);</div><div class="line">        Trader zhang = <span class="keyword">new</span> Trader(<span class="string">"Zhang"</span>,<span class="string">"Guangzhou"</span>);</div><div class="line">        Trader wang = <span class="keyword">new</span> Trader(<span class="string">"Wang"</span>,<span class="string">"Beijing"</span>);</div><div class="line"></div><div class="line">        List&lt;Transaction&gt; transactions = Arrays.asList(</div><div class="line">                <span class="keyword">new</span> Transaction(liu,<span class="number">2016</span>,<span class="number">300</span>),</div><div class="line">                <span class="keyword">new</span> Transaction(lee,<span class="number">2015</span>,<span class="number">100</span>),</div><div class="line">                <span class="keyword">new</span> Transaction(lee,<span class="number">2016</span>,<span class="number">500</span>),</div><div class="line">                <span class="keyword">new</span> Transaction(zhang,<span class="number">2016</span>,<span class="number">9000</span>),</div><div class="line">                <span class="keyword">new</span> Transaction(wang,<span class="number">2017</span>,<span class="number">1000</span>),</div><div class="line">                <span class="keyword">new</span> Transaction(liu,<span class="number">2016</span>,<span class="number">1500</span>)</div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="comment">// (1) 找出2016年发生的所有交易，并按交易额排序（从低到高）。</span></div><div class="line">        transactions.stream().filter(t -&gt; t.getYear() == <span class="number">2016</span>)</div><div class="line">                .sorted(Comparator.comparing(Transaction::getValue))</div><div class="line">                .collect(Collectors.toList());</div><div class="line"></div><div class="line">        <span class="comment">// (2) 交易员都在哪些不同的城市工作过？</span></div><div class="line">        transactions.stream().map(t -&gt; t.getTrader().getCity())</div><div class="line">                .distinct()</div><div class="line">                .collect(Collectors.toList());</div><div class="line"></div><div class="line">        <span class="comment">// (3) 查找所有来自于北京的交易员，并按姓名排序。</span></div><div class="line">        transactions.stream().map(t -&gt; t.getTrader())</div><div class="line">                .filter(t -&gt; t.getCity().equals(<span class="string">"Beijing"</span>))</div><div class="line">                .distinct()</div><div class="line">                .sorted(Comparator.comparing(Trader::getName))</div><div class="line">                .collect(Collectors.toList());</div><div class="line"></div><div class="line">        <span class="comment">// (4) 返回所有交易员的姓名字符串，按字母顺序排序。</span></div><div class="line">        transactions.stream().map(t -&gt; t.getTrader())</div><div class="line">                .map(t -&gt; t.getName())</div><div class="line">                .distinct()</div><div class="line">                .sorted()</div><div class="line">                .collect(Collectors.toList());</div><div class="line"></div><div class="line">        <span class="comment">// (5) 有没有交易员是在深圳工作的？</span></div><div class="line">        <span class="keyword">boolean</span> isExist = transactions.stream().anyMatch(t -&gt; t.getTrader().getCity().equals(<span class="string">"Shenzhen"</span>));</div><div class="line">        <span class="keyword">if</span> (isExist) &#123;</div><div class="line">            System.out.println(<span class="string">"有在深圳工作的"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"没有在深圳工作的"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// (6) 打印生活在北京的交易员的所有交易额。</span></div><div class="line">        <span class="keyword">int</span> sum = transactions.stream().filter(t -&gt; t.getTrader().getCity().equals(<span class="string">"Beijing"</span>))</div><div class="line">                .map(t -&gt; t.getValue())</div><div class="line">                .reduce(<span class="number">0</span>,Integer::sum);</div><div class="line">        System.out.println(sum);</div><div class="line"></div><div class="line">        <span class="comment">// (7) 所有交易中，最高的交易额是多少？</span></div><div class="line">        <span class="keyword">int</span> max = transactions.stream().map(t -&gt; t.getValue())</div><div class="line">                .reduce(<span class="number">0</span>,Integer::max);</div><div class="line">        System.out.println(max);</div><div class="line"></div><div class="line">        <span class="comment">// (8) 找到交易额最小的交易。</span></div><div class="line">        <span class="keyword">int</span> min = transactions.stream().map(t -&gt; t.getValue())</div><div class="line">                .reduce(<span class="number">0</span>,Integer::min);</div><div class="line">        System.out.println(min);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>中间操作表</li>
</ul>
<table>
<thead>
<tr>
<th>操作</th>
<th>类型</th>
<th>返回类型</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>filter</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td>过滤元素</td>
</tr>
<tr>
<td>distinct</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td>过滤重复的元素</td>
</tr>
<tr>
<td>skip</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td>跳过指定数量的元素</td>
</tr>
<tr>
<td>limit</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td>限制元素的数量</td>
</tr>
<tr>
<td>map</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td>流的转化</td>
</tr>
<tr>
<td>flatmap</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td>流的扁平化</td>
</tr>
<tr>
<td>sorted</td>
<td>中间操作</td>
<td><code>Stream&lt;T&gt;</code></td>
<td>元素排序</td>
</tr>
</tbody>
</table>
<ul>
<li>终端操作表</li>
</ul>
<table>
<thead>
<tr>
<th>操作</th>
<th>类型</th>
<th>返回类型</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>forEach</td>
<td>终端操作</td>
<td>void</td>
<td>消费流中的每个元素，返回void</td>
</tr>
<tr>
<td>count</td>
<td>终端操作</td>
<td>long</td>
<td>返回流中元素的个数，返回long</td>
</tr>
<tr>
<td>collect</td>
<td>终端操作</td>
<td>R</td>
<td>把流归约为一个集合</td>
</tr>
<tr>
<td>anyMatch</td>
<td>终端操作</td>
<td>boolean</td>
<td>流中是否有符合要求的元素</td>
</tr>
<tr>
<td>noneMatch</td>
<td>终端操作</td>
<td>boolean</td>
<td>流中是否没有任何符合要求的元素</td>
</tr>
<tr>
<td>allMatch</td>
<td>终端操作</td>
<td>boolean</td>
<td>流中是否所有元素都是符合要求的</td>
</tr>
<tr>
<td>findAny</td>
<td>终端操作</td>
<td>Optional<t></t></td>
<td>查找符合要求的元素</td>
</tr>
<tr>
<td>findFirst</td>
<td>终端操作</td>
<td>Optional<t></t></td>
<td>查找第一个符合要求的元素</td>
</tr>
<tr>
<td>reduce</td>
<td>终端操作</td>
<td>Optional<t></t></td>
<td>归约</td>
</tr>
</tbody>
</table>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《Java 8 实战》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;筛选和切片&quot;&gt;&lt;a href=&quot;#筛选和切片&quot; class=&quot;headerlink&quot; title=&quot;筛选和切片&quot;&gt;&lt;/a&gt;筛选和切片&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;filter 方法&lt;/li&gt;
&lt;li&gt;distinct 方法&lt;/li&gt;
&lt;li&gt;limit 方法&lt;/li
    
    </summary>
    
      <category term="Java" scheme="http://liuguoquan727.github.io/categories/Java/"/>
    
    
      <category term="Java8" scheme="http://liuguoquan727.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Java8特性②Stream简介</title>
    <link href="http://liuguoquan727.github.io/2017/04/27/Java8%E7%89%B9%E6%80%A7%E2%91%A1Stream%E7%AE%80%E4%BB%8B/"/>
    <id>http://liuguoquan727.github.io/2017/04/27/Java8特性②Stream简介/</id>
    <published>2017-04-27T07:52:53.000Z</published>
    <updated>2017-04-27T07:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流是什么"><a href="#流是什么" class="headerlink" title="流是什么"></a>流是什么</h1><p><strong>流</strong>是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。可以把它们看成遍历数据集的高级迭代器。此外流还可以<strong>透明地并行处理</strong>，无需写任何多线程代码了。如下面代码所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getLowCalorisInJava8</span><span class="params">(List&lt;Dish&gt; dishes)</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;String&gt; lowColorisDish = dishes.stream() <span class="comment">//parallelStream() 并行流</span></div><div class="line">                .filter((Dish d) -&gt; d.getCalories() &lt; <span class="number">400</span>) <span class="comment">//筛选</span></div><div class="line">                .sorted(Comparator.comparing(Dish::getCalories)) <span class="comment">//排序</span></div><div class="line">                .map(Dish::getName) <span class="comment">//提取名称</span></div><div class="line">                .collect(Collectors.toList()); <span class="comment">//将所有名称存入List中</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> lowColorisDish;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Dish类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.company.bean;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2017/4/26.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> vegetarian;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> Type type;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Type &#123; MEAT, FISH, OTHER &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dish</span><span class="params">(String name, <span class="keyword">boolean</span> vegetarian, <span class="keyword">int</span> calories, Type type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.vegetarian = vegetarian;</div><div class="line">        <span class="keyword">this</span>.calories = calories;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> vegetarian;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCalories</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> calories;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Dish&gt; menu =</div><div class="line">            Arrays.asList( <span class="keyword">new</span> Dish(<span class="string">"pork"</span>, <span class="keyword">false</span>, <span class="number">800</span>, Dish.Type.MEAT),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"beef"</span>, <span class="keyword">false</span>, <span class="number">700</span>, Dish.Type.MEAT),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"chicken"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.MEAT),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"french fries"</span>, <span class="keyword">true</span>, <span class="number">530</span>, Dish.Type.OTHER),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"rice"</span>, <span class="keyword">true</span>, <span class="number">350</span>, Dish.Type.OTHER),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"season fruit"</span>, <span class="keyword">true</span>, <span class="number">120</span>, Dish.Type.OTHER),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"pizza"</span>, <span class="keyword">true</span>, <span class="number">550</span>, Dish.Type.OTHER),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"prawns"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.FISH),</div><div class="line">                    <span class="keyword">new</span> Dish(<span class="string">"salmon"</span>, <span class="keyword">false</span>, <span class="number">450</span>, Dish.Type.FISH));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="流简介"><a href="#流简介" class="headerlink" title="流简介"></a>流简介</h1><p>流就是从支持数据处理操作的源生成的元素序列。</p>
<ul>
<li><p>元素序列：流也提供了一个接口，可以访问特定元素类型的一组有序 值。因为集合是数据结构，所以它的主要目的是以特定的时间/空间复杂度存储和访问元 素（如 ArrayList 与 LinkedList ）。但流的目的在于表达计算， 比如你前面见到的 filter、sorted和map。集合讲的是数据，流讲的是计算。</p>
</li>
<li><p>源：流会使用一个提供数据的源，如集合、数组或输入/输出资源。 请注意，从有序集 合生成流时会保留原有的顺序。由列表生成的流，其元素顺序与列表一致。</p>
</li>
<li><p>数据处理操作：流的数据处理功能支持类似于数据库的操作，以及函数式编程语言中 的常用操作，如filter、map、reduce、find、match、sort等。流操作可以顺序执 行，也可并行执行。</p>
</li>
</ul>
<p>流操作的两个重要的特点：</p>
<ul>
<li><p><strong>流水线：</strong>很多流操作本身会返回一个流，这样多个操作就可以链接起来，形成一个大的流水线。流水线的操作可以 看作对数据源进行数据库式查询。</p>
</li>
<li><p><strong>内部迭代：</strong>与使用迭代器显式迭代的集合不同，流的迭代操作是在背后进行的。</p>
</li>
</ul>
<h1 id="流与集合"><a href="#流与集合" class="headerlink" title="流与集合"></a>流与集合</h1><p><strong>集合与流之间的差异就在于什么时候进行计算。</strong>集合是一个内存中的数据结构， 它包含数据结构中目前所有的值——集合中的每个元素都得先算出来才能添加到集合中。流则是在概念上固定的数据结构（你不能添加或删除元素），其元素则是<strong>按需计算</strong>的。</p>
<p><strong>流只能遍历一次。</strong>遍历完之后，这个流已经被消费掉了。可以从原始数据源那里再获得一个新的流来重新遍历一遍。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; title = Arrays.asList(<span class="string">"Java8"</span>, <span class="string">"In"</span>, <span class="string">"Action"</span>); Stream&lt;String&gt; s = title.stream()</div><div class="line">s.forEach(System.out::println); </div><div class="line">s.forEach(System.out::println); <span class="comment">//java.lang.IllegalStateException:流已被操作</span></div></pre></td></tr></table></figure>
<p>Collection接口需要用户去做迭代（比如用for-each），这称为<strong>外部迭代</strong>。Streams库使用内部迭代——它帮你把迭代做了，还把得到的流值存在了某个地方，你只要给出一个函数说要干什么就可以了。Streams库的内部迭代可以自动选择一种适 合你硬件的数据表示和并行实现。与此相反，一旦通过写for-each而选择了外部迭代，那你基 本上就要自己管理所有的并行问题了。</p>
<h1 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h1><p>java.util.stream.Stream 中的 Stream 接口定义了许多操作。它们可以分为两大类。</p>
<ul>
<li><strong>中间操作：</strong>filter、map、limit等可以连成一条流水线的操作；</li>
<li><strong>终端操作：</strong>collect等触发流水线执行并关闭流的操作；</li>
</ul>
<h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><p>诸如filter或sorted等中间操作会返回另一个流。这让多个操作可以连接起来形成一个查 询。重要的是，除非流水线上触发一个终端操作，否则中间操作不会执行任何处理，这是因为中间操作一般都可以合并起来，在终端操作时一次性全部处理。尽管filter和map是两个独立的操作，但它们合并到同一次遍历中了（我们把这种技术叫作循环 合并）。</p>
<h2 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h2><p>终端操作会从流的流水线生成结果。其结果是任何不是流的值，比如List、Integer，甚至void。</p>
<h2 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h2><p>流的使用一般包括三件事：</p>
<ul>
<li>一个数据源（如集合）来执行一个查询；</li>
<li>一个中间操作链，形成一条流的流水线；</li>
<li>一个终端操作，执行流水线，并能生成结果；</li>
</ul>
<p>流的流水线背后的理念类似于构建器模式。在构建器模式中有一个调用链用来设置一套配置（对流来说这就是一个中间操作链），接着是调用built方法（对流来说就是终端操作）。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《Java 8 实战》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;流是什么&quot;&gt;&lt;a href=&quot;#流是什么&quot; class=&quot;headerlink&quot; title=&quot;流是什么&quot;&gt;&lt;/a&gt;流是什么&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;流&lt;/strong&gt;是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是
    
    </summary>
    
      <category term="Java" scheme="http://liuguoquan727.github.io/categories/Java/"/>
    
    
      <category term="Java8" scheme="http://liuguoquan727.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Java8特性①Lambda表达式</title>
    <link href="http://liuguoquan727.github.io/2017/04/24/Java8%E7%89%B9%E6%80%A7%E2%91%A0Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://liuguoquan727.github.io/2017/04/24/Java8特性①Lambda表达式/</id>
    <published>2017-04-24T08:15:16.000Z</published>
    <updated>2017-04-24T08:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>Lambda 表达式</strong>可以理解为简洁地表示可传递的匿名函数的一种方式：它没有名称，但它有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表。</p>
<ul>
<li><strong>匿名</strong>：它不像普通方法那样有一个明确的名称；</li>
<li><strong>函数</strong>：Lambda 表达式是函数是因为它不像方法那样属于某个特定的类，但和方法一样，Lambda 有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表；</li>
<li><strong>传递</strong>：Lambda 表达式可以作为参数传递给方法或存储在变量中；</li>
<li><strong>简洁</strong>：无需像匿名类那样写很多模板代码；</li>
</ul>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>Lambda 表达式由参数列表、箭头和 Lambda 主体组成。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(Apple o1, Apple o2) -&gt; Integer.valueOf(o1.getWeight()).compareTo(Integer.valueOf(o2.getWeight()))</div></pre></td></tr></table></figure>
<ul>
<li><strong>参数列表：</strong>这里采用了 Comparator 中 compareTo 方法的参数；</li>
<li><strong>箭头：</strong>箭头把参数列表和 Lambda 主体分开；</li>
<li><strong>Lambda 主体：</strong>表达式就是 Lambda 的返回值；</li>
</ul>
<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>Java8中有效的 Lambda 表达式如下：</p>
<table>
<thead>
<tr>
<th>Lambda 表达式</th>
<th>含义 </th>
</tr>
</thead>
<tbody>
<tr>
<td><code>(String s) -&gt; s.length()</code></td>
<td>表达式具有一个 String 类型的参数并返回一个 int。 Lambda 没有 return 语句，因为已经隐含的 return，可以显示调用 return。</td>
</tr>
<tr>
<td><code>(Apple a) -&gt; a.getWeight() &gt; 150</code></td>
<td>表达式有一个 Apple 类型的参数并返回一个 boolean 值</td>
</tr>
<tr>
<td><code>(int x, int y) -&gt;</code><br> <code>{ System.out.printn(&quot;Result&quot;};</code><br><code>System.out.printn(x + y};</code></td>
<td>表达式具有两个 int 类型的参数而没有返回值（void返回），<strong>Lambda 表达式可以包含多行语句，但必须要使用大括号包起来。</strong></td>
</tr>
<tr>
<td><code>() -&gt; 42</code></td>
<td>表达式没有参数，返回一个 int 类型的值。</td>
</tr>
<tr>
<td><code>(Apple o1, Apple o2) -&gt;</code><br> <code>Integer.valueOf(o1.getWeight())</code><br><code>.compareTo</code><br><code>(Integer.valueOf(o2.getWeight()))</code></td>
<td>表达式具有两个 Apple 类型的参数，返回一个 int 比较重要。</td>
</tr>
</tbody>
</table>
<p>下面提供一些 Lambda 表达式的使用案例：</p>
<table>
<thead>
<tr>
<th>使用案例</th>
<th>Lambda 示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>布尔表达式</td>
<td><code>(List&lt;String&gt; list) -&gt; list.isEmpty()</code></td>
</tr>
<tr>
<td>创建对象</td>
<td><code>() -&gt; new Apple(10)</code></td>
</tr>
<tr>
<td>消费对象</td>
<td><code>(Apple a) -&gt; { System.out.println(a.getWeight) }</code></td>
</tr>
<tr>
<td>从一个对象中选择/抽取</td>
<td><code>(String s) -&gt; s.lenght()</code></td>
</tr>
<tr>
<td>组合两个值</td>
<td><code>(int a, int b) -&gt; a * b</code></td>
</tr>
<tr>
<td>比较两个对象</td>
<td><code>`(Apple o1, Apple o2) -&gt;</code><br> <code>Integer.valueOf(o1.getWeight())</code><br><code>.compareTo(Integer.valueOf(o2.getWeight()))</code></td>
</tr>
</tbody>
</table>
<h1 id="如何使用-Lambda"><a href="#如何使用-Lambda" class="headerlink" title="如何使用 Lambda"></a>如何使用 Lambda</h1><p>到底在哪里可以使用 Lambda 呢？你可以在<strong>函数式接口上使用 Lambda 表达式</strong>。</p>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p><strong>函数式接口</strong>就是只定义一个抽象方法的接口，比如 Java API 中的 Predicate、Comparator 和 Runnable 等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用函数式接口可以干什么呢？Lambda 表达式允许你直接以内联的形式为函数式接口的抽象方法提供实现，并把整个表达式作为函数式接口的实例（具体说来，是函数式接口一个具体实现 的实例）。你用匿名内部类也可以完成同样的事情，只不过比较笨拙：需要提供一个实现，然后 再直接内联将它实例化。下面的代码是有效的，因为Runnable是一个只定义了一个抽象方法run 的函数式接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//使用Lambda</span></div><div class="line">Runnable r1 = () -&gt; System.out.println(<span class="string">"Hello World 1"</span>);</div><div class="line"></div><div class="line"><span class="comment">//匿名类</span></div><div class="line">Runnable r2 = <span class="keyword">new</span> Runnable()&#123; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </div><div class="line">        System.out.println(<span class="string">"Hello World 2"</span>); </div><div class="line">    &#125; </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Runnable r)</span></span>&#123; </div><div class="line">    r.run(); </div><div class="line">&#125; </div><div class="line"></div><div class="line">process(r1); <span class="comment">//打印 "Hello World 1"</span></div><div class="line">process(r2); <span class="comment">//打印 "Hello World 2"</span></div><div class="line"><span class="comment">//利用直接传递的 Lambda 打印 "Hello World 3"</span></div><div class="line">process(() -&gt; System.out.println(<span class="string">"Hello World 3"</span>));</div></pre></td></tr></table></figure>
<h2 id="函数描述符"><a href="#函数描述符" class="headerlink" title="函数描述符"></a>函数描述符</h2><p>函数式接口的抽象方法的签名基本上就是 Lambda 表达式的签名。我们将这种抽象方法叫作<strong>函数描述符</strong>。例如，Runnable 接口可以看作一个什么也不接受什么也不返回（void）的函数的签名，因为它只有一个叫作 run 的抽象方法，这个方法什么也不接受，什么也不返回（void）。</p>
<h1 id="Lambda-实践"><a href="#Lambda-实践" class="headerlink" title="Lambda 实践"></a>Lambda 实践</h1><p>让我们通过一个例子，看看在实践中如何利用Lambda和行为参数化来让代码更为灵活，更为简洁。</p>
<p>资源处理（例如处理文件或数据库）时一个常见的模式就是打开一个资源，做一些处理，然后关闭资源。这个设置和清理阶段总是很类似，并且会围绕着执行处理的那些重要代码。这就是所谓的<strong>环绕执行（execute around）模式</strong>。</p>
<p>例如，在以下代码中，高亮显示的<code>BufferedReader reader = new BufferedReader(new FileReader(&quot;data.txt&quot;))</code>就是从一个文件中读取一行所需的模板代码（注意你使用了Java 7中的带资源的try语句，它已经简化了代码，因为你不需要显式地关闭资源了）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">processFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">   <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"data.txt"</span>))) &#123;</div><div class="line">       <span class="keyword">return</span> reader.readLine();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第1步：行为参数化"><a href="#第1步：行为参数化" class="headerlink" title="第1步：行为参数化"></a>第1步：行为参数化</h2><p>现在上述代码是有局限的。你只能读文件的第一行。如果你想要返回头两行，甚至是返回使用最频繁的词， 该怎么办呢？在理想的情况下， 你要重用执行设置和清理的代码， 并告诉 processFile 方法对文件执行不同的操作。是的，你需要把 processFile 的行为参数化，你需要一种方法把行为传递给 processFile ， 以便它可以利用 BufferedReader执行不同的行为。</p>
<p>传递行为正是 Lambda 的优势。那要是想一次读两行，这个新的processFile方法看起来又该是什么样的呢? 你需要一个接收BufferedReader并返回String的Lambda。例如，下面就是从 BufferedReader 中打印两行的写法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String result = processFile((BufferedReader r) -&gt; r.readLine() +r.readLine());</div></pre></td></tr></table></figure>
<h2 id="第2步：函数式接口传递行为"><a href="#第2步：函数式接口传递行为" class="headerlink" title="第2步：函数式接口传递行为"></a>第2步：函数式接口传递行为</h2><p>Lambda 仅可用于上下文是函数式接口的情况。你需要创建一个能匹配 <code>BufferedReader -&gt; String</code>，还可以抛出 IOException 异常的接口。让我们把这一接口称为 BufferedReaderProcessor。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BufferedReaderProcessor</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">process</span><span class="params">(BufferedReader reader)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第3步：执行一个行为"><a href="#第3步：执行一个行为" class="headerlink" title="第3步：执行一个行为"></a>第3步：执行一个行为</h2><p>任何<code>BufferedReader -&gt; String</code>形式的 Lambda 都可以作为参数来传递，因为它们符合 BufferedReaderProcessor 接口中定义的 process 方法的签名。现在只需要编写一种方法在 processFile主体内执行 Lambda 所代表的代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">processFile</span><span class="params">(BufferedReaderProcessor processor)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">   <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"data.txt"</span>))) &#123;</div><div class="line">       <span class="keyword">return</span> processor.process(reader); <span class="comment">//处理 BufferedReader 对象</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第4步：传递-Lambda"><a href="#第4步：传递-Lambda" class="headerlink" title="第4步：传递 Lambda"></a>第4步：传递 Lambda</h2><p>现在就可以通过传递不同的 Lambda 重用 processFile 方法，并以不同的方式处理文件了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印一行</span></div><div class="line">String result = processFile((BufferedReader r) -&gt; r.readLine());</div><div class="line">System.out.println(result);</div><div class="line"></div><div class="line"><span class="comment">//打印2行</span></div><div class="line">result = processFile((BufferedReader r) -&gt; r.readLine() +r.readLine());</div></pre></td></tr></table></figure>
<h1 id="使用函数式接口"><a href="#使用函数式接口" class="headerlink" title="使用函数式接口"></a>使用函数式接口</h1><p>Java 8的库帮你在<code>java.util.function</code>包中引入了几个新的函数式接口。我们接下来介绍 Predicate、Consumer和Function 三种函数式接口。</p>
<h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p><code>java.util.function.Predicate&lt;T&gt;</code>接口定义了一个名叫 test 的抽象方法，它接受泛型 T对象，并返回一个 boolean。这恰恰和你先前创建的一样，现在就可以直接使用了。在你需要 表示一个涉及类型T的布尔表达式时，就可以使用这个接口。比如，你可以定义一个接受String 对象的Lambda表达式，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt;</span>&#123; <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">filter</span><span class="params">(List&lt;T&gt; list, Predicate&lt;T&gt; p)</span> </span>&#123; </div><div class="line"></div><div class="line">   List&lt;T&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;(); </div><div class="line">   <span class="keyword">for</span>(T s: list)&#123; </div><div class="line">       <span class="keyword">if</span>(p.test(s))&#123;  </div><div class="line">           results.add(s); </div><div class="line">       &#125; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> results;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Predicate&lt;String&gt; nonEmptyStringPredicate = (String s) -&gt; !s.isEmpty();</div><div class="line">List&lt;String&gt; nonEmpty = filter(listOfStrings, nonEmptyStringPredicate);</div></pre></td></tr></table></figure>
<h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p><code>java.util.function.Consumer&lt;T&gt;</code> 定义了一个名叫 accept 的抽象方法，它接受泛型 T 的对象，没有返回（void）。你如果需要访问类型T的对象，并对其执行某些操作，就可以使用 这个接口。比如，你可以用它来创建一个forEach方法，接受一个Integers的列表，并对其中 每个元素执行操作。在下面的代码中，你就可以使用这个forEach方法，并配合Lambda来打印 列表中的所有元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(List&lt;T&gt; list, Consumer&lt;T&gt; c)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(T i: list)&#123; </div><div class="line">    c.accept(i); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">forEach(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>), (Integer i) -&gt; System.out.println(i) );</div></pre></td></tr></table></figure>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p><code>java.util.function.Function&lt;T, R&gt;</code>接口定义了一个叫作apply的方法，它接受一个<br>泛型 T 的对象，并返回一个泛型 R 的对象。如果你需要定义一个Lambda，将输入对象的信息映射到输出，就可以使用这个接口（比如提取苹果的重量，或把字符串映射为它的长度）。在下面的代码中，我们向你展示如何利用它来创建一个map方法，以将一个String列表映射到包含每个 String长度的Integer列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt;</span>&#123;</div><div class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, R&gt; <span class="function">List&lt;R&gt; <span class="title">map</span><span class="params">(List&lt;T&gt; list, Function&lt;T, R&gt; f)</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;R&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(T s: list) &#123;</div><div class="line">        result.add(f.apply(s));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// [7, 2, 6] </span></div><div class="line">List&lt;Integer&gt; l = map( Arrays.asList(<span class="string">"lambdas"</span>,<span class="string">"in"</span>,<span class="string">"action"</span>), (String s) -&gt; s.length() );</div></pre></td></tr></table></figure>
<h2 id="原始类型特化"><a href="#原始类型特化" class="headerlink" title="原始类型特化"></a>原始类型特化</h2><p>Java类型要么是引用类型（比如Byte、Integer、Object、List），要么是原始类型（比如int、double、byte、char）。但是泛型（比如Consumer<t>中的T）只能绑定到引用类型。这是由泛型内部的实现方式造成的。因此，在Java里有一个将原始类型转换为对应的引用类型的机制。这个机制叫作<strong>装箱（boxing）</strong>。相反的操作，也就是将引用类型转换为对应的原始类型，叫作<strong>拆箱（unboxing）</strong>。Java还有一个自动装箱机制来帮助程序员执行这一任务：装箱和拆箱操作是自动完成的。比如一个int被装箱成为 Integer。<strong>但这在性能方面是要付出代价的</strong>。装箱后的值本质上就是把原始类型包裹起来，并保存在堆里。因此，装箱后的值需要更多的内存，并需要额外的内存搜索来获取被包裹的原始值。</t></p>
<p>Java 8为我们前面所说的函数式接口带来了一个专门的版本，以便在输入和输出都是原始类型时避免自动装箱的操作。比如，使用 IntPredicate 就避免了对值 1000 进行装箱操作，但要是用 Predicate<integer> 就会把参数 1000 装箱到一个 Integer 对象中。一般来说，针对专门的输入参数类型的函数式接口的名称都要加上对应的原始类型前缀，比 如 DoublePredicate、IntConsumer、LongBinaryOperator、IntFunction等。Function 接口还有针对输出参数类型的变种：ToIntFunction<t>、IntToDoubleFunction等。</t></integer></p>
<h2 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h2><p>下表中列出 Java 8 中常用的函数式接口：</p>
<table>
<thead>
<tr>
<th>函数式接口</th>
<th>函数描述符</th>
<th>原始类型特化</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Predicate&lt;T&gt;</code></td>
<td>T -&gt; boolean</td>
<td>IntPredicate,LongPredicate, DoublePredicate</td>
</tr>
<tr>
<td><code>Consumer&lt;T&gt;</code></td>
<td>T -&gt; void</td>
<td>IntConsumer,LongConsumer, DoubleConsumer</td>
</tr>
<tr>
<td><code>Function&lt;T,R&gt;</code></td>
<td>T -&gt; R</td>
<td><code>IntFunction&lt;R&gt;, IntToDoubleFunction, IntToLongFunction, LongFunction&lt;R&gt;, LongToDoubleFunction, LongToIntFunction, DoubleFunction&lt;R&gt;, ToIntFunction&lt;T&gt;, ToDoubleFunction&lt;T&gt;, ToLongFunction&lt;T&gt;</code></td>
</tr>
<tr>
<td><code>Supplier&lt;T&gt;</code></td>
<td>() -&gt; T</td>
<td>BooleanSupplier,IntSupplier, LongSupplier, DoubleSupplier</td>
</tr>
<tr>
<td><code>UnaryOperator&lt;T&gt;</code></td>
<td>T -&gt; T</td>
<td><code>IntUnaryOperator, LongUnaryOperator, DoubleUnaryOperator</code></td>
</tr>
<tr>
<td><code>BinaryOperator&lt;T&gt;</code></td>
<td>(T,T) -&gt; T</td>
<td>IntBinaryOperator, LongBinaryOperator, DoubleBinaryOperator</td>
</tr>
<tr>
<td><code>BiPredicate&lt;L,R&gt;</code></td>
<td>(L,R) -&gt; boolean</td>
<td></td>
</tr>
<tr>
<td><code>BiConsumer&lt;T,U&gt;</code></td>
<td>(T,U) -&gt; R</td>
<td><code>ObjIntConsumer&lt;T&gt;, ObjLongConsumer&lt;T&gt;, ObjDoubleConsumer&lt;T&gt;</code></td>
</tr>
<tr>
<td><code>BiFunction&lt;T,U,R&gt;</code></td>
<td>(T,U) -&gt; R</td>
<td><code>ToIntBiFunction&lt;T,U&gt;, ToLongBiFunction&lt;T,U&gt;, ToDoubleBiFunction&lt;T,U&gt;</code></td>
</tr>
</tbody>
</table>
<h1 id="类型检查、推断以及限制"><a href="#类型检查、推断以及限制" class="headerlink" title="类型检查、推断以及限制"></a>类型检查、推断以及限制</h1><h2 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h2><p>Lambda 的类型是从使用 Lambda 的上下文推断出来的。上下文（比如接受它传递的方法的参数，或接受它的值的局部变量）中 Lambda 表达式需要的类型称为<strong>目标类型</strong>。下图表示了代码的类型检查过程：</p>
<p><img src="http://ooqmyazc5.bkt.clouddn.com/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E8%BF%87%E7%A8%8B.jpg" alt=""></p>
<p>类型检查过程可以分解为如下所示：</p>
<ul>
<li>首先，找出 filter 方法的声明；</li>
<li>第二，找出目标类型 <code>Predicate&lt;Apple&gt;</code>。</li>
<li>第三，<code>Predicate&lt;Apple&gt;</code>是一个函数式接口，定义了一个叫作 test 的抽象方法。</li>
<li>第四，test 方法描述了一个函数描述符，它可以接受一个 Apple，并返回一个 boolean。</li>
<li>最后，filter 的任何实际参数都必须匹配这个要求。</li>
</ul>
<h2 id="同样的-Lambda，不同的函数式接口"><a href="#同样的-Lambda，不同的函数式接口" class="headerlink" title="同样的 Lambda，不同的函数式接口"></a>同样的 Lambda，不同的函数式接口</h2><p>用一个 Lambda 表达式就可以与不同的函数式接口联系起来，只要它们的抽象方法签名能够兼容。比如，前面提到的 Callable 和 PrivilegeAction，这两个接口都代表着什么也不接受且返回一个泛型 T 的函数。如下代码所示两个赋值时有效的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Callable&lt;Integer&gt; c = () -&gt; <span class="number">42</span>;</div><div class="line">PrivilegeAction&lt;Integer&gt; p = () -&gt; <span class="number">42</span>;</div></pre></td></tr></table></figure>
<p><strong>特殊的void兼容规则</strong>如果一个Lambda的主体是一个语句表达式， 它就和一个返回void的函数描述符兼容（当然需要参数列表也兼容）。例如，以下两行都是合法的，尽管 List 的 add 方法返回了一个 boolean，而不是 Consumer 上下文（T -&gt; void）所要求的void：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Predicate 返回一个 boolean</span></div><div class="line">Predicate&lt;String&gt; p = s -&gt; list.add(s);</div><div class="line"><span class="comment">//Consumer 返回一个 void</span></div><div class="line">Consumer&lt;String&gt; b = s -&gt; list.add(s);</div></pre></td></tr></table></figure>
<h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>Java编译器会从上下文（目标类型）推断出用什么函数式接口来配合 Lambda 表达式，这意味着它也可以推断出适合Lambda 的签名，因为函数描述符可以通过目标类型来得到。这样做的好处在于，编译器可以了解Lambda表达式的参数类型，这样就可以在Lambda语法中省去标注参数类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Apple&gt; greenApples = filter(inventory, a -&gt; <span class="string">"green"</span>.equals(a.getColor())); <span class="comment">//参数a没有显示类型</span></div><div class="line">Comparator&lt;Apple&gt; c = (Apple a1, Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight()); <span class="comment">//无类型推断</span></div><div class="line">Comparator&lt;Apple&gt; c = (a1, a2) -&gt; a1.getWeight().compareTo(a2.getWeight()); <span class="comment">//类型推断</span></div></pre></td></tr></table></figure>
<h2 id="使用局部变量"><a href="#使用局部变量" class="headerlink" title="使用局部变量"></a>使用局部变量</h2><p>Lambda表达式也允许使用自由变量（不是参数，而是在外层作用域中定义的变量），就像匿名类一样。 它们被称作<strong>捕获Lambda</strong>。例如，下面的Lambda捕获了portNumber变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> num = <span class="number">1337</span>;</div><div class="line">Runnable r = () -&gt; System.out.println(num);</div></pre></td></tr></table></figure>
<p>Lambda可以没有限制地捕获（也就是在其主体中引用）实例变量和静态变量。但局部变量必须显式声明为final， 或事实上是final。换句话说，Lambda表达式只能捕获指派给它们的局部变量一次。（注：捕获 实例变量可以被看作捕获最终局部变量this。） 例如，下面的代码无法编译，因为portNumber 变量被赋值两次：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> portNumber = <span class="number">1337</span>; </div><div class="line">Runnable r = () -&gt; System.out.println(portNumber); </div><div class="line">portNumber = <span class="number">31337</span>; <span class="comment">//错误：Lambda表达式引用的局 部变量必须是最终的（final） 或事实上最终的</span></div></pre></td></tr></table></figure>
<p><strong>为什么局部变量有这些限制？**</strong>第一<strong>，实例变量和局部变量背后的实现有一 个关键不同。实例变量都存储在堆中，而局部变量则保存在栈上。如果Lambda可以直接访问局部变量，而且Lambda是在一个线程中使用的，则使用Lambda的线程，可能会在分配该变量的线程将这个变量收回之后，去访问该变量。因此，Java在访问自由局部变量时，实际上是在访问它的副本，而不是访问原始变量。如果局部变量仅仅赋值一次那就没有什么区别了——因此就有了这个限制。</strong>第二**，这一限制不鼓励你使用改变外部变量的典型命令式编程模式（这种模式会阻碍很容易做到的并行处理）。</p>
<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>方法引用让你可以重复使用现有的方法定义，并像Lambda一样传递它们。在一些情况下，比起使用 Lambda 表达式，它们似乎更易读，感觉也更自然。下面就是我们借助更新的Java 8 API，用方法引用写的一个排序的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lists.sort(comparing(Apple::getWeight);</div></pre></td></tr></table></figure>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>方法引用可以被看作仅仅调用特定方法的Lambda的一种快捷写法。它的基本思想是，如果一个Lambda代表的只是“直接调用这个方法”，那最好还是用名称来调用它，而不是去描述如何调用它。事实上，方法引用就是让你根据已有的方法实现来创建 Lambda表达式。但是，显式地指明方法的名称，你的代码的可读性会更好。它是如何工作的呢？ 当你需要使用方法引用时， <strong>目标引用放在分隔符 :: 前， 方法的名称放在后面。</strong> 例如， <code>Apple::getWeight</code>就是引用了Apple类中定义的方法<code>getWeight</code>。请记住，不需要括号，因为 你没有实际调用这个方法。方法引用就是Lambda表达式<code>(Apple a) -&gt; a.getWeight()</code>的快捷写法，下表给出了Java 8中方法引用的其他一些例子。</p>
<table>
<thead>
<tr>
<th>Lambda</th>
<th>等效的引用方法</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>(Apple a) -&gt; a.getWeight()</code></td>
<td>Apple::getWeight</td>
</tr>
<tr>
<td><code>() -&gt; Thread.currentThread().dumpStack()</code></td>
<td>Thread.currentThread()::dumpStack</td>
</tr>
<tr>
<td><code>(str,i) -&gt; str.substring(i)</code></td>
<td>String::substring</td>
</tr>
<tr>
<td><code>(String i) -&gt; System.out.println(s)</code></td>
<td>System.out::println</td>
</tr>
</tbody>
</table>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>方法引用主要分为三类：</p>
<ul>
<li>指向静态方法的引用（例如 Integer 的 parseInt 方法，写作 <code>Integer::parseInt</code>）</li>
<li>指向任意类型实例方法的方法引用（例如 String 的 length 方法，写作 <code>String::length</code>）</li>
<li>指向现有对象的实例方法的引用(假设有一个局部变量 expensiveTransaction 用于存放 Transaction 类型的对象，它支持实例方法 getValue，那么就可以写 <code>expensiveTransaction::getValue</code>)</li>
</ul>
<blockquote>
<p>注意，编译器会进行一种与Lambda表达式类似的类型检查过程，来确定对于给定的函数 式接口，这个方法引用是否有效：方法引用的签名必须和上下文类型匹配。</p>
</blockquote>
<h2 id="构造函数引用"><a href="#构造函数引用" class="headerlink" title="构造函数引用"></a>构造函数引用</h2><p>对于一个现有构造函数，可以利用它的名称和关键字 new 来创建它的一个引用：<code>ClassName::new</code>。它的功能与指向静态方法的引用类似。</p>
<p>例如，假设有一个构造函数没有参数。 它适合 Supplier 的签名<code>() -&gt; Apple</code>。可以这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Supplier&lt;Apple&gt; c1 = Apple::<span class="keyword">new</span>; <span class="comment">//构造函数引用指向默认的 Apple() 构造函数</span></div><div class="line">Apple a1 = c1.get(); <span class="comment">//产生一个新的对象</span></div><div class="line"></div><div class="line"><span class="comment">//等价于：</span></div><div class="line"></div><div class="line">Supplier&lt;Apple&gt; c1 = () -&gt; <span class="keyword">new</span> Apple(); <span class="comment">//利用默认构造函数创建 Apple 的 Lambda 表达式</span></div><div class="line">Apple a1 = c1.get();</div></pre></td></tr></table></figure>
<p>如果你的构造函数的签名是<code>Apple(Integer weight)</code>，那么它就适合 Function 接口的签名，于是可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer, Apple&gt; c2 = Apple::<span class="keyword">new</span>; <span class="comment">//构造函数引用指向 Apple(Integer weight) 构造函数</span></div><div class="line">Apple a2 = c2.apple(<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//等价于：</span></div><div class="line"></div><div class="line">Function&lt;Integer, Apple&gt; c2 = (Integer weight) -&gt; <span class="keyword">new</span> Apple(weight);</div><div class="line">Apple a2 = c2.apple(<span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>如果你有一个具有两个参数的构造函数<code>Apple(String color, Integer weight)</code>，那么它就适合BiFunction接口的签名，于是可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BiFunction&lt;Integer, Integer, Apple&gt; c3 = Apple::<span class="keyword">new</span>; </div><div class="line">Apple a3 = c23.apple(<span class="string">"green"</span>, <span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//等价于：</span></div><div class="line"></div><div class="line">BiFunction&lt;Integer, Apple&gt; c3 = (String color, Integer weight) -&gt; <span class="keyword">new</span> Apple(color, weight);</div><div class="line">Apple a3 = c3.apple(<span class="string">"green"</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<h1 id="Lambda-和方法引用实战"><a href="#Lambda-和方法引用实战" class="headerlink" title="Lambda 和方法引用实战"></a>Lambda 和方法引用实战</h1><h2 id="第1步：传递代码"><a href="#第1步：传递代码" class="headerlink" title="第1步：传递代码"></a>第1步：传递代码</h2><p>Java 8的API已经为你提供了一个 List 可用的 sort 方法，那么如何把排序策略传递给 sort 方法呢？sort方法的签名是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span></span></div></pre></td></tr></table></figure>
<p>它需要一个 Comparator 对象来比较两个Apple！这就是在Java中传递策略的方式：它们必须包裹在一个对象里。<strong>我们说 sort 的行为被参数化了</strong>：传递给它的排序策略不同，其行为也会 不同。<br>第一个解决方案可以是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Apple</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple o1, Apple o2)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> o1.getWeight().compareTo(o2.getWeight());</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apples.sort(<span class="keyword">new</span> AppleComparator())</div></pre></td></tr></table></figure>
<h2 id="第2步：使用匿名类"><a href="#第2步：使用匿名类" class="headerlink" title="第2步：使用匿名类"></a>第2步：使用匿名类</h2><p>可以使用匿名类来改进方案，而不是实现一个 Comparator 却只实例化一次：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">apples.sort(<span class="keyword">new</span> Comparator&lt;Apple&gt;() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple o1, Apple o2)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> o1.getWeight().compareTo(o2.getWeight());</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="第3步：使用-Lambda-表达式"><a href="#第3步：使用-Lambda-表达式" class="headerlink" title="第3步：使用 Lambda 表达式"></a>第3步：使用 Lambda 表达式</h2><p>接下来使用 Lambda 表达式来改进方案：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apples.sort((Apple a1,Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight()));</div></pre></td></tr></table></figure>
<p>Comparator 具有一个叫作 comparing 的静态辅助方法，它可以接受一个 Function 来提取 Comparable 键值，并生成一个 Comparator 对象，它可以像下面这样用（注意你现在传递的Lambda只有一 个参数：Lambda说明了如何从苹果中提取需要比较的键值）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apples.sort(Comparator.comparing(((Apple apple) -&gt; apple.getWeight())));</div></pre></td></tr></table></figure>
<h2 id="第4步：使用方法引用"><a href="#第4步：使用方法引用" class="headerlink" title="第4步：使用方法引用"></a>第4步：使用方法引用</h2><p>方法引用就是替代那些转发参数的 Lambda 表达式的语法糖。可以用方法引 用改进方案如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apples.sort(Comparator.comparing(Apple::getWeight));</div></pre></td></tr></table></figure>
<h1 id="复合-Lambda-表达式"><a href="#复合-Lambda-表达式" class="headerlink" title="复合 Lambda 表达式"></a>复合 Lambda 表达式</h1><h2 id="比较器复合"><a href="#比较器复合" class="headerlink" title="比较器复合"></a>比较器复合</h2><ul>
<li><strong>逆序：</strong>Comparator 接口有一个默认方法 reversed 可以使给定的比较器逆序。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apples.sort(Comparator.comparing(Apple::getWeight).reversed()); <span class="comment">//按重量递减排序</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>比较器链：</strong>Comparator 接口的 thenComparing 方法接受一个函数作为参数（就像 comparing方法一样），如果两个对象用第一个Comparator比较之后是相等的，就提供第二个 Comparator。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apples.sort(Comparator.comparing(Apple::getWeight).reversed().thenComparing(Apple::getColor)); <span class="comment">//按重量递减排序，一样重时，按颜色排序</span></div></pre></td></tr></table></figure>
<h2 id="谓词复合"><a href="#谓词复合" class="headerlink" title="谓词复合"></a>谓词复合</h2><p>谓词接口包括三个方法：negate、and和or。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//苹果不是红的</span></div><div class="line">Predicate&lt;Apple&gt; notRedApple = redApple.negate();</div><div class="line"></div><div class="line"><span class="comment">//苹果是红色并且重量大于150</span></div><div class="line">Predicate&lt;Apple&gt; redAndHeavyApple = redApple.and(a -&gt; a.getWeight() &gt; <span class="number">150</span>); </div><div class="line"></div><div class="line"><span class="comment">//要么是150g以上的红苹果，要么是绿苹果</span></div><div class="line">Predicate&lt;Apple&gt; redAndHeavyAppleOrGreen = redApple.and(a -&gt; a.getWeight() &gt; <span class="number">150</span>) .or(a -&gt; <span class="string">"green"</span>.equals(a.getColor()));</div></pre></td></tr></table></figure>
<h2 id="函数复合"><a href="#函数复合" class="headerlink" title="函数复合"></a>函数复合</h2><p>Function 接口的 andThen 方法<code>Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after)</code>会返回一个函数，它先计算 andThen 的调用函数，将输入函数的结果应用于 andThen 方法的 after 函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer, Integer&gt; f = x -&gt; x + <span class="number">1</span>; </div><div class="line">Function&lt;Integer, Integer&gt; g = x -&gt; x * <span class="number">2</span>; </div><div class="line">Function&lt;Integer, Integer&gt; h = f.andThen(g); <span class="comment">//g(f(x))</span></div><div class="line"><span class="keyword">int</span> result = h.apply(<span class="number">1</span>); <span class="comment">//result = 4</span></div></pre></td></tr></table></figure>
<p>Function 接口的 Compose 方法<code>Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before)</code>先计算 compose 的参数里面给的那个函数，然后再把结果用于 compose 的调用函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Function&lt;Integer, Integer&gt; f = x -&gt; x + <span class="number">1</span>; </div><div class="line">Function&lt;Integer, Integer&gt; g = x -&gt; x * <span class="number">2</span>; </div><div class="line">Function&lt;Integer, Integer&gt; h = f.compose(g); <span class="comment">//f(g(x))</span></div><div class="line"><span class="keyword">int</span> result = h.apply(<span class="number">1</span>); <span class="comment">//result = 3</span></div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>Lambda表达式可以理解为一种匿名函数：它没有名称，但有参数列表、函数主体、返回 类型，可能还有一个可以抛出的异常的列表。</li>
<li>Lambda表达式让你可以简洁地传递代码。</li>
<li><strong>函数式接口</strong>就是仅仅声明了一个抽象方法的接口。</li>
<li>只有在接受函数式接口的地方才可以使用Lambda表达式。</li>
<li>Lambda表达式允许你直接内联，为函数式接口的抽象方法提供实现，并且将整个表达式作为函数式接口的一个实例。</li>
<li>Java 8自带一些常用的函数式接口，放在<code>java.util.function</code>包里，包括<code>Predicate&lt;T&gt;、Function&lt;T,R&gt;、Supplier&lt;T&gt;、Consumer&lt;T&gt;</code>和<code>BinaryOperator&lt;T&gt;</code>。</li>
<li>为了避免装箱操作，对<code>Predicate&lt;T&gt;</code>和<code>Function&lt;T, R&gt;</code>等通用函数式接口的原始类型特化：IntPredicate、IntToLongFunction等。</li>
<li>环绕执行模式（即在方法所必需的代码中间，你需要执行点儿什么操作，比如资源分配 和清理）可以配合 Lambda 提高灵活性和可重用性。</li>
<li>Lambda 表达式所需要代表的类型称为目标类型。</li>
<li>方法引用让你重复使用现有的方法实现并直接传递它们。</li>
<li>Comparator、Predicate 和Function 等函数式接口都有几个可以用来结合 Lambda 表达式的默认方法。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;st
    
    </summary>
    
      <category term="Java" scheme="http://liuguoquan727.github.io/categories/Java/"/>
    
    
      <category term="Java8" scheme="http://liuguoquan727.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法学习合集</title>
    <link href="http://liuguoquan727.github.io/2017/03/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/"/>
    <id>http://liuguoquan727.github.io/2017/03/29/数据结构与算法学习合集/</id>
    <published>2017-03-29T07:06:16.000Z</published>
    <updated>2017-05-03T02:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736816&amp;idx=1&amp;sn=91f1016a92f31d2be0b72d17e9ebab33&amp;chksm=88e14e9cbf96c78ae9807318ea0fb41599611bee68214598efc5d5664826925ec1031ac1f8df#rd" target="_blank" rel="external">数据结构之①算法</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736823&amp;idx=1&amp;sn=40a4761c5474d133d5d2e02316bfca46&amp;chksm=88e14e9bbf96c78d1c5118b037566d5e7d571c43cfe866ecb4ee3062dc8d70df7015dd911da6#rd" target="_blank" rel="external">数据结构之②顺序线性表</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736846&amp;idx=1&amp;sn=a092e38ca78ef35bcc65d2fcb89a6080&amp;chksm=88e14e62bf96c774ac56659b1108dd74931e2109d5716b70fa3d574ace76a2bcdc2664127f40#rd" target="_blank" rel="external">数据结构之③单链表</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736852&amp;idx=1&amp;sn=4fc83b7d6cc060872df26159aefb888b&amp;chksm=88e14e78bf96c76e74dcda393413137688386aed1fc1e152bc0f048cdb83e2c414b37b4b7e9e#rd" target="_blank" rel="external">数据结构之④静态链表</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736861&amp;idx=1&amp;sn=6d7f3ce1f146b6aafde2a02bd88efb19&amp;chksm=88e14e71bf96c76733176baaa26e31a939e875fdb4e66dc145a0d220bc16299eac25e83498a9#rd" target="_blank" rel="external">数据结构之⑤循环链表</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736868&amp;idx=1&amp;sn=775d4d27dbb5f351b36df0b8982da3f8&amp;chksm=88e14e48bf96c75ec403683bb605a8541f3dfdbdbfec19f3295ba55b4526a2a484f5a931ff82#rd" target="_blank" rel="external">数据结构之⑥双向链表</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736878&amp;idx=1&amp;sn=591db3a296f4098351625656793f7c4b&amp;chksm=88e14e42bf96c754115a2ffaa070707214006706f38c689743520a767cd54690b089b919b8e9#rd" target="_blank" rel="external">数据结构之⑦栈的顺序存储</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736879&amp;idx=1&amp;sn=9cc11c9434bdc1ccfa752bdc7ec07864&amp;chksm=88e14e43bf96c7552ae9ff571b328fc85ffcf747a4532a96e28d4fc727946de7443b10e5608e#rd" target="_blank" rel="external">数据结构之⑧栈的链式存储</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736885&amp;idx=1&amp;sn=70429ca3e5d785d4b9656eea326ea5ef&amp;chksm=88e14e59bf96c74fddc7b5db01c1eb863e5b1fe26c46cec4337cdb18f9c9b387b029bd6c733b#rd" target="_blank" rel="external">数据结构之⑨栈与递归</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736905&amp;idx=1&amp;sn=06c48364e1b6e1c78b7542cb81cb4f69&amp;chksm=88e14e25bf96c733fc67682312e2bb4977fd11a6a46262bcace5450d74daf5033b621976deb4#rd" target="_blank" rel="external">数据结构之⑩顺序队列</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736908&amp;idx=1&amp;sn=a64544bcc85bd25399f43ee258b2a4f2&amp;chksm=88e14e20bf96c736484e6257a8ee7a88f3d898659a301a0456af14263c78104d2d2e14418892#rd" target="_blank" rel="external">数据结构之⑪循环顺序队列</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736930&amp;idx=1&amp;sn=952b4a1faf020eba98f9c5ce4ae3222e&amp;chksm=88e14e0ebf96c71889de36dc6a8a30dd4523e91ac0c37590981a72712eb73c25e2e15b7cab1e#rd" target="_blank" rel="external">数据结构之⑫链式队列</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736930&amp;idx=2&amp;sn=fa2f5485edf16a41a0fb1bfd051740aa&amp;chksm=88e14e0ebf96c7181d9855828ddcc243ff26ec0fb0012492d9a3b654c2b8b68d4a6006ea2e29#rd" target="_blank" rel="external">数据结构之⑬链式队列的优化</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736935&amp;idx=1&amp;sn=03c6d88ff9f9d1ca3ef1f0a8e6d1a540&amp;chksm=88e14e0bbf96c71d409d80461600aa3cad3a6b662a91ab3c9283ff7485368c29ab1e1fd91d03#rd" target="_blank" rel="external">数据结构之⑭栈与队列</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736941&amp;idx=1&amp;sn=4594a99c3f9621fd267e335bea62d200&amp;chksm=88e14e01bf96c7170d92611180886294a4604e691a7f93e80fea9aaa3489415a02f5f2791136#rd" target="_blank" rel="external">数据结构之⑮树的定义</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736941&amp;idx=2&amp;sn=001c889d03d30352fd3efdc2bf66d903&amp;chksm=88e14e01bf96c7171c9f69d819d1c5038945a819913a836e2ea2b321d8ee0acdfc28e17fa4f1#rd" target="_blank" rel="external">数据结构之⑯树的存储结构</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736946&amp;idx=1&amp;sn=d2aa14d7e3926db0d9448dff3930280d&amp;chksm=88e14e1ebf96c7084d8a414c8af067d20231f6603a93bcfbd237612610b0be9bbddd579a7001#rd" target="_blank" rel="external">数据结构之⑰二叉树</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736946&amp;idx=2&amp;sn=6132fa43f5b9b3959099c7c03d0b3651&amp;chksm=88e14e1ebf96c7081f794fe94153045e5daa4ec9539ef6a470b21b968f3c630726b509463cc4#rd" target="_blank" rel="external">数据结构之⑱二叉树存储</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736951&amp;idx=1&amp;sn=9feee528ae69fadb8d4ff48c178004f0&amp;chksm=88e14e1bbf96c70d7187df4f328088d796a29558b58c60b1d81b23bf84716333c6a01e991e7f#rd" target="_blank" rel="external">数据结构之⑲遍历二叉树</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736963&amp;idx=1&amp;sn=9eaa83923b6034f377ab3e67743efbd8&amp;chksm=88e14fefbf96c6f92a4d70df204fec4a3c15be636e982f3cec52cc3c562bbce0839b08a79414#rd" target="_blank" rel="external">数据结构⑳线索化二叉树</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736973&amp;idx=1&amp;sn=22883779abfe819518496f7a2f8d9f99&amp;chksm=88e14fe1bf96c6f78f5ae040900677d3160ad460e4da3d566fa7d3ff28734f81b10975223170#rd" target="_blank" rel="external">数据结构㉑哈夫曼树</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736981&amp;idx=1&amp;sn=3cffd2363ee9b2a5d0a90a6c1fc44cd7&amp;chksm=88e14ff9bf96c6ef83c953cb03395fa3cada23f8f304f58570bacdf95319bdc28f2f50c1ef69#rd" target="_blank" rel="external">数据结构㉒图</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736982&amp;idx=1&amp;sn=22883e5980c100d81dedab049c4fc48d&amp;chksm=88e14ffabf96c6ec3fa2cc3017dbfe0993050393a7af42c86b4df9464911743ca20b6a194f25#rd" target="_blank" rel="external">数据结构㉓图的邻接矩阵结构及遍历</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736988&amp;idx=1&amp;sn=dc1d13cf449cacb2e8a78dc766b983bd&amp;chksm=88e14ff0bf96c6e6f5b611a3d0f8224443cd2923af95160dc36eb985bed67313955183552057#rd" target="_blank" rel="external">数据结构㉔图的邻接链表结构及遍历</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736989&amp;idx=1&amp;sn=68bb56baf8f9362ed6ba321015ceb80a&amp;chksm=88e14ff1bf96c6e7fbc7fdfd60ad6c823c76cce3d09ea5310f080784d1bdd673d9bf659521c7#rd" target="_blank" rel="external">数据结构㉕最小生成树</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649736990&amp;idx=1&amp;sn=b76027a08b3a7c5c02d945695686cbdd&amp;chksm=88e14ff2bf96c6e4c58a264acd989bca3b5dbbf992ad18e38d51b9bc765748f01a5a1bb1f4a8#rd" target="_blank" rel="external">数据结构㉖最短路径</a></p>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737017&amp;idx=1&amp;sn=8c37b9b9e03d75aa3b9518b0377e3420&amp;chksm=88e14fd5bf96c6c3b38be5e9e12a767c957353fa0ae0a9916a45cf7e37f49d28d75f49d8f00d#rd" target="_blank" rel="external">查找①线性表查找</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737018&amp;idx=1&amp;sn=1a39000fd5e3bceda05245307af12192&amp;chksm=88e14fd6bf96c6c04293b2ef2fbd26c26e1f500f1574d2f46561f0e545e0a39fb099cef5e28c#rd" target="_blank" rel="external">查找②有序表查找</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737055&amp;idx=1&amp;sn=788bed28a88de5664acae6129f510bca&amp;chksm=88e14fb3bf96c6a5a4f169a70e929d460755d8c07a1c35ff3fc2c637641ae88ee4094c286612#rd" target="_blank" rel="external">查找③线性索引查找</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737056&amp;idx=1&amp;sn=8e08eb906ffd2ee3a887f07b34a3ec10&amp;chksm=88e14f8cbf96c69a4fb1682c63352785c6d36c2eafc77dfb465c6a13c9a2e45bf892e733bf66#rd" target="_blank" rel="external">查找④二叉排序树</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737057&amp;idx=1&amp;sn=b379f0d18f1329cad024c91cc2d91ae3&amp;chksm=88e14f8dbf96c69bd63b5ebc6bd305fd50d7860b8388efbf00219ee8e5cd6a3b7864efad2568#rd" target="_blank" rel="external">查找⑤哈希表</a></p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737063&amp;idx=1&amp;sn=f0612a62d5ff9a225dd425540930c976&amp;chksm=88e14f8bbf96c69d4b96def887440091e3ce0201f95aa81ba80cc4249ed999d99144de6b51a0#rd" target="_blank" rel="external">排序①基本概念</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737063&amp;idx=2&amp;sn=c1086dfae06dfbb4424bc2f91cd1f4da&amp;chksm=88e14f8bbf96c69d3253a59b6de5eba5cab68cc2a72ba0770eba1c7a50fdbdabccca7feb8ff1#rd" target="_blank" rel="external">排序②冒泡排序</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737068&amp;idx=1&amp;sn=6d6f6ec8cf7256cd571c03a5ecd57855&amp;chksm=88e14f80bf96c696512256988531ac90275e2e40175cdb96eba6e5f8ae80380db59179ba6926#rd" target="_blank" rel="external">排序③选择排序</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737068&amp;idx=2&amp;sn=2060f04807a5b3c47fcdda0f0a461cff&amp;chksm=88e14f80bf96c6960c57e144500739a3457818088bd1dbafd44544f2407b9df5f999aa14554e#rd" target="_blank" rel="external">排序④插入排序</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737069&amp;idx=1&amp;sn=9c9f231c9ac2f37b62ec2877de72318f&amp;chksm=88e14f81bf96c69779730cc99ccf81369388df29156759980d07721a73a3a5d2f4139c104246#rd" target="_blank" rel="external">排序⑤希尔排序</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737069&amp;idx=2&amp;sn=eddec920df7629beb5dc7f4bf64769de&amp;chksm=88e14f81bf96c697a63d6b40af9bab3c7e416f8fc45f4ff816897b2ae9c56af4c25c74275f5e#rd" target="_blank" rel="external">排序⑥快速排序</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737070&amp;idx=1&amp;sn=f5cadd90147944804eff7e371dd496ce&amp;chksm=88e14f82bf96c6947bfa40dfb8d126acb42a7fb55e83d8150bc435ae60ef5c4ef78f36851be5#rd" target="_blank" rel="external">排序⑦归并排序</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;mid=2649737070&amp;idx=2&amp;sn=c5fd4878c1a702d463675c47c4f048eb&amp;chksm=88e14f82bf96c69490a2953cf0ddc370216bad43cafff1d26a9f780e1f480b5cc012d75ef4a1#rd" target="_blank" rel="external">排序⑧小结</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5OTk3NTU1NQ==&amp;amp
    
    </summary>
    
      <category term="数据结构" scheme="http://liuguoquan727.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://liuguoquan727.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JNI之⑤C/C++处理Java对象引用</title>
    <link href="http://liuguoquan727.github.io/2017/01/04/JNI%E4%B9%8B%E2%91%A4C:C++%E5%A4%84%E7%90%86Java%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8/"/>
    <id>http://liuguoquan727.github.io/2017/01/04/JNI之⑤C:C++处理Java对象引用/</id>
    <published>2017-01-04T07:42:25.000Z</published>
    <updated>2017-01-04T07:47:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组引用的处理"><a href="#数组引用的处理" class="headerlink" title="数组引用的处理"></a>数组引用的处理</h1><p>在Java中,使用new关键字创建对象,创建之后我们就可以随意使用这个对象,我们无需关心这个对象是什么时候被回收的 ,对象的回收已经托管到了JVM的GC,由GC来帮我们回收无引用的对象。将对象引用传递给C/C++时，C/C++层就会持有Java对象，如果不进行妥善处理，对象多了就会出现内存泄漏问题，所以在C/C++层使用Java对象后，需要释放这个引用 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.ndk.write;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * Created by liuguoquan on 2017/1/3.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteJava</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 对数组进行排序</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaArraySort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    System.loadLibrary(<span class="string">"native-lib"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="comment">//logcat日志</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_TAG    <span class="meta-string">"NDK"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//比较</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 对数组进行排序</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaArraySort</span><span class="params">(JNIEnv *env, jobject instance,</span></div><div class="line">                                                     jintArray array_) &#123;</div><div class="line">    jint *<span class="built_in">array</span> = env-&gt;GetIntArrayElements(array_, <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">// 数组长度</span></div><div class="line">    jsize array_size = env-&gt;GetArrayLength(array_);</div><div class="line">    <span class="comment">// 快速排序函数</span></div><div class="line">    qsort(<span class="built_in">array</span>, (<span class="keyword">size_t</span>) array_size, <span class="keyword">sizeof</span>(jint), compare);</div><div class="line">    <span class="comment">// 释放引用,因为数组和对象在java中都是引用,都会在堆内存中开辟一块空间,但我们使用完对象之后</span></div><div class="line">    <span class="comment">// 需要将引用释放掉,不然会很耗内存,在一定程度上可能会造成内存溢出 。</span></div><div class="line">    <span class="comment">// JNI_ABORT, Java数组不进行更新，但是释放C/C++数组</span></div><div class="line">    <span class="comment">// JNI_COMMIT，Java数组进行更新，不释放C/C++数组（函数执行完，数组还是会释放）</span></div><div class="line">    <span class="comment">//// 0，Java数组进行更新，释放C/C++数组</span></div><div class="line">    env-&gt;ReleaseIntArrayElements(array_, <span class="built_in">array</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span> </span>&#123;</div><div class="line">    LOGI(<span class="string">"a = %d,b = %d"</span>,*((<span class="keyword">int</span>*)a),*((<span class="keyword">int</span>*)b));</div><div class="line">    <span class="keyword">return</span> *((<span class="keyword">int</span>*)a) - *((<span class="keyword">int</span>*)b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h1 id="引用释放"><a href="#引用释放" class="headerlink" title="引用释放"></a>引用释放</h1><p>只要是Java对象,在C中都需要释放,如String类型引用：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String类型引用释放</span></div><div class="line"><span class="keyword">void</span> (JNICALL *ReleaseStringUTFChars)</div><div class="line">      (JNIEnv *env, jstring <span class="built_in">str</span>, <span class="keyword">const</span> <span class="built_in">char</span>* chars);</div></pre></td></tr></table></figure>
<p>在C中创建的对象引用也需要进行引用释放.</p>
<blockquote>
<p>创建一个数组对象,并将引用传递给了Java层,将引用交给了Java之后,C就需要释放这个引用,不然会一直持有,GC也不会回收这个对象 </p>
</blockquote>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*返回int类型的数组*/</span></div><div class="line">JNIEXPORT jintArray JNICALL Java_com_zeno_jni_HelloJNI_getIntArray</div><div class="line">(JNIEnv *<span class="keyword">env</span>, jobject jobj,jint len) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 创建一个jint类型的数组</span></div><div class="line">    jintArray jArray = (*<span class="keyword">env</span>)-&gt;NewIntArray(<span class="keyword">env</span>, len);</div><div class="line"></div><div class="line">    <span class="comment">// 得到数组首个元素指针</span></div><div class="line">    jint* arrayElements = (*<span class="keyword">env</span>)-&gt;GetIntArrayElements(<span class="keyword">env</span>, jArray, NULL);</div><div class="line"></div><div class="line">    <span class="comment">// 指针运算</span></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">        arrayElements[i] = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 同步</span></div><div class="line">    (*<span class="keyword">env</span>)-&gt;ReleaseIntArrayElements(<span class="keyword">env</span>, jArray, arrayElements, JNI_COMMIT);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> jArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line">java code</div><div class="line"><span class="comment">// 在C中生存数组 ， 返回到Java中</span></div><div class="line">private native <span class="keyword">int</span>[] getIntArray(<span class="keyword">int</span> len) ;</div><div class="line"></div><div class="line"><span class="keyword">int</span>[] intArray = jni.getIntArray(<span class="number">20</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intArray.length; i++) &#123;</div><div class="line">        System.out.println(<span class="string">"int array === "</span>+intArray[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="JNI引用分类"><a href="#JNI引用分类" class="headerlink" title="JNI引用分类"></a>JNI引用分类</h1><h2 id="局部引用"><a href="#局部引用" class="headerlink" title="局部引用"></a>局部引用</h2><p>局部引用在本地方法调用的时间内有效，本地方法调用结束后会自动释放，每个局部引用都消耗一定的JVM资源，所以我们必须确保本地方法中不能过多的分配局部引用，尽管局部引用能够在方法调用后自动释放，但是过多的局部引用仍然可能导致虚拟机内存溢出。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_zeno_jni_HelloJNI_localRef</span></span></div><div class="line"><span class="params">(JNIEnv *env, jobject jobj)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 找到类</span></div><div class="line">    jclass dateClass = (*env)-&gt;FindClass(env, <span class="string">"java/util/Date"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 得到构造方法ID</span></div><div class="line">    jmethodID dateConstructorId = (*env)-&gt;GetMethodID(env, dateClass, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 创建Date对象</span></div><div class="line">    jobject dateObject = (*env)-&gt;NewObject(env, dateClass, dateConstructorId);</div><div class="line"></div><div class="line">    <span class="comment">// 创建一个局部引用</span></div><div class="line">    jobject dateLocalRef = (*env)-&gt;NewLocalRef(env, dateObject);</div><div class="line"></div><div class="line">    <span class="comment">// 省略N行代码</span></div><div class="line"></div><div class="line">    <span class="comment">// 不再使用对象,则通知GC回收对象，手动释放对象</span></div><div class="line">    (*env)-&gt;DeleteLocalRef(env, dateLocalRef);</div><div class="line">    <span class="comment">// 因为dateObject也是局部对象，可以直接回收dateObject对象</span></div><div class="line">    <span class="comment">//(*env)-&gt;DeleteLocalRef(env, dateObject);</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">jstring globalStr;</div><div class="line"></div><div class="line"><span class="comment">/*创建全局引用*/</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_zeno_jni_HelloJNI_createGlobalRef</span></span></div><div class="line"><span class="params">(JNIEnv *env, jobject jobj)</span> &#123;</div><div class="line"></div><div class="line">    jstring jStr = (*env)-&gt;NewStringUTF(env, <span class="string">"I want your love !"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 创建一个全局引用</span></div><div class="line">    globalStr = (*env)-&gt;NewGlobalRef(env, jStr);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*使用全局引用*/</span></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_zeno_jni_HelloJNI_useGlobalRef</span></span></div><div class="line"><span class="params">(JNIEnv *env, jobject jobj)</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> globalStr;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*释放全局引用*/</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_zeno_jni_HelloJNI_deleteGlobalRef</span></span></div><div class="line"><span class="params">(JNIEnv *env, jobject jobj)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 释放全局引用</span></div><div class="line">    (*env)-&gt;DeleteGlobalRef(env, globalStr);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="弱全局引用"><a href="#弱全局引用" class="headerlink" title="弱全局引用"></a>弱全局引用</h2><p>节省内存，在内存不足时可以释放所引用的对象<br>可以引用一个不常用的对象，如果为NULL，临时创建</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建</span></div><div class="line"><span class="function">jweak <span class="title">NewWeakGlobalRef</span><span class="params">(JNIEnv *env, jobject obj)</span></span>;</div><div class="line"><span class="comment">//销毁</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteWeakGlobalRef</span><span class="params">(JNIEnv *env, jweak obj)</span></span>;</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/09469f692a4b" target="_blank" rel="external">JNI开发系列⑤对象引用的处理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组引用的处理&quot;&gt;&lt;a href=&quot;#数组引用的处理&quot; class=&quot;headerlink&quot; title=&quot;数组引用的处理&quot;&gt;&lt;/a&gt;数组引用的处理&lt;/h1&gt;&lt;p&gt;在Java中,使用new关键字创建对象,创建之后我们就可以随意使用这个对象,我们无需关心这个对象是什
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/categories/Android/NDK/"/>
    
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>JNI之④C/C++创建Java对象</title>
    <link href="http://liuguoquan727.github.io/2017/01/04/JNI%E4%B9%8B%E2%91%A3C:C++%E5%88%9B%E5%BB%BAJava%E5%AF%B9%E8%B1%A1/"/>
    <id>http://liuguoquan727.github.io/2017/01/04/JNI之④C:C++创建Java对象/</id>
    <published>2017-01-04T07:41:57.000Z</published>
    <updated>2017-01-04T07:46:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>获取Java对象的jclass</li>
<li>获取构造函数的id，方法名使用<init></init></li>
<li>NewObject创建Java对象jobject</li>
<li>获取并调用jobject中的方法</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.ndk.write;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C访问Java字段和方法</div><div class="line"> * Created by liuguoquan on 2017/1/3.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteJava</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * C/C++ 调用Java对象</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">c2JavaClass</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    System.loadLibrary(<span class="string">"native-lib"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++ 创建Java对象</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jlong JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaClass</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">//获取Date jclass</span></div><div class="line">    jclass clz = env-&gt;FindClass(<span class="string">"java/util/Date"</span>);</div><div class="line">    <span class="comment">//获取构造方法id</span></div><div class="line">    jmethodID methodId = env-&gt;GetMethodID(clz,<span class="string">"&lt;init&gt;"</span>,<span class="string">"()V"</span>);</div><div class="line">    <span class="comment">//创建Date对象</span></div><div class="line">    jobject obj = env-&gt;NewObject(clz,methodId);</div><div class="line">    <span class="comment">//获取getTime的方法ID</span></div><div class="line">    jmethodID getTimeId = env-&gt;GetMethodID(clz,<span class="string">"getTime"</span>,<span class="string">"()J"</span>);</div><div class="line">    <span class="comment">//调用getTime方法</span></div><div class="line">    jlong time = env-&gt;CallLongMethod(obj,getTimeId);</div><div class="line">    LOGI(<span class="string">"time = %ld\n"</span>,time);</div><div class="line">    <span class="keyword">return</span> time;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/b0403771944f" target="_blank" rel="external">JNI开发系列④C语言调用构造方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取Java对象的jclass&lt;/li&gt;
&lt;li&gt;获取构造函数的id，方法名使用&lt;init&gt;&lt;/init&gt;&lt;/li&gt;
&lt;li&gt;N
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/categories/Android/NDK/"/>
    
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>JNI之③C/C++调用Java字段与方法</title>
    <link href="http://liuguoquan727.github.io/2017/01/04/JNI%E4%B9%8B%E2%91%A2C:C++%E8%B0%83%E7%94%A8Java%E5%AD%97%E6%AE%B5%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>http://liuguoquan727.github.io/2017/01/04/JNI之③C:C++调用Java字段与方法/</id>
    <published>2017-01-04T07:41:41.000Z</published>
    <updated>2017-01-04T07:46:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="native函数定义"><a href="#native函数定义" class="headerlink" title="native函数定义"></a>native函数定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.ndk.write;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C访问Java字段和方法</div><div class="line"> * Created by liuguoquan on 2017/1/3.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteJava</span> </span>&#123;</div><div class="line">  <span class="comment">//Java成员变量</span></div><div class="line">  <span class="keyword">public</span> String name = <span class="string">"liu"</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">20</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String sex = <span class="string">"男"</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"刘涤生"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * C/C++修改java String 类型字段本地方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStringField</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaIntField</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStringStaticField</span><span class="params">()</span></span>;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   *  C/C++ 访问Java方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaMethod</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStaticMethod</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 静态native方法访问字段</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">native2JavaStringField</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    System.loadLibrary(<span class="string">"native-lib"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="C-C-访问Java字段"><a href="#C-C-访问Java字段" class="headerlink" title="C/C++访问Java字段"></a>C/C++访问Java字段</h1><ol>
<li>获取jclass对象</li>
<li>获取字段ID</li>
<li>设置字段的值</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*C语言访问java String类型字段*/</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStringField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">// 1.获取jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 2.获取字段ID</span></div><div class="line">    jfieldID fieldId = env-&gt;GetFieldID(clz,<span class="string">"name"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//3.获取字段的值</span></div><div class="line">    jstring str = (jstring)env-&gt;GetObjectField(instance,fieldId);</div><div class="line">    <span class="comment">//4.将jstring类型转换成字符指针</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *cstr = env-&gt;GetStringUTFChars(str,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"%s"</span>,cstr);</div><div class="line">    <span class="comment">//释放内存</span></div><div class="line">    env-&gt;ReleaseStringUTFChars(str,cstr);</div><div class="line">    <span class="comment">//拼接字符</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *newstr = <span class="string">"lee"</span>;</div><div class="line">    <span class="comment">//5.创建新jstring</span></div><div class="line">    jstring new_str = env-&gt;NewStringUTF(newstr);</div><div class="line">    <span class="comment">//6.将jstring类型的变量值 设置到java字段中</span></div><div class="line">    env-&gt;SetObjectField(instance,fieldId,new_str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++访问修改java int字段</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaIntField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 字段id</span></div><div class="line">    jfieldID fieldId = env-&gt;GetFieldID(clz,<span class="string">"age"</span>,<span class="string">"I"</span>);</div><div class="line">    <span class="comment">//得到字段值</span></div><div class="line">    jint age = env-&gt;GetIntField(instance,fieldId);</div><div class="line">    LOGI(<span class="string">"age = %d"</span>,age);</div><div class="line">    env-&gt;SetIntField(instance,fieldId,age + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="C-C-访问Java方法"><a href="#C-C-访问Java方法" class="headerlink" title="C/C++访问Java方法"></a>C/C++访问Java方法</h1><ol>
<li>获取jclass对象</li>
<li>获取方法ID</li>
<li>调用方法</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++ 访问java方法</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 获取jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 获取methodId</span></div><div class="line">    <span class="comment">//函数签名 括号内表示参数 括号外表示返回值</span></div><div class="line">    jmethodID methodId = env-&gt;GetMethodID(clz,<span class="string">"setName"</span>,<span class="string">"(Ljava/lang/String;)V"</span>);</div><div class="line">    <span class="comment">// 调用方法</span></div><div class="line">    jstring str = env-&gt;NewStringUTF(<span class="string">"zhang"</span>);</div><div class="line">    env-&gt;CallVoidMethod(instance,methodId,str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="C-C-访问Java静态字段"><a href="#C-C-访问Java静态字段" class="headerlink" title="C/C++访问Java静态字段"></a>C/C++访问Java静态字段</h1><ol>
<li>获取jclass对象</li>
<li>获取静态字段ID</li>
<li>设置静态字段的值</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * c/c++ 访问java静态字段</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStringStaticField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">// 获取jclass对象</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    jfieldID fieldId = env-&gt;GetStaticFieldID(clz,<span class="string">"sex"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//获取字段的值</span></div><div class="line">    jstring jstr = (jstring)env-&gt;GetStaticObjectField(clz,fieldId);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *sex = env-&gt;GetStringUTFChars(jstr,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"sex = %s\n"</span>,sex);</div><div class="line">    jstring newStr = env-&gt;NewStringUTF(<span class="string">"女"</span>);</div><div class="line">    <span class="comment">//修改字段</span></div><div class="line">    env-&gt;SetStaticObjectField(clz,fieldId,newStr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="C-C-访问Java静态方法"><a href="#C-C-访问Java静态方法" class="headerlink" title="C/C++访问Java静态方法"></a>C/C++访问Java静态方法</h1><ol>
<li>获取jclass对象</li>
<li>获取静态方法ID</li>
<li>调用静态方法</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * c/c++访问静态方法</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStaticMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">//获取静态方法id</span></div><div class="line">    jmethodID methodId = env-&gt;GetStaticMethodID(clz,<span class="string">"getName"</span>,<span class="string">"()Ljava/lang/String;"</span>);</div><div class="line">    jstring obj = (jstring)env-&gt;CallStaticObjectMethod(clz,methodId);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* value = env-&gt;GetStringUTFChars(obj,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"name = %s\n"</span>,value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="静态native方法访问Java静态字段"><a href="#静态native方法访问Java静态字段" class="headerlink" title="静态native方法访问Java静态字段"></a>静态native方法访问Java静态字段</h1><ol>
<li>获取静态字段id</li>
<li>设置静态字段值</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 静态native方法 第二个参数是jclass而不是jobject类型</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_native2JavaStringField</span><span class="params">(JNIEnv *env, jclass clz)</span> &#123;</div><div class="line"></div><div class="line">    jfieldID fieldID = env-&gt;GetStaticFieldID(clz,<span class="string">"sex"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    jstring jstr = (jstring) env-&gt;GetStaticObjectField(clz, fieldID);</div><div class="line">    LOGI(<span class="string">"sex = %s\n"</span>,env-&gt;GetStringUTFChars(jstr,JNI_FALSE));</div><div class="line">    jstring newStr = env-&gt;NewStringUTF(<span class="string">"女"</span>);</div><div class="line">    <span class="comment">//修改静态常量字段</span></div><div class="line">    env-&gt;SetStaticObjectField(clz,fieldID,newStr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.ndk.write;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C访问Java字段和方法</div><div class="line"> * Created by liuguoquan on 2017/1/3.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteJava</span> </span>&#123;</div><div class="line">  <span class="comment">//Java成员变量</span></div><div class="line">  <span class="keyword">public</span> String name = <span class="string">"liu"</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">20</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String sex = <span class="string">"男"</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"刘涤生"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * C/C++修改java String 类型字段本地方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStringField</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaIntField</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStringStaticField</span><span class="params">()</span></span>;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   *  C/C++ 访问Java方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaMethod</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStaticMethod</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 静态native方法访问字段</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">native2JavaStringField</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    System.loadLibrary(<span class="string">"native-lib"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="C-C-代码"><a href="#C-C-代码" class="headerlink" title="C/C++代码"></a>C/C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="comment">//logcat日志</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_TAG    <span class="meta-string">"NDK"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)</span></div><div class="line"><span class="comment">/* Header for class com_example_demo_JniUtil */</span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/*C语言访问java String类型字段*/</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStringField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">// 1.获取jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 2.获取字段ID</span></div><div class="line">    jfieldID fieldId = env-&gt;GetFieldID(clz,<span class="string">"name"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//3.获取字段的值</span></div><div class="line">    jstring str = (jstring)env-&gt;GetObjectField(instance,fieldId);</div><div class="line">    <span class="comment">//4.将jstring类型转换成字符指针</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *cstr = env-&gt;GetStringUTFChars(str,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"%s"</span>,cstr);</div><div class="line">    <span class="comment">//拼接字符</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *newstr = <span class="string">"lee"</span>;</div><div class="line">    <span class="comment">//5.创建新jstring</span></div><div class="line">    jstring new_str = env-&gt;NewStringUTF(newstr);</div><div class="line">    <span class="comment">//6.将jstring类型的变量值 设置到java字段中</span></div><div class="line">    env-&gt;SetObjectField(instance,fieldId,new_str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++访问修改java int字段</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaIntField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 字段id</span></div><div class="line">    jfieldID fieldId = env-&gt;GetFieldID(clz,<span class="string">"age"</span>,<span class="string">"I"</span>);</div><div class="line">    <span class="comment">//得到字段值</span></div><div class="line">    jint age = env-&gt;GetIntField(instance,fieldId);</div><div class="line">    LOGI(<span class="string">"age = %d"</span>,age);</div><div class="line">    env-&gt;SetIntField(instance,fieldId,age + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++ 访问java方法</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 获取jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 获取methodId</span></div><div class="line">    <span class="comment">//函数签名 括号内表示参数 括号外表示返回值</span></div><div class="line">    jmethodID methodId = env-&gt;GetMethodID(clz,<span class="string">"setName"</span>,<span class="string">"(Ljava/lang/String;)V"</span>);</div><div class="line">    <span class="comment">// 调用方法</span></div><div class="line">    jstring str = env-&gt;NewStringUTF(<span class="string">"zhang"</span>);</div><div class="line">    env-&gt;CallVoidMethod(instance,methodId,str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * c/c++ 访问java静态字段</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStringStaticField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">// 获取jclass对象</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    jfieldID fieldId = env-&gt;GetStaticFieldID(clz,<span class="string">"sex"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//获取字段的值</span></div><div class="line">    jstring jstr = (jstring)env-&gt;GetStaticObjectField(clz,fieldId);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *sex = env-&gt;GetStringUTFChars(jstr,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"sex = %s\n"</span>,sex);</div><div class="line">    jstring newStr = env-&gt;NewStringUTF(<span class="string">"女"</span>);</div><div class="line">    <span class="comment">//修改字段</span></div><div class="line">    env-&gt;SetStaticObjectField(clz,fieldId,newStr);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * c/c++访问静态方法</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStaticMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">//获取静态方法id</span></div><div class="line">    jmethodID methodId = env-&gt;GetStaticMethodID(clz,<span class="string">"getName"</span>,<span class="string">"()Ljava/lang/String;"</span>);</div><div class="line">    jstring obj = (jstring)env-&gt;CallStaticObjectMethod(clz,methodId);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* value = env-&gt;GetStringUTFChars(obj,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"name = %s\n"</span>,value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 静态native方法 第二个参数书jclass而不是jobject类型</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_native2JavaStringField</span><span class="params">(JNIEnv *env, jclass clz)</span> &#123;</div><div class="line"></div><div class="line">    jfieldID fieldID = env-&gt;GetStaticFieldID(clz,<span class="string">"sex"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    jstring jstr = (jstring) env-&gt;GetStaticObjectField(clz, fieldID);</div><div class="line">    LOGI(<span class="string">"sex = %s\n"</span>,env-&gt;GetStringUTFChars(jstr,JNI_FALSE));</div><div class="line">    jstring newStr = env-&gt;NewStringUTF(<span class="string">"女"</span>);</div><div class="line">    <span class="comment">//修改静态常量字段</span></div><div class="line">    env-&gt;SetStaticObjectField(clz,fieldID,newStr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h1 id="为什么要得到jclass呢-？"><a href="#为什么要得到jclass呢-？" class="headerlink" title="为什么要得到jclass呢 ？"></a>为什么要得到jclass呢 ？</h1><p>因为 ，我们要获取字段ID，在JNI中，获取java字段与方法都需要签名。而签名是在类加载的时候完成，所以在获取字段ID的时候需要传入jclass。</p>
<h1 id="为什么传入了字段名称，还需要签名呢-？"><a href="#为什么传入了字段名称，还需要签名呢-？" class="headerlink" title="为什么传入了字段名称，还需要签名呢 ？"></a>为什么传入了字段名称，还需要签名呢 ？</h1><p>因为java支持重载 ， 一个方法名称可以有多个不同实现 ， 根据传入的参数不同 ，所以C语言调用函数为了区分不同的方法， 而对每个方法做了签名 ， 而字段则可用来标识类型。</p>
<blockquote>
<p>在.class的文件目录下 ，使用<code>javap -s -p className</code>   就可以列举出 ， 所有的字段与方法签名</p>
</blockquote>
<p><a href="http://www.jianshu.com/p/9cc6e3f0ead7" target="_blank" rel="external">JNI开发系列③C语言调用Java字段与方法</a><br><a href="http://www.jianshu.com/p/cba836f6a08c" target="_blank" rel="external">JNI开发系列②.h头文件分析</a><br><a href="http://www.jianshu.com/p/68bca86a84ce" target="_blank" rel="external">JNI开发系列①JNI概念及开发流程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;native函数定义&quot;&gt;&lt;a href=&quot;#native函数定义&quot; class=&quot;headerlink&quot; title=&quot;native函数定义&quot;&gt;&lt;/a&gt;native函数定义&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/categories/Android/NDK/"/>
    
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>JNI之②头文件分析</title>
    <link href="http://liuguoquan727.github.io/2017/01/02/JNI%E4%B9%8B%E2%91%A1%E5%A4%B4%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <id>http://liuguoquan727.github.io/2017/01/02/JNI之②头文件分析/</id>
    <published>2017-01-02T07:34:23.000Z</published>
    <updated>2017-01-04T08:58:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写Java文件"><a href="#编写Java文件" class="headerlink" title="编写Java文件"></a>编写Java文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderFile</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span>  <span class="title">doVoid</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doShort</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">void</span> <span class="title">doArray</span><span class="params">(Object[] o )</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">int</span> i)</span></span>;      <span class="comment">//byte ,short ,int,long,float,double ,boolean,char        </span></div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">double</span> d)</span></span>;    <span class="comment">//byte ,short ,int,long,float,double ,boolean,char  </span></div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(Object o)</span></span>;      </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">double</span> d1,<span class="keyword">double</span> d2)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">double</span> d1 ,<span class="keyword">double</span> d2,<span class="keyword">double</span> d3)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">double</span> d1 ,<span class="keyword">float</span> f,<span class="keyword">boolean</span> b ,<span class="keyword">char</span>[] c )</span></span>;    </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">int</span>[] i)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">int</span>[] i1,<span class="keyword">double</span>[] i2 )</span></span>;      </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">int</span>[] i1,<span class="keyword">double</span>[] i2 ,Object[] o )</span></span>;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">doString</span><span class="params">(String s)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title">doObject</span><span class="params">(Object o )</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Enumeration <span class="title">doInterface</span><span class="params">(Iterator it)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Student <span class="title">doStudent</span><span class="params">(Student s)</span></span>;  </div><div class="line">     </div><div class="line"><span class="comment">//  native int[] doInt(int[] i);  //byte ,short ,int,long,float,double ,boolean,char  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String[] doString(String[] s);  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">native</span> Object[] doObjects(Object[] o );  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">native</span> Enumeration[] doInterface(Iterator[] it);  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">native</span> Student[] doStudent(Student[] s);  </div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> Object <span class="title">doAll</span><span class="params">(<span class="keyword">int</span>[] i , String[] s , Student[] student )</span></span>;               </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="生成头文件"><a href="#生成头文件" class="headerlink" title="生成头文件"></a>生成头文件</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span>  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span>  </span></div><div class="line"><span class="comment">/* Header for class com_nedu_jni_helloword_HeaderFile */</span>  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_nedu_jni_helloword_HeaderFile  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_nedu_jni_helloword_HeaderFile  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doVoid </div><div class="line"> * Signature: ()V </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doVoid</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doShort </div><div class="line"> * Signature: ()I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doShort</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doArray </div><div class="line"> * Signature: ([Ljava/lang/Object;)V </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doArray</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (I)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__I</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jint)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (D)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__D</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jdouble)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (Ljava/lang/Object;)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__Ljava_lang_Object_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DD)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__DD</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jdouble, jdouble)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DDD)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__DDD</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jclass, jdouble, jdouble, jdouble)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DFZ[C)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__DFZ_3C</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jclass, jdouble, jfloat, jboolean, jcharArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: ([I)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt___3I</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jintArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: ([I[D)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt___3I_3D</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jintArray, jdoubleArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: ([I[D[Ljava/lang/Object;)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt___3I_3D_3Ljava_lang_Object_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jclass, jintArray, jdoubleArray, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doString </div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doString__Ljava_lang_String_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jstring)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doObject </div><div class="line"> * Signature: (Ljava/lang/Object;)Ljava/lang/Object; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobject JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doObject</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInterface </div><div class="line"> * Signature: (Ljava/util/Iterator;)Ljava/util/Enumeration; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobject JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInterface__Ljava_util_Iterator_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doStudent </div><div class="line"> * Signature: (Lcom/nedu/jni/helloword/Student;)Lcom/nedu/jni/helloword/Student; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobject JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doStudent__Lcom_nedu_jni_helloword_Student_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doString </div><div class="line"> * Signature: ([Ljava/lang/String;)[Ljava/lang/String; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobjectArray JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doString___3Ljava_lang_String_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doObjects </div><div class="line"> * Signature: ([Ljava/lang/Object;)[Ljava/lang/Object; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobjectArray JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doObjects</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInterface </div><div class="line"> * Signature: ([Ljava/util/Iterator;)[Ljava/util/Enumeration; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobjectArray JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInterface___3Ljava_util_Iterator_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doStudent </div><div class="line"> * Signature: ([Lcom/nedu/jni/helloword/Student;)[Lcom/nedu/jni/helloword/Student; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobjectArray JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doStudent___3Lcom_nedu_jni_helloword_Student_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doAll </div><div class="line"> * Signature: ([I[Ljava/lang/String;[Lcom/nedu/jni/helloword/Student;)Ljava/lang/Object; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobject JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doAll</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jclass, jintArray, jobjectArray, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line">&#125;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h1 id="头文件分析"><a href="#头文件分析" class="headerlink" title="头文件分析"></a>头文件分析</h1><h2 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h2><pre><code>/*  
 * Class:     com_nedu_jni_helloword_HeaderFile  
 * Method:    doVoid  
 * Signature: ()V  
 */  
</code></pre><p>Class：表示Native方法的类名称<br>Method：表示方法名称<br>Signature：是方法的标识，主要提供我们再JNI操作java对象中使用  </p>
<p>Signature一般 是两部分构成，一个方法的参数。另一个是返回类型。方法参数在括号里面，返回类型在后面，例如：</p>
<pre><code>()V 
</code></pre><p>返回值为void，没有参数。  </p>
<pre><code>(DFZ[C)I 
</code></pre><p>返回值为int，参数为double、float、char[]  </p>
<pre><code>(Ljava/lang/String;)Ljava/lang/String;
</code></pre><p>返回值String，参数为String</p>
<ul>
<li>基本类型的对应关系如下</li>
</ul>
<p><img src="http://hi.csdn.net/attachment/201111/11/0_132099442294XE.gif" alt="ALT TEXT"> </p>
<ul>
<li><p>方法参数或者返回值为java中的对象时，必须以“L”加上其路径，次路径必须以”/“分开，自定义的对象也使用本规则，不在包中时直接”L”，比如说java.lang.String为“java/lang/String”,com.nedu.jni.helloword.Student为”com/nedu/jni/helloword/Student”</p>
</li>
<li><p>方法)方法参数或者返回值为数组时类型前加上[,例如[I表示int[],[[[D表示 double[][][]，即几维数组就加几个[。例子如下：</p>
</li>
</ul>
<p><img src="http://hi.csdn.net/attachment/201111/11/0_1320994986OoPN.gif" alt="ALT TEXT"></p>
<h2 id="方法的声明"><a href="#方法的声明" class="headerlink" title="方法的声明"></a>方法的声明</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">JNIEXPORT </span>void <span class="keyword">JNICALL </span><span class="keyword">Java_com_nedu_jni_helloword_HeaderFile_doArray(JNIEnv </span>*,<span class="keyword">jobject,jobjectArray);</span></div></pre></td></tr></table></figure>
<p>从声明可以看出方法基本由7部分组成：</p>
<ol>
<li>JNIEXPORT是JNI的关键字，表示此函数时要被JNI调用的</li>
<li>void表示方法的返回值类型</li>
<li>JNICALL是JNI的关键字，表示此函数时要被JNI调用的</li>
<li>Java_为JNI中表示此方法来源于java的标志头</li>
<li>com_nedu_jni_helloword_HeaderFile表示方法所在的包名+类名</li>
<li>doArray表示方法名</li>
<li>参数：JNIEnv*是一个接口指针，用于定位函数表中的函数，后面的jobject是  一个指向该类的指针，类似与C语言中的this。这个第二个参数是变化的，当该方法为类的实例方法时该参数为jobject；当该方法为类方法（即静态方法）时该参数为jclass，指向该类的class。</li>
</ol>
<p>根据不同方法前缀生成的头文件比较如下：</p>
<ul>
<li><p>static与非static的比较</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 非static方法</span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DD)I </div><div class="line"> */  </div><div class="line"><span class="keyword">JNIEXPORT </span><span class="keyword">jint </span><span class="keyword">JNICALL </span><span class="keyword">Java_com_nedu_jni_helloword_HeaderFile_doInt__DD </span> </div><div class="line">  (<span class="keyword">JNIEnv </span>*, <span class="keyword">jobject, </span><span class="keyword">jdouble, </span><span class="keyword">jdouble); </span> </div><div class="line"> </div><div class="line"><span class="comment">/* static方法</span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DDD)I </div><div class="line"> */  </div><div class="line"><span class="keyword">JNIEXPORT </span><span class="keyword">jint </span><span class="keyword">JNICALL </span><span class="keyword">Java_com_nedu_jni_helloword_HeaderFile_doInt__DDD </span> </div><div class="line">  (<span class="keyword">JNIEnv </span>*, <span class="keyword">jclass, </span><span class="keyword">jdouble, </span><span class="keyword">jdouble, </span><span class="keyword">jdouble);</span></div></pre></td></tr></table></figure>
</li>
<li><p>private、friendly、protected以及public这些方法限制符不会在JNI的头文件中出现。这些访问修饰符只有在其它类使用这些方法时有效！JNI中不关心此修饰符！</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编写Java文件&quot;&gt;&lt;a href=&quot;#编写Java文件&quot; class=&quot;headerlink&quot; title=&quot;编写Java文件&quot;&gt;&lt;/a&gt;编写Java文件&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/categories/Android/NDK/"/>
    
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>JNI之①参数类型与Java参数类型对比</title>
    <link href="http://liuguoquan727.github.io/2017/01/02/JNI%E4%B9%8B%E2%91%A0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E4%B8%8EJava%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%AF%B9%E6%AF%94/"/>
    <id>http://liuguoquan727.github.io/2017/01/02/JNI之①参数类型与Java参数类型对比/</id>
    <published>2017-01-02T07:32:11.000Z</published>
    <updated>2017-06-18T13:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul>
<li><p>Java中的返回值void和JNI中的void完全对应（仅仅一个）</p>
</li>
<li><p>Java中的基本数据类型（byte ,short ,int,long,float,double ,boolean,char－8种）在JNI中对应的数据类型只要在前面加上j就可以了（jbyte ,jshort ,jint,jlong,jfloat,jdouble ,jboolean,jchar）</p>
</li>
<li><p>Java中的对象，包括类库中定义的类、接口以及自定义类接口，都对应于JNI中的jobject</p>
</li>
<li><p>Java中的基本数据类型对应的数组对应于JNI中的j<type>Array类型（type就是8中基本数据类型）</type></p>
</li>
<li><p>Java中对象的数组对应于JNI中的jobjectArray类型</p>
</li>
</ul>
<h1 id="基本数据类型映射图"><a href="#基本数据类型映射图" class="headerlink" title="基本数据类型映射图"></a>基本数据类型映射图</h1><p><img src="http://hi.csdn.net/attachment/201111/10/0_13209061602sLG.gif" alt="ALT TEXT"></p>
<h1 id="引用数据类型的映射图"><a href="#引用数据类型的映射图" class="headerlink" title="引用数据类型的映射图"></a>引用数据类型的映射图</h1><p><img src="http://hi.csdn.net/attachment/201111/10/0_1320906175mxw4.gif" alt="ALT TEXT"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java中的返回值void和JNI中的void完全对应（仅仅一个）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java中的基本数据
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/categories/Android/NDK/"/>
    
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>NDK开发①开发流程</title>
    <link href="http://liuguoquan727.github.io/2017/01/01/NDK%E5%BC%80%E5%8F%91%E2%91%A0%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://liuguoquan727.github.io/2017/01/01/NDK开发①开发流程/</id>
    <published>2017-01-01T07:31:57.000Z</published>
    <updated>2017-01-04T07:51:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java编写native方法"><a href="#Java编写native方法" class="headerlink" title="Java编写native方法"></a>Java编写native方法</h1><p>新建JniUtil类如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniUtil</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 回调接口</div><div class="line">	 * <span class="doctag">@author</span> jimi098</div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRecFrameListener</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRecFrameListener</span><span class="params">(String result)</span></span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> IRecFrameListener mListener;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		</div><div class="line">		System.loadLibrary(<span class="string">"test"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnRecFrameListener</span><span class="params">(IRecFrameListener listener)</span> </span>&#123;</div><div class="line">		</div><div class="line">		mListener = listener;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 供jni调用的java方法</div><div class="line">	 * <span class="doctag">@param</span> result</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRecFrame</span><span class="params">(<span class="keyword">int</span> result)</span> </span>&#123;</div><div class="line">		mListener.onRecFrameListener(String.valueOf(result));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//java本地方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getString</span><span class="params">(String input)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="生成-h头文件"><a href="#生成-h头文件" class="headerlink" title="生成.h头文件"></a>生成.h头文件</h1><p>编译JniUtil类，生成JniUtil.class文件，然后在cmd中切换目录至android工程的src文件夹路径，运行<code>javah -jni com.example.demo.JniUtil</code>命令即可生成.h头文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#include &lt;jni.h&gt;</div><div class="line">#include &lt;android/log.h&gt;</div><div class="line"></div><div class="line">//logcat日志</div><div class="line">#define  LOG_TAG    "Test"</div><div class="line">#define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)</div><div class="line">#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)</div><div class="line">/* Header for class com_example_demo_JniUtil */</div><div class="line"></div><div class="line">#ifndef _Included_com_example_demo_JniUtil</div><div class="line">#define _Included_com_example_demo_JniUtil</div><div class="line">#ifdef __cplusplus</div><div class="line">extern "C" &#123;</div><div class="line">#endif</div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    init</div><div class="line"> * Signature: ()I</div><div class="line"> */</div><div class="line">JNIEXPORT jint JNICALL Java_com_example_demo_JniUtil_init</div><div class="line">  (JNIEnv *, jobject);</div><div class="line"></div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    add</div><div class="line"> * Signature: (II)I</div><div class="line"> */</div><div class="line">JNIEXPORT jint JNICALL Java_com_example_demo_JniUtil_add</div><div class="line">  (JNIEnv *, jobject, jint, jint);</div><div class="line"></div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    getString</div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</div><div class="line"> */</div><div class="line">JNIEXPORT jstring JNICALL Java_com_example_demo_JniUtil_getString</div><div class="line">  (JNIEnv *, jobject, jstring);</div><div class="line"></div><div class="line">#ifdef __cplusplus</div><div class="line">&#125;</div><div class="line">#endif</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h1 id="实现jni"><a href="#实现jni" class="headerlink" title="实现jni"></a>实现jni</h1><p>新建jni文件夹，实现本地java方法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#include&lt;jniutil.h&gt;</div><div class="line"></div><div class="line">jobject mObject;</div><div class="line"></div><div class="line"></div><div class="line">JNIEXPORT jint JNICALL Java_com_example_demo_JniUtil_init(JNIEnv *env,</div><div class="line">		jobject obj) &#123;</div><div class="line"></div><div class="line">	//获取全局对象</div><div class="line">	mObject = (*env)-&gt;NewGlobalRef(env, obj);</div><div class="line"></div><div class="line">	jmethodID methodID;</div><div class="line">	jclass mClass;</div><div class="line"></div><div class="line">	//查找指定名称类</div><div class="line">	mClass = (*env)-&gt;GetObjectClass(env, mObject);;</div><div class="line"></div><div class="line">	//获取方法ID</div><div class="line">	methodID = (*env)-&gt;GetMethodID(env,mClass,"onRecFrame","(I)V");</div><div class="line"></div><div class="line">	//调用上层java方法</div><div class="line">	(*env)-&gt;CallVoidMethod(env,obj,methodID,89);</div><div class="line"></div><div class="line">	return 5;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    add</div><div class="line"> * Signature: (II)I</div><div class="line"> */</div><div class="line">JNIEXPORT jint JNICALL Java_com_example_demo_JniUtil_add(JNIEnv *env,</div><div class="line">		jobject obj, jint x, jint y) &#123;</div><div class="line"></div><div class="line">	return x + y;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    getString</div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</div><div class="line"> */</div><div class="line">JNIEXPORT jstring JNICALL Java_com_example_demo_JniUtil_getString(JNIEnv *env,</div><div class="line">		jobject obj, jstring result) &#123;</div><div class="line"></div><div class="line">	return result;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="编写mk文件"><a href="#编写mk文件" class="headerlink" title="编写mk文件"></a>编写mk文件</h1><h2 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h2><p>指定编译规则</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH <span class="symbol">:</span>= <span class="variable">$(</span>call my-dir)</div><div class="line"></div><div class="line"><span class="keyword">include</span> <span class="variable">$(</span>CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE    <span class="symbol">:</span>= test</div><div class="line">LOCAL_SRC_FILES <span class="symbol">:</span>= test.c</div><div class="line"></div><div class="line">LOCAL_LDLIBS    <span class="symbol">:</span>= -llog</div><div class="line"><span class="keyword">include</span> <span class="variable">$(</span>BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<h2 id="Application-mk"><a href="#Application-mk" class="headerlink" title="Application.mk"></a>Application.mk</h2><p>指定编译平台</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">APP_ABI := armeabi armeabi-v7a</div><div class="line">APP_PLATFORM := android<span class="number">-22</span></div><div class="line">APP_STL:=gnustl_static</div><div class="line">APP_CPPFLAGS:=-frtti -fexceptions</div></pre></td></tr></table></figure>
<h1 id="配置NDK执行编译"><a href="#配置NDK执行编译" class="headerlink" title="配置NDK执行编译"></a>配置NDK执行编译</h1><p>右击工程–》Properties–》Builders–》New–》选择Program–》Main–》Location：选择ndk-build.cmd命令路径–》Working Directory：选择工程路径–》Refresh–》Build Options，配置完成后即可自动编译，不需要安装cygwin linux模拟环境</p>
<h1 id="应用jni"><a href="#应用jni" class="headerlink" title="应用jni"></a>应用jni</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>, <span class="title">IRecFrameListener</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Button mButton;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> JniUtil mJniUtil;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        mButton = (Button) findViewById(R.id.btn_click);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mJniUtil = <span class="keyword">new</span> JniUtil();</div><div class="line">        mJniUtil.setOnRecFrameListener(<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"init: "</span> + mJniUtil.init());</div><div class="line">		System.out.println(<span class="string">"sum: "</span>+ mJniUtil.add(<span class="number">1</span>, <span class="number">2</span>));</div><div class="line">		System.out.println(<span class="string">"getString: "</span> + mJniUtil.getString(<span class="string">"wert"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 回调，由jni方法返回数据</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRecFrameListener</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(result);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Android-Studio-2-2-开发NDK"><a href="#Android-Studio-2-2-开发NDK" class="headerlink" title="Android Studio 2.2 开发NDK"></a>Android Studio 2.2 开发NDK</h1><p><a href="http://www.jianshu.com/p/f1b8b97d2ef8" target="_blank" rel="external">NDK开发基础①使用Android Studio编写NDK</a></p>
<h2 id="Gradle配置NDK"><a href="#Gradle配置NDK" class="headerlink" title="Gradle配置NDK"></a>Gradle配置NDK</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.1"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.michael.lplayer"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">        externalNativeBuild &#123;</div><div class="line">            cmake &#123;</div><div class="line">                cppFlags <span class="string">""</span></div><div class="line">                arguments <span class="string">'-DANDROID_TOOLCHAIN=clang'</span></div><div class="line">                abiFilters <span class="string">"armeabi-v7a"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    externalNativeBuild &#123;</div><div class="line">        cmake &#123;</div><div class="line">            path <span class="string">"CMakeLists.txt"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //加载外部so库</div><div class="line">    sourceSets.main &#123;</div><div class="line">        jniLibs.srcDirs = [<span class="string">'libs'</span>]</div><div class="line">        jni.srcDirs = []</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt-配置"><a href="#CMakeLists-txt-配置" class="headerlink" title="CMakeLists.txt 配置"></a>CMakeLists.txt 配置</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"># <span class="keyword">Sets</span> the <span class="comment">minimum version of CMake required to build the native</span></div><div class="line"># library. You <span class="comment">should either keep the default value or only pass a</span></div><div class="line"># value <span class="comment">of 3.4.0 or lower.</span></div><div class="line"></div><div class="line">cmake_minimum_required(VERSION <span class="comment">3.4.1)</span></div><div class="line"></div><div class="line">find_library( # <span class="keyword">Sets</span> <span class="comment">the name of the path variable.</span></div><div class="line">              log-lib</div><div class="line"></div><div class="line">              # Specifies <span class="comment">the name of the NDK library that</span></div><div class="line">              # you <span class="comment">want CMake to locate.</span></div><div class="line">              log <span class="comment">)</span></div><div class="line"></div><div class="line"><span class="keyword">set</span>(distribution_DIR <span class="comment">$&#123;CMAKE_SOURCE_DIR&#125;</span>/../<span class="comment">..</span>/../<span class="comment">..</span>/libs)</div><div class="line">include_directories(libs/<span class="comment">include)</span></div><div class="line"></div><div class="line">add_library( avutil-55</div><div class="line">             SHARED</div><div class="line">             IMPORTED <span class="comment">)</span></div><div class="line">set_target_properties( avutil-55</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libavutil-55.so <span class="comment">)</span></div><div class="line"></div><div class="line">add_library( swresample-2</div><div class="line">             SHARED</div><div class="line">             IMPORTED <span class="comment">)</span></div><div class="line">set_target_properties( swresample-2</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libswresample-2.so <span class="comment">)</span></div><div class="line">add_library( avcodec-57</div><div class="line">             SHARED</div><div class="line">             IMPORTED <span class="comment">)</span></div><div class="line">set_target_properties( avcodec-57</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libavcodec-57.so <span class="comment">)</span></div><div class="line">add_library( avfilter-6</div><div class="line">             SHARED</div><div class="line">             IMPORTED)</div><div class="line">set_target_properties( avfilter-6</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libavfilter-6.so <span class="comment">)</span></div><div class="line">add_library( swscale-4</div><div class="line">             SHARED</div><div class="line">             IMPORTED)</div><div class="line">set_target_properties( swscale-4</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libswscale-4.so <span class="comment">)</span></div><div class="line">add_library( avformat-57</div><div class="line">             SHARED</div><div class="line">             IMPORTED)</div><div class="line">set_target_properties( avformat-57</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libavformat-57.so <span class="comment">)</span></div><div class="line"></div><div class="line">#<span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="comment">"$&#123;CMAKE_CXX_FLAGS&#125; -std=gnu++11"</span><span class="comment">)</span></div><div class="line"></div><div class="line">add_library( ffmpeg</div><div class="line">             SHARED</div><div class="line">             src/main/cpp/ffmpeg_decode.c )</div><div class="line"></div><div class="line">#target_include_directories(ffmpeg PRIVATE libs/include)</div><div class="line"></div><div class="line">target_link_libraries( ffmpeg <span class="comment">avutil-55 swresample-2  avcodec-57 avfilter-6 swscale-4 avformat-57</span></div><div class="line">                       $&#123;log-lib&#125; )</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java编写native方法&quot;&gt;&lt;a href=&quot;#Java编写native方法&quot; class=&quot;headerlink&quot; title=&quot;Java编写native方法&quot;&gt;&lt;/a&gt;Java编写native方法&lt;/h1&gt;&lt;p&gt;新建JniUtil类如下:&lt;/p&gt;
&lt;fig
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/categories/Android/NDK/"/>
    
    
      <category term="NDK" scheme="http://liuguoquan727.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之08PopoverView</title>
    <link href="http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B08PopoverView/"/>
    <id>http://liuguoquan727.github.io/2016/11/25/iOS开发之08PopoverView/</id>
    <published>2016-11-25T10:46:33.000Z</published>
    <updated>2016-11-25T12:37:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>PopoverView是一种临时的视图，以漂浮的形式出现在视图表面，称为浮动层。</p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="PopoverPresentationController"><a href="#PopoverPresentationController" class="headerlink" title="PopoverPresentationController"></a>PopoverPresentationController</h2><ul>
<li>barButtonItem：指定一个UIBarButtonItem类型按钮作为锚点</li>
<li>sourceView：指定一个普视图作为锚点</li>
<li>sourceRect:指定一个矩形区域作为锚点</li>
<li>permittedArrowDirection：指定锚点箭头的方向（up,down.lwft,right,any,unkown)</li>
</ul>
<h2 id="UIPopoverPresentationControllerDelegate"><a href="#UIPopoverPresentationControllerDelegate" class="headerlink" title="UIPopoverPresentationControllerDelegate"></a>UIPopoverPresentationControllerDelegate</h2><ul>
<li>popoverPresentationControllerShouldDismissPopover:返回true可以消失，false不可消失</li>
<li>popoverPresentationControllerDidDismissPopover：销毁时调用</li>
<li>func prepareForPopoverPresentation(_ popoverPresentationController: UIPopoverPresentationController)：显示时调用</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>创建iOS工程</li>
<li>拖入一个Button到界面中心，并设置点击事件，点击按钮室弹出popover view</li>
<li>代码实现</li>
</ol>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  PopoverViewSample</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/17.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIPopoverPresentationControllerDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mBtn: <span class="type">UIButton</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//作为popover View</span></div><div class="line">        <span class="keyword">let</span> controller = <span class="type">SelectViewController</span>();</div><div class="line">        <span class="comment">//设置为popover视图</span></div><div class="line">        controller.modalPresentationStyle = .popover</div><div class="line">        <span class="comment">//视图动画</span></div><div class="line">        controller.modalTransitionStyle = .crossDissolve</div><div class="line">        controller.preferredContentSize = <span class="type">CGSize</span>(width: <span class="number">300</span>, height: <span class="number">100</span>)</div><div class="line"></div><div class="line">        <span class="keyword">let</span> popController = controller.popoverPresentationController</div><div class="line">        popController?.sourceView = mBtn</div><div class="line">        popController?.sourceRect = mBtn.bounds</div><div class="line">        popController?.delegate = <span class="keyword">self</span></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.present(controller, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">adaptivePresentationStyle</span><span class="params">(<span class="keyword">for</span> controller: UIPresentationController)</span></span> -&gt; <span class="type">UIModalPresentationStyle</span> &#123;</div><div class="line">        <span class="comment">//popover样式</span></div><div class="line">        <span class="keyword">return</span> .<span class="keyword">none</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">prepareForPopoverPresentation</span><span class="params">(<span class="number">_</span> popoverPresentationController: UIPopoverPresentationController)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"show"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">popoverPresentationControllerDidDismissPopover</span><span class="params">(<span class="number">_</span> popoverPresentationController: UIPopoverPresentationController)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"hide"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">popoverPresentationControllerShouldDismissPopover</span><span class="params">(<span class="number">_</span> popoverPresentationController: UIPopoverPresentationController)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  SelectViewController.swift</span></div><div class="line"><span class="comment">//  PopoverViewSample</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/17.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> label1:<span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">var</span> label2:<span class="type">UILabel</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.view.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">200</span>, height: <span class="number">500</span>)</div><div class="line"><span class="comment">//        label1 = UILabel(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 200))</span></div><div class="line"><span class="comment">//        label2 = UILabel(frame: CGRect(x: 0, y: 300, width: self.view.frame.width, height: 200))</span></div><div class="line"><span class="comment">//        self.view.addSubview(label1)</span></div><div class="line"><span class="comment">//        self.view.addSubview(label2)</span></div><div class="line">        <span class="keyword">self</span>.view.backgroundColor = <span class="type">UIColor</span>.blue</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="http://oeqfywnzb.bkt.clouddn.com/popover-view.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PopoverView是一种临时的视图，以漂浮的形式出现在视图表面，称为浮动层。&lt;/p&gt;
&lt;h1 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h1&gt;&lt;h2 id=&quot;PopoverPresen
    
    </summary>
    
      <category term="ios" scheme="http://liuguoquan727.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="http://liuguoquan727.github.io/tags/ios/"/>
    
      <category term="swift" scheme="http://liuguoquan727.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="http://liuguoquan727.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之07视图控制器与导航模式</title>
    <link href="http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B07%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%8E%E5%AF%BC%E8%88%AA%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liuguoquan727.github.io/2016/11/25/iOS开发之07视图控制器与导航模式/</id>
    <published>2016-11-25T10:46:06.000Z</published>
    <updated>2016-11-25T12:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模态视图"><a href="#模态视图" class="headerlink" title="模态视图"></a>模态视图</h1><p>在导航过程中，有时候需要放弃主要任务而做其他次要任务，然后在返回到次要任务，这个次要任务就是在模态视图中完成的，如注册中主要任务是登录后进入主界面，如果用户没有注册，就要先去注册，注册是次要任务，当用户注册完成后，它会关闭注册视图，回到登录界面继续进行主要任务。</p>
<p>默认情况下，模态视图是从屏幕下方滑出来的。</p>
<p>负责控制器模态视图的控制器称为模态视图控制器，它并不是一个专门的类，它可以是前面提到的控制器的子类。负责主要任务视图的控制器称为主视图控制器。在UICOntrollerView中，主要有如下两个方法：</p>
<ul>
<li>-present():呈现视图</li>
<li>-dismiss()：关闭视图</li>
</ul>
<p>在呈现模态视图时有两种方式：一是通过使用UIViewController的present方法实现；二是通过故事板的“过渡”（Segue）实现。</p>
<p>下面我们通过登录案例来介绍模态视图</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程，将当前控制器嵌入到一个导航控制器中，具体步骤是：在故事板中选择View Controller，然后点击Xcode菜单栏Editor-Embed In-Navigation Controller菜单就会自动创建一个导航视图</li>
<li>点击导航栏，将导航栏的标题设为登录，然后从对象库中拖入Lable、TextField、Button等控件</li>
<li>接下来设计第二个界面，先从对象库中拖入一个View Controller到设计界面中，然后参考步骤1将该视图控制器嵌入到导航控制器中，修改该导航栏标题为注册，然后从对象库中拖入两个Bar Button Item到导航栏两边，分别设置identifier属性为Cancel和Save</li>
<li>接下来需要在登录场景和注册场景创建一个过渡，按住control键，从登录界面的注册按钮拖鼠标到注册导航控制器，然后松开鼠标，在弹出的视图框中选择Present Modally菜单；它是模态类型的过渡</li>
<li>最后，添加注册控制器类，创建一个类RegisterViewController集成UIViewController，然后回到故事板中将注册视图的Class选择为RegisterViewController</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>ViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ModalViewSample</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/9.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mUserName: <span class="type">UITextField</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// 注册消息</span></div><div class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(<span class="keyword">self</span>, selector: #selector(<span class="keyword">self</span>.register(<span class="number">_</span> :)), name: <span class="type">NSNotification</span>.<span class="type">Name</span>(rawValue: <span class="string">"RegisterCompletion"</span>), object: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.removeObserver(<span class="keyword">self</span>, name: <span class="type">NSNotification</span>.<span class="type">Name</span>.<span class="keyword">init</span>(rawValue: <span class="string">"RegisterCompletion"</span>), object: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(<span class="number">_</span> notification : Notification)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> text = notification.userInfo?[<span class="string">"username"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        mUserName.text = text!</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"%@"</span>,text!)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RegisterViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  RegisterViewController.swift</span></div><div class="line"><span class="comment">//  ModalViewSample</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/9.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mName: <span class="type">UITextField</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> userInfo = [<span class="string">"username"</span>:<span class="keyword">self</span>.mName.text!]</div><div class="line">        <span class="comment">//发送消息</span></div><div class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(name: <span class="type">NSNotification</span>.<span class="type">Name</span>.<span class="keyword">init</span>(rawValue: <span class="string">"RegisterCompletion"</span>), object: <span class="literal">nil</span>, userInfo: userInfo)</div><div class="line">        <span class="keyword">self</span>.dismiss(animated: <span class="literal">true</span>, completion: &#123;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> save: <span class="type">UIBarButtonItem</span>!</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.dismiss(animated: <span class="literal">true</span>, completion: &#123;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/%E6%A8%A1%E6%80%81%E8%AF%95%E5%9B%BEstoryboard.jpg" alt=""></p>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E7%99%BB%E5%BD%95%E5%AF%BC%E8%88%AA.gif" alt=""></p>
<h1 id="分屏导航"><a href="#分屏导航" class="headerlink" title="分屏导航"></a>分屏导航</h1><p>基于分屏导航是平铺导航的主要实现方式，涉及的主要控件有分屏控件UIPageControll和屏幕滚动视图UIScrollView,一般不超过10屏</p>
<h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建iOS工程，从对象库中拖入UIPageControll和UIScrollView到故事板中，并将其放到合适的位置，UIPageControll放在靠底部，UIScrollView全屏显示，将视图的背景设为黑色</li>
<li>选中UIScrollView的属性检查器，设置不显示Scroll View的Indicator，同时选择滚动Scrolling Enable和分屏Paging Enable。分屏属性是Scroll View每次滑动时翻一屏</li>
<li>选择Page Controll的属性检查器，设置Pages中的of pages总屏数为3，Current当前位置为0，并修改其宽度为300，它的高度是不能修改的。</li>
<li>最后为这两个控件定义输出口并连接注册到ViewController类中，为Page Controll控件定义响应屏幕变化事件的方法。-changPage</li>
</ol>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  PageControlNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/10.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIScrollViewDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mScrollView: <span class="type">UIScrollView</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mPageControl: <span class="type">UIPageControl</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> mImage1: <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">var</span> mImage2: <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">var</span> mImage3: <span class="type">UIImageView</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">self</span>.mScrollView.delegate = <span class="keyword">self</span></div><div class="line">        <span class="keyword">self</span>.mScrollView.contentSize = <span class="type">CGSize</span>(width: <span class="keyword">self</span>.view.frame.size.width * <span class="number">3</span>, height: <span class="keyword">self</span>.mScrollView.frame.size.height)</div><div class="line">        <span class="keyword">self</span>.mScrollView.frame = <span class="keyword">self</span>.view.frame</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mImage1 = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="keyword">self</span>.view.frame.size.width, height: <span class="number">480</span>))</div><div class="line">        <span class="keyword">self</span>.mImage1.image = <span class="type">UIImage</span>(named: <span class="string">"达芬奇-蒙娜丽莎"</span>)</div><div class="line">        <span class="keyword">self</span>.mScrollView.addSubview(mImage1)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mImage2 = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="keyword">self</span>.view.frame.size.width, y: <span class="number">0</span>, width: <span class="keyword">self</span>.view.frame.size.width, height: <span class="number">480</span>))</div><div class="line">        <span class="keyword">self</span>.mImage2.image = <span class="type">UIImage</span>(named: <span class="string">"罗丹-思想者"</span>)</div><div class="line">        <span class="keyword">self</span>.mScrollView.addSubview(mImage2)</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mImage3 = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="keyword">self</span>.view.frame.size.width * <span class="number">2</span>, y: <span class="number">0</span>, width: <span class="keyword">self</span>.view.frame.size.width, height: <span class="number">480</span>))</div><div class="line">        <span class="keyword">self</span>.mImage3.image = <span class="type">UIImage</span>(named: <span class="string">"保罗克利-肖像"</span>)</div><div class="line">        <span class="keyword">self</span>.mScrollView.addSubview(mImage3)</div><div class="line"></div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//UIPageControll事件处理</span></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">changePage</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">0.3</span>, animations: &#123;</div><div class="line">            <span class="keyword">let</span> whichPage = <span class="keyword">self</span>.mPageControl.currentPage</div><div class="line">            <span class="comment">//设置内容视图坐标原点与屏幕滚动视图坐原点的偏移量</span></div><div class="line">            <span class="keyword">self</span>.mScrollView.contentOffset = <span class="type">CGPoint</span>(x: <span class="number">320</span> * whichPage, y: <span class="number">0</span>)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//屏幕滚动视图事件处理方法å</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> offset = scrollView.contentOffset</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mPageControl.currentPage = <span class="type">Int</span>(offset.x) / <span class="number">320</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E5%88%86%E5%B1%8F%E5%AF%BC%E8%88%AA.gif" alt=""></p>
<h1 id="分页控制器"><a href="#分页控制器" class="headerlink" title="分页控制器"></a>分页控制器</h1><p>在iOS5以后，我们可以使用分页控制器UIPageViewController构建类似于电子书效果的应用。</p>
<p>分页控制器需要放置在一个父视图控制器中，在分页控制器下面还要有子视图控制器，每个子视图控制器对应一个页面。</p>
<p>UIPageViewController没有对应的视图，我们需要使用代码来实现；需要在UIPageViewController所在的控制器实现UIPageViewControllerDelegate和UIPageViewControllerDataSource协议，UIPageViewControllerDataSource数据源协议必须要实现的方法有以下两个：</p>
<ul>
<li><code>func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController)</code></li>
<li><code>func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController)</code></li>
</ul>
<p>UIPageViewControllerDelegate委托协议中一般实现的方法是：</p>
<ul>
<li><code>func pageViewController(_ pageViewController: UIPageViewController, spineLocationFor orientation: UIInterfaceOrientation)</code> </li>
<li><code>func pageViewController(_ pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool)</code></li>
</ul>
<h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程</li>
<li>代码实现UIPageViewController</li>
</ol>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  PageNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/10.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DirectionFroward</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">case</span> <span class="type">Before</span> = <span class="number">1</span> <span class="comment">//向前</span></div><div class="line">    <span class="keyword">case</span> <span class="type">After</span> = <span class="number">2</span> <span class="comment">//向后</span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIPageViewControllerDelegate</span>,<span class="title">UIPageViewControllerDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//当前Page的索引</span></div><div class="line">    <span class="keyword">var</span> mPageIndex = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> direct = <span class="type">DirectionFroward</span>.<span class="type">After</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> mPageViewController : <span class="type">UIPageViewController</span>!</div><div class="line">    <span class="keyword">var</span> mViewControllers : [<span class="type">UIViewController</span>]!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> pageViewController1 = <span class="type">UIViewController</span>()</div><div class="line">        <span class="keyword">let</span> pageViewController2 = <span class="type">UIViewController</span>()</div><div class="line">        <span class="keyword">let</span> pageViewController3 = <span class="type">UIViewController</span>()</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mViewControllers = [pageViewController1,pageViewController2,pageViewController3]</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> mImage1 = <span class="type">UIImageView</span>(frame: <span class="keyword">self</span>.view.frame)</div><div class="line">        mImage1.image = <span class="type">UIImage</span>(named: <span class="string">"达芬奇-蒙娜丽莎"</span>)</div><div class="line">        pageViewController1.view.addSubview(mImage1)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> mImage2 = <span class="type">UIImageView</span>(frame: <span class="keyword">self</span>.view.frame)</div><div class="line">        mImage2.image = <span class="type">UIImage</span>(named: <span class="string">"罗丹-思想者"</span>)</div><div class="line">        pageViewController2.view.addSubview(mImage2)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">let</span> mImage3 = <span class="type">UIImageView</span>(frame: <span class="keyword">self</span>.view.frame)</div><div class="line">        mImage3.image = <span class="type">UIImage</span>(named: <span class="string">"保罗克利-肖像"</span>)</div><div class="line">        pageViewController3.view.addSubview(mImage3)</div><div class="line">        </div><div class="line">        <span class="comment">//transitionStyle: pageCurl表示翻书效果样式 scroll 滑屏效果样式</span></div><div class="line">        <span class="comment">//navigationOrientation 水平和垂直方向</span></div><div class="line">        <span class="keyword">self</span>.mPageViewController = <span class="type">UIPageViewController</span>(transitionStyle: .pageCurl, navigationOrientation: .horizontal, options: <span class="literal">nil</span>)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.mPageViewController.delegate = <span class="keyword">self</span></div><div class="line">        <span class="keyword">self</span>.mPageViewController.dataSource = <span class="keyword">self</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置首页</span></div><div class="line">        <span class="comment">//direction forward向前 reverse向后</span></div><div class="line">        <span class="keyword">self</span>.mPageViewController.setViewControllers([pageViewController1], direction: .forward, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.mPageViewController.view)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//DataSource协议</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageViewController</span><span class="params">(<span class="number">_</span> pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"向前翻"</span>)</div><div class="line">        mPageIndex -= <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> mPageIndex &lt; <span class="number">0</span> &#123;</div><div class="line">            mPageIndex = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        direct = .<span class="type">Before</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.mViewControllers[mPageIndex]</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageViewController</span><span class="params">(<span class="number">_</span> pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"向后翻"</span>)</div><div class="line"></div><div class="line">        mPageIndex += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> mPageIndex &gt; <span class="number">2</span> &#123;</div><div class="line">            mPageIndex = <span class="number">2</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        direct = .<span class="type">After</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.mViewControllers[mPageIndex]</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//Delegate协议</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageViewController</span><span class="params">(<span class="number">_</span> pageViewController: UIPageViewController, spineLocationFor orientation: UIInterfaceOrientation)</span></span> -&gt; <span class="type">UIPageViewControllerSpineLocation</span> &#123;</div><div class="line">        <span class="keyword">self</span>.mPageViewController.isDoubleSided = <span class="literal">false</span></div><div class="line">        <span class="comment">//min和max 首页显示一个视图  mid首页显示两个视图</span></div><div class="line">        <span class="keyword">return</span> .<span class="built_in">min</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageViewController</span><span class="params">(<span class="number">_</span> pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//翻页未成功</span></div><div class="line">        <span class="keyword">if</span> completed == <span class="literal">false</span> &#123;</div><div class="line">            <span class="keyword">if</span> direct == .<span class="type">After</span> &#123;</div><div class="line">                mPageIndex -= <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> direct == .<span class="type">Before</span> &#123;</div><div class="line">                mPageIndex += <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E5%88%86%E9%A1%B5%E6%8E%A7%E5%88%B6%E5%99%A8.gif" alt=""></p>
<h1 id="标签导航"><a href="#标签导航" class="headerlink" title="标签导航"></a>标签导航</h1><p>使用标签栏时有一定的指导原则：标签栏位于屏幕下方，占有49个像素屏幕空间，有时可以隐藏起来；标签栏中的标签不能超过5个，如果超过5个则最后一个显示为更多，点击更多标签会出现更多的列表。</p>
<h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h2><p>在开发具体应用的时候，标签导航的各个标签分别代表一个功能模块，各功能模块之间相对独立。</p>
<ol>
<li>创建一个iOS工程模板Tabbed Application应用，默认创建两个标签</li>
<li>从对象库中拖入一个ViewController到故事板中</li>
<li>添加ViewController和Tab Controller Scene的连线，具体操作是：按住control键从Tab Controller Scene拖曳鼠标到ViewController，释放鼠标，从弹出窗口中选择view controllers项即可</li>
<li>设置三个场景的标题</li>
<li>分别为三个场景创建三个视图类</li>
</ol>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%88%AA%E6%95%85%E4%BA%8B%E7%89%88.jpg" alt=""></p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  HeiViewController.swift</span></div><div class="line"><span class="comment">//  TabNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeiViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    // MARK: - Navigation</div><div class="line"></div><div class="line">    // In a storyboard-based application, you will often want to do a little preparation before navigation</div><div class="line">    override func prepare(for segue: UIStoryboardSegue, sender: Any?) &#123;</div><div class="line">        // Get the new view controller using segue.destinationViewController.</div><div class="line">        // Pass the selected object to the new view controller.</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  JiViewController.swift</span></div><div class="line"><span class="comment">//  TabNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JiViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    // MARK: - Navigation</div><div class="line"></div><div class="line">    // In a storyboard-based application, you will often want to do a little preparation before navigation</div><div class="line">    override func prepare(for segue: UIStoryboardSegue, sender: Any?) &#123;</div><div class="line">        // Get the new view controller using segue.destinationViewController.</div><div class="line">        // Pass the selected object to the new view controller.</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  LiaoViewController.swift</span></div><div class="line"><span class="comment">//  TabNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiaoViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    // MARK: - Navigation</div><div class="line"></div><div class="line">    // In a storyboard-based application, you will often want to do a little preparation before navigation</div><div class="line">    override func prepare(for segue: UIStoryboardSegue, sender: Any?) &#123;</div><div class="line">        // Get the new view controller using segue.destinationViewController.</div><div class="line">        // Pass the selected object to the new view controller.</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图-3"><a href="#效果图-3" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%88%AA.gif" alt=""></p>
<h1 id="树形导航"><a href="#树形导航" class="headerlink" title="树形导航"></a>树形导航</h1><p>树形导航模式是将导航控制器UINavigationController与表视图结使用，主要用于构建从属关系的导航。下面我们创建一个三级视图的树形导航示例。</p>
<h2 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建iOS工程，使用UINavigationController创建以及表视图</li>
<li>创建二级表视图CitiesViewController<ul>
<li>从对象库中拖入一个Table View Controller到对象库中作为二级视图控制器</li>
<li>按住control键，从上一个Root View Controller的单元格中拖动鼠标到当前添加的Table View Controller中，释放鼠标，在弹出窗口中选择Show选项</li>
<li>选择连接线中的过渡Segue，打开其属性检查器，然后在Indentifier属性中输入ShowCities</li>
</ul>
</li>
<li>创建三级视图DetailViewController<ul>
<li>从对象库中拖入一个View Controller到对象库中作为三级视图控制器</li>
<li>按住control键，从上一个Table View Controller的单元格中拖动鼠标到当前添加的View Controller中，释放鼠标，在弹出窗口中选择Show选项</li>
<li>选择连接线中的过渡Segue，打开其属性检查器，然后在Indentifier属性中输入ShowDetail</li>
</ul>
</li>
<li>设置各级视图的Table View Cell的属性</li>
</ol>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>一级视图</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  TreeNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> dictData:<span class="type">NSDictionary</span>!</div><div class="line">    <span class="keyword">var</span> listData:<span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">self</span>.tableView.delegate = <span class="keyword">self</span></div><div class="line">        <span class="keyword">self</span>.tableView.dataSource = <span class="keyword">self</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"provinces_cities"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.dictData = <span class="type">NSDictionary</span>(contentsOfFile: path!)</div><div class="line">        <span class="keyword">self</span>.listData = <span class="keyword">self</span>.dictData.allKeys <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line">        <span class="keyword">self</span>.title = <span class="string">"省份信息"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listData.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"Custom"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        cell.textLabel?.text = <span class="keyword">self</span>.listData[row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//场景过渡之前的处理 点击表视图的单元格触发</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: Any?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> segue.identifier == <span class="string">"ShowCities"</span> &#123;</div><div class="line">            <span class="keyword">let</span> indexPath = <span class="keyword">self</span>.tableView.indexPathForSelectedRow! <span class="keyword">as</span> <span class="type">IndexPath</span></div><div class="line">            <span class="keyword">let</span> selectedIndex = indexPath.row</div><div class="line">            <span class="comment">//获取要跳转到的视图控制器对象</span></div><div class="line">            <span class="keyword">let</span> controller = segue.destination <span class="keyword">as</span>! <span class="type">CitiesTableViewController</span></div><div class="line">            <span class="keyword">let</span> selectName = <span class="keyword">self</span>.listData[selectedIndex] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            controller.listData = <span class="keyword">self</span>.dictData[selectName] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">            controller.title = selectName</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>二级视图</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  CitiesTableViewController.swift</span></div><div class="line"><span class="comment">//  TreeNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CitiesTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listData:<span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="comment">// #warning Incomplete implementation, return the number of rows</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listData.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CityCell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        <span class="keyword">let</span> dict = <span class="keyword">self</span>.listData[row] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">        cell.textLabel?.text = dict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//场景过渡之前的与处理</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: Any?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> segue.identifier == <span class="string">"ShowDetail"</span> &#123;</div><div class="line">            <span class="keyword">let</span> indexPath = <span class="keyword">self</span>.tableView.indexPathForSelectedRow! <span class="keyword">as</span> <span class="type">IndexPath</span></div><div class="line">            <span class="keyword">let</span> selectIndex = indexPath.row</div><div class="line">            <span class="keyword">let</span> dict = <span class="keyword">self</span>.listData[selectIndex] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">            <span class="comment">//获取要跳转到的视图控制器对象</span></div><div class="line">            <span class="keyword">let</span> controller = segue.destination <span class="keyword">as</span>! <span class="type">DetailViewController</span></div><div class="line">            controller.url = dict[<span class="string">"url"</span>] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            controller.title = dict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>三级视图</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  DetailViewController.swift</span></div><div class="line"><span class="comment">//  TreeNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> WebKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailViewController</span>: <span class="title">UIViewController</span>,<span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> url:<span class="type">String</span>!</div><div class="line">    <span class="keyword">var</span> webView: <span class="type">WKWebView</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="type">NSLog</span>(url)</div><div class="line">        <span class="keyword">self</span>.webView = <span class="type">WKWebView</span>(frame: <span class="keyword">self</span>.view.frame)</div><div class="line">        view.addSubview(webView)</div><div class="line">        webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">        <span class="comment">//let nUrl = URL(string: "https://baike.baidu.com/view/2172.htm")</span></div><div class="line">        <span class="keyword">let</span> mUrl = <span class="type">URL</span>(string: url)</div><div class="line">        <span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: mUrl!)</div><div class="line">        webView.load(request)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"开始加载"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didCommit navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"内容开始返回时回调"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"加载完成"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"加载失败"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图-4"><a href="#效果图-4" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E6%A0%91%E5%BD%A2%E5%AF%BC%E8%88%AA.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模态视图&quot;&gt;&lt;a href=&quot;#模态视图&quot; class=&quot;headerlink&quot; title=&quot;模态视图&quot;&gt;&lt;/a&gt;模态视图&lt;/h1&gt;&lt;p&gt;在导航过程中，有时候需要放弃主要任务而做其他次要任务，然后在返回到次要任务，这个次要任务就是在模态视图中完成的，如注册中主要
    
    </summary>
    
      <category term="ios" scheme="http://liuguoquan727.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="http://liuguoquan727.github.io/tags/ios/"/>
    
      <category term="swift" scheme="http://liuguoquan727.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="http://liuguoquan727.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之06StackView</title>
    <link href="http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B06StackView/"/>
    <id>http://liuguoquan727.github.io/2016/11/25/iOS开发之06StackView/</id>
    <published>2016-11-25T10:45:56.000Z</published>
    <updated>2016-11-25T12:36:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS开发中可以利用StackView嵌套实现比较复杂的界面，比如我们实现三个按钮呈现三角形摆放，可以这样实现，整个界面是一个垂直StackView，它的子视图是Button1和水平StackView，水平StackView的子 视图是Button2和Button3。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>创建一个iOS工程，从对象库中拖入一个Vertical Stack View到设计界面中，然后再从对象库中拖入一个Horizontal Stack View到前一个垂直StackView中。</li>
<li>属性检查器：<ul>
<li>Axis：设置StackView是垂直还是水平的</li>
<li>Spacing：设置子视图之间的距离</li>
<li>Alignment：设置子视图之间的对齐方式</li>
<li>Distribution：设置子视图的尺寸与位置</li>
</ul>
</li>
<li>拖入Button1到Vertical Stack View中，注意要放在Horizontal Stack View的上方，当出现一条横线时松开鼠标；类似的方法拖入Button2和Button3到Horizontal Stack View中</li>
</ol>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="http://oeqfywnzb.bkt.clouddn.com/ios-stackview.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS开发中可以利用StackView嵌套实现比较复杂的界面，比如我们实现三个按钮呈现三角形摆放，可以这样实现，整个界面是一个垂直StackView，它的子视图是Button1和水平StackView，水平StackView的子 视图是Button2和Button3。&lt;/
    
    </summary>
    
      <category term="ios" scheme="http://liuguoquan727.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="http://liuguoquan727.github.io/tags/ios/"/>
    
      <category term="swift" scheme="http://liuguoquan727.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="http://liuguoquan727.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之05常见表视图</title>
    <link href="http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B05%E5%B8%B8%E8%A7%81%E8%A1%A8%E8%A7%86%E5%9B%BE/"/>
    <id>http://liuguoquan727.github.io/2016/11/25/iOS开发之05常见表视图/</id>
    <published>2016-11-25T10:45:39.000Z</published>
    <updated>2016-11-25T12:36:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分节表视图"><a href="#分节表视图" class="headerlink" title="分节表视图"></a>分节表视图</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程</li>
<li>删除storyboard中View Controller Scene 中的View Controller，再从对象库拖入一个Table View Controller到设计界面</li>
<li>打开Table View Controller属性检查器，勾选Is Initial View Controller选项，否则应用启动后是黑屏</li>
<li>将ViewController类的父类由UIViewController改为UITableViewController</li>
<li>打开View Controller的属性选择器在Class列表中选择ViewController</li>
<li>UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  IndexTable</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/31.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> datas: <span class="type">NSDictionary</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> groupNames:<span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"team_dictionary"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.datas = <span class="type">NSDictionary</span>(contentsOfFile: path!)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> tempList = <span class="keyword">self</span>.datas.allKeys <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line">        </div><div class="line">        <span class="comment">//排序</span></div><div class="line">        <span class="keyword">let</span> sortedArray = tempList.sortedArray(comparator: &#123; (obj1, obj2) -&gt; <span class="type">ComparisonResult</span> <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> str1 = obj1 <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            <span class="keyword">let</span> str2 = obj2 <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            <span class="keyword">let</span> ret = str1.compare(str2)</div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">self</span>.groupNames = sortedArray <span class="keyword">as</span> <span class="type">NSArray</span>!</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//组中条目的数量</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">let</span> groupName = <span class="keyword">self</span>.groupNames[section] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> teams = <span class="keyword">self</span>.datas[groupName] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        <span class="keyword">return</span> teams.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"liu"</span>,<span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> section = indexPath.section</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> groupName = <span class="keyword">self</span>.groupNames[section] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> teams = <span class="keyword">self</span>.datas[groupName] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        cell.textLabel?.text = teams[row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//组的数量</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.groupNames.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//组的标题</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">let</span> name = <span class="keyword">self</span>.groupNames[section] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">return</span> name</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//索引的标题</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">sectionIndexTitles</span><span class="params">(<span class="keyword">for</span> tableView: UITableView)</span></span> -&gt; [<span class="type">String</span>]? &#123;</div><div class="line">        <span class="keyword">var</span> titles = [<span class="type">String</span>]()</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="keyword">self</span>.groupNames &#123;</div><div class="line">            <span class="keyword">let</span> title = item <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            titles.append(title.substring(to: title.index(title.startIndex, offsetBy: <span class="number">1</span>)))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> titles</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//点击事件</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> section = indexPath.section</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> groupName = <span class="keyword">self</span>.groupNames[section] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> teams = <span class="keyword">self</span>.datas[groupName] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        <span class="built_in">print</span>(groupName)</div><div class="line">        <span class="built_in">print</span>(teams[row])</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-group.jpg" alt=""></p>
<h1 id="静态表视图"><a href="#静态表视图" class="headerlink" title="静态表视图"></a>静态表视图</h1><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程，使用Table View Controller作为表视图控制器</li>
<li>选择Table View，打开属性检查器，从Content下拉列表中选择Static Cells，将Section的值为设为3.，从Style下拉列表中选择Grouped</li>
<li>选择第一个Table View Section，将Rows值设为2，即该节中包含两个单元格，分别拖入一个TextField到两个单元格中</li>
<li>选择第二个Table View Section，将Rows值设为1，拖入一个Button到单元格中</li>
<li>选择第二个Table View Section，将Rows值设为1，拖入一个Lable到单元格中</li>
</ol>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  StaticTable</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/2.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mUserName: <span class="type">UITextField</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mPwd: <span class="type">UITextField</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.mUserName.text == <span class="string">"liu"</span> &amp;&amp; <span class="keyword">self</span>.mPwd.text == <span class="string">"123"</span> &#123;</div><div class="line">            <span class="type">NSLog</span>(<span class="string">"login sucess"</span>);</div><div class="line">            mUserName.resignFirstResponder();</div><div class="line">            mPwd.resignFirstResponder();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"Section: %d,Row: %d"</span>,indexPath.section,indexPath.row);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-static.jpg" alt=""></p>
<h1 id="插入和删除单元格"><a href="#插入和删除单元格" class="headerlink" title="插入和删除单元格"></a>插入和删除单元格</h1><h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程</li>
<li>删除storyboard中View Controller Scene 中的View Controller，再从对象库拖入一个Navigation Controller到设计界面，同时也会添加一个Table View Controller到设计界面</li>
<li>打开Table View Controller属性检查器，勾选Is Initial View Controller选项，否则应用启动后是黑屏</li>
<li>将ViewController类的父类由UIViewController改为UITableViewController</li>
<li>打开View Controller的属性选择器在Class列表中选择ViewController</li>
<li>UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</li>
</ol>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  DeleteAddCell</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/2.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> txtField:<span class="type">UITextField</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listTeams: <span class="type">NSMutableArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//设置导航栏</span></div><div class="line">        <span class="keyword">self</span>.navigationItem.rightBarButtonItem = <span class="keyword">self</span>.editButtonItem</div><div class="line">        <span class="keyword">self</span>.navigationItem.title = <span class="string">"单元格插入和删除"</span></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.txtField = <span class="type">UITextField</span>()</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams = <span class="type">NSMutableArray</span>(array: [<span class="string">"黑龙江"</span>,<span class="string">"吉林"</span>,<span class="string">"辽宁"</span>,<span class="string">"北京"</span>])</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//响应视图编辑状态</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setEditing</span><span class="params">(<span class="number">_</span> editing: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setEditing(editing, animated: animated)</div><div class="line">        <span class="keyword">self</span>.tableView.setEditing(editing, animated: <span class="literal">true</span>)</div><div class="line">        <span class="keyword">if</span> editing &#123;</div><div class="line">            <span class="keyword">self</span>.txtField.isHidden = <span class="literal">false</span></div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">self</span>.txtField.isHidden = <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listTeams.<span class="built_in">count</span> + <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> isAddCell = (indexPath.row == <span class="keyword">self</span>.listTeams.<span class="built_in">count</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CustomCell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> !isAddCell &#123;</div><div class="line">            cell.accessoryType = .disclosureIndicator</div><div class="line">            cell.textLabel?.text = <span class="keyword">self</span>.listTeams[indexPath.row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">self</span>.txtField.frame = <span class="type">CGRect</span>(x: <span class="number">40</span>, y: <span class="number">0</span>, width: <span class="number">300</span>, height: cell.frame.size.height)</div><div class="line">            <span class="keyword">self</span>.txtField.borderStyle = .<span class="keyword">none</span></div><div class="line">            <span class="keyword">self</span>.txtField.placeholder = <span class="string">"Add..."</span></div><div class="line">            <span class="keyword">self</span>.txtField.text = <span class="string">""</span></div><div class="line">            cell.addSubview(<span class="keyword">self</span>.txtField)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回编辑样式</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, editingStyleForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span> &#123;</div><div class="line">        <span class="keyword">if</span> indexPath.row == <span class="keyword">self</span>.listTeams.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">return</span> .insert</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> .delete</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//添加删除时调用</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> editingStyle == .delete &#123;</div><div class="line">            <span class="keyword">self</span>.listTeams.removeObject(at: indexPath.row)</div><div class="line">            <span class="keyword">self</span>.tableView.deleteRows(at: [indexPath], with: .fade)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle == .insert &#123;</div><div class="line">            <span class="keyword">self</span>.listTeams.insert(<span class="keyword">self</span>.txtField.text!, at: <span class="keyword">self</span>.listTeams.<span class="built_in">count</span>)</div><div class="line">            <span class="keyword">self</span>.tableView.insertRows(at: [indexPath], with: .fade)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.tableView.reloadData();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-add-delete.gif" alt=""></p>
<h1 id="移动单元格"><a href="#移动单元格" class="headerlink" title="移动单元格"></a>移动单元格</h1><h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1. 创建一个iOS工程</div><div class="line">2. 删除storyboard中<span class="keyword">View</span> Controller Scene 中的<span class="keyword">View</span> Controller，再从对象库拖入一个Navigation Controller到设计界面，同时也会添加一个<span class="keyword">Table</span> <span class="keyword">View</span> Controller到设计界面</div><div class="line">3. 打开<span class="keyword">Table</span> <span class="keyword">View</span> Controller属性检查器，勾选Is Initial <span class="keyword">View</span> Controller选项，否则应用启动后是黑屏</div><div class="line">4. 将ViewController类的父类由UIViewController改为UITableViewController</div><div class="line">5. 打开<span class="keyword">View</span> Controller的属性选择器在<span class="keyword">Class</span>列表中选择ViewController</div><div class="line">6. UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</div></pre></td></tr></table></figure>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  MoveCell</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/2.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listTeams: <span class="type">NSMutableArray</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//设置导航栏</span></div><div class="line">        <span class="keyword">self</span>.navigationItem.rightBarButtonItem = <span class="keyword">self</span>.editButtonItem</div><div class="line">        <span class="keyword">self</span>.navigationItem.title = <span class="string">"单元格移动"</span></div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams = <span class="type">NSMutableArray</span>(array: [<span class="string">"黑龙江"</span>,<span class="string">"吉林"</span>,<span class="string">"辽宁"</span>,<span class="string">"北京"</span>])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//响应视图编辑状态</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setEditing</span><span class="params">(<span class="number">_</span> editing: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setEditing(editing, animated: animated)</div><div class="line">        <span class="keyword">self</span>.tableView.setEditing(editing, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listTeams.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"MoveCell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">            cell.accessoryType = .disclosureIndicator</div><div class="line">            cell.textLabel?.text = <span class="keyword">self</span>.listTeams[indexPath.row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回true表示可以移动</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, canMoveRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//移动单元格时触发此方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> mode = <span class="keyword">self</span>.listTeams[sourceIndexPath.row] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams.removeObject(at: sourceIndexPath.row)</div><div class="line">        <span class="keyword">self</span>.listTeams.insert(mode, at: destinationIndexPath.row)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//编辑的样式</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, editingStyleForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span> &#123;</div><div class="line">            <span class="keyword">return</span> .delete</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> editingStyle == .delete &#123;</div><div class="line">            <span class="keyword">self</span>.listTeams.removeObject(at: indexPath.row)</div><div class="line">            <span class="keyword">self</span>.tableView.deleteRows(at: [indexPath], with: .fade)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle == .insert &#123;</div><div class="line">            <span class="keyword">self</span>.tableView.insertRows(at: [indexPath], with: .fade)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.tableView.reloadData();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-move.gif" alt=""></p>
<h1 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h1><h2 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程</li>
<li>删除storyboard中View Controller Scene 中的View Controller，再从对象库拖入一个Table View Controller到设计界面</li>
<li>打开Table View Controller属性检查器，勾选Is Initial View Controller选项，否则应用启动后是黑屏</li>
<li>将ViewController类的父类由UIViewController改为UITableViewController</li>
<li>打开View Controller的属性选择器在Class列表中选择ViewController</li>
<li>UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</li>
</ol>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  RefreshCell</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/7.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listTeams: <span class="type">NSMutableArray</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//设置导航栏</span></div><div class="line">        <span class="keyword">self</span>.navigationItem.rightBarButtonItem = <span class="keyword">self</span>.editButtonItem</div><div class="line">        <span class="keyword">self</span>.navigationItem.title = <span class="string">"单元格移动"</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rc = <span class="type">UIRefreshControl</span>()</div><div class="line">        rc.attributedTitle = <span class="type">NSAttributedString</span>(string: <span class="string">"下拉刷新"</span>)</div><div class="line">        rc.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">ViewController</span>.refresh), <span class="keyword">for</span>: .valueChanged)</div><div class="line">        <span class="keyword">self</span>.refreshControl = rc</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams = <span class="type">NSMutableArray</span>(array: [<span class="string">"黑龙江"</span>,<span class="string">"吉林"</span>,<span class="string">"辽宁"</span>,<span class="string">"北京"</span>])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">refresh</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"refresh"</span>)</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.refreshControl?.isRefreshing)! &#123;</div><div class="line">            <span class="keyword">self</span>.refreshControl?.attributedTitle = <span class="type">NSAttributedString</span>(string: <span class="string">"加载中"</span>)</div><div class="line">            listTeams.add(<span class="string">"上海"</span>)</div><div class="line">            listTeams.add(<span class="string">"天津"</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">self</span>.refreshControl?.endRefreshing()</div><div class="line">            <span class="keyword">self</span>.refreshControl?.attributedTitle = <span class="type">NSAttributedString</span>(string: <span class="string">"下拉刷新"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">self</span>.tableView.reloadData()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//响应视图编辑状态</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setEditing</span><span class="params">(<span class="number">_</span> editing: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setEditing(editing, animated: animated)</div><div class="line">        <span class="keyword">self</span>.tableView.setEditing(editing, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listTeams.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"RefreshCell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        cell.accessoryType = .disclosureIndicator</div><div class="line">        cell.textLabel?.text = <span class="keyword">self</span>.listTeams[indexPath.row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回true表示可以移动</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, canMoveRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//移动单元格时触发此方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> mode = <span class="keyword">self</span>.listTeams[sourceIndexPath.row] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams.removeObject(at: sourceIndexPath.row)</div><div class="line">        <span class="keyword">self</span>.listTeams.insert(mode, at: destinationIndexPath.row)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//编辑的样式</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, editingStyleForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span> &#123;</div><div class="line">        <span class="keyword">return</span> .delete</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> editingStyle == .delete &#123;</div><div class="line">            <span class="keyword">self</span>.listTeams.removeObject(at: indexPath.row)</div><div class="line">            <span class="keyword">self</span>.tableView.deleteRows(at: [indexPath], with: .fade)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle == .insert &#123;</div><div class="line">            <span class="keyword">self</span>.tableView.insertRows(at: [indexPath], with: .fade)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.tableView.reloadData();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-pullrefresh.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分节表视图&quot;&gt;&lt;a href=&quot;#分节表视图&quot; class=&quot;headerlink&quot; title=&quot;分节表视图&quot;&gt;&lt;/a&gt;分节表视图&lt;/h1&gt;&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步
    
    </summary>
    
      <category term="ios" scheme="http://liuguoquan727.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="http://liuguoquan727.github.io/tags/ios/"/>
    
      <category term="swift" scheme="http://liuguoquan727.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="http://liuguoquan727.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之04表视图</title>
    <link href="http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B04%E8%A1%A8%E8%A7%86%E5%9B%BE/"/>
    <id>http://liuguoquan727.github.io/2016/11/25/iOS开发之04表视图/</id>
    <published>2016-11-25T10:45:30.000Z</published>
    <updated>2016-11-25T12:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="表视图组成"><a href="#表视图组成" class="headerlink" title="表视图组成"></a>表视图组成</h2><p>表视图是iOS开发中最重要的视图，它以列表的形式展示数据。表视图又一下部分组成：</p>
<ul>
<li>表头视图：表视图最上边的视图</li>
<li>表脚视图：表视图最下边的视图</li>
<li>单元格（cell）：表视图中每一行的视图</li>
<li>节(section)：由多个单元格组成，应用于分组列表<ul>
<li>节头</li>
<li>节脚</li>
</ul>
</li>
</ul>
<h2 id="表视图的相关类"><a href="#表视图的相关类" class="headerlink" title="表视图的相关类"></a>表视图的相关类</h2><p>UITableView继承自UIScrollView，且有两个协议：UITableViewDelegate和UITableViewDataSource。此外UITableViewCell类时单元格类，UITableViewController类时UITableView的控制器，UITableViewHeaderFooterView用于为节头和节脚提供视图。</p>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/%E8%A1%A8%E8%A7%86%E5%9B%BE%E7%9B%B8%E5%85%B3%E7%B1%BB.jpg" alt=""></p>
<h2 id="表视图分类"><a href="#表视图分类" class="headerlink" title="表视图分类"></a>表视图分类</h2><ul>
<li>普通表视图：主要用于动态表，而动态表一般在单元格数目未知的情况下使用</li>
<li>分组表视图：一般用于静态表，用来进行界面布局</li>
</ul>
<h2 id="单元格的组成和样式"><a href="#单元格的组成和样式" class="headerlink" title="单元格的组成和样式"></a>单元格的组成和样式</h2><p>单元格由图标、主标题、副标题、扩展视图组成，可以根据需要进行选择，其中内置的扩展视图在枚举类型UITableViewCellAccessoryType中定义：</p>
<table>
<thead>
<tr>
<th>Swift枚举成员</th>
<th>Objective-C枚举成员</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>ITableViewCellAccessoryNone</td>
<td>没有扩展图标</td>
</tr>
<tr>
<td>disclosureIndicator</td>
<td>UITableViewCellAccessoryDisclosureIndicator</td>
<td>扩展指示器，为箭头+问号</td>
</tr>
<tr>
<td>detailDisclosureButton</td>
<td>UITableViewCellAccessoryDetailDisclosureButton</td>
<td>细节展示图，为问号</td>
</tr>
<tr>
<td>checkmark</td>
<td>UITableViewCellAccessoryCheckmark</td>
<td>选中标志，图标为勾</td>
</tr>
<tr>
<td>detailButton</td>
<td>UITableViewCellAccessoryDetailButton</td>
<td>细节详情展示，图标为问号</td>
</tr>
</tbody>
</table>
<p>内置的单元格样式在枚举类型UITableViewCellStyle中定义：</p>
<table>
<thead>
<tr>
<th>Swift枚举成员</th>
<th>Objective-C枚举成员</th>
<th>说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>UITableViewCellStyleDefault</td>
<td>默认样式</td>
</tr>
<tr>
<td>subtitle</td>
<td>UITableViewCellStyleSubtitle</td>
<td>有图标、主标题、副标题、副标题在主标题的下面</td>
</tr>
<tr>
<td>value1</td>
<td>UITableViewCellStyleValue1</td>
<td>有主标题、副标题，主标题左对齐、副标题右对齐，可以有图标</td>
</tr>
<tr>
<td>2alue3</td>
<td>UITableViewCellStyleValue2</td>
<td>有主标题、副标题，主标题和副标题居中对齐，无图标</td>
</tr>
</tbody>
</table>
<h2 id="数据源协议与委托协议"><a href="#数据源协议与委托协议" class="headerlink" title="数据源协议与委托协议"></a>数据源协议与委托协议</h2><h3 id="UITableViewDataSource"><a href="#UITableViewDataSource" class="headerlink" title="UITableViewDataSource"></a>UITableViewDataSource</h3><p>数据源协议主要为表视图提供数据，主要方法如下</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>func tableView(UITableView, cellForRowAt: IndexPath)</td>
<td>UITableViewCell</td>
<td>为表视图单元格提供数据，必须实现</td>
</tr>
<tr>
<td>tableView(UITableView, numberOfRowsInSection: Int)</td>
<td>Int</td>
<td>返回某个节中的行数，必须实现</td>
</tr>
<tr>
<td>tableView(UITableView, titleForHeaderInSection: Int)</td>
<td>String</td>
<td>返回节头的标题</td>
</tr>
<tr>
<td>tableView(UITableView, titleForFooterInSection: Int)</td>
<td>String</td>
<td>返回节脚的标题</td>
</tr>
<tr>
<td>numberOfSections(in: UITableView)</td>
<td>Int</td>
<td>返回节的个数</td>
</tr>
<tr>
<td>sectionIndexTitles(for: UITableView)</td>
<td>[String]?</td>
<td>返回表示图节索引标题</td>
</tr>
</tbody>
</table>
<h3 id="UITableViewDelegate"><a href="#UITableViewDelegate" class="headerlink" title="UITableViewDelegate"></a>UITableViewDelegate</h3><p>委托协议主要主要用来设定表视图中节头和节脚的标题，以及一些动作事件，主要方法如下</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回类型</th>
<th>说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td>tableView(UITableView, didSelectRowAt: IndexPath)</td>
<td></td>
<td>单元格响应事件</td>
</tr>
<tr>
<td>tableView(UITableView, accessoryButtonTappedForRowWith: IndexPath)</td>
<td></td>
<td>扩展视图响应事件</td>
</tr>
</tbody>
</table>
<h1 id="简单表视图"><a href="#简单表视图" class="headerlink" title="简单表视图"></a>简单表视图</h1><h2 id="UIViewController根视图控制器实现表视图"><a href="#UIViewController根视图控制器实现表视图" class="headerlink" title="UIViewController根视图控制器实现表视图"></a>UIViewController根视图控制器实现表视图</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>创建一个iOS工程</li>
<li>从对象库中拖入一个TableView到storyboard文件中，并将TableView覆盖整个View</li>
<li>打开Table View的属性检查器，将PrototypeCells的值设为1，注意不要添加多个，否则会发生错误；此时Table View会添加一个Table View Cell。</li>
<li>打开Table View Cell的属性检查器，设置Identifier属性。</li>
<li>注册UITableViewDataSource和UITableViewDelegate协议</li>
<li>编写代码实现功能</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  TableViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/26.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UITableViewDataSource</span>,<span class="title">UITableViewDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//全部数据</span></div><div class="line">    <span class="keyword">var</span> listItems: <span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//读取资源文件数据</span></div><div class="line">        <span class="keyword">let</span> listPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"team"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        <span class="keyword">self</span>.listItems = <span class="type">NSArray</span>(contentsOfFile: listPath!)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回列表每行的视图</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="comment">//根据Identifier找到Cell</span></div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CustomId"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rowDict = <span class="keyword">self</span>.listItems[row] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">        cell.textLabel?.text = rowDict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        cell.detailTextLabel?.text = <span class="string">"123"</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> imagePath = <span class="type">String</span>(format: <span class="string">"%@.png"</span>, rowDict[<span class="string">"image"</span>] <span class="keyword">as</span>! <span class="type">String</span>)</div><div class="line">        cell.imageView?.image = <span class="type">UIImage</span>(named: imagePath)</div><div class="line">        cell.accessoryType = <span class="type">UITableViewCellAccessoryType</span>.disclosureIndicator</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回条目数目</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listItems.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//响应条目点击事件</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"点击事件"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h3><ul>
<li>none模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-none.jpg" alt=""></p>
<ul>
<li>disclosureIndicator</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-disclosureIndicator.jpg" alt=""></p>
<h2 id="UITableViewController根视图控制器实现表视图"><a href="#UITableViewController根视图控制器实现表视图" class="headerlink" title="UITableViewController根视图控制器实现表视图"></a>UITableViewController根视图控制器实现表视图</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>创建一个iOS工程</li>
<li>删除storyboard中View Controller Scene 中的View Controller，再从对象库拖入一个Table View Controller到设计界面</li>
<li>打开Table View Controller属性检查器，勾选Is Initial View Controller选项，否则应用启动后是黑屏</li>
<li>将ViewController类的父类由UIViewController改为UITableViewController</li>
<li>打开View Controller的属性选择器在Class列表中选择ViewController</li>
<li>UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</li>
</ol>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//全部数据</span></div><div class="line">    <span class="keyword">var</span> listItems: <span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//读取资源文件数据</span></div><div class="line">        <span class="keyword">let</span> listPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"team"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        <span class="keyword">self</span>.listItems = <span class="type">NSArray</span>(contentsOfFile: listPath!)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回列表每行的视图</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CustomId"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rowDict = <span class="keyword">self</span>.listItems[row] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">        cell.textLabel?.text = rowDict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        cell.detailTextLabel?.text = <span class="string">"123"</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> imagePath = <span class="type">String</span>(format: <span class="string">"%@.png"</span>, rowDict[<span class="string">"image"</span>] <span class="keyword">as</span>! <span class="type">String</span>)</div><div class="line">        cell.imageView?.image = <span class="type">UIImage</span>(named: imagePath)</div><div class="line">        cell.accessoryType = <span class="type">UITableViewCellAccessoryType</span>.disclosureIndicator</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回条目数目</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listItems.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//响应条目点击事件</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"点击事件"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例图-1"><a href="#示例图-1" class="headerlink" title="示例图"></a>示例图</h3><ul>
<li>detailButton模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-detail-button.jpg" alt=""></p>
<ul>
<li>checkmark模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-checkmark.jpg" alt=""></p>
<h1 id="自定义单元格"><a href="#自定义单元格" class="headerlink" title="自定义单元格"></a>自定义单元格</h1><h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个表视图工程</li>
<li>修改根视图控制器为表视图控制器UITableViewController，参照上节的步骤</li>
<li>从对象库中拖入控件到单元格内部，比如Lable和ImageView</li>
<li>创建自定义单元格类CustomCell文件，并继承UITableViewCell类</li>
<li>在设计界面中选择View Controller Scene中的Table View Cell，并打开属性检查器，将Class设为CustomCell类，并设置单元格的Identifier</li>
<li>为单元格中的控件Label和ImageView控件连接输出接口，将控件绑定到CustomCell类中</li>
<li>打开ViewController类，编写代码实现</li>
</ol>
<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><ul>
<li>CustomCell类</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  CustomCell.swift</span></div><div class="line"><span class="comment">//  CustomCell</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/25.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mImage: <span class="type">UIImageView</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mLabel: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.awakeFromNib()</div><div class="line">        <span class="comment">// Initialization code</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setSelected</span><span class="params">(<span class="number">_</span> selected: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setSelected(selected, animated: animated)</div><div class="line"></div><div class="line">        <span class="comment">// Configure the view for the selected state</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ViewController类</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  SimpleTableView</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/24.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listItems: <span class="type">NSArray</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">let</span> listPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"team"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        <span class="keyword">self</span>.listItems = <span class="type">NSArray</span>(contentsOfFile: listPath!)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listItems.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="comment">//找到自定义单元格</span></div><div class="line">        <span class="keyword">let</span> cell:<span class="type">CustomCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CustomCellId"</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>? <span class="type">CustomCell</span></div><div class="line">        <span class="comment">//let cell = UITableViewCell(style: .value1, reuseIdentifier: "CellIdentifier")</span></div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rowDict = <span class="keyword">self</span>.listItems[row] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">        <span class="comment">//设置控件属性</span></div><div class="line">        cell.mLabel.text = rowDict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> imagePath = <span class="type">String</span>(format: <span class="string">"%@.png"</span>, rowDict[<span class="string">"image"</span>] <span class="keyword">as</span>! <span class="type">String</span>)</div><div class="line">        cell.mImage.image = <span class="type">UIImage</span>(named: imagePath)</div><div class="line">        cell.accessoryType = .disclosureIndicator</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-2"><a href="#示例图-2" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E5%85%83%E6%A0%BC.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;表视图组成&quot;&gt;&lt;a href=&quot;#表视图组成&quot; class=&quot;headerlink&quot; title=&quot;表视图组成&quot;&gt;&lt;/a&gt;表视图组
    
    </summary>
    
      <category term="ios" scheme="http://liuguoquan727.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="http://liuguoquan727.github.io/tags/ios/"/>
    
      <category term="swift" scheme="http://liuguoquan727.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="http://liuguoquan727.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之03UIView</title>
    <link href="http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B03UIView/"/>
    <id>http://liuguoquan727.github.io/2016/11/25/iOS开发之03UIView/</id>
    <published>2016-11-25T10:45:19.000Z</published>
    <updated>2016-11-25T12:34:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UILabel"><a href="#UILabel" class="headerlink" title="UILabel"></a>UILabel</h1><p>Lable的作用是显示不可编辑的文字。</p>
<h2 id="属性检查器"><a href="#属性检查器" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Text：Label显示的文字</li>
<li>Color：文字的颜色</li>
<li>Font：字体和字号</li>
<li>Alignment：文本的对齐方式</li>
<li>Lines：设置Label中文本的行数，默认为1</li>
<li>Line Breaks：设置文字的截断，当文本太长以至于Label不能显示全部的字体时，超长的部分会显示“…”，通常在以下三个选项中做选择。<ul>
<li>Truncate Tail：截断尾部</li>
<li>Truncate Head：截断头部</li>
<li>Truncate Middle：保留头尾，截断中间</li>
</ul>
</li>
<li>Highlighted：设置高亮是文本的颜色</li>
<li>Shadow：设置文本的阴影颜色</li>
<li>Shadow Offset：设置标签文本的阴影偏移量</li>
</ul>
<h2 id="代码创建Lable"><a href="#代码创建Lable" class="headerlink" title="代码创建Lable"></a>代码创建Lable</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代码创建Label</span></div><div class="line">let lable = UILabel(frame: CGRect(x: <span class="number">100</span>, y: <span class="number">100</span>, <span class="attribute">width</span>: <span class="number">200</span>, height: <span class="number">200</span>))</div><div class="line">lable<span class="selector-class">.text</span> = <span class="string">"代码创建的Lable"</span></div><div class="line">lable<span class="selector-class">.font</span> = UIFont.systemFont(ofSize: CGFloat(<span class="number">28</span>))</div><div class="line">lable<span class="selector-class">.textColor</span> = UIColor<span class="selector-class">.red</span></div><div class="line">view.addSubview(lable)</div></pre></td></tr></table></figure>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  LableDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/12.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line">import UIKit</div><div class="line"></div><div class="line">class ViewController: UIViewController &#123;</div><div class="line"></div><div class="line">    <span class="comment">//storyboard</span></div><div class="line">    @IBOutlet weak <span class="selector-tag">var</span> mLabel: UILabel!</div><div class="line">    override func viewDidLoad() &#123;</div><div class="line">        super.viewDidLoad()</div><div class="line">        <span class="comment">// 设置文本</span></div><div class="line">        mLabel<span class="selector-class">.text</span> = <span class="string">"Hello ShenZhen"</span></div><div class="line">        <span class="comment">//设置字体对齐方式</span></div><div class="line">        mLabel<span class="selector-class">.textAlignment</span> = <span class="selector-class">.left</span></div><div class="line">        mLabel<span class="selector-class">.textColor</span> = UIColor<span class="selector-class">.red</span></div><div class="line">        mLabel<span class="selector-class">.backgroundColor</span> = UIColor<span class="selector-class">.green</span></div><div class="line">        <span class="comment">//设置字体大小</span></div><div class="line">        mLabel<span class="selector-class">.font</span> = UIFont.boldSystemFont(ofSize: <span class="number">25</span>)</div><div class="line">        <span class="comment">//文本的行数</span></div><div class="line">        mLabel<span class="selector-class">.numberOfLines</span> = <span class="number">2</span></div><div class="line">        </div><div class="line">        <span class="comment">//代码创建Label</span></div><div class="line">        let lable = UILabel(frame: CGRect(x: <span class="number">100</span>, y: <span class="number">100</span>, <span class="attribute">width</span>: <span class="number">200</span>, height: <span class="number">200</span>))</div><div class="line">        lable<span class="selector-class">.text</span> = <span class="string">"代码创建的Lable"</span></div><div class="line">        lable<span class="selector-class">.font</span> = UIFont.systemFont(ofSize: CGFloat(<span class="number">28</span>))</div><div class="line">        lable<span class="selector-class">.textColor</span> = UIColor<span class="selector-class">.red</span></div><div class="line">        view.addSubview(lable)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override func didReceiveMemoryWarning() &#123;</div><div class="line">        super.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/UILable.png" alt=""></p>
<h1 id="UIButton"><a href="#UIButton" class="headerlink" title="UIButton"></a>UIButton</h1><p>UIButton是ios中最基本的按钮控件</p>
<h2 id="属性检查器-1"><a href="#属性检查器-1" class="headerlink" title="属性检查器"></a>属性检查器</h2><p>在StoryBoard中拖曳生成一个控件时，可以使用属性检查器来设置场景中控件的属性。如果使用的是代码生成的控件，则在代码中给控件的属性赋值来改变属性的属性。</p>
<p>属性检查器的内容如下：</p>
<ul>
<li>Type：按钮的样式，默认是System，也就是透明背景蓝色字体的按钮样式。</li>
<li>State Config：默认为default，此外还有HighLight（触摸高亮）、Selected（选中状态）和Disable（禁用状态）</li>
<li>Title：设置按钮显示的文字</li>
<li>Font：设置后按钮字体和字号</li>
<li>TextColor：设置字体颜色</li>
<li>Shadow Color：设置文字的阴影颜色</li>
<li>Image：设置按钮的图片格式，在这里设置图片会让按钮的文字消失</li>
<li>Backgroud：设置按钮的背景图片，保留文字</li>
</ul>
<h2 id="代码创建按钮"><a href="#代码创建按钮" class="headerlink" title="代码创建按钮"></a>代码创建按钮</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用代码添加一个Button到View中</span></div><div class="line">let btn1 = UIButton(frame: CGRectMake(100,50,200,200))</div><div class="line">btn1.setTitle(<span class="string">"word"</span>, forState: .Normal)</div><div class="line">btn1.backgroundColor = UIColor.blueColor()</div><div class="line">//添加点击事件</div><div class="line">btn1.addTarget(self, action: #selector(ViewController.show(_:)), forControlEvents: .TouchUpInside)</div><div class="line">view.addSubview(btn1)</div><div class="line"></div><div class="line">func show(button : UIButton) &#123;</div><div class="line">    print(button.currentTitle!)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ButtonDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 16/9/12.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//实例</span></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> myButton: <span class="type">UIButton</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="comment">//用代码添加一个Button到View中</span></div><div class="line">        <span class="keyword">let</span> btn1 = <span class="type">UIButton</span>(frame: <span class="type">CGRectMake</span>(<span class="number">100</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">200</span>))</div><div class="line">        btn1.setTitle(<span class="string">"word"</span>, forState: .<span class="type">Normal</span>)</div><div class="line">        btn1.backgroundColor = <span class="type">UIColor</span>.blueColor()</div><div class="line">        <span class="comment">//添加点击事件</span></div><div class="line">        btn1.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">ViewController</span>.show(<span class="number">_</span>:)), forControlEvents: .<span class="type">TouchUpInside</span>)</div><div class="line">        view.addSubview(btn1)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(button : UIButton)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(button.currentTitle!)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//StoryBoard点击事件</span></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">click</span><span class="params">(sender: UIButton)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(sender.currentTitle!)</div><div class="line">        <span class="comment">//设置文字</span></div><div class="line">        sender.setTitle(<span class="string">"hello"</span>, forState: .<span class="type">Normal</span>)</div><div class="line">        <span class="comment">//设置文字颜色</span></div><div class="line">        sender.setTitleColor(<span class="type">UIColor</span>.darkTextColor(), forState: .<span class="type">Normal</span>)</div><div class="line">        <span class="comment">//设置背景颜色</span></div><div class="line">        sender.backgroundColor = <span class="type">UIColor</span>.redColor()</div><div class="line">        <span class="comment">//设置圆角</span></div><div class="line">        sender.layer.cornerRadius = <span class="number">15</span></div><div class="line">        <span class="comment">//是否可见</span></div><div class="line">        sender.hidden = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/UIButton.png" alt=""></p>
<h1 id="UISwitch、UISilder、UISegmentedControl"><a href="#UISwitch、UISilder、UISegmentedControl" class="headerlink" title="UISwitch、UISilder、UISegmentedControl"></a>UISwitch、UISilder、UISegmentedControl</h1><h2 id="UISWitch"><a href="#UISWitch" class="headerlink" title="UISWitch"></a>UISWitch</h2><p>Switch控件状态分为开启和关闭状态。</p>
<p>UISwitch的属性检查器的主要内容有：</p>
<ul>
<li>State：有On和Off两种状态</li>
<li>On Tint：开关打开时的背景颜色</li>
<li>Thumb Tint：滑块的颜色</li>
</ul>
<h2 id="UISlider"><a href="#UISlider" class="headerlink" title="UISlider"></a>UISlider</h2><p>Slider控件通常用来指示进度，并且可以通过拖曳改变进度。</p>
<p>UISlider控件的属性检查器的主要内容有：</p>
<ul>
<li>Value：设置Value的最大值、最小值，以及通过设置Current的值来限定Slider初始化时滑块的位置</li>
<li>Min Image和Max Image：Slider最大值和最小值处的图片</li>
<li>Min Track Tint：滑块左侧轨道的颜色</li>
<li>Max Track Tint：滑块右侧轨道的颜色</li>
<li>Thumb Tint：滑块的颜色</li>
<li>Events：有一个可选项Continuous Updates，勾选后再拖动滑块的过程中会不断触发事件</li>
</ul>
<h2 id="UISegmentedControl（分段控件）"><a href="#UISegmentedControl（分段控件）" class="headerlink" title="UISegmentedControl（分段控件）"></a>UISegmentedControl（分段控件）</h2><p>UISegmentedControl的属性检查器的主要内容有：</p>
<ul>
<li>Style：样式</li>
<li>State：</li>
<li>Segments：设置分段的数量，默认的是2个，而且不能低于2个。</li>
<li>Segment：设置当前编辑的分段</li>
<li>Title：设置该分段所显示的文字，默认是First、Second等英文序数词</li>
<li>Image：设置该分段的图片</li>
<li>Behavior：Enabled表示该分段是否可用，Selected表示在初次加载时该分段是否被选中</li>
<li>Content OffSet：设置分段中的Title的位置，如果对默认的位置不满意，则可以设置X和Y方向的偏移量来调整，可正可负</li>
</ul>
<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  OtherButtonDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/13.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSwitchButton: <span class="type">UISwitch</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mBottomSwitch: <span class="type">UISwitch</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSegmentButton: <span class="type">UISegmentedControl</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mLabel: <span class="type">UILabel</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSlideButton: <span class="type">UISlider</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mSlideButton.minimumValue = <span class="number">0</span></div><div class="line">        mSlideButton.maximumValue = <span class="number">100</span></div><div class="line">        mSlideButton.setValue(<span class="number">60</span>, animated: <span class="literal">true</span>)</div><div class="line">        mLabel.text = <span class="type">String</span>(format: <span class="string">"SlideValue: %0.0f"</span>, mSlideButton.value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">        </div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * UISwitch点击事件</div><div class="line">    *</div><div class="line">    */</div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">switchValueChange</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//AnyObject转为UISwitch类型</span></div><div class="line">        <span class="keyword">let</span> witchSwitch = sender <span class="keyword">as</span>! <span class="type">UISwitch</span></div><div class="line">        <span class="built_in">print</span>(witchSwitch.isOn)</div><div class="line">        <span class="built_in">print</span>(mSwitchButton.isOn)</div><div class="line">        mBottomSwitch.setOn(mSwitchButton.isOn, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//UISegmentedControl点击事件</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">switchSegment</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//选择的段</span></div><div class="line">        <span class="type">NSLog</span>(<span class="string">"%ld"</span>, mSegmentButton.selectedSegmentIndex)</div><div class="line">        <span class="keyword">if</span> mSwitchButton.isHidden &#123;</div><div class="line">            <span class="keyword">self</span>.mSwitchButton.isHidden = <span class="literal">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">self</span>.mSwitchButton.isHidden = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//USlider滑动事件</span></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">slideValueChange</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> slider = sender <span class="keyword">as</span>! <span class="type">UISlider</span></div><div class="line">        <span class="type">NSLog</span>(<span class="string">"<span class="subst">\(slider.value)</span>"</span>)</div><div class="line">        mLabel.text = <span class="type">String</span>(format: <span class="string">"SlideValue: %0.3f"</span>, slider.value)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-1"><a href="#示例图-1" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/UISwitch.png" alt=""></p>
<h1 id="UITextField和UITextView"><a href="#UITextField和UITextView" class="headerlink" title="UITextField和UITextView"></a>UITextField和UITextView</h1><h2 id="UITextField"><a href="#UITextField" class="headerlink" title="UITextField"></a>UITextField</h2><p>UITextField文本框与UILabel的不同是文本框是可以编辑的。iOS用到的文本框的地方很多，比如搜索框、用户登录框等。</p>
<p>UITextField的属性检查器的主要内容有：</p>
<ul>
<li>Placeholder：默认显示在这里的文字，通常用来提示该文本框中需要输入的内容</li>
<li>Border Style：选择文本框的样式</li>
<li>Clear Button：设置清除输入的按钮</li>
<li>Min Font Size：文本框被挤压时，文本框中字体的最小尺寸</li>
<li>Capitalization：设置文本框是否自动转换大小写</li>
<li>Spell Checking：检查是否有拼写错误</li>
<li>KeyBoard Style：键盘的样式</li>
<li>Return key：选择返回键的样式</li>
</ul>
<h2 id="UITextView"><a href="#UITextView" class="headerlink" title="UITextView"></a>UITextView</h2><p>UITextView也是可以编辑文本内容的，适用于大段文本的编辑</p>
<h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  TextDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/12.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UITextFieldDelegate</span>,<span class="title">UITextViewDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mTextField: <span class="type">UITextField</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mTextView: <span class="type">UITextView</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mTextField.delegate = <span class="keyword">self</span></div><div class="line">        mTextView.delegate = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">onClick</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"TextFiled: %@"</span>, mTextField.text!)</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"TextView: %@"</span>, mTextView.text!)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="comment">//关闭键盘</span></div><div class="line">        mTextField.resignFirstResponder()</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"TextFiled 获得焦点"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldDidEndEditing</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"%@"</span>, textField.text!)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textView</span><span class="params">(<span class="number">_</span> textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> text == <span class="string">"\n"</span> &#123;</div><div class="line">            <span class="type">NSLog</span>(<span class="string">"TextView 获得焦点"</span>)</div><div class="line">            <span class="comment">//关闭键盘</span></div><div class="line">            mTextView.resignFirstResponder()</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-2"><a href="#示例图-2" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/TextField.png" alt=""></p>
<h1 id="UIProgressView"><a href="#UIProgressView" class="headerlink" title="UIProgressView"></a>UIProgressView</h1><p>ProgressView(进度条)可以用来显示式地表示某个操作处理的进度。</p>
<h2 id="属性检查器-2"><a href="#属性检查器-2" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Progress:当前进度条的进度值</li>
<li>Progress Tint:已完成进度部分的颜色</li>
<li>Track Tint：未完成部分的颜色</li>
<li>Progress Image：使用图片填充以完成的部分</li>
<li>Track Image“使用图片填充未完成的部分</li>
</ul>
<h2 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ProgressViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/18.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mProgressView: <span class="type">UIProgressView</span>!</div><div class="line">    <span class="keyword">var</span> timer:<span class="type">Timer</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">self</span>.mProgressView.progress = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//执行定时任务</span></div><div class="line">        <span class="keyword">self</span>.timer = <span class="type">Timer</span>.scheduledTimer(timeInterval: <span class="number">1.0</span>, target: <span class="keyword">self</span>, selector: #selector(<span class="type">ViewController</span>.download <span class="keyword">as</span> (<span class="type">ViewController</span>) -&gt; () -&gt; ()), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//更新进度值</span></div><div class="line">        <span class="keyword">self</span>.mProgressView.progress += <span class="number">0.05</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.mProgressView.progress == <span class="number">1.0</span> &#123;</div><div class="line">            <span class="comment">//结束定时器</span></div><div class="line">            <span class="keyword">self</span>.timer.invalidate()</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-3"><a href="#示例图-3" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/progress-view.png" alt=""></p>
<h1 id="UIActivityIndicatorView"><a href="#UIActivityIndicatorView" class="headerlink" title="UIActivityIndicatorView"></a>UIActivityIndicatorView</h1><p>与UIProgressView相比，UIActivityIndicatorView不会显示具体的进度，只是用做提示的作用</p>
<h2 id="属性检查器-3"><a href="#属性检查器-3" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Style：样式有三种：Gray、White、Large White</li>
<li>Color：ActivityIndicatorView的颜色</li>
<li>Behavior：有两个选项：Animating表示ActivityIndicatorView的齿轮是否在转动；Hides When Stopped 表示当齿轮停止转动时是否将ActivityIndicatorView隐藏。</li>
</ul>
<h2 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  IndicatorViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/18.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mIndicatorView: <span class="type">UIActivityIndicatorView</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//活动指示器出于非活动状态时则会隐藏</span></div><div class="line">        mIndicatorView.hidesWhenStopped = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">upLoad</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> mIndicatorView.isAnimating &#123;</div><div class="line">            <span class="comment">//停止旋转</span></div><div class="line">            mIndicatorView.stopAnimating()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//开始旋转</span></div><div class="line">            mIndicatorView.startAnimating()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-4"><a href="#示例图-4" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/activity-indicator-view.png" alt=""></p>
<h1 id="UIStepper"><a href="#UIStepper" class="headerlink" title="UIStepper"></a>UIStepper</h1><p>UIStepper(步进器)的作用是按照约定的步长进行增减操作。Stepper上的+和-按钮对应Stepper所控制的数值的增减操作</p>
<h2 id="属性检查器-4"><a href="#属性检查器-4" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Value:Stepper所控制的值。Mininum表示最小值，Maximun表示最大值，Current表示初始化时的值，Step表示步长。</li>
<li>Behavior：有三个复选框<ul>
<li>Autorepeat：表示按住+和-的时候会不断地触发Stepper。</li>
<li>Continuous：勾选后系统实时触发ValueChanged事件，未勾选时系统只有当用户停止与Stepper交互时才触发ValueChanged事件。</li>
<li>Wrap：选择后当前当前Value值达到最大最小值时会继续增加或减少，value值会被复位成一个循环，比如最大值为100，最小值为0，当达到100后继续增加时Value的值就会变为0；如未选中，则达到最大或最小值时，Value会保持最大或最小值。</li>
</ul>
</li>
</ul>
<h2 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  StepperDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/19.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mStepper: <span class="type">UIStepper</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mCount: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mStepper.stepValue = <span class="number">1.0</span> <span class="comment">//步长</span></div><div class="line">        mStepper.minimumValue = <span class="number">0.0</span></div><div class="line">        mStepper.maximumValue = <span class="number">10.0</span></div><div class="line">        mStepper.value = <span class="number">0.0</span> <span class="comment">//当前值</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">step</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> text = <span class="type">String</span>(format: <span class="string">"数量%d"</span>, <span class="type">Int</span>(mStepper.value))</div><div class="line">        mCount.text = text</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-5"><a href="#示例图-5" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/stepper.png" alt=""></p>
<h1 id="UIImageView"><a href="#UIImageView" class="headerlink" title="UIImageView"></a>UIImageView</h1><p>UIImageView是用于展示图片的控件。</p>
<h2 id="属性检查器-5"><a href="#属性检查器-5" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Image:从工程的图片资源文件夹中选择一张图片作为UIImageVIew的填充，在Storyboard中使用图片名称来索引图片</li>
<li>Highlighted：高亮状态下显示的图片</li>
<li>State：可以设置UIImageView的初始状态，默认是非高亮状态</li>
</ul>
<h2 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ImageView</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/19.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mImage: <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mImage.image = <span class="type">UIImage</span>(named: <span class="string">"ic_welcome"</span>)! <span class="comment">//代码添加图片</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-6"><a href="#示例图-6" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/uiimageview.png" alt=""></p>
<h1 id="UIPickerView"><a href="#UIPickerView" class="headerlink" title="UIPickerView"></a>UIPickerView</h1><p>UIPickerView是可以用来更灵活地显示滑轮要显示的内容，如选择省市区等。</p>
<h2 id="属性检查器-6"><a href="#属性检查器-6" class="headerlink" title="属性检查器"></a>属性检查器</h2><p>Behavior：默认勾选，勾选后会高亮显示选中的选项</p>
<h2 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  PickerViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/20.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIPickerViewDelegate</span>,<span class="title">UIPickerViewDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mPickerView: <span class="type">UIPickerView</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mLable: <span class="type">UILabel</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> pickerData: <span class="type">NSDictionary</span>!</div><div class="line">    <span class="keyword">var</span> pickerProvinceData: <span class="type">NSArray</span>!</div><div class="line">    <span class="keyword">var</span> pickerCityData: <span class="type">NSArray</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//从资源文件夹获取plist文件内容</span></div><div class="line">        <span class="keyword">let</span> listPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"provinces_cities"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        <span class="keyword">let</span> dict = <span class="type">NSDictionary</span>(contentsOfFile: listPath!)</div><div class="line">        <span class="keyword">self</span>.pickerData = dict</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.pickerProvinceData = <span class="keyword">self</span>.pickerData.allKeys <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> provice = <span class="keyword">self</span>.pickerProvinceData[<span class="number">0</span>] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">self</span>.pickerCityData = <span class="keyword">self</span>.pickerData[provice] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置代理处理回调事件</span></div><div class="line">        mPickerView.dataSource = <span class="keyword">self</span></div><div class="line">        mPickerView.delegate = <span class="keyword">self</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//确定选择器的拨轮的数目</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numberOfComponents</span><span class="params">(<span class="keyword">in</span> pickerView: UIPickerView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//确定每个拨轮的条目数</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(<span class="number">_</span> pickerView: UIPickerView, numberOfRowsInComponent component: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">if</span> component == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.pickerProvinceData.<span class="built_in">count</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.pickerCityData.<span class="built_in">count</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//为选择器某个拨轮的条目提供显示数据</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(<span class="number">_</span> pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">if</span> component == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.pickerProvinceData[row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.pickerCityData[row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//选择选择器的某个拨轮的条目时调用</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(<span class="number">_</span> pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> component == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">let</span> provice = <span class="keyword">self</span>.pickerProvinceData[row] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            <span class="keyword">self</span>.pickerCityData = <span class="keyword">self</span>.pickerData[provice] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">            <span class="keyword">self</span>.mPickerView.reloadComponent(<span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">onClick</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> row1 = <span class="keyword">self</span>.mPickerView.selectedRow(inComponent: <span class="number">0</span>)</div><div class="line">        <span class="keyword">let</span> row2 = <span class="keyword">self</span>.mPickerView.selectedRow(inComponent: <span class="number">1</span>)</div><div class="line">        <span class="keyword">let</span> province = <span class="keyword">self</span>.pickerProvinceData[row1] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> city = <span class="keyword">self</span>.pickerCityData[row2] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> title = <span class="type">String</span>(format: <span class="string">"%@,%@市"</span>, province,city)</div><div class="line">        mLable.text = title</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-7"><a href="#示例图-7" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/pickerview.png" alt=""></p>
<h1 id="UIDatePickerView"><a href="#UIDatePickerView" class="headerlink" title="UIDatePickerView"></a>UIDatePickerView</h1><h2 id="属性检查器-7"><a href="#属性检查器-7" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Model:设置UIDatePicker的样式，有以下四种模式：<ul>
<li>Date and Time：显示的是时间和日期</li>
<li>Date：只显示日期</li>
<li>Time：只显示时间</li>
<li>Count Down Timer：显示24小时制的倒计时模式</li>
</ul>
</li>
<li>Local：设置语言类型，默认是英文</li>
<li>Interval：设置时间间隔，以分钟为单位</li>
<li>Date：显示的日期，默认是当前的日期</li>
<li>Constraints：设置UIDatePickerView的最大值和最小值</li>
<li>Timer：设置Count Down Time模式下倒计时的秒数</li>
</ul>
<h2 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  DatePickerViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/19.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mDatePickerView: <span class="type">UIDatePicker</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mDesc: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mDesc.text =  mDatePickerView.date.description(with: <span class="type">Locale</span>.current)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">datePick</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> date = mDatePickerView.date</div><div class="line">        <span class="keyword">let</span> format = <span class="type">DateFormatter</span>()</div><div class="line">        format.dateFormat = <span class="string">"YYYY-MM-dd HH:mm:ss"</span></div><div class="line">        <span class="keyword">let</span> time = format.string(from: date)</div><div class="line">       mDesc.text =  time</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">timeMode</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//设置为Time模式</span></div><div class="line">        mDatePickerView.datePickerMode = <span class="type">UIDatePickerMode</span>.time</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">dateMode</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDatePickerView.datePickerMode = <span class="type">UIDatePickerMode</span>.date</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">dateAndTimeMode</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDatePickerView.datePickerMode = <span class="type">UIDatePickerMode</span>.dateAndTime</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">mCountDownTime</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDatePickerView.datePickerMode = <span class="type">UIDatePickerMode</span>.countDownTimer</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-8"><a href="#示例图-8" class="headerlink" title="示例图"></a>示例图</h2><ul>
<li>Date and Time模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/datepicker-date-time.png" alt=""></p>
<ul>
<li>Time模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/datepicker-time.png" alt=""></p>
<ul>
<li>Date模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/datepicker-date.png" alt=""></p>
<ul>
<li>Count Down Timer模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/datepicker-countdown.png" alt=""></p>
<h1 id="UIAlertView-amp-UIActionSheet"><a href="#UIAlertView-amp-UIActionSheet" class="headerlink" title="UIAlertView&amp;UIActionSheet"></a>UIAlertView&amp;UIActionSheet</h1><p>UIAlertView是用来显示的提示框的控件，只能在代码中创建.<br>UIActionSheet是用来显示操作表的控件，也只能在代码中创建。</p>
<p>使用步骤：</p>
<ol>
<li>创建一个UIAlertController的实例</li>
<li>创建UIAlertAction的实例，可以有多个</li>
<li>将UIAlertAction实例添加到UIAlertController中</li>
<li>使用UIViewController的present显示UIAlertController</li>
</ol>
<h2 id="实现-10"><a href="#实现-10" class="headerlink" title="实现"></a>实现</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  AlertViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/18.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line">import <span class="built_in">UIKit</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> ViewController: <span class="built_in">UIViewController</span> &#123;</div><div class="line"></div><div class="line">    @IBOutlet <span class="keyword">weak</span> var mAlertBtn: <span class="built_in">UIButton</span>!</div><div class="line">    @IBOutlet <span class="keyword">weak</span> var mActionBtn: <span class="built_in">UIButton</span>!</div><div class="line"></div><div class="line">    override func viewDidLoad() &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override func didReceiveMemoryWarning() &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//弹出警告栏</span></div><div class="line">    @IBAction func showAletView(_ sender: AnyObject) &#123;</div><div class="line">        </div><div class="line">        let alertController = <span class="built_in">UIAlertController</span>(title: <span class="string">"警告"</span>, message: <span class="string">"是否继续?"</span>, preferredStyle: <span class="built_in">UIAlertControllerStyle</span>.alert)</div><div class="line">        </div><div class="line">        <span class="comment">//取消</span></div><div class="line">        let noAction = <span class="built_in">UIAlertAction</span>(title: <span class="string">"否"</span>, style: <span class="built_in">UIAlertActionStyle</span>.cancel) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"No"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//确认</span></div><div class="line">        let yesAction = <span class="built_in">UIAlertAction</span>(title: <span class="string">"是"</span>, style: <span class="built_in">UIAlertActionStyle</span>.default) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"Yes"</span>)</div><div class="line">        &#125;</div><div class="line">        let confirmAction = <span class="built_in">UIAlertAction</span>(title: <span class="string">"是"</span>, style: <span class="built_in">UIAlertActionStyle</span>.destructive) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"Yes"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//添加文本框</span></div><div class="line">        alertController.addTextField &#123; (<span class="built_in">UITextField</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">UITextField</span>.placeholder = <span class="string">"请输入密码"</span></div><div class="line">        &#125;</div><div class="line">        alertController.addAction(noAction)</div><div class="line">        alertController.addAction(yesAction)</div><div class="line">        alertController.addAction(confirmAction)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.present(alertController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//弹出操作表</span></div><div class="line">    @IBAction func showActionSheet(_ sender: AnyObject) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//默认是ActionSheet</span></div><div class="line">        let actionSheet = <span class="built_in">UIAlertController</span>()</div><div class="line">        </div><div class="line">        let cancelAction = <span class="built_in">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: <span class="built_in">UIAlertActionStyle</span>.cancel) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"cancel"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        let sina = <span class="built_in">UIAlertAction</span>(title: <span class="string">"新浪微博"</span>, style: <span class="built_in">UIAlertActionStyle</span>.destructive) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"weibo"</span>)</div><div class="line">        &#125;</div><div class="line">        let wechat = <span class="built_in">UIAlertAction</span>(title: <span class="string">"微信"</span>, style: <span class="built_in">UIAlertActionStyle</span>.default) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"wechat"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        let tecent = <span class="built_in">UIAlertAction</span>(title: <span class="string">"QQ空间"</span>, style: <span class="built_in">UIAlertActionStyle</span>.default) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"tecent"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        actionSheet.addAction(cancelAction)</div><div class="line">        actionSheet.addAction(sina)</div><div class="line">        actionSheet.addAction(wechat)</div><div class="line">        actionSheet.addAction(tecent)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.present(actionSheet, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-9"><a href="#示例图-9" class="headerlink" title="示例图"></a>示例图</h2><ul>
<li>UIAlertView</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/alertview-three.png" alt=""></p>
<ul>
<li>UIActionSheet</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/action-sheet.png" alt=""></p>
<h1 id="UIToolbar"><a href="#UIToolbar" class="headerlink" title="UIToolbar"></a>UIToolbar</h1><h2 id="属性检查器-8"><a href="#属性检查器-8" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Style:工具栏的样式，浅色和深色</li>
<li>Translucent：是否半透明</li>
<li>Bar Tint：工具栏的颜色</li>
</ul>
<h2 id="实现-11"><a href="#实现-11" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ToolBarDemoo2</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/18.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mDesc: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDesc.text = <span class="string">"存储"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">done</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDesc.text = <span class="string">"完成"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">edit</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDesc.text = <span class="string">"编辑"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-10"><a href="#示例图-10" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/toolbar.png" alt=""></p>
<h1 id="UISearchBar"><a href="#UISearchBar" class="headerlink" title="UISearchBar"></a>UISearchBar</h1><p>UISearchBar是用于显示搜索框的控件</p>
<h2 id="属性检查器-9"><a href="#属性检查器-9" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Text：SearchBar中输入的文字</li>
<li>PlaceHolder：占位符，通常用来提示用户输入的内容</li>
<li>Prompt：SearchBar的标题，显示在输入框的上方</li>
<li>Search Style：SearchBar的样式，可以选择边框加深还是搜索框加深</li>
<li>Bar Style:整体的颜色，可选择深色和浅色</li>
<li>Bar Tint:边框的颜色</li>
<li>Background:设置背景图片</li>
<li>Scope Bar:设置Scope Bar的背景图片</li>
<li>Search Text：设置关键字的位置。默认是在左边</li>
<li>Options：SearchBar的右侧可以配备一个功能按钮，比如查找搜索记录、清除已输入的内容。</li>
</ul>
<h2 id="实现-12"><a href="#实现-12" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  SearchBar</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/21.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UISearchBarDelegate</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSearch: <span class="type">UISearchBar</span>!</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mInfo: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mSearch.delegate = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBar</span><span class="params">(<span class="number">_</span> searchBar: UISearchBar, textDidChange searchText: String)</span></span> &#123;</div><div class="line">        mInfo.text = searchText</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBarCancelButtonClicked</span><span class="params">(<span class="number">_</span> searchBar: UISearchBar)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"searchBarCancelButtonClicked"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//按搜索键时调用</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBarSearchButtonClicked</span><span class="params">(<span class="number">_</span> searchBar: UISearchBar)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"searchBarSearchButtonClicked"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-11"><a href="#示例图-11" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/searchbar.png" alt=""></p>
<h1 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h1><h2 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h2><p>WKWebView不是UKit内容，它属于WebKit中的类，是在iOS8中引入的部分。WKWebView将浏览器的内存渲染进程从App转移到系统中进行，提高了性能；其次它拥有和Safari相同的JavaScript引擎；最后它拥有60fps的滚动刷新频率。</p>
<h3 id="实现-13"><a href="#实现-13" class="headerlink" title="实现"></a>实现</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  WebViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/17.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> WebKit <span class="comment">//引入库</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mButton: <span class="type">UIButton</span>!</div><div class="line">    <span class="keyword">var</span> mWebView: <span class="type">WKWebView</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSafari: <span class="type">UIButton</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        mButton.layer.borderColor = <span class="type">UIColor</span>.black.cgColor</div><div class="line">        mButton.layer.borderWidth = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置Button的边框颜色</span></div><div class="line">        mSafari.layer.borderColor = <span class="type">UIColor</span>.black.cgColor</div><div class="line">        mSafari.layer.borderWidth = <span class="number">1</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">openWeb</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//打开网页</span></div><div class="line">        mWebView = <span class="type">WKWebView</span>(frame: view.frame)</div><div class="line">        <span class="keyword">let</span> mUrl = <span class="type">URL</span>(string: <span class="string">"http://www.baidu.com"</span>)</div><div class="line">        <span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: mUrl!)</div><div class="line">        mWebView.load(request)</div><div class="line">        <span class="comment">//注册网页加载过程代理</span></div><div class="line">        mWebView.navigationDelegate = <span class="keyword">self</span></div><div class="line">        view.addSubview(mWebView)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"开始加载"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didCommit navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"内容开始返回时回调"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"加载完成"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"加载失败"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例图-12"><a href="#示例图-12" class="headerlink" title="示例图"></a>示例图</h3><p><img src="http://oeqfywnzb.bkt.clouddn.com/webview-wkwebview.png" alt=""></p>
<h2 id="SFSafariViewController"><a href="#SFSafariViewController" class="headerlink" title="SFSafariViewController"></a>SFSafariViewController</h2><p>SFSafariViewController是iOS9中加入的控制器，这样就可以直接使用Safari来打开网页，获得Safari的完整功能而不需要离开App。</p>
<h3 id="实现-14"><a href="#实现-14" class="headerlink" title="实现"></a>实现</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  WebViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/17.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> SafariServices <span class="comment">//引入库</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSafari: <span class="type">UIButton</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//设置Button的边框颜色</span></div><div class="line">        mSafari.layer.borderColor = <span class="type">UIColor</span>.black.cgColor</div><div class="line">        mSafari.layer.borderWidth = <span class="number">1</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">openSafari</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//通过Safari打开网页</span></div><div class="line">        <span class="keyword">let</span> mUrl = <span class="type">URL</span>(string: <span class="string">"http://www.baidu.com"</span>)</div><div class="line">        <span class="keyword">let</span> safari = <span class="type">SFSafariViewController</span>(url: mUrl!)</div><div class="line">        <span class="comment">//展示视图</span></div><div class="line">        present(safari, animated: <span class="literal">true</span>,completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例图-13"><a href="#示例图-13" class="headerlink" title="示例图"></a>示例图</h3><p><img src="http://oeqfywnzb.bkt.clouddn.com/webview-safari.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UILabel&quot;&gt;&lt;a href=&quot;#UILabel&quot; class=&quot;headerlink&quot; title=&quot;UILabel&quot;&gt;&lt;/a&gt;UILabel&lt;/h1&gt;&lt;p&gt;Lable的作用是显示不可编辑的文字。&lt;/p&gt;
&lt;h2 id=&quot;属性检查器&quot;&gt;&lt;a href=&quot;#属
    
    </summary>
    
      <category term="ios" scheme="http://liuguoquan727.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="http://liuguoquan727.github.io/tags/ios/"/>
    
      <category term="swift" scheme="http://liuguoquan727.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="http://liuguoquan727.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之02应用界面</title>
    <link href="http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B02%E5%BA%94%E7%94%A8%E7%95%8C%E9%9D%A2/"/>
    <id>http://liuguoquan727.github.io/2016/11/25/iOS开发之02应用界面/</id>
    <published>2016-11-25T10:45:08.000Z</published>
    <updated>2016-11-25T12:33:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS界面应用界面主要是使用Cocoa Touch框架开发，它有一套自己的MVC模式，其中视图和控制器是UIKit中的UIVIew及其子类和UIVIewController及其子类。</p>
<h1 id="视图控制器"><a href="#视图控制器" class="headerlink" title="视图控制器"></a>视图控制器</h1><p>Cocoa Touch中UIVIewController是所有控制器的基类，视图控制器有很多种，下面先介绍一个iOS中的控制器种类和生命周期。</p>
<h2 id="视图控制器种类"><a href="#视图控制器种类" class="headerlink" title="视图控制器种类"></a>视图控制器种类</h2><p>与导航相关的视图控制器如下所示：</p>
<ul>
<li><p>UIViewController： 用于自定义视图控制器的导航。例如对于两个界面的跳转，可以用一个UIViewController来控制另两个UIViewController。</p>
</li>
<li><p>UINavigationController：导航控制器，它与UITableViewController结合使用，能够构建树形结构导航模式</p>
</li>
<li><p>UITabBarController： 标签栏控制器，用于构建树形标签导航模式</p>
</li>
<li><p>UIPageViewController：呈现电子书导航风格控制器</p>
</li>
<li><p>UISplitViewController：可以把屏幕分割成几块的视图控制器，主要为iPad屏幕设计</p>
</li>
<li><p>UIPopoverController：呈现气泡风格视图的控制器，主要为iPad屏幕设计。</p>
</li>
</ul>
<h2 id="视图的生命周期"><a href="#视图的生命周期" class="headerlink" title="视图的生命周期"></a>视图的生命周期</h2><p>在应用运行过程中视图会显示不同的状态，这就是应用的生命周期。视图生命周期的不同阶段会回调视图控制器的不同的方法，视图控制器的生命周期如下图所示：</p>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""></p>
<p>视图的生命周期主要有四种状态：</p>
<ul>
<li>视图创建</li>
</ul>
<p>视图创建不加载到内存中，会调用viewDidLoad方法，但是视图此时并不可见。该方法中通常会对所控制的视图进行初始化处理。viewDidLoad方法在应用运行的时候只调用一次。</p>
<ul>
<li>视图可见</li>
</ul>
<p>视图可见前后会调用viewWillAppear和viewDidAppear两个方法。</p>
<ul>
<li>视图不可见</li>
</ul>
<p>视图不可见前后会调用viewWillDisappear和viewDidDisappear两个方法。</p>
<ul>
<li>系统低内存</li>
</ul>
<p>在低内存情况下，iOS系统会调用didReceiveMemoryWarning方法，该方法的功能是释放内存，包括视图控制器中的一些成员变量和视图的释放。</p>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>Cocoa Touch中UIViewC是所有视图的基类。</p>
<h2 id="UIView继承层次结构"><a href="#UIView继承层次结构" class="headerlink" title="UIView继承层次结构"></a>UIView继承层次结构</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/UIView%E7%BB%A7%E6%89%BF%E5%B1%82%E6%AC%A1%E5%9B%BE.png" alt=""></p>
<h2 id="视图分类"><a href="#视图分类" class="headerlink" title="视图分类"></a>视图分类</h2><p>苹果将UIKit框架中的视图分为以下几个类别：</p>
<ul>
<li>控件</li>
</ul>
<p>继承自UIController类，能够响应用户高级事件。</p>
<ul>
<li>窗口</li>
</ul>
<p>它是UIWindow对象，一个iOS应用只有一个UIWindow对象，它是所有子视图的父容器。</p>
<ul>
<li>容器视图</li>
</ul>
<p>它是UIScrollView、UIToolbar及它们的子类。UIScrollView的子类有UITextView、UITabView和UICollectionView，在内容超出屏幕时，它们可以提供水平或垂直滚动条。UIToolbar是非常特殊的容器，它能够包含其他控件，一般置于屏幕底部，特殊情况下也可以置于屏幕顶部。</p>
<ul>
<li>显示视图</li>
</ul>
<p>用于显示信息，包括UIImageView，UILabel、UIProgressView和UIActivityIndicatorView等</p>
<ul>
<li>文本和Web视图</li>
</ul>
<p>提供了能够显示多行文本的视图，包含UITextView和UIWebView，其中UITextView也属于容器视图，UIWebView是能够加载和显示HTML代码的视图。</p>
<ul>
<li>导航视图</li>
</ul>
<p>为用户提供从一个屏幕到另一个屏幕的导航视图，它包括UITabBar和UINavigationBar。</p>
<ul>
<li>警告框和操作表</li>
</ul>
<p>用于给用户提供一种反馈或者与用户进行交互。警告框是可以以动画方式弹出来的视图，而操作表是给用户可选择操作的视图，在iphone中它会从屏幕底部弹出，在iPad中则会出现在屏幕中央。</p>
<h2 id="应用界面构建层次"><a href="#应用界面构建层次" class="headerlink" title="应用界面构建层次"></a>应用界面构建层次</h2><p>一般情况下，iOS用于中只包含一个UIWindow。从UI构建层次来讲，UIWindow包含了一个根视图UIView。根视图一般也只有一个，置于UIWindow中。根视图类型决定了应用程序的类型。应用界面的构建层次是一种树形结构，如下图所示：</p>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/%E8%A7%86%E5%9B%BE%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt=""></p>
<p>简要介绍图中三个属性的含义：</p>
<ul>
<li>superview：获得父视图对象</li>
<li>subviews：获得子视图对象集合</li>
<li>window：获得视图所在的界面Window对象</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS界面应用界面主要是使用Cocoa Touch框架开发，它有一套自己的MVC模式，其中视图和控制器是UIKit中的UIVIew及其子类和UIVIewController及其子类。&lt;/p&gt;
&lt;h1 id=&quot;视图控制器&quot;&gt;&lt;a href=&quot;#视图控制器&quot; class=&quot;he
    
    </summary>
    
      <category term="ios" scheme="http://liuguoquan727.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="http://liuguoquan727.github.io/tags/ios/"/>
    
      <category term="swift" scheme="http://liuguoquan727.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="http://liuguoquan727.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之01基础</title>
    <link href="http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B01%E5%9F%BA%E7%A1%80/"/>
    <id>http://liuguoquan727.github.io/2016/11/25/iOS开发之01基础/</id>
    <published>2016-11-25T10:44:53.000Z</published>
    <updated>2016-11-25T10:49:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xcode中的iOS工程模板"><a href="#Xcode中的iOS工程模板" class="headerlink" title="Xcode中的iOS工程模板"></a>Xcode中的iOS工程模板</h1><p>iOS工程模板分为两类-Application和Framework &amp; Library。</p>
<h2 id="Application类型"><a href="#Application类型" class="headerlink" title="Application类型"></a>Application类型</h2><p>Application包含5个模板，具体如下所示：</p>
<ul>
<li>Master-Detail Application：可以构建树形结构导航模式应用，生成的代码中包含了导航控制器和表视图控制器等。</li>
<li>Page-Based Application：可以构建类似电子书效果的应用</li>
<li>Single View Application：可以构建简单的单个视图应用</li>
<li>Tabbed Application：可以构建标签导航模式的应用，生成的代码中包含了标签控制器和标签栏等。</li>
<li>Game： 可以构建基于iOS的游戏应用</li>
</ul>
<h2 id="Framework-amp-Library"><a href="#Framework-amp-Library" class="headerlink" title="Framework &amp; Library"></a>Framework &amp; Library</h2><ul>
<li>Cocoa Touch Framework 可以让开发者自定义应用于UIKit的框架</li>
<li>Cocoa Touch Static Library 可以让开发者创建基于Foundation框架的静态库。</li>
</ul>
<h1 id="Xcode中的iOS工程目录"><a href="#Xcode中的iOS工程目录" class="headerlink" title="Xcode中的iOS工程目录"></a>Xcode中的iOS工程目录</h1><p><img src="http://oeqfywnzb.bkt.clouddn.com/iOS%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84.png" alt="code中的iOS工程目录"></p>
<ul>
<li>AppDelegate.swift类文件:应用程序委托对象</li>
<li>ViewController.swift类文件：是视图控制器类，在工程中扮演着根视图和用户事件控制类的角色</li>
<li>Main.storyboard文件:故事板文件</li>
<li>LaunchScreen.storyboard：应用启动界面故事板文件</li>
<li>Assets.xcassets文件夹: 资源目录,可以用来管理图片</li>
<li>Info.plist:工程属性文件</li>
<li>Products组:工程将要生成的产品包</li>
</ul>
<blockquote>
<p>在访问资源文件时，文件夹和组是有区别的。访问文件夹中的资源时需要将文件夹作为路径。如果icon.png文件放在images文件夹下，则访问它的路径时images/icon.png，如果images是组，则访问它的路径是icon.png.</p>
</blockquote>
<h1 id="iOS应用生命周期"><a href="#iOS应用生命周期" class="headerlink" title="iOS应用生命周期"></a>iOS应用生命周期</h1><p>AppDelegate类在应用生命周期的不同阶段会回调不同的方法。首先介绍iOS应用的5中状态。</p>
<ul>
<li>Not Running（非运行状态）：应用没有运行或被系统终止</li>
<li>Inactive（前台非活动状态）：应用正在进入前台状态，但是还不能接受事件处理</li>
<li>Active（前台活动状态）：应用进入前台状态，能接受事件处理</li>
<li>Backgroud（后台状态）：应用进入后台状态，依然能够执行代码。如果有可执行的代码，就会执行代码；如果没有可执行的代码或者将可执行的代码执行完毕，应用会马上进入挂起状态</li>
<li>Suspend（挂起状态）：被挂起的应用不能执行代码。如果系统内存不够，应用会被终止。</li>
</ul>
<p>在应用状态切换的过程中，iOS系统会回调AppDelegate中的一些方法，并且发送一些通知。下面介绍几个主要的方法和通知。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>本地通知</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>application:didFinishLaunchingWithOptions</td>
<td>UIApllicationDidFinishedLaunchingNotification</td>
<td>应用启动并进行初始化时会调用该方法并发出通知。这个阶段会实例化根视图控制器</td>
</tr>
<tr>
<td>applicationDidBecomeActive</td>
<td>UIApplicationDidBecomeActiveNotification</td>
<td>应用进入前台并处于活动状态时调用该方法并发出通知。这个阶段可以恢复UI的状态</td>
</tr>
<tr>
<td>applicationWillResignActive</td>
<td>UIApplicationWillResignActiveNotification</td>
<td>应用从活动状态进入到非活动状态时调用该方法并发出通知。这个阶段可以保存UI状态</td>
</tr>
<tr>
<td>applicationDidEnterBackgroud</td>
<td>UIApplicationDidEnterBackgroudNotification</td>
<td>应用进入后台时调用该方法并发出通知。这个阶段可以保存用户数据，释放一些资源</td>
</tr>
<tr>
<td>applicationWillEnterForegroud</td>
<td>UIApplicationWillEnterForegroudNotification</td>
<td>应用进入到前台，但是还没有处于活动状态时调用该方法并发出通知。这个阶段可以恢复用户数据</td>
</tr>
<tr>
<td>applicationWillTerminate</td>
<td>UIApplicationWillTerminateNotification</td>
<td>应用被终止时调用该方法并发出通知，但内存清除时除外，这个阶段释放一些资源，也可以保存用户数据</td>
</tr>
</tbody>
</table>
<h2 id="非运行状态-应用启动场景"><a href="#非运行状态-应用启动场景" class="headerlink" title="非运行状态-应用启动场景"></a>非运行状态-应用启动场景</h2><p><strong>场景描述：</strong>用户点击应用图标时，可能是第一次启动这个应用，也可能是应用终止后再次启动。该场景的状态跃迁过程共经历两个阶段单个状态：Not running -&gt; Inactive -&gt; Active。</p>
<ul>
<li>Not running -&gt; Inactive阶段：调用application:didFinishLaunchingWithOptions方法，发出UIApllicationDidFinishedLaunchingNotification通知。</li>
<li>Inactive -&gt; Active阶段：调用applicationDidBecomeActive方法，发出UIApplicationDidBecomeActiveNotification通知。</li>
</ul>
<h2 id="点击Home键-应用退出场景"><a href="#点击Home键-应用退出场景" class="headerlink" title="点击Home键-应用退出场景"></a>点击Home键-应用退出场景</h2><p><strong>场景描述：</strong>应用出于运行状态（即Active状态）时点击Home键应用会退出。该场景的状态变迁过程分为两种情况：可以在后台运行或者挂起和不可以在后台运行或挂起，可以根据工程属性文件Info.plist中的属性Application does not run in background来控制这两种状态。</p>
<h3 id="应用可以在后台运行或者挂起"><a href="#应用可以在后台运行或者挂起" class="headerlink" title="应用可以在后台运行或者挂起"></a>应用可以在后台运行或者挂起</h3><p>该场景的状态变迁共经历3个阶段4个状态：Activie -&gt; Inactive -&gt; Backgroud -&gt; Suspend。</p>
<ul>
<li>Activie -&gt; Inactive阶段：调用applicationWillResignActive方法，发出UIApplicationWillResignActiveNotification通知。</li>
<li>Inactive -&gt; Backgroud阶段：应用从非活动状态进入到后台（不涉及重点的方法和通知）。</li>
<li>Backgroud -&gt; Suspend阶段：调用applicationDidEnterBackground方法，发出UIApplicationDidEnterBackgroudNotification通知。</li>
</ul>
<h3 id="应用不可以在后台运行或挂起"><a href="#应用不可以在后台运行或挂起" class="headerlink" title="应用不可以在后台运行或挂起"></a>应用不可以在后台运行或挂起</h3><p>该场景下的状态变迁共经历4个阶段5种状态：Activie -&gt; Inactive -&gt; Backgroud -&gt; Suspend -&gt; Not Running。</p>
<ul>
<li>Activie -&gt; Inactive阶段：调用applicationWillResignActive方法，发出UIApplicationWillResignActiveNotification通知。</li>
<li>Inactive -&gt; Backgroud阶段：应用从非活动状态进入到后台（不涉及重点的方法和通知）</li>
<li>Backgroud -&gt; Suspend阶段：调用applicationDidEnterBackground方法，发出UIApplicationDidEnterBackgroudNotification通知</li>
<li>Suspend -&gt; Not Running阶段：调用applicationWillTerminate方法，发出UIApplicationWillTerminateNotification通知。</li>
</ul>
<h2 id="挂起重新运行场景"><a href="#挂起重新运行场景" class="headerlink" title="挂起重新运行场景"></a>挂起重新运行场景</h2><p><strong>场景描述：</strong>挂起状态的应用重新运行。该场景的状态变迁过程共经历三个阶段4种状态：Suspend -&gt; Backgroud -&gt; Inactive -&gt; Active。</p>
<ul>
<li>Suspend -&gt; Backgroud阶段：应用从挂起状态进入到后台（不涉及重点的方法和通知）</li>
<li>Backgroud -&gt; Inactive：调用applicationWillEnterForeground方法，发出UIApplicationWillEnterForegroudNotification通知。</li>
<li>Inactive -&gt; Active：调用applicationDidBecomeActive方法，发出UIApplicationDidBecomeActiveNotification通知。</li>
</ul>
<h2 id="内存清楚-应用终止场景"><a href="#内存清楚-应用终止场景" class="headerlink" title="内存清楚-应用终止场景"></a>内存清楚-应用终止场景</h2><p><strong>场景描述：</strong>应用在后台处理完成时进入挂起状态（这是一种休眠状态），如果这时发出低内存警告，为了满足其他应用对内存的需要，该应用就会被清除内存从而终止运行。该场景的变迁过程为：Backgroud -&gt; Suspend -&gt; Not running。</p>
<p>内存清除的时候应用终止运行。内存清除有两种情况，可能是系统强制清楚内存，也可能是由使用者从任务栏中手动清除。内存清除后如果应用再次运行，上一次的运行状态不会被保存，相对于应用第一次运行。</p>
<blockquote>
<p>在内存清除的场景下，应用不会调用任何方法，也不会发出任何通知。</p>
</blockquote>
<h1 id="iOS-API-简介"><a href="#iOS-API-简介" class="headerlink" title="iOS API 简介"></a>iOS API 简介</h1><p>iOS的整体架构图参见图2-28，分为4层-Cocoa Touch层，Media层，Core Service层和Core OS层。</p>
<h2 id="Cocoa-Touch层"><a href="#Cocoa-Touch层" class="headerlink" title="Cocoa Touch层"></a>Cocoa Touch层</h2><p>Cocoa Touch层提供了构建iOS应用的一些基本系统服务（如多任务、触摸输入和推送通知等）和关键框架。</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ConatactsUI</td>
<td>CN</td>
<td>访问通讯录相关UI类</td>
</tr>
<tr>
<td>EventKitUI</td>
<td>EK</td>
<td>访问日历事件数据</td>
</tr>
<tr>
<td>GameKit</td>
<td>GK</td>
<td>提供能够进行点对点通信的网络通信API</td>
</tr>
<tr>
<td>iAd</td>
<td>AD</td>
<td>广告API</td>
</tr>
<tr>
<td>MapKit</td>
<td>MK</td>
<td>地图API</td>
</tr>
<tr>
<td>MessageUI</td>
<td>MF</td>
<td>电子邮件消息相关API</td>
</tr>
<tr>
<td>PhotosUi</td>
<td>PF</td>
<td>照片API</td>
</tr>
<tr>
<td>Twitter</td>
<td>TW</td>
<td>提供发送Twitter API</td>
</tr>
<tr>
<td>UIKit</td>
<td>UK</td>
<td>提供UI类</td>
</tr>
<tr>
<td>WatchKit</td>
<td>Wk</td>
<td>Apple Watch相关类</td>
</tr>
</tbody>
</table>
<h2 id="Media层"><a href="#Media层" class="headerlink" title="Media层"></a>Media层</h2><p>Media层提供了图形、音频、视频和AirPlay技术等。</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Assets Library</td>
<td>Al</td>
<td>访问图片和视频的API</td>
</tr>
<tr>
<td>AudioToolBox</td>
<td>Audio</td>
<td>录制或播放视频、音频流以及格式转换</td>
</tr>
<tr>
<td>AudioUnit</td>
<td>Audio、AU</td>
<td>使用内置音频单元服务以及音频处理模块</td>
</tr>
<tr>
<td>AV Foundation</td>
<td>AV</td>
<td>播放与录制音频和视频的OC API</td>
</tr>
<tr>
<td>Core Audio</td>
<td>Audio</td>
<td>录制、制作、播放音频的C语言接口</td>
</tr>
<tr>
<td>Core Graphics</td>
<td>CG</td>
<td>提供Quartz 2D接口</td>
</tr>
<tr>
<td>Core Image</td>
<td>CI</td>
<td>操作视频和静态图像的接口</td>
</tr>
<tr>
<td>Core MIDI</td>
<td>MIDI</td>
<td>处理MIDI数据的底层API</td>
</tr>
<tr>
<td>Core Text</td>
<td>CT</td>
<td>渲染文本和处理字体的简单、高效的C语言接口</td>
</tr>
<tr>
<td>Core Video</td>
<td>CV</td>
<td>处理音频和视频的API</td>
</tr>
<tr>
<td>Image I/O</td>
<td>CG</td>
<td>读写图像数据类</td>
</tr>
<tr>
<td>GLKit</td>
<td>GLK</td>
<td>构建复杂OpenGL ES应用的OC应用类</td>
</tr>
<tr>
<td>Media Player</td>
<td>MP</td>
<td>播放接口</td>
</tr>
<tr>
<td>OpenAl</td>
<td>AL</td>
<td>包含了OpenAL（跨平台）的C接口</td>
</tr>
<tr>
<td>OpenGL ES</td>
<td>GL</td>
<td>包含OpenGL ES（跨平台的2D/3D图形库）的C语言接口</td>
</tr>
<tr>
<td>Quartz Core</td>
<td>CA</td>
<td>提供动画接口类</td>
</tr>
<tr>
<td>Sprite Kit</td>
<td>SK</td>
<td>苹果提供的基于2D游戏的开发引擎</td>
</tr>
<tr>
<td>Scene Kit</td>
<td>SCK</td>
<td>一种高级别的3D图像框架，能创建3D动画场景和特效</td>
</tr>
</tbody>
</table>
<h2 id="Core-Services层"><a href="#Core-Services层" class="headerlink" title="Core Services层"></a>Core Services层</h2><p>Core Services层提供了CloudKit、HealthKit、HomeKit、SQLite和XML支持等技术</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accounts</td>
<td>AC</td>
<td>用于访问用户的Twitter账户</td>
</tr>
<tr>
<td>Contacts</td>
<td>CN</td>
<td>访问通讯录信息</td>
</tr>
<tr>
<td>AdSupport</td>
<td>AS</td>
<td>获得iAd广告标识</td>
</tr>
<tr>
<td>CFNetwork</td>
<td>CF</td>
<td>提供了访问Wi-Fi网络和蜂窝移动网络的API</td>
</tr>
<tr>
<td>Core Data</td>
<td>NS</td>
<td>提供管理应用数据的ORM接口</td>
</tr>
<tr>
<td>CoreFoundation</td>
<td>CF</td>
<td>最基本的框架包括数据集</td>
</tr>
<tr>
<td>Core Location</td>
<td>CL</td>
<td>定位服务的API</td>
</tr>
<tr>
<td>CoreMedia</td>
<td>CM</td>
<td>提供AV Foundation框架使用的底层媒体类型，可以精确控制音频或视频的创建及展示</td>
</tr>
<tr>
<td>CoreMotion</td>
<td>CM</td>
<td>接收和处理重力加速度以及其他的运动操作</td>
</tr>
<tr>
<td>CoreTelephony</td>
<td>CT</td>
<td>提供访问电话基本信息的API</td>
</tr>
<tr>
<td>Event Kit</td>
<td>EK</td>
<td>访问日历事件数据</td>
</tr>
<tr>
<td>Foundation</td>
<td>NS</td>
<td>是OC最基本的框架</td>
</tr>
<tr>
<td>JavaScriptCore.framework</td>
<td>JS</td>
<td>实现OC与JS的相互调用</td>
</tr>
<tr>
<td>MobileCoreServices</td>
<td>UT</td>
<td>定义统一标识符类型（UIT）使用的底层类型</td>
</tr>
<tr>
<td>Newsstand Kit</td>
<td>NK</td>
<td>提供在后台下载杂志和新闻的API接口</td>
</tr>
<tr>
<td>Pass Kit</td>
<td>PK</td>
<td>提供访问优惠券的API</td>
</tr>
<tr>
<td>QuickLock</td>
<td>QL</td>
<td>提供预览无法直接查看的文件内容</td>
</tr>
<tr>
<td>Social</td>
<td>SL</td>
<td>提供社交网络访问API，中国区提供新浪微博的API</td>
</tr>
<tr>
<td>Store Kit</td>
<td>SK</td>
<td>提供处理应用内置收费的资金交易</td>
</tr>
<tr>
<td>SystemConfiguration</td>
<td>SC</td>
<td>用于确定设备的网络配置，也可以用于判断某个主机服务是否可以使用</td>
</tr>
<tr>
<td>Cloud Kit</td>
<td>CK</td>
<td>开发iCloud应用的API</td>
</tr>
<tr>
<td>Health Kit</td>
<td>HK</td>
<td>开发健康和健身等服务的API</td>
</tr>
<tr>
<td>Home Kit</td>
<td>HM</td>
<td>能够与用户家中连接的设备通信并进行控制</td>
</tr>
</tbody>
</table>
<h2 id="Core-OS层"><a href="#Core-OS层" class="headerlink" title="Core OS层"></a>Core OS层</h2><p>Core OS层提供了一些低级功能，一般不直接使用它。</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accelerate</td>
<td>AC</td>
<td>访问重力加速计API</td>
</tr>
<tr>
<td>Core Bluetooth</td>
<td>CB</td>
<td>访问低功耗蓝牙设备API</td>
</tr>
<tr>
<td>External Accessory</td>
<td>EA</td>
<td>访问外围配件API接口</td>
</tr>
<tr>
<td>Generic Security Services</td>
<td>GSS</td>
<td>提供一组安全相关的服务</td>
</tr>
<tr>
<td>Security</td>
<td>CSSM</td>
<td>管理证书、公钥、私钥和安全信任策略的API</td>
</tr>
<tr>
<td>LocalAuthentication</td>
<td>LA</td>
<td>提供用户指定的安全策略进行安全认证</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Xcode中的iOS工程模板&quot;&gt;&lt;a href=&quot;#Xcode中的iOS工程模板&quot; class=&quot;headerlink&quot; title=&quot;Xcode中的iOS工程模板&quot;&gt;&lt;/a&gt;Xcode中的iOS工程模板&lt;/h1&gt;&lt;p&gt;iOS工程模板分为两类-Applicatio
    
    </summary>
    
      <category term="ios" scheme="http://liuguoquan727.github.io/categories/ios/"/>
    
    
      <category term="ios" scheme="http://liuguoquan727.github.io/tags/ios/"/>
    
      <category term="swift" scheme="http://liuguoquan727.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="http://liuguoquan727.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>DiffUtil在RecyclerView中的使用</title>
    <link href="http://liuguoquan727.github.io/2016/11/25/Android%20DiffUtil%E5%9C%A8RecyclerView%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://liuguoquan727.github.io/2016/11/25/Android DiffUtil在RecyclerView中的使用/</id>
    <published>2016-11-25T10:31:12.000Z</published>
    <updated>2016-11-25T12:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>DiffUtil是recyclerview support library v7 24.2.0版本中新增的类，根据Google官方文档的介绍，DiffUtil的作用是比较两个数据列表并能计算出一系列将旧数据表转换成新数据表的操作。这个概念比较抽象，换一种方式理解，DiffUtil是一个工具类，当你的RecyclerView需要更新数据时，将新旧数据集传给它，它就能快速告知adapter有哪些数据需要更新。</p>
<p>那么相比直接调用adapter.notifyDataSetChange()方法，使用DiffUtil有什么优势呢？它能在收到数据集后，提高UI更新的效率，而且你也不需要自己对新老数据集进行比较了。</p>
<p>顾名思义，凡是数据集的比较DiffUtil都能做，所以用处并不止于更新RecyclerView。DiffUtil也提供了回调让你可以进行其他操作。本文只介绍使用DiffUtil更新RecyclerView。</p>
<h1 id="DiffUtil简介"><a href="#DiffUtil简介" class="headerlink" title="DiffUtil简介"></a>DiffUtil简介</h1><p>在使用DiffUtil前我们先简单看看DiffUtil的特性。DiffUtil使用Eugene W. Myers的Difference算法来计算出将一个数据集转换为另一个的最小更新量，也就是用最简单的方式将一个数据集转换为另一个。除此之外，DiffUtil还可以识别一项数据在数据集中的移动。Eugene的算法对控件进行了优化，在查找两个数据集间最少加减操作时的空间复杂度为O(N)，时间复杂度为<code>O(N+D^2)</code>。而如果添加了对数据条目移动的识别，复杂度就会提高到<code>O(N^2)</code>。<strong>所以如果数据集中数据不存在移位情况，你可以关闭移动识别功能来提高性能。当数据集较大时，你应该在后台线程计算数据集的更新。</strong></p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="DiffUtil类"><a href="#DiffUtil类" class="headerlink" title="DiffUtil类"></a>DiffUtil类</h2><ul>
<li>DiffUtil.Callback：这是最核心的类,你可以将它理解成比较新老数据集时的规则。</li>
<li>DiffUtil：通过静态方法<code>DiffUtil.calculateDiff(DiffUtil.Callback)</code>来计算数据集的更新。</li>
<li>DiffResult：是DiffUtil的计算结果对象，通过<code>DiffResult.dispatchUpdatesTo(RecyclerView.Adapter)</code>来进行更新。</li>
</ul>
<p>代码模式为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> DiffCallBack(mDatas, newDatas), <span class="keyword">true</span>);</div><div class="line">mAdapter.setDatas(newDatas);</div><div class="line">diffResult.dispatchUpdatesTo(mAdapter);</div></pre></td></tr></table></figure>
<p><code>dispatchUpdatesTo()</code>方法它会自动计算新老数据集的差异，并根据差异情况，自动调用以下四个方法</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">adapter.notifyItemRangeInserted(position, <span class="built_in">count</span>)<span class="comment">;</span></div><div class="line">adapter.notifyItemRangeRemoved(position, <span class="built_in">count</span>)<span class="comment">;</span></div><div class="line">adapter.notifyItemMoved(fromPosition, toPosition)<span class="comment">;</span></div><div class="line">adapter.notifyItemRangeChanged(position, <span class="built_in">count</span>, payload)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="DiffUtil-Callback抽象类"><a href="#DiffUtil-Callback抽象类" class="headerlink" title="DiffUtil.Callback抽象类"></a>DiffUtil.Callback抽象类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回旧数据集的大小</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> The size of the old list.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getOldListSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回新数据集的大小</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> The size of the new list.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getNewListSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 比较两个Item对象是否是同一个对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> oldItemPosition The position of the item in the old list</div><div class="line">     * <span class="doctag">@param</span> newItemPosition The position of the item in the new list</div><div class="line">     * <span class="doctag">@return</span> True if the two items represent the same object or false if they are different.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 比较两个Item对象的内容是否相同</div><div class="line">     * Called by the DiffUtil when it wants to check whether two items have the same data.</div><div class="line">     * DiffUtil uses this information to detect if the contents of an item has changed.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * DiffUtil uses this method to check equality instead of &#123;<span class="doctag">@link</span> Object#equals(Object)&#125;</div><div class="line">     * so that you can change its behavior depending on your UI.</div><div class="line">     * For example, if you are using DiffUtil with a</div><div class="line">     * &#123;<span class="doctag">@link</span> android.support.v7.widget.RecyclerView.Adapter RecyclerView.Adapter&#125;, you should</div><div class="line">     * return whether the items' visual representations are the same.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * This method is called only if &#123;<span class="doctag">@link</span> #areItemsTheSame(int, int)&#125; returns</div><div class="line">     * &#123;<span class="doctag">@code</span> true&#125; for these items.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> oldItemPosition The position of the item in the old list</div><div class="line">     * <span class="doctag">@param</span> newItemPosition The position of the item in the new list which replaces the</div><div class="line">     *                        oldItem</div><div class="line">     * <span class="doctag">@return</span> True if the contents of the items are the same or false if they are different.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * areItemsTheSame()返回true而areContentsTheSame()返回false时调用，也就是说两个对象代表的数据是一条，但是内容更新了。</div><div class="line">     * When &#123;<span class="doctag">@link</span> #areItemsTheSame(int, int)&#125; returns &#123;<span class="doctag">@code</span> true&#125; for two items and</div><div class="line">     * &#123;<span class="doctag">@link</span> #areContentsTheSame(int, int)&#125; returns false for them, DiffUtil</div><div class="line">     * calls this method to get a payload about the change.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * For example, if you are using DiffUtil with &#123;<span class="doctag">@link</span> RecyclerView&#125;, you can return the</div><div class="line">     * particular field that changed in the item and your</div><div class="line">     * &#123;<span class="doctag">@link</span> android.support.v7.widget.RecyclerView.ItemAnimator ItemAnimator&#125; can use that</div><div class="line">     * information to run the correct animation.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Default implementation returns &#123;<span class="doctag">@code</span> null&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> oldItemPosition The position of the item in the old list</div><div class="line">     * <span class="doctag">@param</span> newItemPosition The position of the item in the new list</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> A payload object that represents the change between the two items.</div><div class="line">     */</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getChangePayload</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="DiffUtil步骤"><a href="#DiffUtil步骤" class="headerlink" title="DiffUtil步骤"></a>DiffUtil步骤</h2><ol>
<li>自定义类继承DiffUtil.Callback，通过重写特定方法给出数据比较逻辑。</li>
<li>调用<code>DiffUtil.calculateDiff(DiffUtil.Callback callback,boolean detectMove)</code>来计算更新，得到DiffResult对象。第二个参数可省，意为是否探测数据的移动，是否关闭需要根据数据集情况来权衡。当数据集很大时，此操作可能耗时较长，需要异步计算。</li>
<li>在UI线程中调用DiffResult.dispatchUpdatesTo(RecyclerView.Adapter)，而后Adapter的onBindViewHolder(RecyclerView.ViewHolder holder, int position, Listpayloads)。注意这个方法比必须覆盖的onBindViewHolder(RecyclerView.ViewHolder holder, int position)方法多一个参数payloads，而里面存储了数据的更新。</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="初始化RecyclerView"><a href="#初始化RecyclerView" class="headerlink" title="初始化RecyclerView"></a>初始化RecyclerView</h2><ul>
<li>新建一个Bean为Item：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.materialdesign.bean;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/10/18.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> id = <span class="number">0</span>;</div><div class="line">  <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>新建Adapter</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffUtilAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">DiffUtilAdapter</span>.<span class="title">DiffItemHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Context mContext;</div><div class="line">  <span class="keyword">private</span> List&lt;Item&gt; mDatas;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DiffUtilAdapter</span><span class="params">(Context context, List&lt;Item&gt; datas)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mContext = context;</div><div class="line">    <span class="keyword">this</span>.mDatas = datas;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatas</span><span class="params">(List&lt;Item&gt; mDatas)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mDatas = mDatas;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> DiffItemHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">    View view = LayoutInflater.from(mContext).inflate(R.layout.item_diff_util, parent, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DiffItemHolder(view);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(DiffItemHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    Item info = mDatas.get(position);</div><div class="line">    holder.mInfo.setText(info.getName());</div><div class="line">    Log.d(<span class="string">"lgq"</span>,<span class="string">"onBindViewHolder"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    <span class="comment">//payloads就是DiffUtil.Callback中的getChangePayload方法返回的数据集</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(DiffItemHolder holder, <span class="keyword">int</span> position, List&lt;Object&gt; payloads)</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (payloads.isEmpty()) &#123;</div><div class="line">      onBindViewHolder(holder,position);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//更新item</span></div><div class="line">      Bundle bundle = (Bundle) payloads.get(<span class="number">0</span>);</div><div class="line">      <span class="keyword">for</span>(String key : bundle.keySet()) &#123;</div><div class="line">        <span class="keyword">switch</span> (key) &#123;</div><div class="line">          <span class="keyword">case</span> <span class="string">"name"</span>:</div><div class="line">            holder.mInfo.setText((CharSequence) bundle.get(key));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mDatas != <span class="keyword">null</span> ? mDatas.size() : <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffItemHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.info) TextView mInfo;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiffItemHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>(itemView);</div><div class="line">      ButterKnife.bind(<span class="keyword">this</span>, itemView);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>初始化ReyclerView</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>;i++) &#123;</div><div class="line">    Item item = <span class="keyword">new</span> Item(i,<span class="string">"liu"</span>+i);</div><div class="line">    mDatas.add(item);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  mAdapter = <span class="keyword">new</span> DiffUtilAdapter(<span class="keyword">this</span>,mDatas);</div><div class="line">  mList.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>,LinearLayoutManager.VERTICAL,<span class="keyword">false</span>));</div><div class="line">  mList.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</div><div class="line">  mList.setAdapter(mAdapter);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化RecyclerView后效果为：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/diff-normal.png" alt=""></p>
<h2 id="实现DiffUtil-Callback"><a href="#实现DiffUtil-Callback" class="headerlink" title="实现DiffUtil.Callback"></a>实现DiffUtil.Callback</h2><p>新建类继承DiffUtil.Callback</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffCallback</span> <span class="keyword">extends</span> <span class="title">DiffUtil</span>.<span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> List&lt;Item&gt; mOldDatas;</div><div class="line">  <span class="keyword">private</span> List&lt;Item&gt; mNewDatas;</div><div class="line"></div><div class="line">  <span class="comment">//传入旧数据和新数据的集合</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DiffCallback</span><span class="params">(List&lt;Item&gt; oldDatas,List&lt;Item&gt; newDatas)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mOldDatas = oldDatas;</div><div class="line">    <span class="keyword">this</span>.mNewDatas = newDatas;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOldListSize</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mOldDatas != <span class="keyword">null</span> ? mOldDatas.size() : <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNewListSize</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mNewDatas != <span class="keyword">null</span> ? mNewDatas.size() : <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 被DiffUtil调用，用来判断 两个对象是否是相同的Item。</div><div class="line">   * 例如，如果你的Item有唯一的id字段，这个方法就 判断id是否相等。</div><div class="line">   * 本例判断id字段是否一致</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> is = mOldDatas.get(oldItemPosition).id == mNewDatas.get(newItemPosition).id;</div><div class="line">    Log.d(<span class="string">"lgq"</span>,<span class="string">"areItemsTheSame "</span> +oldItemPosition + <span class="string">" "</span> + newItemPosition + <span class="string">" "</span> + is);</div><div class="line">    <span class="keyword">return</span> is;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/*</span></div><div class="line">   * 被DiffUtil调用，用来检查 两个item是否含有相同的数据</div><div class="line">   * 这个方法仅仅在areItemsTheSame()返回true时，才调用。</div><div class="line">   * @param oldItemPosition The position of the item in the old list</div><div class="line">   * @param newItemPosition The position of the item in the new list which replaces the</div><div class="line">   *                        oldItem</div><div class="line">   * @return True if the contents of the items are the same or false if they are different.</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">    String oldName = mOldDatas.get(oldItemPosition).getName();</div><div class="line">    String newName = mNewDatas.get(newItemPosition).getName();</div><div class="line">    Log.d(<span class="string">"lgq"</span>,<span class="string">"areContentsTheSame"</span></div><div class="line">        + <span class="string">" "</span> +oldName + <span class="string">" "</span> + newName);</div><div class="line">    <span class="keyword">if</span> (!oldName.equals(newName)) &#123;</div><div class="line">      Log.d(<span class="string">"lgq"</span>,<span class="string">"false"</span>);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * areItemsTheSame()返回true而areContentsTheSame()返回false，也就是说两个对象代表的数据是一条，但是内容更新了。</div><div class="line">   * <span class="doctag">@param</span> oldItemPosition</div><div class="line">   * <span class="doctag">@param</span> newItemPosition</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="meta">@Nullable</span> <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">getChangePayload</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">    String oldItem = mOldDatas.get(oldItemPosition).getName();</div><div class="line">    String newItem = mNewDatas.get(newItemPosition).getName();</div><div class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">    <span class="keyword">if</span> (!oldItem.equals(newItem)) &#123;</div><div class="line">        bundle.putString(<span class="string">"name"</span>,newItem);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bundle.size() == <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    Log.d(<span class="string">"lgq"</span>,<span class="string">"getChangePayload"</span>);</div><div class="line">    <span class="keyword">return</span> bundle;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用DiffUtil"><a href="#使用DiffUtil" class="headerlink" title="使用DiffUtil"></a>使用DiffUtil</h2><p>下面通过两种不同的改变RecyclerView条目来介绍DiffUtil的使用。</p>
<ul>
<li>增加或删除条目</li>
</ul>
<p>这种情况下，数据集的大小改变，反映在RecyclerView的效果就是增加或者删除条目</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  mNewDatas.clear();</div><div class="line">  mNewDatas.addAll(mDatas);</div><div class="line">  mNewDatas.add(<span class="keyword">new</span> Item(<span class="number">89</span>,<span class="string">"xiao"</span>));</div><div class="line">  mNewDatas.add(<span class="keyword">new</span> Item(<span class="number">90</span>,<span class="string">"xia"</span>));</div><div class="line">  DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> DiffCallback(mDatas,mNewDatas),<span class="keyword">true</span>);</div><div class="line">  mAdapter.setDatas(mNewDatas);</div><div class="line">  diffResult.dispatchUpdatesTo(mAdapter);</div><div class="line">  mDatas.clear();</div><div class="line">  mDatas.addAll(mNewDatas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>增加条目后的RecyclerView的效果为：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/diff-after-add.png" alt=""></p>
<ul>
<li>更新具体的条目</li>
</ul>
<p>这种情况下数据集大小不改变，改变数据集中条目的内容，反映在RecyclerView的效果就是更新具体的条目，这回调用Callback中的getChangePayload方法，而Adapter必须要实现<code>public void onBindViewHolder(DiffItemHolder holder, int position, List&lt;Object&gt; payloads)</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</div><div class="line">  mNewDatas.clear();</div><div class="line">  mNewDatas.addAll(mDatas);</div><div class="line">  <span class="comment">//改变第三个位置的对象</span></div><div class="line">  Item item = <span class="keyword">new</span> Item(<span class="number">3</span>,<span class="string">"zhang"</span>);</div><div class="line">  mNewDatas.remove(<span class="number">3</span>);</div><div class="line">  mNewDatas.add(<span class="number">3</span>,item);</div><div class="line">  DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> DiffCallback(mDatas,mNewDatas),<span class="keyword">true</span>);</div><div class="line">  <span class="comment">//将新数据给Adapter</span></div><div class="line">  mAdapter.setDatas(mNewDatas);</div><div class="line">  diffResult.dispatchUpdatesTo(mAdapter);</div><div class="line">  mDatas.clear();</div><div class="line">  mDatas.addAll(mNewDatas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更新条目后的RecyclerView效果为：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/diff-after-refresh.png" alt=""></p>
<p>由图可知，第四个位置的条目显示变为zhang。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>DiffUtil可用于高效进行RecyclerView的数据更新，但DiffUtil本身的作用是计算数据集的最小更新。DiffUtil有强大的算法支撑，可以利用DiffUtil完成许多其他功能。</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p><a href="https://github.com/liuguoquan727/MaterialDesignDemo/blob/master/app/src/main/java/com/michael/materialdesign/recyclerview/DiffUtilActivity.java" target="_blank" rel="external">在RecyclerView目录下</a></p>
<p>参考文章:</p>
<p><a href="http://blog.chengdazhi.com/index.php/231?sukey=3997c0719f151520abc3703315e3fef6e18ec9dce4f81882490fce74f3aae8be1eb373fcd36a9b3faaddddcea988dbfa" target="_blank" rel="external">使用DiffUtil高效更新RecyclerView</a><br><a href="http://blog.csdn.net/zxt0601/article/details/52562770" target="_blank" rel="external">详解7.0带来的新工具类：DiffUtil</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;DiffUtil是recyclerview support library v7 24.2.0版本中新增的类，根据Google官方文档的介绍
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="实战" scheme="http://liuguoquan727.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Android LoaderManager使用详解</title>
    <link href="http://liuguoquan727.github.io/2016/09/12/Android_LoaderManager%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://liuguoquan727.github.io/2016/09/12/Android_LoaderManager使用详解/</id>
    <published>2016-09-12T12:23:25.000Z</published>
    <updated>2016-09-12T08:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LoaderManager是什么？"><a href="#LoaderManager是什么？" class="headerlink" title="LoaderManager是什么？"></a>LoaderManager是什么？</h1><p>LoaderManager用来负责管理与Activity或者Fragment联系起来的一个或多个Loaders对象。每个Activity或者Fragment都有唯一的一个LoaderManager实例，用来启动、停止、保持、重启、关闭它的Loaders。这些事件有时直接在客户端通过调用initLoader()/restartLoader()/destroyLoader()函数来实现。通常这些事件通过主要的Activity/Fragment声明周期事件来触发，而不是手动（当然也可以手动调用）。比如，当一个Activity关闭时（destroyed），改活动将指示它的LoaderManager来销毁并且关闭它的Loaders（当然也会销毁并关闭与这些Loaders关联的资源，比如Cursor）。  </p>
<p>LoaderManager并不知道数据如何装载以及何时需要装载。相反地，LoaderManager只需要控制它的Loaders们开始、停止、重置他们的Load行为，在配置变换（比如横竖屏切换）时保持loaders们的状态，并提供一个简单的接口来获取load结果到客户端中。</p>
<h1 id="实现LoaderManager-LoaderCallbacks接口"><a href="#实现LoaderManager-LoaderCallbacks接口" class="headerlink" title="实现LoaderManager.LoaderCallbacks接口"></a>实现LoaderManager.LoaderCallbacks<d>接口</d></h1><p>LoaderManager.LoaderCallbacks<d>接口LoaderManager用来向客户返回数据的方式。每个Loader都有自己的回调对象供与LoaderManager进行交互。该回调对象在实现LoaderManager中地位很高，告诉LoaderManager如何实例化Loader(onCreateLoader)，以及当载入行为结束或者重启（onLoadFinished或者onLoadReset）之后执行什么操作。大多数情况，你需要把该接口实现为组件的一部分，比如说让你的Activity或者Fragment实现LoadManager.LoaderCallbacks<d>接口。</d></d></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LoaderManager</span>.<span class="title">LoaderCallbacks</span>&lt;<span class="title">D</span>&gt; </span>&#123;  </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Loader&lt;D&gt; <span class="title">onCreateLoader</span><span class="params">(<span class="keyword">int</span> id, Bundle args)</span> </span>&#123; ... &#125;  </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(Loader&lt;D&gt; loader, D data)</span> </span>&#123; ... &#125;  </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoaderReset</span><span class="params">(Loader&lt;D&gt; loader)</span> </span>&#123; ... &#125;  </div><div class="line"></div><div class="line">  <span class="comment">/* ... */</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦实现该接口，客户端将回调对象（本例中为“this”）作为LoaderManager的initLoader函数的第三个参数传输。<br>总的来说，实现回调接口非常直接明了。每个回调方法都有各自明确的与LoaderManager进行交互的目的：</p>
<ul>
<li>onCreateLoader是一个工厂方法，用来返回一个新的Loader。LoaderManager将会在它第一次创建Loader的时候调用该方法。</li>
<li>onLoadFinished方法将在Loader创建完毕的时候自动调用。典型用法是，当载入数据完毕，客户端（译者注：调用它的Activity之类的）需要更新应用UI。客户端假设每次有新数据的时候，新数据都会返回到这个方法中。记住，检测数据源是Loader的工作，Loader也会执行实际的同步载入操作。一旦Loader载入数据完成，LoaderManager将会接受到这些载入数据，并且将将结果传给回调对象的onLoadFinished方法，这样客户端（比如Activity或者Fragment）就能使用该数据了。</li>
<li>最后，当Loader们的数据被重置的时候将会调用onLoadReset。该方法让你可以从就的数据中移除不再有用的数据。</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.loadermanagerdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.os.Looper;</div><div class="line"><span class="keyword">import</span> android.provider.MediaStore;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.LoaderManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.CursorLoader;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.FileProvider;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.Loader;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.PermissionChecker;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> com.orhanobut.logger.Logger;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">LoaderManager</span>.<span class="title">LoaderCallbacks</span>&lt;<span class="title">Cursor</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] PROJECTION = <span class="keyword">new</span> String[] &#123; MediaStore.Images.Media._ID, MediaStore.Images.Media.DATA &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">final</span> String[] DOC_PROJECTION = &#123;</div><div class="line">      MediaStore.Files.FileColumns.DATA,</div><div class="line">      MediaStore.Files.FileColumns.MIME_TYPE,</div><div class="line">      MediaStore.Files.FileColumns.TITLE</div><div class="line"></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOADER_ID = <span class="number">1</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOADER_FILE_ID = <span class="number">2</span>;</div><div class="line"></div><div class="line">  LoaderManager mLoaderManager;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    Logger.init(<span class="string">"loader"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//1.获取LoadManager实例</span></div><div class="line">    mLoaderManager = getSupportLoaderManager();</div><div class="line">    <span class="comment">//2.设置LoadManager传输的参数</span></div><div class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">    bundle.putString(<span class="string">"liu"</span>,<span class="string">"liuguoquan"</span>);</div><div class="line">    <span class="comment">//3.初始化LoadManager</span></div><div class="line">    mLoaderManager.initLoader(LOADER_FILE_ID,bundle,<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Loader&lt;Cursor&gt; <span class="title">onCreateLoader</span><span class="params">(<span class="keyword">int</span> id, Bundle bundle)</span> </span>&#123;</div><div class="line">    Logger.d(<span class="string">"bundle: "</span> + bundle.getString(<span class="string">"liu"</span>));</div><div class="line">    <span class="keyword">if</span> (id == LOADER_ID) &#123;</div><div class="line">      <span class="comment">//获取图片信息</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CursorLoader(MainActivity.<span class="keyword">this</span>, MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</div><div class="line">          PROJECTION, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == LOADER_FILE_ID) &#123;</div><div class="line">      <span class="comment">//获取文件名</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CursorLoader(MainActivity.<span class="keyword">this</span>,MediaStore.Files.getContentUri(<span class="string">"external"</span>),DOC_PROJECTION,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(Loader&lt;Cursor&gt; loader, Cursor cursor)</span> </span>&#123;</div><div class="line">    <span class="comment">//创建完毕后调用</span></div><div class="line">    <span class="keyword">switch</span> (loader.getId()) &#123;</div><div class="line">      <span class="keyword">case</span> LOADER_ID:</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">          Long id = cursor.getLong(<span class="number">0</span>);</div><div class="line">          String data = cursor.getString(<span class="number">1</span>);</div><div class="line">          Log.d(<span class="string">"loader"</span>,<span class="string">"id:"</span> + id + <span class="string">"; data: "</span> + data);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="keyword">case</span> LOADER_FILE_ID:</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">          String title =  cursor.getString(<span class="number">2</span>);</div><div class="line">          Log.d(<span class="string">"loader"</span>,<span class="string">"title: "</span> + title);</div><div class="line">        &#125;</div><div class="line">        cursor.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoaderReset</span><span class="params">(Loader&lt;Cursor&gt; loader)</span> </span>&#123;</div><div class="line">    <span class="comment">//数据重置时调用</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/murphykwu/article/details/35288477" target="_blank" rel="external">LoaderManager使用详解（三）—实现Loaders</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LoaderManager是什么？&quot;&gt;&lt;a href=&quot;#LoaderManager是什么？&quot; class=&quot;headerlink&quot; title=&quot;LoaderManager是什么？&quot;&gt;&lt;/a&gt;LoaderManager是什么？&lt;/h1&gt;&lt;p&gt;LoaderMana
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="实战" scheme="http://liuguoquan727.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Android设计模式(十一)观察者模式</title>
    <link href="http://liuguoquan727.github.io/2016/06/09/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%8D%81%E4%B8%80)%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liuguoquan727.github.io/2016/06/09/Android设计模式(十一)观察者模式/</id>
    <published>2016-06-09T13:20:01.000Z</published>
    <updated>2016-06-09T13:36:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>观察者模式是一个使用率非常高的模式，它最常用的地方是GUI系统、订阅-发布系统，因为这个模式的一个重要作用就是解耦，将被观察者和观察者解耦，使得它们之间的依赖性更小，甚至做到毫无依赖。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>关联行为场景，需要注意的是，关联行为是可拆分的，而不是组合关系；</li>
<li>事件多级触发场景；</li>
<li>跨系统的消息交换场景，如消息队列、事件总线的处理机制；</li>
</ul>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8FUML.png" alt=""></p>
<p>角色介绍：</p>
<ul>
<li>Subject：抽象主题，也就是被观察者(Observable)角色，抽象主题角色把所有观察者对象的引用保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li>
<li>ConcreteSubject：具体主题，该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发出通知，具体主题角色又叫做具体被观察者(ConcreteObservable)角色。</li>
<li>Observer：抽象观察者，该角色是观察者的抽象类，它定义了一个更新接口，使得在得到主题的更改通知时更新自己。</li>
<li>ConcreteObserver：具体的观察者，该角色实现抽象观察者角色所定义的更新接口，以便在主题的主题发生改变时更新自身的状态。</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>发布-订阅模式也称为观察者模式。下面通过实例来了解观察者模式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 程序员是观察者</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> java.util.Observable;</div><div class="line"><span class="keyword">import</span> java.util.Observer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coder</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String mName;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Coder</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">		<span class="keyword">this</span>.mName = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Hi,"</span> + mName + <span class="string">"更新啦，内容是: "</span> + arg);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Coder [mName="</span> + mName + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 被观察者，发布者</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> java.util.Observable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevTechFrontier</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postNewPublication</span><span class="params">(String content)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//标识状态或内容改变</span></div><div class="line">		setChanged();</div><div class="line"></div><div class="line">		<span class="comment">//通知所有观察者</span></div><div class="line">		notifyObservers(content);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		DevTechFrontier devTechFrontier = <span class="keyword">new</span> DevTechFrontier();</div><div class="line"></div><div class="line">		Coder coder = <span class="keyword">new</span> Coder(<span class="string">"liu"</span>);</div><div class="line">		Coder coder2 = <span class="keyword">new</span> Coder(<span class="string">"lee"</span>);</div><div class="line">		Coder coder3 = <span class="keyword">new</span> Coder(<span class="string">"zhang"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//注册观察者到观察者列表中</span></div><div class="line">		devTechFrontier.addObserver(coder);</div><div class="line">		devTechFrontier.addObserver(coder2);</div><div class="line">		devTechFrontier.addObserver(coder3);</div><div class="line"></div><div class="line">		<span class="comment">//发布消息</span></div><div class="line">		devTechFrontier.postNewPublication(<span class="string">"新一期周报发布啦!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">Hi,zhang更新啦，内容是: 新一期周报发布啦!</div><div class="line">Hi,lee更新啦，内容是: 新一期周报发布啦!</div><div class="line">Hi,liu更新啦，内容是: 新一期周报发布啦!</div></pre></td></tr></table></figure>
<p>Observer和Observable是JDK中的内置类型，可见观察者模式是非常重要的，这里Observer是抽象的观察者角色，Coder是具体观察者角色；Observable是抽象的主题角色，DevTechFrontier是具体的主题角色。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>观察者模式主要的作用就是对象解耦，经观察者与被观察者完全隔离，只依赖于Observer和Observable抽象。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>观察者和被观察者之间是抽象耦合，应对业务变化。</li>
<li>增强系统灵活性、可扩展性。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>在Java中消息的通知默认是顺序执行的，一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般考虑采用异步的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;观察者模式是一个使用率非常高的模式，它最常用的地方是GUI系统、订阅-发布系统，因为这个模式的一个重要作用就是解耦，将被观察者和观察者解耦，
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android设计模式(五)抽象工厂模式</title>
    <link href="http://liuguoquan727.github.io/2016/06/07/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liuguoquan727.github.io/2016/06/07/Android设计模式(五)抽象工厂模式/</id>
    <published>2016-06-07T13:35:01.000Z</published>
    <updated>2016-06-09T13:30:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>抽象工厂模式也是创建型设计模式之一。抽象工厂模式起源于以前对不同操作系统的图形化解决方案，如果不同操作系统中的按钮和文本控件其实现不同、展示效果也不一样，对于每一种操作系统其本身就构成一个产品类，而按钮与文本控件也构成一个产品类，两种产品类两种变化，各自有各自的特性。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>为创建一组相关或是相互依赖的对象提供一个接口，而不需要指定它们的具体类。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>一个对象族有相同约束时可以使用抽象工厂模式？比如Android、iOS、Window Phone下都有短信软件和拨号软件，两者都属于SoftWare软件范畴，但是它们所在的平台不一样，即便是同一家公司出品的软件，其代码实现逻辑也是不同的，这时就可以考虑使用抽象工厂方法模式来产生Android、iOS、Window Phone下的短信和拨号软件。</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8FUML%E7%B1%BB%E5%9B%BE.png" alt=""></p>
<p>主要有四类角色：</p>
<ul>
<li><p>AbstractFactory：抽象工厂类，它声明了一组用于创建一种产品的方法，每一种方法对应一中产品，类图中分别创建产品A和产品B。</p>
</li>
<li><p>ConcreteFactory：具体工厂类，它实现类在抽象工厂中定义的创建产品的方法，生成一组具体产品，这些产品构成一个产品种类。如类图中的ConcreteFactory1和ConcreteFactory2.</p>
</li>
<li><p>AbstractProduct：抽象产品类，它为每种产品声明接口，如类图中的AbstractProductA和AbstractProductB。</p>
</li>
<li><p>ConcreteProduct：具体产品类，它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的方法，如类图中的ConcreteProductA1、ConcreteProductB1、ConcreteProductA2、ConcreteProductB2。</p>
</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>在工厂模式中，以小明的车厂为例讲述了工厂方法模式，但是小明后来发现一个问题，虽然Q3、Q5都是一个车系，但是三者之间的零部件差别却是很大，使用了不同的发动机、轮胎、制动系统等零部件。Q3、Q7对应的是一系列车，而发动机、轮胎、制动系统则对应的是一系列零部件，两者是不同的产品类型，这是就可以将抽象工厂模式应用其中，首先，汽车工厂需要生产轮胎、发动机、制动系统这3种部件，然后再根据车型组装这些零部件。</p>
<ul>
<li>抽象车厂类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *生产轮胎</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ITire <span class="title">createTire</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 生产发动机</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IEngine <span class="title">createEngine</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 生产制动系统</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IBrake <span class="title">createBrake</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是零部件产品类：</p>
<ul>
<li>轮胎相关类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITire</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tire</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalTire</span> <span class="keyword">implements</span> <span class="title">ITire</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tire</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"普通轮胎"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SUVTire</span> <span class="keyword">implements</span> <span class="title">ITire</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tire</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"SUV 轮胎"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>发动机相关类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEngine</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">engine</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomesticEngine</span> <span class="keyword">implements</span> <span class="title">IEngine</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">engine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"国产发动机"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeignEngine</span> <span class="keyword">implements</span> <span class="title">IEngine</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">engine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"进口发动机"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>制动系统相关类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBrake</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brake</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalBrake</span> <span class="keyword">implements</span> <span class="title">IBrake</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brake</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"普通刹车"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeniorBrake</span> <span class="keyword">implements</span> <span class="title">IBrake</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brake</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"高级刹车"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是具体车型的生产工厂类:</p>
<ul>
<li>生产工厂类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Q3工厂类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Q3Factory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ITire <span class="title">createTire</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> NormalTire();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IEngine <span class="title">createEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DomesticEngine();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBrake <span class="title">createBrake</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> NormalBrake();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Q7工厂类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Q7Factory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ITire <span class="title">createTire</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SUVTire();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IEngine <span class="title">createEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ForeignEngine();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBrake <span class="title">createBrake</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SeniorBrake();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>客户类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//构造Q3的工厂</span></div><div class="line">		CarFactory factoryQ3 = <span class="keyword">new</span> Q3Factory();</div><div class="line">		factoryQ3.createTire().tire();;</div><div class="line">		factoryQ3.createEngine().engine();;</div><div class="line">		factoryQ3.createBrake().brake();</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"--------------------"</span>);</div><div class="line">		<span class="comment">//构造Q7的工厂</span></div><div class="line">		CarFactory factoryQ7 = <span class="keyword">new</span> Q7Factory();</div><div class="line">		factoryQ7.createTire().tire();;</div><div class="line">		factoryQ7.createEngine().engine();;</div><div class="line">		factoryQ7.createBrake().brake();;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">普通轮胎</div><div class="line">国产发动机</div><div class="line">普通刹车</div><div class="line">--------------------</div><div class="line">SUV 轮胎</div><div class="line">进口发动机</div><div class="line">高级刹车</div></pre></td></tr></table></figure>
<p>上面只是模拟了Q3和Q7的工厂，如果需要增加Q5的工厂，那么对于的轮胎、制动系统、发动机类又要增加，这里看出抽象工厂类的一个弊端就是类大量增加，如果工厂类过多，势必导致类文件非常多。因此开发中一定要权衡利弊。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>一个显著的优点是分离接口与实现，客户端使用抽象工厂来创建需要的对象，而客户端根本就不知道具体的实现是谁，客户端只是面向产品的接口编程而已，使其从具体的产品实现中解耦，同时基于接口与实现的分离，使抽象该工厂方法模式在切换产品类时更加灵活简单。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>一是类文件的爆炸性增加，二是不太容易扩展新的产品类，因为每当我们增加一个产品类就需要修改抽象工厂，那么所有的具体工厂类均会修改。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;抽象工厂模式也是创建型设计模式之一。抽象工厂模式起源于以前对不同操作系统的图形化解决方案，如果不同操作系统中的按钮和文本控件其实现不同、展示
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android设计模式(四)工厂方法模式</title>
    <link href="http://liuguoquan727.github.io/2016/06/07/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liuguoquan727.github.io/2016/06/07/Android设计模式(四)工厂方法模式/</id>
    <published>2016-06-07T12:34:01.000Z</published>
    <updated>2016-06-09T13:29:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>工厂方法模式是创建型设计模式之一。工厂方法模式是一种结构简单的模式。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>定义一个用于创建对象的接口，让子类决定实例化哪个类。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>在任何需要生成复杂对象的地方，都可以使用工厂方法模式。复杂对象适合使用工厂模式，用new就可以完成创建的对象无需使用工厂对象。</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95UML%E7%B1%BB%E5%9B%BE.png" alt=""></p>
<p>这里的角色主要分为四个模块：</p>
<ol>
<li>抽象工厂Factory，其为工厂方法的核心；</li>
<li>具体工厂ConcreteFactory，实现了具体的业务逻辑；</li>
<li>抽象产品Product，是工厂方法模式所创建的产品的父类；</li>
<li>具体产品ConcreteFactory，实现抽象产品的某个具体产品的对象；</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>小明是一家汽车厂的厂长，对他来说，组装汽车就是讲一些进口的核心部件，比如发动机和一些零部件组装起来，小明的汽车厂主要组装某款SUV车型，比如Q3、Q5，对于这类车型来说内部结构差异并不是很大，因此小明只需要一条生产线就足以应付这2种车型，对于该类生产线小明提供一个抽象类定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象生产线类</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 某车型的工厂方法</div><div class="line">	 * <span class="doctag">@param</span> clz 具体的车型类</div><div class="line">	 * <span class="doctag">@return</span> 具体型号的车对象</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends AudiCar&gt; <span class="function">T <span class="title">createAudiCar</span><span class="params">(Class&lt;T&gt; clz)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生产线的具体实现类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 生产线具体类</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiCarFactory</span> <span class="keyword">extends</span> <span class="title">AudiFactory</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> &lt;T extends AudiCar&gt; <span class="function">T <span class="title">createAudiCar</span><span class="params">(Class&lt;T&gt; clz)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		AudiCar car = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			car = (AudiCar) Class.forName(clz.getName()).newInstance();</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> (T) car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于这两种车型，除了一些车的基本共性之外，还提供了自动导航功能，这些都使用一个抽象的基本类来声明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 汽车的抽象产品类</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiCar</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 行为方法，车可以驾驶</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 行为方法，车可以自动导航</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">selfNavigation</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是具体的车型了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiQ3</span> <span class="keyword">extends</span> <span class="title">AudiCar</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Q3 run"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfNavigation</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Q3 navi"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiQ5</span> <span class="keyword">extends</span> <span class="title">AudiCar</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Q5 run"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfNavigation</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Q5 navi"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们将各个类组装起来形成一条完整的流水线：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		AudiFactory factory = <span class="keyword">new</span> AudiCarFactory();</div><div class="line"></div><div class="line">		AudiQ3 audiQ3 = factory.createAudiCar(AudiQ3.class);</div><div class="line">		audiQ3.drive();</div><div class="line">		audiQ3.selfNavigation();</div><div class="line"></div><div class="line">		AudiQ5 audiQ5 = factory.createAudiCar(AudiQ5.class);</div><div class="line">		audiQ5.drive();</div><div class="line">		audiQ5.selfNavigation();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">Q3 run</div><div class="line">Q3 navi</div><div class="line">Q5 run</div><div class="line">Q5 navi</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，工厂方法模式是一个很好的设计模式，但是也存在缺点，就是每次我们为工厂方法模式添加新的产品时就要编写一个新的产品类，同时还要引入抽象层，这必然导致类结构的复杂化，所以工作中需要权衡。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;工厂方法模式是创建型设计模式之一。工厂方法模式是一种结构简单的模式。&lt;/p&gt;
&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android设计模式之(三)原型模式</title>
    <link href="http://liuguoquan727.github.io/2016/06/04/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B(%E4%B8%89)%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liuguoquan727.github.io/2016/06/04/Android设计模式之(三)原型模式/</id>
    <published>2016-06-04T14:34:01.000Z</published>
    <updated>2016-06-06T12:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>原型模式是一种创建型的模式。原型表示该模式有一个样板实例，用户从这个样板对象中复制出一个内部属性一致的对象，被复制的实例就称为原型。原型模式多用于创复杂的或者构造耗时的实例，因为这种情况下，复制一个已经存在的实例可以使程序运行更高效。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol>
<li>类初始化需要消耗非常多的资源，包括数据、硬件资源等，通过原型拷贝避免这些消耗。</li>
<li>通过new产生一个对象需要非常繁琐的数据准备或访问权限，这时可以使用原型模式。</li>
<li>一个对象需要提供给其他对象访问，而且各个调用者可能需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。</li>
</ol>
<p>需要注意的是，通过实现Cloneable接口的原型模式在调用clone函数构造实例时并不一定比通过new操作速度快，只有当通过new构造对象较为耗时或者资源消耗比较大时，通过clone方法才能获得效率上的提升。因此，使用Cloneable时需要考虑构建对象的成本以及做一些效率上的测试。当然，实现原型模式也并不一定非要实现Cloneable接口，也有其他的实现方式。</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>原型模式的UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8FUML%E7%B1%BB%E5%9B%BE.png" alt="原型模式的UML类图"></p>
<p>角色介绍：</p>
<ul>
<li>Client：客户端用户</li>
<li>Prototype：抽象类或者接口，声明具clone的能力</li>
<li>ConcretePrototype：具体的原型类</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>下面以简单的文档拷贝为例来演示一下简单的原型模式，例子中首先创建一个文档对象，即WordDocument，这个文档包括文字和图片。用户经过产时间的内容编辑后，打开该文档做进一步的编辑，但是这个文档编辑后是否被采用还不确定，因此为了安全起见，用户需要将当前文档拷贝一份，然后再在这个文档副本上进行修改。如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.prototype;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 文档类型，扮演的是ConcretePrototype角色，而Cloneable是代表Prototype角色</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordDocument</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//文本</span></div><div class="line">	<span class="keyword">private</span> String text;</div><div class="line"></div><div class="line">	<span class="comment">//图片名列表</span></div><div class="line">	<span class="keyword">private</span> ArrayList&lt;String&gt; images = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WordDocument</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">		System.out.println(<span class="string">"---WordDocument构造函数---"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> text;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.text = text;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getImages</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> images;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		images.add(image);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> WordDocument <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			WordDocument document = (WordDocument) <span class="keyword">super</span>.clone();</div><div class="line">			document.text = <span class="keyword">this</span>.text;</div><div class="line">			<span class="comment">//浅拷贝</span></div><div class="line">			document.images = <span class="keyword">this</span>.images;</div><div class="line">			<span class="comment">//深拷贝</span></div><div class="line"><span class="comment">//			document.images = (ArrayList&lt;String&gt;) this.images.clone();</span></div><div class="line">			<span class="keyword">return</span> document;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"WordDocument [text="</span> + text + <span class="string">", images="</span> + images + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> com.lgq.pattern.prototype;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		WordDocument document = <span class="keyword">new</span> WordDocument();</div><div class="line">		document.setText(<span class="string">"这是一篇文档"</span>);</div><div class="line">		document.addImage(<span class="string">"image1"</span>);</div><div class="line">		document.addImage(<span class="string">"image2"</span>);</div><div class="line">		System.out.println(document.toString());</div><div class="line"></div><div class="line">		<span class="comment">//拷贝一份副本</span></div><div class="line">		WordDocument document2 = document.clone();</div><div class="line">		System.out.println(document2.toString());</div><div class="line">		<span class="comment">//修改文档副本，不会影响原始文档</span></div><div class="line">		document2.setText(<span class="string">"这是修改过的document2文档"</span>);</div><div class="line">		System.out.println(document2.toString());</div><div class="line"></div><div class="line">		System.out.println(document.toString());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">---WordDocument构造函数---</div><div class="line">WordDocument [text=这是一篇文档, images=[image1, image2]]</div><div class="line">WordDocument [text=这是一篇文档, images=[image1, image2]]</div><div class="line">WordDocument [text=这是修改过的document2文档, images=[image1, image2]]</div><div class="line">WordDocument [text=这是一篇文档, images=[image1, image2]]</div></pre></td></tr></table></figure>
<p>需要注意的是，<strong>上述的例子中WordDocument的构造函数只运行了一次，通过clone拷贝对象时并不会执行构造函数！</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原型模式本质上是对象拷贝，容易出现的问题是深拷贝、浅拷贝。使用原型模式可以解决构建复杂对象的资源消耗问题，能够在某些场景下提升创建对象的效率。还有一个重要用途就是保护性拷贝，也就是某个对象对外可能是只读的，为了防止外部对这个只读对象修改，通过可以通过返回一个对象拷贝的形式实现只读的限制。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>原型模式是在内存中二进制流的拷贝，要比直接new一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>直接在内存中拷贝时，构造函数是不会执行的，在实际开发中应该注意这个潜在的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;原型模式是一种创建型的模式。原型表示该模式有一个样板实例，用户从这个样板对象中复制出一个内部属性一致的对象，被复制的实例就称为原型。原型模式
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android设计模式之(二)Builder模式</title>
    <link href="http://liuguoquan727.github.io/2016/06/03/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B(%E4%BA%8C)Builder%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liuguoquan727.github.io/2016/06/03/Android设计模式之(二)Builder模式/</id>
    <published>2016-06-03T13:34:01.000Z</published>
    <updated>2016-06-06T12:43:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Builder模式是一步一步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，更精细地控制对象的构造流程。该模式是为了将构建复杂对象的过程和它的部件解耦，使得构建过程和部件的表示隔离开来。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol>
<li>相同的方法，不同的执行顺序，产生不同的事件结果时；</li>
<li>多个部件或零件都可以装配到一个对象中，但是产生的运行结果又不相同时；</li>
<li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的作用，这个时候使用建造者模式非常适合；</li>
<li>当初始化一个对象特别复杂，如参数多，且很多参数都具有默认值的情况下；</li>
</ol>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>UML类图角色介绍：</p>
<ul>
<li>Product产品类-产品的抽象类；</li>
<li>Builder-抽象Builder类，规范产品的组建，一般由子类实现具体的组件过程；</li>
<li>ConcreteBuilder-具体的Builder类,组装对象；</li>
</ul>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-Builder%E6%A8%A1%E5%BC%8FUML%E7%B1%BB%E5%9B%BE.png" alt="Builder模式UML"></p>
<h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.builder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Computer抽象类 即 Product角色</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">protected</span> String mBoard;</div><div class="line">	<span class="keyword">protected</span> String mDisplay;</div><div class="line">	<span class="keyword">protected</span> String mOS;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//设置主板</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoard</span><span class="params">(String mBoard)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.mBoard = mBoard;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//设置显示器</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">(String mDisplay)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.mDisplay = mDisplay;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//设置操作系统</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setOs</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Computer [mBoard="</span> + mBoard + <span class="string">", mDisplay="</span> + mDisplay + <span class="string">", mOS="</span> + mOS + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.builder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 具体的Computer类</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBookPro</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MacBookPro</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOs</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mOS = <span class="string">"Mac OS X 10.11"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.builder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象Builder</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder <span class="title">setBoard</span><span class="params">(String board)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder <span class="title">setDisplay</span><span class="params">(String display)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder <span class="title">setOs</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">create</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.builder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Builder具体实现类</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBookBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Computer mComputer = <span class="keyword">new</span> MacBookPro();</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Builder <span class="title">setBoard</span><span class="params">(String board)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mComputer.setBoard(board);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Builder <span class="title">setDisplay</span><span class="params">(String display)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mComputer.setDisplay(display);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Builder <span class="title">setOs</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mComputer.setOs();</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Computer <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> mComputer;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		Computer computer = <span class="keyword">new</span> MacBookBuilder().setBoard(<span class="string">"APPLE"</span>).setDisplay(<span class="string">"Retina"</span>).setOs().create();</div><div class="line"></div><div class="line">		System.out.println(computer.toString());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">Computer [mBoard=APPLE, mDisplay=Retina, mOS=Mac OS X <span class="number">10.11</span>]</div></pre></td></tr></table></figure>
<p>上述示例中，通过具体的MacBookBuilder来构建MacBookPro对象，Builder将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的对象。</p>
<h1 id="Android中应用"><a href="#Android中应用" class="headerlink" title="Android中应用"></a>Android中应用</h1><ul>
<li>AlertDialog</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>良好的封装性，使用建造者模式可以使得客户端不必知道产品内部组成的细节。</li>
<li>建造者独立，容易扩展</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>会产生多余的Builder对象，消耗内存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Builder模式是一步一步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，更精细地控制对象的构造流程。该模式是为了将
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android设计模式之(一)单例模式</title>
    <link href="http://liuguoquan727.github.io/2016/06/03/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B(%E4%B8%80)%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liuguoquan727.github.io/2016/06/03/Android设计模式之(一)单例模式/</id>
    <published>2016-06-03T12:34:01.000Z</published>
    <updated>2016-06-09T13:46:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>单例模式是应用最广的模式之一，在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个全局对象，这样有利于我们协调系统整体的行为。如在一个应用中，应该只有一个ImageLoader实例，这个ImageLoader中又含有线程池、缓存系统、网络请求等，很消耗资源。因此不应该让它构造多个实例。这样不能自由构造对象的情况，就是单例模式的使用场景。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>确保某个类有且只要一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象只应该有且只有一个。例如，创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源，这时就要考虑使用单例模式。</p>
<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>单例模式的UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.png" alt=""></p>
<p>角色介绍：</p>
<ul>
<li>Client：高层客户端</li>
<li>Singleton：单例类</li>
</ul>
<p>实现单例模式主要有以下几个关键点：</p>
<ul>
<li>构造函数不对外开放，一般为private；</li>
<li>通过一个静态方法或者枚举返回单例类对象；</li>
<li>确保单例类的对象有且只有一个，尤其是在多线程环境下；</li>
<li>确保单例类对象在反序列化时不会重新构建对象；</li>
</ul>
<p>单例模式中实现比较困难的是在多线程环境下构造单例类的对象有且只有一个。</p>
<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>单例模式在设计模式中是结构比较简单的，只有一个单例类，没有其他层次结构和抽象。该模式需要确保该类只能生成一个对象，通常是该类需要消耗较多的资源或者没有对个实例的情况。例如一个公司只有一个CEO、一个应用只有一个Application对象等。</p>
<p>下面以公司里的CEO为例来简单演示一下，一个公司可以有多个VP、无数个员工，但只有一个CEO，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 普通员工</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//干活</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//副总裁</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VP</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 管理下面的经理</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//CEO，饿汉式单例</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CEO mCEO = <span class="keyword">new</span> CEO();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//公有的静态函数，对外暴露获取单例对象的接口</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">getCeo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> mCEO;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 管理VP</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//公司类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> List&lt;Staff&gt; mStaffs = <span class="keyword">new</span> ArrayList&lt;Staff&gt;();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStaff</span><span class="params">(Staff staff)</span> </span>&#123;</div><div class="line">		mStaffs.add(staff);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showStaffs</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(Staff staff : mStaffs) &#123;</div><div class="line">			System.out.println(<span class="string">"Obj: "</span> + staff.toString());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		Company company = <span class="keyword">new</span> Company();</div><div class="line">		</div><div class="line">		<span class="comment">//CEO对象只能通过getCeo获取</span></div><div class="line">		Staff ceo1 = CEO.getCeo();</div><div class="line">		Staff ceo2 = CEO.getCeo();</div><div class="line">		company.addStaff(ceo1);</div><div class="line">		company.addStaff(ceo2);</div><div class="line">		</div><div class="line">		Staff vp1 = <span class="keyword">new</span> VP();</div><div class="line">		Staff vp2 = <span class="keyword">new</span> VP();</div><div class="line">		company.addStaff(vp1);</div><div class="line">		company.addStaff(vp2);</div><div class="line">		</div><div class="line">		Staff staff1 = <span class="keyword">new</span> Staff();</div><div class="line">		Staff staff2 = <span class="keyword">new</span> Staff();</div><div class="line">		</div><div class="line">		company.addStaff(staff1);</div><div class="line">		company.addStaff(staff2);</div><div class="line"></div><div class="line">		company.showStaffs();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>运行输出结果如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.CEO<span class="variable">@15db9742</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.CEO<span class="variable">@15db9742</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.VP<span class="variable">@6d06d69c</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.VP<span class="variable">@7852e922</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.Staff<span class="variable">@4e25154f</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.Staff<span class="variable">@70dea4e</span></div></pre></td></tr></table></figure>
<p>从上面代码可以看出，CEO类不能通过new的形式构造函数，只能通过CEO.getCeo()方法来获取，而这个CEO对象是静态对象，并且在声明的时候就已经初始化，这就保证类CEO对象的唯一性。</p>
<p>从输出结果中可以看出，CEO两次输出的CEO对象的地址都一样，说明是同一个CEO对象；而VP、Staff等类型的对象都是不同的。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>饿汉式模式是在声明静态对象时就已经初始化，这种方式简单粗暴，如果单例对象初始化非常快，而且占用内存小的时候这种方式是比较适合的，可以直接在应用启动时加载初始化。实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>懒汉模式是声明一个静态对象，并且在用户第一次调用getInstance时进行初始化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span>(Singleton.class) &#123;</div><div class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">                instance = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getInstance方法中添加了Synchronized关键字，也就是同步类synchronized关键字包含的代码块，这就是上面所说的在多线程中保证单例对象唯一性的手段。但是仍存在一个问题，<strong>即使instance已经初始化，每次调用getInstance方法都会进行同步，这样会消耗不必要的资源，这也是懒汉式存在的最大问题</strong>。</p>
<p>懒汉单例模式的优点是只有在使用时才会被实例化，在一定程度上节约了资源，缺点是第一次加载时需要及时进行实例化，反应稍慢，最大问题是每次调用geInstance都进行同步，造成不必要的同步开销，这样模式一般不建议使用。</p>
<h3 id="Double-CheckLock-双重校验锁"><a href="#Double-CheckLock-双重校验锁" class="headerlink" title="Double CheckLock(双重校验锁)"></a>Double CheckLock(双重校验锁)</h3><p>DCL方式的优点是既能够在需要时才初始化单例，又能够保证线程的安全，且单例对象初始化后调用getInstance不获取同步锁。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//private static volatile Singleton instance = null;</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//如果已经初始化，不需要每次获取同步锁</span></div><div class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">                    instance = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到getInstance方法对instance进行了两次判空：第一层判断主要是为了避免不必要的同步，第二层判断主要则是为了在null的情况下创建实例。下面，我们来分析一下：</p>
<p>假设线程A执行到instance=new Singleton()语句，这里看起来是一句代码，但实际上它并不是一个原子操作，这局代码最终会被编译成多条汇编指令，它大致做了3件事情：</p>
<ol>
<li>给Singleton的实例分配内存</li>
<li>调用Singleton()的 构造函数，初始化字段成员</li>
<li>将instance对象执行分配的内存空间（此时instance就不是null了）</li>
</ol>
<p>但是，由于Java编译器运行处理器乱序执行，以及jdk1.5之前Java内存模型中Cache、寄存器到主内存会写顺序的规定，上面的第二和第三的顺序是无法保证的。也就是说，执行顺序可能是1-2-3也可能是1-3-2.如果是后者，并且在3执行完毕、2未执行之前，被切换到线程B上，这时候instance因为已经在线程A内执行3了，instance已经是非null，所有线程B直接取走instance，再使用时就会出错，这就是DCL失效问题，而且这种难以跟踪难以重现的问题很可能会隐藏很久。</p>
<p>在jdk1.5之后，官方已经注意到这种问题，调整了JMM、具体化了volatile关键字，因此，如果是1.5或之后的版本，只需要将instance的定义改成<code>private static volatile Singleton instance = null;</code>就可以保证instance对象每次都是从主内存中读取，就可以使用DCL的写法来完成单例模式。当然，volatile多少会影响到性能，但考虑到程序的正确性，牺牲这点性能还是值得的。</p>
<p>DCL的优点：资源利用率高，第一次执行getInstance时单例对象才会被实例化，效率高。</p>
<p>缺点：第一次加载稍慢，也由于Java内存模型的原因偶尔会失败。在高并发的环境下也有一定的缺陷，虽然概率发生很小。</p>
<blockquote>
<p>DCL模式是使用最多的单例实现模式，它能够在需要时才实例化单例对象，并且能够在绝大多数场景下保证单例对象的唯一性，除非你的代码在并发场景比较复杂或者低于jdk1.6版本下使用，否则这种方式一般能够满足需求。</p>
</blockquote>
<h3 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h3><p>在《Java并发编程实战》中谈到不赞成使用DCL的优化方式，而建议使用如下代码替代：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//静态内部类</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当第一次加载Singleton类时并不会初始化instance，只有第一次调用Singleton的getInstance方法时才会导致instance被初始化。因此，第一次调用getInstance方法会导致虚拟机加载SingletonHolder类，这种方式不仅能够确保线程安全，也能够保证单例对象的唯一性，同时也延迟了单例的实例化，所以这是推荐使用的单例模式实现方式。</p>
<h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</div><div class="line"></div><div class="line">    <span class="comment">//定义一个枚举的元素，它就是Singleton的一个实例</span></div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">   Singleton singleton = Singleton.instance;</div><div class="line">   singleton.doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写法简单是枚举单例最大的优点，枚举在Java中与普通的类是一样的，不仅能够有字段，还能够有自己的方法。最重要的是默认枚举实例的创建时线程安全的，并且在任何情况下它都是一个单例。</p>
<p>为什么这么说呢？在上述的几种单例模式实现中，在一个情况下它们会出现重新创建对象的情况，那就是反序列化。</p>
<p>通过序列化可以将一个单例的实例对象写到磁盘，然后再读回来，从而有效地获得一个实例。即使构造函数时私有的，反序列化时依然可以通过特殊的途径去创建类的一个新的实例，相当于调用该类的构造函数。反序列化操作提供一个很特别的钩子函数，类中具有一个私有的、被实例化的方法readResolve()，这个方法可以让开发人员控制对象的反序列化。例如，上述几个实例中如果要杜绝单例对象在被反序列化时重新生成对象，那么必须加入如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</div><div class="line">	<span class="keyword">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是在readResolve方法中将instance对象返回，而不是默认的重新生成一个新的对象。而对于枚举并不存在这样的问题，因为即使反序列化它也不会重新生成新的实例。</p>
<h3 id="容器管理单例"><a href="#容器管理单例" class="headerlink" title="容器管理单例"></a>容器管理单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; objMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key,Object instance)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!objMap.containsKey(key)) &#123;</div><div class="line">            objMap.put(key);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getInstance</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> objMap.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在程序的初始，将多种单例类注入到一个统一的管理类中，在使用根据key获取对应类型的对象，这种方式使得我们可以管理很多类型的单例，并且在使用它们的时候可以通过统一的接口进行获取操作操作，降低用户的使用成本，也对用户隐藏了具体实现，降低了耦合度。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式是运用频率很高的模式，但是，由于在客户端通常没有高并发的情况，因此，选择哪种实现方式并不会有太大的影响。即便如此，出于效率考虑，推荐使用双重校验锁和静态内部类单例模式。</p>
<p><strong>优点</strong></p>
<ul>
<li><p>由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁创建、销毁时，而且创建或者销毁时性能又无法优化，单例模式的优势就非常明显。</p>
</li>
<li><p>由于单例模式只生成一个实例，所以，减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永驻内存的方式解决。</p>
</li>
<li><p>单例模式可以避免对资源的多重占用，例如一个写文件操作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。</p>
</li>
<li><p>单例模式可以在系统设置全局访问点，优化和共享资源访问，例如，可以设计一个单例类，负责所有数据表的映射处理。</p>
</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><p>单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本没有第二种途径可以实现。</p>
</li>
<li><p>在Android中，单例对象如果持有Context，那么很容易引发内存泄露，此时需要注意传给单例对象的Context最好是Application Context。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;单例模式是应用最广的模式之一，在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个全局对象，这样有利于我们
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android Context详解</title>
    <link href="http://liuguoquan727.github.io/2016/06/02/Android%20Context%E8%AF%A6%E8%A7%A3/"/>
    <id>http://liuguoquan727.github.io/2016/06/02/Android Context详解/</id>
    <published>2016-06-02T13:20:28.000Z</published>
    <updated>2016-06-06T12:41:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Activity可以new吗？Android的应用程序开发采用Java语言，Activity本质上也是一个对象，那Activity activity = new Activity()这种写法有什么问题吗？Android应用模型是基于组件的设计模式，组件的运行需要有一个完整的Android工程环境，在这个环境下，Activity、Service等系统组件才能够正常工作，而这些组件并不能采用普通的Java对象创建方式，new一下就能创建实例，而是要有它们各自的上下文环境，也就是我们要介绍的Context。可以这样讲，Context是维持Android程序中各组件能够正常工作的一个核心功能类。</p>
<h1 id="源码中的Context"><a href="#源码中的Context" class="headerlink" title="源码中的Context"></a>源码中的Context</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interface to global information about an application environment.  This is</div><div class="line"> * an abstract class whose implementation is provided by</div><div class="line"> * the Android system.  It</div><div class="line"> * allows access to application-specific resources and classes, as well as</div><div class="line"> * up-calls for application-level operations such as launching activities,</div><div class="line"> * broadcasting and receiving intents, etc.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * File creation mode: the default mode, where the created file can only</div><div class="line">     * be accessed by the calling application (or all applications sharing the</div><div class="line">     * same user ID).</div><div class="line">     * <span class="doctag">@see</span> #MODE_WORLD_READABLE</div><div class="line">     * <span class="doctag">@see</span> #MODE_WORLD_WRITEABLE</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_PRIVATE = <span class="number">0x0000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_WORLD_WRITEABLE = <span class="number">0x0002</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_APPEND = <span class="number">0x8000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MULTI_PROCESS = <span class="number">0x0004</span>;</div><div class="line"></div><div class="line">    .</div><div class="line">    .</div><div class="line">    .</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>源码中的注释是这么来解释Context的：Context提供了关于应用环境全局信息的接口。它是一个抽象类，它的执行被Android系统所提供，它允许获取以应用为特征的资源和类型，是一个统领一些资源的上下文。就是说，它描述一个应用程序环境的信息（即上下文），是一个抽象类，Android提供了该抽象类的具体实现类；通过它我们可以获取应用程序的资源和类（包括应用级别操作，如启动Activity，发广播，接受Intent等）。既然上面Context是一个抽象类，那么肯定有他的实现类，Context抽象类的继承关系如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1187237-1b4c0cd31fd0193f.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt=""></p>
<p>Context类本身是一个纯abstract类，它有两个具体的实现子类：ContextImpl和ContextWrapper。其中ContextWrapper类，如其名所言，这只是一个包装而已，ContextWrapper构造函数中必须包含一个真正的Context引用，同时ContextWrapper中提供了attachBaseContext（）用于给ContextWrapper对象中指定真正的Context对象，调用ContextWrapper的方法都会被转向其所包含的真正的Context对象。ContextThemeWrapper类，如其名所言，其内部包含了与主题（Theme）相关的接口，这里所说的主题就是指在AndroidManifest.xml中通过android：theme为Application元素或者Activity元素指定的主题。当然，只有Activity才需要主题，Service是不需要主题的，因为Service是没有界面的后台场景，所以Service直接继承于ContextWrapper，Application同理。而ContextImpl类则真正实现了Context中的所以函数，应用程序中所调用的各种Context类的方法，其实现均来自于该类。一句话总结：Context的两个子类分工明确，其中ContextImpl是Context的具体实现类，ContextWrapper是Context的包装类。Activity，Application，Service虽都继承自ContextWrapper（Activity继承自ContextWrapper的子类ContextThemeWrapper），但它们初始化的过程中都会创建ContextImpl对象，由ContextImpl实现Context中的方法。</p>
<h1 id="一个应用程序有几个Context"><a href="#一个应用程序有几个Context" class="headerlink" title="一个应用程序有几个Context"></a>一个应用程序有几个Context</h1><p>从上面的关系图可知，在应用程序中Context的具体实现子类就是：Activity、Service、Application。那么context数量 = Activity数量 + Service数量 + 1；而四大组件中BroadcastReceiver和ContentProvider并不是Context的子类，他们所持有的Context都是其他地方传过去的，所以并不计入Context总数。</p>
<h1 id="Context作用"><a href="#Context作用" class="headerlink" title="Context作用"></a>Context作用</h1><p>弹出Toast、启动Activity、启动Service、发送广播、操作数据库等都需要用到Context。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例化控件</span></div><div class="line">TextView tv = <span class="keyword">new</span> TextView(getContext());</div><div class="line"></div><div class="line">ListAdapter adapter = <span class="keyword">new</span> SimpleCursorAdapter(getApplicationContext(), ...);</div><div class="line"></div><div class="line">AudioManager am = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);getApplicationContext().getSharedPreferences(name, mode);</div><div class="line"></div><div class="line">getApplicationContext().getContentResolver().query(uri, ...);</div><div class="line"></div><div class="line">getContext().getResources().getDisplayMetrics().widthPixels * <span class="number">5</span> / <span class="number">8</span>;</div><div class="line"></div><div class="line">getContext().startActivity(intent);</div><div class="line"></div><div class="line">getContext().startService(intent);</div><div class="line"></div><div class="line">getContext().sendBroadcast(intent);</div></pre></td></tr></table></figure>
<h1 id="Context作用域"><a href="#Context作用域" class="headerlink" title="Context作用域"></a>Context作用域</h1><p>由于Context的具体实例是由ContextImpl类去实现的，因此自绝大多数场景下，Activity、Service和Application这三种类型的Context都是可以通用的。不过有几种场景比较特殊，比如启动Activity、还有弹出Dialog，出于安全的考虑，Android是不允许Activity或Dialog凭空出现的，一个Activity的启动必须要建立在另一个Activity的基础之上，形成返回栈，而Dialog则必须在一个Activity上面弹出（除非是System Alert类型的Dialog），因此在这种场景下，我们只能用Activity类型的Context，否则将会出错。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1187237-fb32b0f992da4781.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt=""></p>
<p>这里说一下上图中Application和Service所不推荐的两种使用情况。</p>
<ul>
<li><p>如果我们用ApplicationContext去启动一个LaunchMode为standard的Activity的时候会报错<code>android.util.AndroidRuntimeException: Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</code>这是因为非Activity类型的Context并没有所谓的任务栈，所以待启动的Activity就找不到栈了。解决这个问题的方法就是为待启动的Activity指定FLAG_ACTIVITY_NEW_TASK标记位，这样启动的时候就为它创建一个新的任务栈，而此时Activity是以singleTask模式启动的。所有这种用Application启动Activity的方式不推荐使用，Service同Application。</p>
</li>
<li><p>在Application和Service中去layout inflate也是合法的，但是会使用系统默认的主题样式，如果你自定义了某些样式可能不会被使用。所以这种方式也不推荐使用。</p>
</li>
</ul>
<p>一句话总结：凡是跟UI相关的，都应该使用Activity做为Context来处理；其他的一些操作，Service,Activity,Application等实例都可以，当然了，注意Context引用的持有，防止内存泄漏。</p>
<h1 id="获取Context"><a href="#获取Context" class="headerlink" title="获取Context"></a>获取Context</h1><p>通常我们想要获取Context对象，主要有一下四种方法。</p>
<ol>
<li>View.getContext，返回当前View对象的Context对象，通常是正在显示的Activity对象。</li>
<li>Activity.getApplicationContext，获取当前Activity所在的应用进程的Context对象，通常我们使用Context对象时要优先考虑这个全局的进程Context。<br>3.ContextWrapper.getBaseContext()，用来获取一个ContextWrapper进行装饰之前的Context，可以使用这个方法，一般不建议使用</li>
<li>Activity.this，返回当前的Activity实例，如果是UI控件需要使用Activity作为Context对象，但是默认的Toast实际上使用ApplicationContext也可以。</li>
</ol>
<h1 id="getApplication-和getApplicationContext"><a href="#getApplication-和getApplicationContext" class="headerlink" title="getApplication()和getApplicationContext()"></a>getApplication()和getApplicationContext()</h1><p>获取当前Application对象用getApplicationContext，不知道你有没有联想到getApplication()，这两个方法有什么区别？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1187237-593b912ecd199046.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>程序是不会骗人的，我们通过上面的代码，打印得出两者的内存地址都是相同的，看来它们是同一个对象。其实这个结果也很好理解，因为前面已经说过了，Application本身就是一个Context，所以这里获取getApplicationContext()得到的结果就是Application本身的实例。那么问题来了，既然这两个方法得到的结果都是相同的，那么Android为什么要提供两个功能重复的方法呢？实际上这两个方法在作用域上有比较大的区别。<strong>getApplication()方法的语义性非常强，一看就知道是用来获取Application实例的，但是这个方法只有在Activity和Service中才能调用的到。</strong>那么也许在绝大多数情况下我们都是在Activity或者Service中使用Application的，但是如果在一些其它的场景，比如BroadcastReceiver中也想获得Application的实例，这时就可以借助getApplicationContext()方法了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    publicvoidonReceive(Contextcontext,Intentintent)&#123;</div><div class="line">    ApplicationmyApp=(Application)context.getApplicationContext();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Context引起的内存泄露"><a href="#Context引起的内存泄露" class="headerlink" title="Context引起的内存泄露"></a>Context引起的内存泄露</h1><p>Context并不能随便乱用，用的不好有可能会引起内存泄露的问题，下面就示例两种错误的引用方式。</p>
<ul>
<li>错误的单例模式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton(context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个非线程安全的单例模式，instance作为静态对象，其生命周期要长于普通的对象，其中也包含Activity，假如Activity A去getInstance获得instance对象，传入this，常驻内存的Singleton保存了你传入的Activity A对象，并一直持有，即使Activity被销毁掉，但因为它的引用还存在于一个Singleton中，就不可能被GC掉，这样就导致了内存泄漏。</p>
<ul>
<li>View持有Activity的引用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Drawable mDrawable;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(saveInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ImageView iv = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">        mDrawable = getResources().getDrawable(R.drawable.ic_launcher);</div><div class="line">        iv.setImageDrawable(mDrawable);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有一个静态的Drawable对象当ImageView设置这个Drawable时，ImageView保存了mDrawable的引用，而ImageView传入的this是MainActivity的mContext，因为被static修饰的mDrawable是常驻内存的，MainActivity是它的间接引用，MainActivity被销毁时，也不能被GC掉，所以造成内存泄漏。</p>
<h1 id="正确使用Context"><a href="#正确使用Context" class="headerlink" title="正确使用Context"></a>正确使用Context</h1><p>一般Context造成的内存泄漏，几乎都是当Context销毁的时候，却因为被引用导致销毁失败，而Application的Context对象可以理解为随着进程存在的，所以我们总结出使用Context的正确姿势：</p>
<ol>
<li>当Application的Context能搞定的情况下，并且生命周期长的对象，优先使用Application的Context。</li>
<li>不要让生命周期长于Activity的对象持有到Activity的引用。</li>
<li>尽量不要在Activity中使用非静态内部类，因为非静态内部类会隐式持有外部类实例的引用，如果使用静态内部类，将外部实例引用作为弱引用持有。</li>
</ol>
<h1 id="获取全局Application"><a href="#获取全局Application" class="headerlink" title="获取全局Application"></a>获取全局Application</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyApplication app;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyApplication <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> app;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        app = <span class="keyword">this</span>;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Application全局只有一个，它本身就已经是单例了，无需再用单例模式去为它做多重实例保护了,getInstance()方法里面不要做任何逻辑判断，直接返回app对象就可以了，而app对象又是什么呢？在onCreate()方法中我们将app对象赋值成this，this就是当前Application的实例，那么app也就是当前Application的实例了。</p>
<p>参考文章：</p>
<p><a href="http://www.jianshu.com/p/94e0f9ab3f1d" target="_blank" rel="external">Context都没弄明白，还怎么做Android开发？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Activity可以new吗？Android的应用程序开发采用Java语言，Activity本质上也是一个对象，那Activity acti
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android系统" scheme="http://liuguoquan727.github.io/tags/Android%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>View的事件分发机制</title>
    <link href="http://liuguoquan727.github.io/2016/04/26/Android-View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://liuguoquan727.github.io/2016/04/26/Android-View的事件分发机制/</id>
    <published>2016-04-26T13:22:52.000Z</published>
    <updated>2016-04-26T13:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="点击事件的传递规则"><a href="#点击事件的传递规则" class="headerlink" title="点击事件的传递规则"></a>点击事件的传递规则</h1><p>首先明确我们这里要分析的对象就是MotionEvent，及点击事件。所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个MotionEvent事件产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent。</p>
<ul>
<li><strong>public boolean dispatchTouchEvent(MotionEvent event)</strong></li>
</ul>
<p>用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级的dispatchTouchEvent方法的影响，表示是否消耗此事件</p>
<ul>
<li><strong>public boolean onInterceptTouchEvent(MotionEvent event)</strong> //view无此方法，存在于ViewGroup中</li>
</ul>
<p>用来判断是否拦截某个事件，如果当前View拦截某个事件，那么在同一个事件序列中，次方法将不会被再次调用，返回结果表示是否拦截某个事件。</p>
<ul>
<li><strong>public boolean onTouchEvent(MotionEvent event)</strong></li>
</ul>
<p>在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件</p>
<p>上述三个方法到底有什么区别呢？它们是什么关系呢？下面通过一段伪代码来表示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> consume = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(onInterceptTouchEvent(ev)) &#123;</div><div class="line"></div><div class="line">		consume = onTouchEvent(ev);</div><div class="line"></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">		consume = chiled.dispatchTouchEvent(ev);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> consume;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的伪代码，我们可以大致了解点击事件的传递规则：对已一个跟ViewGroup来说，点击事件产生以后，首先会传递给它，这是它的dispatchTouchEvent就会被调用，如果这个ViewGroup的onInterceptTouchEvent方法返回true就表示它要拦截当前事件，接着事件就会交给这个ViewGroup的onTouchEvent方法就会被调用；如果这个ViewGroup的onInterceptTouchEvent方法返回false就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的dispatchTouchEvent方法就会被调用，如此反复直到事件被最终处理。</p>
<p>当一个View需要处理事件时，如果它设置了OnTouchListener，那么OnTouchListener中的OnTouch方法就会被回调，事件如何处理还要看onTouch的返回值，如果返回值为false，则当前View的OnTouchEvent方法会被调用；如果返回为true，则当前View的OnTouchEvent方法不会被调用。由此可见，给View设置的OnTouchListener，其优先级比onTouchEvent要高。在OnTouchEvent方法中，如果当前设置的有OnClickListener，那么它的onClick方法会被调用。可以看出，平时使用的OnClickListener其优先级最低，即处于事件的尾端。</p>
<p>当一个点击事件产生后，它的传递过程遵循如下顺序：Activity &gt; Window &gt; View，即事件总是先传递到Activity。Activity再传递给Window，最后Window再传递给顶级View，顶级View接收到事件后，就会按照事件分发机制去分发事件。</p>
<p>考虑一种情况，如果一个View的OnTouchEvent都返回false，那么它的父容器的OnTouchEvent将会被调用，依次类推，如果所有的子元素都不处理这个事件，那么这个事件将会最终传递给Activity处理，即Activity的OnTouchEvent将会被调用。我们可以用实际生活的例子来描述：假如点击事件是一个难题，这个难题最终被上级领导分给了一个程序员去处理（这是事件分发过程），结果这个程序员搞不定（OnTouchEvent返回false），现在该怎么办呢？程序员只能交给水平更高的程序员去解决（上级的OnTouchEvent被调用），如果上级再搞不定，那只能交给上级的上级去解决，这样就将难题一层层的向上抛，这是公司内部一种很常见的处理问题的过程。</p>
<p>关于事件传递的机制，这里给出一些结论，根据这些揭露可以更好地理解整个传递机制：</p>
<ul>
<li><p>（1）同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束。在这个过程中产生了一系列事件，这个时间序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</p>
</li>
<li><p>（2）正常情况下，一个事件序列只能被一个View拦截并且消耗。这一条的原因可以参考（3），因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过OnTouchEvent强行传递给其他View处理。</p>
</li>
<li><p>（3）某个View一旦决定拦截，那么这个事件的序列的搜只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent方法不会再被调用。就是说当一个View决定拦截一个事件后，那么系统会把同一个事件序列的其他方法都直接交给它来处理，因此就不用再调用这个View的OnInterceptTouchEvent其询问它是否要拦截了。</p>
</li>
<li><p>（4）某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一个事件序列中的其他事件都不会再交给它来处理。并且事件将重新交由它的父元素去处理，即父元素的OnTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。</p>
</li>
<li><p>（5）如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件将会消失，此时父元素的OnTouchEvent并不会被调用，并且当前View可以持续受到后续的事件，最终这些消失的点击事件会传递给Activity处理。</p>
</li>
<li><p>（6）ViewGroup默认不拦截任何事件。Android源码中ViewGroup的OnInterceptTouchEvent方法默认返回false</p>
</li>
<li><p>（7）View没有OnInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的OnTouchEvent方法就会被调用</p>
</li>
<li><p>（8）View的OnTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable默认为true，而TextView的clickable属性默认为false。</p>
</li>
<li><p>（9）View的enable属性不影响OnTouchEvent的默认返回值，哪怕一个View是disable状态的，只要它的clickable和longClickable有一个为true，那么它的OnTouchEvent就返回true。</p>
</li>
<li><p>（10）onClick会发生的前提是当前View是可点击的，并且收到了down和up事件</p>
</li>
<li><p>（11）事件传递过程是由外向内的，即事件总是先传递给父元素，然后再有父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。</p>
</li>
</ul>
<h1 id="事件分发的源码解析"><a href="#事件分发的源码解析" class="headerlink" title="事件分发的源码解析"></a>事件分发的源码解析</h1><h2 id="Activity对点击事件的分发过程"><a href="#Activity对点击事件的分发过程" class="headerlink" title="Activity对点击事件的分发过程"></a>Activity对点击事件的分发过程</h2><p>点击事件用MotionEvent来表示，当一个点击操作发生时，事件最先传递给当前Activity，由Activity的dispatchTouchEvent来进行事件分发，具体的工作是由Activity内部的Window来完成的。Window会将事件传递给decor view，decor view一般就是当前界面的底层容器（即setContentView所设置的View的父容器），通过Activity.getWindow。getDecorView()可以获得。先从Activity的dispatchTouchEvent开始分析。</p>
<p>源码：Activity#dispatchTouchEvent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">		onUserInteraction();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> onTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析上面的代码。首先事件交给Activity所附属的Window进行分发，如果返回true，整个事件就循环结束了，返回false以为着事件没人处理，所有View的onTouchEvent都返回了false，那么Activity的onTouchEvent就会被调用</p>
<p>接下里看Window是如何将事件传递给ViewGroup的。Window是是个抽象类，而Window的superDispatchTouchEvent方法也是个抽象方法，因此我们必须找到Window的实现类才行</p>
<p>源码：Window#superDispatchTouchEvent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</div></pre></td></tr></table></figure>
<p>到底Window的实现类是什么呢？其实是PhoneWindow，Window的唯一实现是android.policy.Window，接下来看一下PhoneWindow是如何处理点击事件的，</p>
<p>源码：PhoneWindow#superDispatchTouchEvent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> DecorView mDecor;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PhoneWindow将事件直接传递给了DecorView，这个DecorView是什么呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DecorView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">RootViewSurfaceTaker</span></span></div><div class="line"></div><div class="line">@<span class="title">Override</span></div><div class="line"><span class="title">public</span> <span class="title">final</span> <span class="title">View</span> <span class="title">getDecorView</span>() &#123;</div><div class="line">	<span class="keyword">if</span> (mDecor == <span class="keyword">null</span>) &#123;</div><div class="line">		installDecor();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> mDecor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，这个mDecor就是通过getWindow().getDecor()返回的View，而我们通过setContentView设置的View是它的一个子View。目前事件传递到了DecorView这里，由于DecorView继承自FrameLayout且是父View，所有最终事件会传递到View。换句话说，事件肯定会传递到View，不然应用如何响应点击事件呢？重点是事件到了View以后该如何传递。从这里开始，事件已经传递到顶级View了，即在Activity中通过setContentView所设置的View，另外顶级View也叫根View，顶级View一般来说都是ViewGroup。</p>
<h2 id="顶级View对点击事件的分发过程"><a href="#顶级View对点击事件的分发过程" class="headerlink" title="顶级View对点击事件的分发过程"></a>顶级View对点击事件的分发过程</h2><p>点击事件达到顶级View以后，会调用ViewGroup的dispatchTouchEvent方法，然后逻辑是这样的：如果顶级ViewGroup拦截事件即OnInterceptTouchEvent返回true，则事件由ViewGroup处理，这时如果ViewGroup的OnTouchListener被设置，则onTouch被调用，否则onTouchEvent被调用，也就是说两者都设置的话，onTouch会屏蔽掉OnTouchEvent。在OnTouchEvent中如果设置了OnClickListener，则OnClick会被调用。如果顶级ViewGroup不拦截事件，则事件会传递给它所在的点击事件链上的子View，这时子View的dispatchTouchEvent会被调用。到此，事件已经从顶级View传递给下一层View，接下来的传递过程和顶级View是一致的，如此循环完成整个事件的分发。</p>
<p>首先看ViewGroup对点击事件的分发过程，其主要实现在ViewGroup的dispatchTouchEvent方法中，这个方法较长。先看下面一段，它描述的是View是否拦截点击事件这个逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Check for interception.</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</div><div class="line"><span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">		|| mFirstTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (!disallowIntercept) &#123;</div><div class="line">		intercepted = onInterceptTouchEvent(ev);</div><div class="line">		ev.setAction(action); <span class="comment">// restore action in case it was changed</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		intercepted = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// There are no touch targets and this action is not an initial down</span></div><div class="line">	<span class="comment">// so this view group continues to intercept touches.</span></div><div class="line">	intercepted = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，ViewGroup在如下两种情况下会判断是否要拦截当前事件：事件类为ACTION_DOWN或者mFirstTouchTarget ！= null，mFirstTouchTarget ！= null是什么意思了？当ViewGroup不拦截事件并将事件交由子元素处理时mFirstTouchTarget ！= null 。反过来，一旦事件由当前ViewGroup拦截时，mFirstTouchTarget ！= null就不成立，那么当ACTION_DWON和ACTION_UP事件到来时，由于(actionMasked == MotionEvent.ACTION_DOWN|| mFirstTouchTarget != null)为false，将导致ViewGroup的OnInterceptTouchEvent不会再调用，并且同一序列中的其他事件都会默认交由给它处理。</p>
<p>这里有一种特使情况，那就是FLAG_DISALLOW_INTERCEPT标记位，这个标记位是通过requestDisallowInterceptTouchEvent设置的，一般用于子View中。FLAG_DISALLOW_INTERCEPT一旦设置后，ViewGroup将无法拦截除了ACTION_DOWN以外的其他事件。为什么说是除了ACTION_DOWN意外的其他事件了？这是因为ViewGroup在分发事件时，如果是ACTION_DOWN就会重置FLAG_DISALLOW_INTERCEPT这个标记位，将导致子View中设置的这个标记位无效。因此，当面对ACTION_DOWN事件时，ViewGroup总是会调用自己的OnInterceptTouchEvent方法来询问自己是否要拦截事件。在下面的代码中，ViewGroup会在ACTION_DOWN事件到来时做重置状态的操作，而在resetTouchState方法中会对FLAG_DISALLOW_INTERCEPT进行重置，因此子View调用requestDisallowInterceptTouchEvent方法并不能影响ViewGroup对ACTION_DOWN的处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">	<span class="comment">// Throw away all previous state when starting a new touch gesture.</span></div><div class="line">	<span class="comment">// The framework may have dropped the up or cancel event for the previous gesture</span></div><div class="line">	<span class="comment">// due to an app switch, ANR, or some other state change.</span></div><div class="line">	cancelAndClearTouchTargets(ev);</div><div class="line">	resetTouchState();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的源码分析，我们可以得出结论：当ViewGroup决定拦截事件后，那么后续的点击事件将会默认交给它处理，并且不再调用它的OnInterceptTouchEvent方法。FLAG_DISALLOW_INTERCEPT这个标志的作用是ViewGroup不再拦截事件，当前前提是ViewGroup不拦截ACTION_DOWN事件。那么这段分析有什么价值呢？总结起来有两点：第一，OnInterceptTouchEvent不是每次事件都会被调用的，如果我们想提前处理所有的点击事件，要选择dispatchTouchEvent方法，只有这个方法能确保每次都会调用，当然前提是事件能够传递到当前的ViewGroup；第二点：FLAG_DISALLOW_INTERCEPT标记位的作用给我们提供了一个思路，当面对滑动冲突时，我们可以是不是考虑用这种方法去解决问题？</p>
<p>接着再看当ViewGroup不拦截事件的时候，事件会向下分发交由它的子View进行处理，这段源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</div><div class="line"><span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</div><div class="line">	<span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</div><div class="line">	<span class="comment">// Find a child that can receive the event.</span></div><div class="line">	<span class="comment">// Scan children from front to back.</span></div><div class="line">	<span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildOrderedChildList();</div><div class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></div><div class="line">			&amp;&amp; isChildrenDrawingOrderEnabled();</div><div class="line">	<span class="keyword">final</span> View[] children = mChildren;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> childIndex = customOrder</div><div class="line">				? getChildDrawingOrder(childrenCount, i) : i;</div><div class="line">		<span class="keyword">final</span> View child = (preorderedList == <span class="keyword">null</span>)</div><div class="line">				? children[childIndex] : preorderedList.get(childIndex);</div><div class="line"></div><div class="line">		<span class="comment">// If there is a view that has accessibility focus we want it</span></div><div class="line">		<span class="comment">// to get the event first and if not handled we will perform a</span></div><div class="line">		<span class="comment">// normal dispatch. We may do a double iteration but this is</span></div><div class="line">		<span class="comment">// safer given the timeframe.</span></div><div class="line">		<span class="keyword">if</span> (childWithAccessibilityFocus != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (childWithAccessibilityFocus != child) &#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			childWithAccessibilityFocus = <span class="keyword">null</span>;</div><div class="line">			i = childrenCount - <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!canViewReceivePointerEvents(child)</div><div class="line">				|| !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</div><div class="line">			ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		newTouchTarget = getTouchTarget(child);</div><div class="line">		<span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// Child is already receiving touch within its bounds.</span></div><div class="line">			<span class="comment">// Give it the new pointer in addition to the ones it is handling.</span></div><div class="line">			newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		resetCancelNextUpFlag(child);</div><div class="line">		<span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</div><div class="line">			<span class="comment">// Child wants to receive touch within its bounds.</span></div><div class="line">			mLastTouchDownTime = ev.getDownTime();</div><div class="line">			<span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="comment">// childIndex points into presorted list, find original index</span></div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childrenCount; j++) &#123;</div><div class="line">					<span class="keyword">if</span> (children[childIndex] == mChildren[j]) &#123;</div><div class="line">						mLastTouchDownIndex = j;</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				mLastTouchDownIndex = childIndex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		mLastTouchDownX = ev.getX();</div><div class="line">		mLastTouchDownY = ev.getY();</div><div class="line">		newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">		alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先遍历ViewGroup的所有子元素，然后判断子元素是否能够接收到点击事件。是否能够接收到点击事件主要由两点来衡量：子元素是否在播动画和点击事件的坐标是否落在子元素的区域内。如果某个子元素满足这两个条件，那么事件就会传递给它来处理。可以看到dispatchTransformedTouchEvent实际上调用的就是子元素的dispatchTouchEvent方法，在它的内部有一段内容：而在上面的代码中child传递的不是null，因此它会直接调用子元素的dispatchTouchEvent，这样事件就交由子元素处理，从而完成了一轮事件分发。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">	handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	handled = child.dispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果子元素的dispatchTouchEvent返回true，那么，FirstTouchTarget就会被赋值同时跳出for循环，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</div><div class="line"><span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>这几行代码就完成了mFirstTouchTarget的赋值并终止对子元素的遍历。如果子元素的dispatchTouchEvent返回false，ViewGroup就会把事件分发给下一个子元素。</p>
<p>其实mFirstTouchTarget真正的赋值过程是在addTouchTarget内部完成的，从下面的addTouchTarget方法的内部结构可以看出，mFirstTouchTarget其实是一种单链表结构。mFirstTouchTarget是否被赋值，将直接影响到ViewGroup对事件的拦截策略，如果mFirstTouchTarget为null，那么ViewGroup就默认拦截接下来同一序列中所有的点击事件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> TouchTarget <span class="title">addTouchTarget</span><span class="params">(View child, <span class="keyword">int</span> pointerIdBits)</span> </span>&#123;</div><div class="line">	TouchTarget target = TouchTarget.obtain(child, pointerIdBits);</div><div class="line">	target.next = mFirstTouchTarget;</div><div class="line">	mFirstTouchTarget = target;</div><div class="line">	<span class="keyword">return</span> target;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果遍历所有的子元素后事件都没有合适地处理，这包含两种情况：第一种是ViewGroup没有子元素；第二种是子元素处理了点击事件，但是再dispatchTouchEvent中返回了false，这一般式因为子元素在OnTouchEvent中返回了false。在这两种情况下ViewGroup会自己处理点击事件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Dispatch to touch targets.</span></div><div class="line"><span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="comment">// No touch targets so treat this as an ordinary view.</span></div><div class="line">	handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</div><div class="line">			TouchTarget.ALL_POINTER_IDS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三个参数child为null，它会调用super.dispatchTouchEvent(event)，很显然，这里就转到了View（不包括ViewGroup）的dispatchTouchEvent方法，即点击事件开始交由View来处理。</p>
<h2 id="View对点击事件的处理过程"><a href="#View对点击事件的处理过程" class="headerlink" title="View对点击事件的处理过程"></a>View对点击事件的处理过程</h2><p>View点击事件的处理过程简单一些，这里的View不包含ViewGroup。先看它的dispatchTouchEvent方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">	<span class="comment">// If the event should be handled by accessibility focus first.</span></div><div class="line">	...</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">		<span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">		ListenerInfo li = mListenerInfo;</div><div class="line">		<span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">				&amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">				&amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">			result = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">			result = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>View对点击事件的处理就比较简单了因为View是一个单独的元素，它没有子元素因此无法向下传递事件，所以它只能自己处理事件。从上面的源码可以看出View对点击事件的处理过程，首先会判断有没有设置OnTouchListener，如果OnTouchListener中的OnTouch方法返回true，那么OnTouchEvent就不会被调用，可见OnTouchListener的优先级高于OnTouchEvent。</p>
<p>接着再分析OnTouchEvent的实现。先看当View出于不可用状态下的点击事件的处理过程，如下所示，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">	<span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">		setPressed(<span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// A disabled view that is clickable still consumes the touch</span></div><div class="line">	<span class="comment">// events, it just doesn't respond to them.</span></div><div class="line">	<span class="keyword">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">			(viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着，如果View设置有代理，那么还会执行TouchDelegate的onTouchEvent方法，这个OnTouchEvent的工作机制看起来和OnTouchListener类似</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面再看一下OnTouchEvent中堆点击事件的具体处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">          (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;</div><div class="line">      <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">              <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</div><div class="line">              <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</div><div class="line">                  <span class="comment">// take focus if we don't have it already and we should in</span></div><div class="line">                  <span class="comment">// touch mode.</span></div><div class="line">                  <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</div><div class="line">                  <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                      focusTaken = requestFocus();</div><div class="line">                  &#125;</div><div class="line">	</div><div class="line">                  <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                      <span class="comment">// The button is being released before we actually</span></div><div class="line">                      <span class="comment">// showed it as pressed.  Make it show the pressed</span></div><div class="line">                      <span class="comment">// state now (before scheduling the click) to ensure</span></div><div class="line">                      <span class="comment">// the user sees it.</span></div><div class="line">                      setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                 &#125;</div><div class="line">	</div><div class="line">                  <span class="keyword">if</span> (!mHasPerformedLongPress) &#123;</div><div class="line">                      <span class="comment">// This is a tap, so remove the longpress check</span></div><div class="line">                      removeLongPressCallback();</div><div class="line">	</div><div class="line">                      <span class="comment">// Only perform take click actions if we were in the pressed state</span></div><div class="line">                      <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                          <span class="comment">// Use a Runnable and post this rather than calling</span></div><div class="line">                          <span class="comment">// performClick directly. This lets other visual state</span></div><div class="line">                          <span class="comment">// of the view update before click actions start.</span></div><div class="line">                          <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</div><div class="line">                              mPerformClick = <span class="keyword">new</span> PerformClick();</div><div class="line">                          &#125;</div><div class="line">                          <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                              performClick();</div><div class="line">                          &#125;</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">	</div><div class="line">                  <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</div><div class="line">                      mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</div><div class="line">                  &#125;</div><div class="line">	</div><div class="line">                  <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                      postDelayed(mUnsetPressedState,</div><div class="line">                              ViewConfiguration.getPressedStateDuration());</div><div class="line">                  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</div><div class="line">                      <span class="comment">// If the post failed, unpress right now</span></div><div class="line">                      mUnsetPressedState.run();</div><div class="line">                  &#125;</div><div class="line">	</div><div class="line">                  removeTapCallback();</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">	</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">              mHasPerformedLongPress = <span class="keyword">false</span>;</div><div class="line">	</div><div class="line">              <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">              &#125;</div><div class="line">	</div><div class="line">              <span class="comment">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class="line">              <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class="line">	</div><div class="line">              <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class="line">              <span class="comment">// a short period in case this is a scroll.</span></div><div class="line">              <span class="keyword">if</span> (isInScrollingContainer) &#123;</div><div class="line">                  mPrivateFlags |= PFLAG_PREPRESSED;</div><div class="line">                  <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</div><div class="line">                      mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</div><div class="line">                  &#125;</div><div class="line">                  mPendingCheckForTap.x = event.getX();</div><div class="line">                  mPendingCheckForTap.y = event.getY();</div><div class="line">                  postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></div><div class="line">                  setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                  checkForLongClick(<span class="number">0</span>);</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">	</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">              setPressed(<span class="keyword">false</span>);</div><div class="line">              removeTapCallback();</div><div class="line">              removeLongPressCallback();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">	</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">              drawableHotspotChanged(x, y);</div><div class="line">	</div><div class="line">              <span class="comment">// Be lenient about moving outside of buttons</span></div><div class="line">              <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</div><div class="line">                  <span class="comment">// Outside button</span></div><div class="line">                  removeTapCallback();</div><div class="line">                  <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">                      <span class="comment">// Remove any future long press/tap checks</span></div><div class="line">                      removeLongPressCallback();</div><div class="line">	</div><div class="line">                      setPressed(<span class="keyword">false</span>);</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">	</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>只要View的Clickable和longClickable有一个为true，那么就会消耗这个事件，即OnTouchEvent返回true，不管它是不是disable状态。然后就是当ACTION_UP事件发生时会触发performClick方法，如果View设置了OnClickListener，那么performClick方法内部会调用它的onClick方法，如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> result;</div><div class="line">	<span class="keyword">final</span> ListenerInfo li = mListenerInfo;</div><div class="line">	<span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">		playSoundEffect(SoundEffectConstants.CLICK);</div><div class="line">		li.mOnClickListener.onClick(<span class="keyword">this</span>);</div><div class="line">		result = <span class="keyword">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		result = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>View的LONG_CLICKABLE属性默认为false，而CLICKABLE属性是否为false和具体的View有关，确切来说是可点击的View其CLICKABLE为true，不可点击的View其CLICKABLE为false。通过setClickable和setLongClickable可以改变View的LONG_CLICKABLE、CLICKABLE属性。另外，setOnClickListener和setOnLongClickListener会自动将View的LONG_CLICKABLE、CLICKABLE属性设置为true。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener l)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!isClickable()) &#123;</div><div class="line">		setClickable(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	getListenerInfo().mOnClickListener = l;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnLongClickListener</span><span class="params">(OnLongClickListener l)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!isLongClickable()) &#123;</div><div class="line">		setLongClickable(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	getListenerInfo().mOnLongClickListener = l;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;点击事件的传递规则&quot;&gt;&lt;a href=&quot;#点击事件的传递规则&quot; class=&quot;headerlink&quot; title=&quot;点击事件的传递规则&quot;&gt;&lt;/a&gt;点击事件的传递规则&lt;/h1&gt;&lt;p&gt;首先明确我们这里要分析的对象就是MotionEvent，及点击事件。所谓点击事件的事
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android系统" scheme="http://liuguoquan727.github.io/tags/Android%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>View的工作流程</title>
    <link href="http://liuguoquan727.github.io/2016/04/26/Android-View%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://liuguoquan727.github.io/2016/04/26/Android-View的工作流程/</id>
    <published>2016-04-26T13:22:34.000Z</published>
    <updated>2016-04-26T13:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>View的工作流程主要指measure、layout、draw这三大流程，即测量、布局和绘制，其中measure确定View的测量宽/高，layout确定View的最终宽/高和四个顶点的位置（即View在父容器中的放置位置），draw则将View绘制到屏幕上。</p>
<h1 id="measure过程"><a href="#measure过程" class="headerlink" title="measure过程"></a>measure过程</h1><p>measure过程要分情况来看，如果只是一个原始的View，那么通过measure方法就完成了其测量的过程，如果是一个ViewGroup，除了完成自己的测量过程外，还会遍历去调用所有子元素的measure方法，各个子元素再递归去执行这个流程。</p>
<h2 id="View的测量过程"><a href="#View的测量过程" class="headerlink" title="View的测量过程"></a>View的测量过程</h2><p>View的measure过程是由其measure方法来完成，measure方法是一个final类型的方法，这意味着子类不能重写此方法，在View的measure方法中会去调用View的onMeasure方法，因此只需要看onMeasure的实现即可，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">	setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class="line">			getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，setMeasuredDimension方法会设置View宽/高的测量值，因此我们只需要看getDefaultSize这个方法即可：</p>
<h2 id="测量的三种模式"><a href="#测量的三种模式" class="headerlink" title="测量的三种模式"></a>测量的三种模式</h2><ol>
<li><p>EXACTLY：精确值模式<br>当我们将控件的layout_width或layout_height属性指定为具体的数值时，或指定为match_parent属性时，系统使用的是EXACTLY模式。</p>
</li>
<li><p>AT_MOST：最大值模式<br>当我们将控件的layout_width或layout_height属性指定为wrap_content时,系统使用的是AT_MOST模式  </p>
</li>
<li><p>UNSPECIFIED：<br>此模式不指定其大小测量模式，View想多大就多大，通常情况系统绘制自定义View时才会使用  </p>
</li>
</ol>
<p><strong>Note:: View类默认的onMeasure()方法只支持EXACTLY模式，而如果要让自定义View支持wrap_content属性时，那么必须重写onMeasure()方法来指定wrap_content的大小</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> result = size;</div><div class="line">	<span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec); <span class="comment">//测量模式</span></div><div class="line">	<span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec); <span class="comment">//绘制的大小</span></div><div class="line"></div><div class="line">	<span class="keyword">switch</span> (specMode) &#123;</div><div class="line">	<span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">		result = size;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> MeasureSpec.AT_MOST: <span class="comment">//重写指定AT_MOST模式的值</span></div><div class="line">	<span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">		result = specSize;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，其实getDefaultSize返回的大小就是measureSpec中的specSize，而这个specSize就是View测量后的大小，这里多次提到测量后的大小是因为View的最终大小是在layout阶段确定的，所以必须加以区分，但是几乎所有情况下View的测量大小和最终大小是相等的。</p>
<p>在上述情况下，View的大小为getDefaultSize的第一个参数size，及宽高分别为getSuggestedMinimumWidth和getSuggestedMinimumHeight的返回值，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="layout过程"><a href="#layout过程" class="headerlink" title="layout过程"></a>layout过程</h1><p>Layout的作用是ViewGroup用来确定子元素的位置，当ViewGroup的位置被确定后，它在onLayout中会遍历所有子元素并调用其layout方法，View的layout方法中onLayout方法又会被调用。layout方法确定View本身的位置，而onLayout方法则会确定所有子元素的位置，View的layout方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</div><div class="line">		onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class="line">		mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> oldL = mLeft;</div><div class="line">	<span class="keyword">int</span> oldT = mTop;</div><div class="line">	<span class="keyword">int</span> oldB = mBottom;</div><div class="line">	<span class="keyword">int</span> oldR = mRight;</div><div class="line"></div><div class="line">	<span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class="line">			setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class="line">		onLayout(changed, l, t, r, b);</div><div class="line">		mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</div><div class="line"></div><div class="line">		ListenerInfo li = mListenerInfo;</div><div class="line">		<span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class="keyword">null</span>) &#123;</div><div class="line">			ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class="line">					(ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class="line">			<span class="keyword">int</span> numListeners = listenersCopy.size();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</div><div class="line">				listenersCopy.get(i).onLayoutChange(<span class="keyword">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class="line">	mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>layout方法大致流程如下：首先通过setFrame方法设定View的四个顶点的位置，即初始化mLeft、mTop、mBottom、mRight这四个值，View的四个顶点一旦确定，那么View在父容器的位置也就确定了；接着会调用onLayout方法，用途是父容器确定子元素的位置，和onMeasure方法类似，onLayout的具体实现同样和具体的布局有关，所以View和ViewGroup均没有真正的实现。我们可以看一下TextView的onLayout方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</div><div class="line">	<span class="keyword">if</span> (mDeferScroll &gt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">int</span> curs = mDeferScroll;</div><div class="line">		mDeferScroll = -<span class="number">1</span>;</div><div class="line">		bringPointIntoView(Math.min(curs, mText.length()));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="draw过程"><a href="#draw过程" class="headerlink" title="draw过程"></a>draw过程</h1><p>Draw过程较简单，作用是将View绘制到屏幕上面。</p>
<p>当测量好一个View之后，我们就可以重写onDraw方法，并在Canvas对象上绘制所需要的图形，最终显示在屏幕上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;View的工作流程主要指measure、layout、draw这三大流程，即测量、布局和绘制，其中measure确定View的测量宽/高，layout确定View的最终宽/高和四个顶点的位置（即View在父容器中的放置位置），draw则将View绘制到屏幕上。&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android系统" scheme="http://liuguoquan727.github.io/tags/Android%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android的消息机制</title>
    <link href="http://liuguoquan727.github.io/2016/04/26/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://liuguoquan727.github.io/2016/04/26/Android的消息机制/</id>
    <published>2016-04-26T13:20:28.000Z</published>
    <updated>2016-04-26T13:34:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android的消息机制概述"><a href="#Android的消息机制概述" class="headerlink" title="Android的消息机制概述"></a>Android的消息机制概述</h1><p>Android的消息机制主要是指Handler的运行机制，Handler的运行机制需要底层的MessageQueue和Looper的支撑。</p>
<p>MessageQueue的中文为消息队列，顾名思义，它的内部存储了一组消息，以队列的形式对外提供插入和删除的方法。虽然称为消息队列，但是它的<strong>内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息列表</strong>。</p>
<p>Looper的中文翻译是循环，这里可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper会以无限循环的形式其查询是否有新的消息，如果有的话就处理消息，否则就一直等待。</p>
<p>Looper中还有一个特殊的概念，那就是ThreadLocal，ThreadLocal并不是线程，它的作用是可以在每个线程中存储数据。我们知道，Handler创建的时候会采用当前线程的Looper来构造消息循环系统，那么Handler内部如何获取到当前线程的Looper呢？这就要使用ThreadLocal了，ThreadLocal可以在不同的线程中互不干扰地存储并提供数据，通过ThreadLocal就可以轻松地获取每个线程的Looper。</p>
<p>需要注意的是，线程是默认没有Looper的，如果需要使用Handler就必须为线程创建Looper。而主线程，即UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。</p>
<h1 id="Android消息机制分析"><a href="#Android消息机制分析" class="headerlink" title="Android消息机制分析"></a>Android消息机制分析</h1><p>Android消息机制主要是指Handler的运行机制以及Handler所附带的MessageQueue和Looper的工作过程，这三者实际上是一个整体。<strong>Handler的作用</strong>主要是将一个任务切换到某个指定的线程中去执行，那么Android为什么要提供这个功能呢？<strong>这是因为Android规定UI只能在主线程中进行，如果在子线程中访问UI，那么程序就会抛出运行时异常。</strong>ViewRootImp对UI操作做了验证，这个验证工作是由ViewRootImpl的checkThread方法来完成的，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkThread</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(mThread != Thread.currentThread()) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> CalledFromWrongThreadException(<span class="string">"Only the original thread that created a view hiearachy can touch its view"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Android建议我们不要在主线程中进行耗时的操作，否则会导致程序无法响应ANR。考虑一种情况，假如我们需要从服务器拉取一些信息并将其显示在UI上，这个时候必须在子线程中进行拉取工作，拉取完毕之后又不能在子线程中直接访问UI，如果没有Handler，那么我们确实没有办法将访问UI的工作切换到主线程中执行，因此，系统提供Handler的主要原因及时为了解决在子线程中无法访问UI的矛盾。</p>
<p><strong>系统为什么不允许在子线程中访问UI呢？</strong>这是 因为Android的UI控件不是线程安全的，如果在多线程中并发访问可能会导致UI控件处于不可预期的状态，而为什么系统不对UI控件的访问加上锁机制呢？缺点有两个：首先加上锁机制会让UI访问的逻辑变得复杂，其次锁机制会降低UI访问的效率，因为锁机制会阻塞某些线程的执行。因此最简单最高效的方法就是采用单线程模型来处理UI操作，对于开发者来说也不是很麻烦，只是需要通过Handler切换到UI访问的执行线程即可。</p>
<p>Handler的工作过程：Handler创建时会采用当前线程的Looper来构建内部的消息循环系统，如果当前线程没有Looper，那么就会报错；Handler创建完毕后，这个时候其内部的MessageQueue和Looper就可以协同工作了，然后通过Handler的post方法将一个Runnable传递到Handler内部的Looper中去处理，也可以通过Handler的send方法来发送一个消息，这个消息同样会在Looper中去处理。其实post方法最终也是在send方法中完成的。当Handler的send方法被调用时，它会调用MessageQueue的enqueueMessage方法将这个消息放入消息队列中，然后Looper发现有新消息到来时，就会处理这个消息，最终消息中的Runnable或者Handler的handleMessage方法就会被调用。</p>
<p>注意：Looper是运行在创建Handler所在的线程中的，这样一来Handler中的业务逻辑就被切换到创建Handler所在的线程中去执行了。</p>
<h2 id="ThreadLocal的工作原理"><a href="#ThreadLocal的工作原理" class="headerlink" title="ThreadLocal的工作原理"></a>ThreadLocal的工作原理</h2><p>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。</p>
<p>下面通过实际的例子来演示ThreadLocal的作用。首先定义一个ThreadLocal对象，这里选择Boolean类型的，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ThreadLocal&lt;Boolean&gt; mThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Boolean&gt;();</div></pre></td></tr></table></figure></p>
<p>然后在主线程、子线程1和子线程2中设置和访问它的值，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">   mThreadLocal.set(<span class="keyword">true</span>);</div><div class="line">   System.out.println(<span class="string">"main thread: "</span> + mThreadLocal.get()); <span class="comment">//true</span></div><div class="line">   </div><div class="line">   <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mThreadLocal.set(<span class="keyword">false</span>);</div><div class="line">		System.out.println(<span class="string">"thread 1: "</span> + mThreadLocal.get()); <span class="comment">//false</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;).start();</div><div class="line">   </div><div class="line">   <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"thread 2: "</span> + mThreadLocal.get()); <span class="comment">//null，没有设置值</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>上述代码中，根据对ThreadLocal的描述，主线中mThreadLocal.get()为true，子线程1中mThreadLocal.get()为false，子线程2中mThreadLocal.get()为null。代码运行打印如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">15</span>:54:55.478: I/System.out(11711): main thread: <span class="keyword">true</span></div><div class="line">01-09 15:54:55.479: I/System.out(11711): thread 1: <span class="keyword">false</span></div><div class="line">01-09 15:54:55.480: I/System.out(11711): thread 2: <span class="keyword">null</span></div></pre></td></tr></table></figure>
<p><strong>从上面的打印可以看出</strong>，虽然不同的线程访问的是同一个ThreadLocal对象，但是它们通过ThreadLocal获取的值却是不一样的，这就是ThreadLocal的特点。ThreadLocal之所以有如此特点，是因为不同线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前的ThreadLocal索引去查找对应的value值。很显然，不同线程中的数组是不同的，这就是为什么通过ThreadLocal可以在不同的线程中维护一套数据的副本并且互不干扰。</p>
<p>上面描述的ThreadLocal的使用方法和工作过程，下面分析ThreadLocal的内部实现，ThreadLocal是一个泛型类，它的定义为<code>public class ThreadLocal&lt;T&gt;</code>，只要弄清楚ThreadLocal的get和set方法就可以明白它的工作原理。</p>
<p>首先看get和set方法，如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    Thread currentThread = Thread.currentThread();</div><div class="line">    Values values = values(currentThread);</div><div class="line">    <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</div><div class="line">        values = initializeValues(currentThread);</div><div class="line">    &#125;</div><div class="line">    values.put(<span class="keyword">this</span>, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Values <span class="title">initializeValues</span><span class="params">(Thread current)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> current.localValues = <span class="keyword">new</span> Values();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Gets Values instance for this thread and variable type.</div><div class="line"> */</div><div class="line"><span class="function">Values <span class="title">values</span><span class="params">(Thread current)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> current.localValues;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的set方法中，首先会通过values方法来获取当前线程中的ThreadLocal数据，<strong>如何获取呢？</strong>在Thread内部有一个成员变量专门用于存储线程的ThreadLocal数据：ThreadLocal.Values localValues;因此获取当前线程的ThreadLocal数据就变得异常简单。如果localValues的值为null，那么久需要对其进行初始化化，初始化后再将ThreadLocal的值进行存储。</p>
<p>下面看一下ThreadLocal的值到底是如何在localValues中进行存储的。在localValues内部有一个数组：private Object[] table;ThreadLocal的值就存储在这个table数组中。下面看一下localValues是如何使用put方法将ThreadLocal的值存储到table数组中的，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sets entry for given ThreadLocal to given value, creating an</div><div class="line"> * entry if necessary.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</div><div class="line">    cleanUp();</div><div class="line"></div><div class="line">    <span class="comment">// Keep track of first tombstone. That's where we want to go back</span></div><div class="line">    <span class="comment">// and add an entry if necessary.</span></div><div class="line">    <span class="keyword">int</span> firstTombstone = -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = key.hash &amp; mask;; index = next(index)) &#123;</div><div class="line">        Object k = table[index];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (k == key.reference) &#123;</div><div class="line">            <span class="comment">// Replace existing entry.</span></div><div class="line">            table[index + <span class="number">1</span>] = value;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (firstTombstone == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">// Fill in null slot.</span></div><div class="line">                table[index] = key.reference;</div><div class="line">                table[index + <span class="number">1</span>] = value;</div><div class="line">                size++;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Go back and replace first tombstone.</span></div><div class="line">            table[firstTombstone] = key.reference;</div><div class="line">            table[firstTombstone + <span class="number">1</span>] = value;</div><div class="line">            tombstones--;</div><div class="line">            size++;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Remember first tombstone.</span></div><div class="line">        <span class="keyword">if</span> (firstTombstone == -<span class="number">1</span> &amp;&amp; k == TOMBSTONE) &#123;</div><div class="line">            firstTombstone = index;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码实现了数据的存储过程，我们可以由上可以得出一个存储规则，那就是ThreadLocal的值在table数组中的存储位置总是为ThreadLocal的reference字段所标识的对象的下一个位置，比如ThreadLocal的reference对在table数组中的索引为index，那么ThreadLocal的值在table数组中的索引就是index+1.最终ThreadLocal的值会被存储在table数组中：table[index + 1] = value;</p>
<p>接下来，分析get方法，如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Optimized for the fast path.</span></div><div class="line">    Thread currentThread = Thread.currentThread();</div><div class="line">    Values values = values(currentThread);</div><div class="line">    <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</div><div class="line">        Object[] table = values.table;</div><div class="line">        <span class="keyword">int</span> index = hash &amp; values.mask;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.reference == table[index]) &#123;</div><div class="line">            <span class="keyword">return</span> (T) table[index + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        values = initializeValues(currentThread);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (T) values.getAfterMiss(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，ThreadLocal的get方法同样是取出当前线程的localValues对象，如果这个对象不为null，那就取出它的table数组并找出ThreadLocal的reference对象在table数组中的位置，然后table数组中下一个位置所存储的数据就是ThreadLocal的值。如果这个对象为null，则返回初始值，初始值由ThreadLocal的initialValue方法来描述，默认情况下为null，当然也可以重写这个方法，它的默认实现如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function">Object <span class="title">getAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class="line">    Object[] table = <span class="keyword">this</span>.table;</div><div class="line">    <span class="keyword">int</span> index = key.hash &amp; mask;</div><div class="line"></div><div class="line">    <span class="comment">// If the first slot is empty, the search is over.</span></div><div class="line">    <span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</div><div class="line">        Object value = key.initialValue();</div><div class="line"></div><div class="line">        <span class="comment">// If the table is still the same and the slot is still empty...</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.table == table &amp;&amp; table[index] == <span class="keyword">null</span>) &#123;</div><div class="line">            table[index] = key.reference;</div><div class="line">            table[index + <span class="number">1</span>] = value;</div><div class="line">            size++;</div><div class="line"></div><div class="line">            cleanUp();</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// The table changed during initialValue().</span></div><div class="line">        put(key, value);</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>从ThreadLocal的set和get方法可以看出，它们所操作的对象都是当前线程的Values对象的table数组，因此在不同的线程中访问同一个ThreadLocal的set和get方法，它们对ThreadLocal所在的读/写权限仅限各自线程的内部，这就是ThreadLocal可以在不同线程中互不干扰的储存和修改数据的原因，理解ThreadLocal的工作方式有助于理解Looper的工作原理。</p>
</blockquote>
<h2 id="MessageQueue的工作原理"><a href="#MessageQueue的工作原理" class="headerlink" title="MessageQueue的工作原理"></a>MessageQueue的工作原理</h2><p>消息队列在Android中指的是MessageQueue，MessageQueue主要包括两个操作：插入和读取，读取操作会伴随着删除操作，插入和读取的方法分别是enqueueMessage和next，其中enqueueMessage的作用往往是往消息队列中插入一条消息，而next的作用是往消息队列中取出一条消息并将其从消息队列中移除。尽管MessageQueue叫消息队列，但是它的内部实现不是用的队列，而是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上效率较高。enqueueMessage的源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (msg.isInUse()) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">			IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</div><div class="line">					msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</div><div class="line">			Log.w(<span class="string">"MessageQueue"</span>, e.getMessage(), e);</div><div class="line">			msg.recycle();</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		msg.markInUse();</div><div class="line">		msg.when = when;</div><div class="line">		Message p = mMessages;</div><div class="line">		<span class="keyword">boolean</span> needWake;</div><div class="line">		<span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">			<span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">			msg.next = p;</div><div class="line">			mMessages = msg;</div><div class="line">			needWake = mBlocked;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Inserted within the middle of the queue.  Usually we don not have to wake</span></div><div class="line">			<span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">			<span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line"></div><div class="line">			needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">			Message prev;</div><div class="line">			<span class="keyword">for</span> (;;) &#123;</div><div class="line">				prev = p;</div><div class="line">				p = p.next;</div><div class="line">				<span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">					needWake = <span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">			prev.next = msg;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">		<span class="keyword">if</span> (needWake) &#123;</div><div class="line">			nativeWake(mPtr);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从enqueueMessage的实现来看，它的主要操作就是单链表的插入和删除，下面看一下next方法的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"> <span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// Return here if the message loop has already quit and been disposed.</span></div><div class="line">      <span class="comment">// This can happen if the application tries to restart a looper after quit</span></div><div class="line">      <span class="comment">// which is not supported.</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</div><div class="line">      <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></div><div class="line">      <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line"><span class="comment">//死循环</span></div><div class="line">      <span class="keyword">for</span> (;;) &#123;</div><div class="line">          <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</div><div class="line">              Binder.flushPendingCommands();</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line"></div><div class="line">          <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">              <span class="comment">// Try to retrieve the next message.  Return if found.</span></div><div class="line">              <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">              Message prevMsg = <span class="keyword">null</span>;</div><div class="line">              Message msg = mMessages;</div><div class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">                  <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class="line">                  <span class="keyword">do</span> &#123;</div><div class="line">                      prevMsg = msg;</div><div class="line">                      msg = msg.next;</div><div class="line">                  &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                  <span class="keyword">if</span> (now &lt; msg.when) &#123;</div><div class="line">                      <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class="line">                      nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                      <span class="comment">// Got a message.</span></div><div class="line">                      mBlocked = <span class="keyword">false</span>;</div><div class="line">                      <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</div><div class="line">                          prevMsg.next = msg.next;</div><div class="line">                      &#125; <span class="keyword">else</span> &#123;</div><div class="line">                          mMessages = msg.next;</div><div class="line">                      &#125;</div><div class="line">                      msg.next = <span class="keyword">null</span>;</div><div class="line">                      <span class="keyword">if</span> (<span class="keyword">false</span>) Log.v(<span class="string">"MessageQueue"</span>, <span class="string">"Returning message: "</span> + msg);</div><div class="line">                      <span class="keyword">return</span> msg;</div><div class="line">                  &#125;</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">// No more messages.</span></div><div class="line">                  nextPollTimeoutMillis = -<span class="number">1</span>;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="comment">// Process the quit message now that all pending messages have been handled.</span></div><div class="line">              <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">                  dispose();</div><div class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="comment">// If first time idle, then get the number of idlers to run.</span></div><div class="line">              <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></div><div class="line">              <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></div><div class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></div><div class="line">                      &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</div><div class="line">                  pendingIdleHandlerCount = mIdleHandlers.size();</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">                  <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></div><div class="line">                  mBlocked = <span class="keyword">true</span>;</div><div class="line">                  <span class="keyword">continue</span>;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</div><div class="line">                  mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</div><div class="line">              &#125;</div><div class="line">              mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// Run the idle handlers.</span></div><div class="line">          <span class="comment">// We only ever reach this code block during the first iteration.</span></div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class="line">              <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</div><div class="line">              mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></div><div class="line"></div><div class="line">              <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  keep = idler.queueIdle();</div><div class="line">              &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">                  Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"IdleHandler threw exception"</span>, t);</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="keyword">if</span> (!keep) &#123;</div><div class="line">                  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                      mIdleHandlers.remove(idler);</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></div><div class="line">          pendingIdleHandlerCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">          <span class="comment">// While calling an idle handler, a new message could have been delivered</span></div><div class="line">          <span class="comment">// so go back and look again for a pending message without waiting.</span></div><div class="line">          nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>可以发现next方法是一个无限循环的过程，如果消息队列中没有消息，那么next方法会一直阻塞在这里。当有新的消息到来时，next方法会返回这条消息并将其从单链表中移除。</p>
<h2 id="Looper的工作原理"><a href="#Looper的工作原理" class="headerlink" title="Looper的工作原理"></a>Looper的工作原理</h2><p>Looper在Android消息机制里面扮演着消息循环的角色，具体来说它会不停地从MessageQueue中查看是否有新消息，如有有新消息就会立刻处理，否则就会一直阻塞在那里。<br>首先看一下Looper的构造函数，在构造方法中它会创建一个MessageQueue即消息队列，然后将当前线程的对象存储起来，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">	&#125;</div><div class="line">	sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">	mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">	mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Handler的工作需要Looper，没有Looper的线程就会报错，那么如何为一个线程创建Looper呢？通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Looper.prepare(); <span class="comment">//创建Looper</span></div><div class="line">		mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">super</span>.handleMessage(msg);</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (msg.what == <span class="number">0</span>) &#123;</div><div class="line">					</div><div class="line">					System.out.println(<span class="string">"msg: "</span> + <span class="string">"123456"</span>); </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		Looper.loop(); <span class="comment">//开启Looper循环</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 发送消息</div><div class="line">    * <span class="doctag">@param</span> view</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">   	</div><div class="line">   	mHandler.sendEmptyMessage(<span class="number">0</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 退出Looper循环</div><div class="line">    * <span class="doctag">@param</span> view</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">   	mHandler.getLooper().quit();</div><div class="line">	mHandler.getLooper().quitSafely(); <span class="comment">//API18</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Looper除了prepare方法外，还提供了prepareMainLooper()方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法创建的。由于主线程的Looper比较特殊，所以Looper提供了一个getMainLooper方法，通过它可以在任何位置获取主线程Looper。</p>
<p>Looper也是可以退出的，Looper提供了quit和quitSafely来退出一个Looper，二者的区别在于：quit会直接退出Looper，而quitSafely只是设定一个退出标志，然后把消息队列中的已有消息处理完毕后才安全地退出。Looper退出后，提供Handler发送的消息会失败，这时Handler的send方法返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来终止消息循环，否则这个子线程会一直处于等待状态，而如果推出Looper以后，这个线程就会立刻终止，因此建议不需要的时候终止Looper。</p>
<p>Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的运行，实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Run the message queue in this thread. Be sure to call</div><div class="line">  * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">     <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">     <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">     <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">     Binder.clearCallingIdentity();</div><div class="line">     <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">     <span class="keyword">for</span> (;;) &#123;</div><div class="line">         Message msg = queue.next(); <span class="comment">// might bloc  退出时返回null</span></div><div class="line">         <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="comment">// No message indicates that the message queue is quitting. </span></div><div class="line">             <span class="keyword">return</span>; <span class="comment">//位移跳出循环的方式</span></div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">         Printer logging = me.mLogging;</div><div class="line">         <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">             logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                     msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         msg.target.dispatchMessage(msg); <span class="comment">//分发消息 msg.target = Handler</span></div><div class="line"></div><div class="line">         <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">             logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">         <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">         <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">         <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">             Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                     + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                     + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                     + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                     + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         msg.recycleUnchecked();</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Looper的loop方法工作过程，loop方法是一个死循环，位移跳出循环的方式是MessageQueue的next方法返回null。当Looper的quit方法被调用时，Looper就会调用MessageQueue的quit或者quitSafely方法来通知消息队列退出，当消息队列表计为退出状态时，它的next方法就返回null。</p>
<p>Looper必须退出，否则loop方法会无线循环下去。loop方法会调用MessageQueue的next方法来获取新的消息，而next是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里。如果MessageQueue的next方法返回了新的消息，Looper就会处理这条消息：msg.target.dispatchMessage(msg);这里的msg.target是发送这条消息的Handler对象，这样Handler的发送的消息最终在它的dispatchMessage中处理了。</p>
<h2 id="Handler的工作原理"><a href="#Handler的工作原理" class="headerlink" title="Handler的工作原理"></a>Handler的工作原理</h2><p>Handler的主要工作包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法实现，post的一系列方法最终是通过send的一系列方法来实现的。发送一条消息典型过程如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</div><div class="line">			delayMillis = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">	MessageQueue queue = mQueue;</div><div class="line">	<span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">		RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">				<span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">		Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//送入消息队列</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">	msg.target = <span class="keyword">this</span>;</div><div class="line">	<span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">		msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，Handler发送消息的过程仅仅是向消息队列插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这是Handler就进入了消息处理阶段。dispatchMessage实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">		handleCallback(msg);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		handleMessage(msg);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Handler处理消息的过程如下：</p>
<p>首先，检查Message的Callback是否为null，不为null则通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">	message.callback.run();  <span class="comment">//messge.callback = Runnable对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次，若Message的Callback是为null，则检查mCallback是否为null，不为null就调用mCallback的handleMessage方法来处理消息，Callback是个接口，定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Callback框图用如下方式创建Handler对象：Handler mHandler = new Handler(mCallback)。那么Callback的意义是什么了？可以用来创建一个Handler的实例但并不需要派生Handler的子类。</p>
<p>最后，若都为null，则直接调用Handler中的handlerMessage方法来处理消息。</p>
<p>Handler还有一种特使的构造函数，那就是通过一个特定的Looper来构造Handler，通过这个构造方法可以实现一些特殊的功能如IntentService，它的实现如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(looper, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Handler的一个默认构造方法public Handler()，这个构造方法会调用下面的的构造方法。很明显，如果当前线程没有Looper的话，就会抛出异常，这也解释了在没有Looper的子线程创建Handler会引发程序异常的原因。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">	mLooper = Looper.myLooper();</div><div class="line">	<span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">			<span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">	&#125;</div><div class="line">	mQueue = mLooper.mQueue;</div><div class="line">	mCallback = callback;</div><div class="line">	mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="主线程的消息循环"><a href="#主线程的消息循环" class="headerlink" title="主线程的消息循环"></a>主线程的消息循环</h1><p>Android的主线程就是ActivityThread，主线程的入口方法为main，在main方法中系统会通过Looper.prepareMainLooper()来创建主线程的Looper以及MessageQueue，并通过Looper.loop()开启主线程的消息循环，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	SamplingProfilerIntegration.start();</div><div class="line"></div><div class="line">	<span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class="line">	<span class="comment">// disable it here, but selectively enable it later (via</span></div><div class="line">	<span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class="line">	CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">	Environment.initForCurrentUser();</div><div class="line"></div><div class="line">	<span class="comment">// Set the reporter for event logging in libcore</span></div><div class="line">	EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line"></div><div class="line">	Security.addProvider(<span class="keyword">new</span> AndroidKeyStoreProvider());</div><div class="line"></div><div class="line">	Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line"></div><div class="line">	Looper.prepareMainLooper(); <span class="comment">//</span></div><div class="line"></div><div class="line">	ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">	thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">		sMainThreadHandler = thread.getHandler();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	AsyncTask.init();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">		Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">				LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Looper.loop(); <span class="comment">//无限循环</span></div><div class="line"></div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主线程的消息循环开始以后，ActivityThread需要一个Handler来和消息队列进行交互，这个Handler就是ActivityThread.H，它内部定义了一组消息类型，主要包含了四大组件的启动和停止等过程，如下所示</p>
<p>ActivityThread通过ApplicationThread和AMS进行进程间通信，AMS以进程间通信的方式完成ActivityThread的请求后回调ApplicationThread中的Binder方法，然后ApplicationThread会向H发送消息，H收到消息后会将ApplicationThread中的逻辑切换到ActivityThread中去执行，即切换到主线程中执行，这个过程就是主线程的消息循环模型。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android的消息机制概述&quot;&gt;&lt;a href=&quot;#Android的消息机制概述&quot; class=&quot;headerlink&quot; title=&quot;Android的消息机制概述&quot;&gt;&lt;/a&gt;Android的消息机制概述&lt;/h1&gt;&lt;p&gt;Android的消息机制主要是指Handle
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android系统" scheme="http://liuguoquan727.github.io/tags/Android%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android的线程和线程池</title>
    <link href="http://liuguoquan727.github.io/2016/04/25/Android%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://liuguoquan727.github.io/2016/04/25/Android的线程和线程池/</id>
    <published>2016-04-25T13:06:06.000Z</published>
    <updated>2016-04-25T13:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>线程在Android中是一个很重要的概念，从用途上来说，线程分为主线程和子线程，主线程主要处理和界面相关的事情，而子线程则往往用于执行耗时操作。由于Android的特性，如果在主线程中执行耗时操作那么就会导致程序无法及时地响应，因此耗时操作必须放在子线程中去执行。</p>
<p>在操作系统中，线程是操作系统调度的最小单元，同时线程又是一种受限的系统资源，即线程不可能无限制的产生，并且线程的创建和销毁都会有相应的开销。档系统中存在大量的线程时，系统会通过时间片轮转的方式调度每个线程，因此线程不可能做到绝对的并行，除非线程数量小于等于CPU核心数，一般来说这是不可能的。正确的做法是采用线程池，一个线程池会缓存一定数量的线程，通过线程池就可以避免因为频繁创建和销毁线程所带来的系统开销。</p>
<h1 id="主线程和子线程"><a href="#主线程和子线程" class="headerlink" title="主线程和子线程"></a>主线程和子线程</h1><p>Android沿用了Java的线程模型，其中的线程也分为主线程和子线程，其中主线程也叫UI线程。主线程的作用是运行四大组件以及处理它们和用户的交互，而子线程的作用则是执行耗时任务，比如网络请求、I/O操作等。从Android3.0开始系统要求网络访问必须在子线程中进行，否则网络访问将会失败并抛出NetworkOnMainThreadException这个异常，这样做事为了避免主线程由于耗时操作所阻塞而出现ANR异常。</p>
<h1 id="Android中的线程形态"><a href="#Android中的线程形态" class="headerlink" title="Android中的线程形态"></a>Android中的线程形态</h1><p>除了传统的Thread线程外，Android还提供了AsyncTask、HandlerTask以及IntentService，这三者的底层实现也是线程，但它们具有特殊的表现形式，同时在使用上也各有优缺点。</p>
<h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><p>AsyncTask是一种轻量级的异步任务类，它可以在线程池中执行后台任务，然后把执行的进度和最终结果传递给主线程并在主线程上更新UI。是实现上来说，<strong>AsyncTask封装了Thread和Handler</strong>，通过AsyncTask可以更加方便地执行后台任务以及在主线程中访问UI，但是AsyncTask并不适合进行特别耗时的任务，对应特别耗时的任务来说，建议使用线程池。</p>
<h3 id="AsyncTask使用"><a href="#AsyncTask使用" class="headerlink" title="AsyncTask使用"></a>AsyncTask使用</h3><p>AsyncTask是一个抽象的泛型类，它提供了Params、Progress和Result这三个泛型参数，其中Params表示输入参数的类型，Progress表示后台任务的执行进度的类型，而Result则表示后台任务返回结果的类型，如果AsyncTask确实不需要传递具体的参数，那么这三个泛型可以用Void来代替。声明如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>,<span class="title">Progress</span>,<span class="title">Result</span>&gt;</span></div></pre></td></tr></table></figure>
<p>AsyncTask提供了4个核心方法，它们的含义如下图所示</p>
<ol>
<li><p>onPreExecute()，在主线程中执行，在异步任务执行之前会调用此方法，一般可以用于做一些准备工作。</p>
</li>
<li><p>doInBackground(Params…params)，在线程池中执行，用于执行异步任务，params表示异步任务的输入参数。在该方法中可以通过调用publishProgress方法来更新任务的进度，因为publishProgress会调用onProgressUpdate方法。</p>
</li>
<li><p>onProgressUpdate(Progress…values)，在主线程中执行，当后台任务的执行进度发生改变时此方法会被调用。</p>
</li>
<li><p>onPostExecute(Result result)，在主线程中执行，在异步任务执行之后，次方法会被调用，其中result参数是后台任务的返回值，即doInBackground的返回值。  </p>
</li>
</ol>
<p>上述方法中，onPreExecute先执行，然后是doInBackground，最后才是onPostExecute。此外AsyncTask还提供了onCancelled()方法，它同样在主线程中执行，当异步任务被取消时，onCancelled()方法会被调用，这个时候onPostExecute则不会被调用。</p>
<p>下面代码为AsyncTask的一个应用实例： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadRecordTask</span> <span class="keyword">extends</span></span></div><div class="line">		<span class="title">AsyncTask</span>&lt;<span class="title">Object</span>, <span class="title">VideoInfo</span>, <span class="title">List</span>&lt;<span class="title">VideoInfo</span>&gt;&gt; &#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onPreExecute();</div><div class="line">		mDescLoad.setVisibility(View.VISIBLE);</div><div class="line">		mDescLoad.setText(R.string.refreshing);</div><div class="line">		mVideoRecords.setEnabled(<span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> List&lt;VideoInfo&gt; <span class="title">doInBackground</span><span class="params">(Object... params)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		videoInfos = (ArrayList&lt;VideoInfo&gt;) MediaContentResolverUtils</div><div class="line">				.getVideoInfoList(RecordVideoActivity.<span class="keyword">this</span>);</div><div class="line"></div><div class="line">		mVideoThumbnailMap = (HashMap&lt;String, String&gt;) mVideoThumbnailDao</div><div class="line">				.findAllToMap();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (videoInfos == <span class="keyword">null</span> || videoInfos.size() == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> videoInfos;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 没有缩略图 获取缩略图</span></div><div class="line">		<span class="keyword">for</span> (VideoInfo info : videoInfos) &#123;</div><div class="line"></div><div class="line">			String md5Name = Md5Utils.encode(info.getFileTitle());</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (!mVideoThumbnailMap.containsKey(md5Name)) &#123;</div><div class="line">				<span class="comment">//数据处理</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			publishProgress(info);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (isCancelled()) &#123; <span class="comment">//异步任务取消时会调用</span></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> videoInfos;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(VideoInfo... values)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onProgressUpdate(values);</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (VideoInfo info : values) &#123;</div><div class="line">			<span class="comment">//UI更新进度</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(List&lt;VideoInfo&gt; result)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//取得后台任务的结果，更新UI</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 运行在UI线程，调用cancel()方法后触发，在doInBackground()方法结束后执行</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(List&lt;VideoInfo&gt; result)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCancelled(result);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行和取消该任务的代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mLoadRecordTask = <span class="keyword">new</span> LoadRecordTask();</div><div class="line">mLoadRecordTask.execute();</div><div class="line">mLoadRecordTask.cancel(<span class="keyword">true</span>); <span class="comment">//结束任务</span></div></pre></td></tr></table></figure>
<h3 id="AsyncTask条件限制"><a href="#AsyncTask条件限制" class="headerlink" title="AsyncTask条件限制"></a>AsyncTask条件限制</h3><ul>
<li>AsyncTask的类必须在主线程中加载</li>
<li>AsyncTask的对象必须在主线程中创建</li>
<li>execute方法必须在UI线程调用</li>
<li>不要在程序中直接调用onPreExecute()、onPostExecute()、doInBackgroud()和onProgressUpdate()</li>
<li>一个AsyncTask对象只能执行一次，即只能调用一次execute方法，否则会报运行时异常</li>
<li>在Android1.6之前，AsyncTask是串行执行任务的，Android1.6的时候AsyncTask开始采用线程池里处理并行任务，但从Android3.0开始，为了避免AsyncTask所带来的并发错误，AsyncTask又采用一个线程来串行执行任务。<strong>尽管如此，在Android3.0及以后版本中，我们仍然可以通过AsyncTask的executeOnExecutor方法（不能向下兼容）来并行的执行任务</strong></li>
</ul>
<h3 id="AsyncTask工作原理"><a href="#AsyncTask工作原理" class="headerlink" title="AsyncTask工作原理"></a>AsyncTask工作原理</h3><p>我们从AsyncTask的execute方法开始分析，execute方法又会调用ecuteOnExecutor方法，它们的实现如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></div><div class="line">        Params... params) &#123;</div><div class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</div><div class="line">        <span class="keyword">switch</span> (mStatus) &#123;</div><div class="line">            <span class="keyword">case</span> RUNNING:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span> <span class="comment">//异步任务执行一次</span></div><div class="line">                        + <span class="string">" the task is already running."</span>); </div><div class="line">            <span class="keyword">case</span> FINISHED:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span> <span class="comment">//异步任务执行一次</span></div><div class="line">                        + <span class="string">" the task has already been executed "</span></div><div class="line">                        + <span class="string">"(a task can be executed only once)"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mStatus = Status.RUNNING;</div><div class="line"></div><div class="line">    onPreExecute(); <span class="comment">//最先执行</span></div><div class="line"></div><div class="line">    mWorker.mParams = params;</div><div class="line">    exec.execute(mFuture); <span class="comment">//线程池开始执行</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码中，sDefaultExecutor实际上是一个串行的线程池，<strong>一个进程中所有的AsyncTask全部在这个串行的线程池中排队执行</strong>。在executeOnExecutor方法中，AsyncTask的onPreExecute()最先执行，然后线程池开始执行。下面分析线程池的执行过程，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line">       mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">           <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">               Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">               <span class="comment">//noinspection unchecked</span></div><div class="line">               <span class="keyword">return</span> postResult(doInBackground(mParams));</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//将AsyncTask的Params参数封装到FutureTask对象中，FutureTask的run方法会调用mWorker的call方法</span></div><div class="line">       mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   postResultIfNotInvoked(get());</div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                   android.util.Log.w(LOG_TAG, e);</div><div class="line">               &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occured while executing doInBackground()"</span>,</div><div class="line">                           e.getCause());</div><div class="line">               &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</div><div class="line">                   postResultIfNotInvoked(<span class="keyword">null</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors(); <span class="comment">//CPU核心数</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="number">1</span>; <span class="comment">//核心工作线程</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">//最多工作线程</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>; <span class="comment">//空闲线程的超时时间为1秒</span></div><div class="line"></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</div><div class="line">           = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</div><div class="line">                   TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div><div class="line"></div><div class="line"><span class="comment">//实现一个线程池</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class="line">       Runnable mActive;</div><div class="line"></div><div class="line">	<span class="comment">//线程同步</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">		<span class="comment">//将任务r插入mTasks任务队列中</span></div><div class="line">           mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                   <span class="keyword">try</span> &#123;</div><div class="line">                       r.run(); <span class="comment">//执行任务</span></div><div class="line">                   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                       scheduleNext(); <span class="comment">//继续执行下一个任务</span></div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">		</div><div class="line">		<span class="comment">//没有真正活动的AsyncTask时调用</span></div><div class="line">           <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">               scheduleNext(); </div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">               THREAD_POOL_EXECUTOR.execute(mActive); <span class="comment">//真正执行任务</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>从SerialExecutor的实现可以分析AsyncTask的排队执行情况。首先系统会将AsyncTask的Params参数封装到FutureTask对象中，FutureTask是一个并发类，在这里它充当了Runnable的作用(FutureTask实现了Runnable方法)。接着这个FutureTask即mFuture会交给SerialExecutor的execute方法去处理。SerialExecutor的execute方法首先会把FutureTask对象添加到任务队列mTasks中，如果当前没有正在活动的AsyncTask任务，那么就会调用SerialExecutor的scheduleNext方法来执行下一个AsyncTask任务，否则等待当前AsyncTask任务完成再继续执行新的AsyncTask任务，直到所有的AsyncTask任务执行完毕。<strong>从这可以看出，AsyncTask是串行执行任务的</strong></p>
<p>AsyncTask中有两个线程池（SerialExecutor和THREAD_POOL_EXECUTOR）和一个Handler（InternalHandler），其中线程池SerialExecutor用于执行任务的排队，线程池THREAD_POOL_EXECUTOR用于真正地执行AsyncTask任务，InternalHandler用于将执行环境从线程池切换到主线程。在AsyncTask的构造方法中有如下这么一段代码，由于FutureTask的run方法调用mWorker的call方法，因此mWorker的call方法最终会在线程池中执行。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            mTaskInvoked.set(<span class="keyword">true</span>); <span class="comment">//表示当前任务以及调用过了</span></div><div class="line"></div><div class="line">            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">            <span class="comment">//noinspection unchecked</span></div><div class="line">            <span class="keyword">return</span> postResult(doInBackground(mParams)); <span class="comment">//执行doInBackground方法</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//将AsyncTask的Params参数封装到FutureTask对象中，FutureTask的run方法会调用mWorker的call方法</span></div><div class="line">    mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                postResultIfNotInvoked(get());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                android.util.Log.w(LOG_TAG, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occured while executing doInBackground()"</span>,</div><div class="line">                        e.getCause());</div><div class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</div><div class="line">                postResultIfNotInvoked(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在mWorker的call方法中，首先将mTaskInvoked设为true，表示当前任务以及被调用了，然后执行AsyncTask的doInBackground方法，接着将其返回值传递给postResult方法，它的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">    message.sendToTarget();</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，postResult方法会通过sHandler发送一个MESSAGE_POST_RESULT的消息，这个sHandler的定义如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</div><div class="line">           <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</div><div class="line">               sHandler = <span class="keyword">new</span> InternalHandler();</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> sHandler;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                <span class="comment">// There is only one result</span></div><div class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                result.mTask.onProgressUpdate(result.mData);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，sHandler是一个静态的Handler类对象，为了能够将执行环境切换到主线程，这就sHandler这个对象必须在主线程中创建。<strong>由于静态成员会在加载类的时候进行初始化，因此这就变相要求AsyncTask的类必须在主线程中加载，否则同一进程中的AsyncTask都将无法正常工作</strong>。sHandler收到sHandlerMESSAGE_POST_PROGRESS会调用onProgressUpdate方法更新进度，收到MESSAGE_POST_RESULT这个消息后会调用AsyncTask的finish方法，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">        onCancelled(result);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        onPostExecute(result);</div><div class="line">    &#125;</div><div class="line">    mStatus = Status.FINISHED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AsyncTask的finish方法会判断AsyncTask是否取消执行了，是则调用onCancelled方法，否则调用onPostExecute(result)，此时doInBackground的返回结果会传递给onPostExecute方法，最后将任务状态mStatus置为完成。至此AsyncTask的整个过程就分析完成了。</p>
<p><strong>通过分析AsyncTask的源码，可以进一步确定，从Android3.0开始，默认情况下AsyncTask的确是串行执行。</strong>我们仍然可以通过AsyncTask的executeOnExecutor方法（不能向下兼容）来并行的执行任务。</p>
<h2 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h2><p>HandlerThread继承了Thread，它是一种可以使用Handler的Thread，它的实现也很简单，就是在run方法中通过Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许HandlerThread中创建Handler。HandlerThread的run方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	mTid = Process.myTid();</div><div class="line">	Looper.prepare();</div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		mLooper = Looper.myLooper();</div><div class="line">		notifyAll();</div><div class="line">	&#125;</div><div class="line">	Process.setThreadPriority(mPriority);</div><div class="line">	onLooperPrepared();</div><div class="line">	Looper.loop();</div><div class="line">	mTid = -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从HandlerThread的实现来看，它和普通的Thread有显著的不同之处。普通Thread主要同于run方法中执行一个耗时任务，而HandlerThread在内部创建了消息队列，外界需要通过Handler的消息方式来通知HandlerThread执行一个具体任务。HandlerThread是个很有用的类，它在Android中的一个具体的使用场景是IntentService。由于HandlerThread的run方法是一个无限循环，因此当明确不需要再使用HandlerThread时，可以通过它的quit或者quitSafely方法来终止线程的执行，这是一个好的编程习惯。示例代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThreadDemo</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Looper mLooper;</div><div class="line">	<span class="keyword">private</span> MyHandlerThread mHandlerThread;</div><div class="line">	<span class="keyword">private</span> TextView mInfoTxt;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Handler mHandler;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_thread);</div><div class="line">		</div><div class="line">		mInfoTxt  = (TextView) findViewById(R.id.tv_info);</div><div class="line">		</div><div class="line">		mHandlerThread = <span class="keyword">new</span> MyHandlerThread(<span class="string">"mHandlerThread"</span>);</div><div class="line">		mHandlerThread.start(); <span class="comment">//先start</span></div><div class="line">		mLooper = mHandlerThread.getLooper();</div><div class="line">		</div><div class="line">		<span class="comment">//注册到Handler，通过Handler发送消息</span></div><div class="line">		mHandler = <span class="keyword">new</span> Handler(mLooper,mHandlerThread);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">		</div><div class="line">		mHandler.sendEmptyMessage(<span class="number">1</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerThread</span> <span class="keyword">extends</span> <span class="title">HandlerThread</span> <span class="keyword">implements</span> <span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">MyHandlerThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>(name);</div><div class="line">			<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (msg.what == <span class="number">1</span>) &#123;</div><div class="line">				System.out.println(<span class="string">"mHandlerThread"</span>);</div><div class="line">				mInfoTxt.setText(<span class="string">"mHandlerThread"</span>);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h2><p>IntentService是一种特殊的Service，它继承了Service并且它是一个抽象类，因此必须创建它的子类才能使用IntentService。IntentService可用于执行后台耗时的后台，当任务执行后它会自动停止，同时由于IntentService是服务的原因，这导致它的优先级比单纯的线程要高很多，所以IntentService比较适合执行一些高优先级的后台任务，因为它的优先级高不容易被系统杀死。在实现上，IntentService封装了HandlerThread和Handler，这一点可以在它的onCreate方法中看出来，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> It would be nice to have an option to hold a partial wakelock</span></div><div class="line">    <span class="comment">// during processing, and to have a static startService(Context, Intent)</span></div><div class="line">    <span class="comment">// method that would launch the service &amp; hand off a wakelock.</span></div><div class="line"></div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</div><div class="line">    thread.start();</div><div class="line"></div><div class="line">    mServiceLooper = thread.getLooper();</div><div class="line">    mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当IntentService被第一次启动时，它的onCreate方法会被调用，onCreate方法会创建一个HandlerThread，然后使用它的Looper来构造一个Handler对象mServiceHandler，这样通过mServiceHandler发送的消息最终都会在HandlerThread中执行，从这个角度来看，IntentService也可以用于执行后台任务。<strong>每次启动IntentService，它的onStartCommand方法就会调用一次</strong>，IntentService在onStartCommand中处理每个后台任务的Intent。下面看一下onStartCommand方法是如何处理外界Intent的，onStartCommand调用了onStart，onStart方法的实现如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">	Message msg = mServiceHandler.obtainMessage();</div><div class="line">	msg.arg1 = startId;</div><div class="line">	msg.obj = intent;</div><div class="line">	mServiceHandler.sendMessage(msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，IntentService仅仅是通过mServiceHandler发送了一个消息，这个消息会在HandlerThread中去处理。mServiceHandler收到消息后，会将Intent对象对象传递给onHandleIntent方法去处理。注意这个Intent对象的内容和外界的startService(intent)中的intent的内容是完全一致的，通过这个Intent对象即可解析出外界启动IntentService时所传递的参数，通过这些参数就可以区分具体的后台任务，这样在onHandleIntent方法中就可以对不同的后台任务做处理了。当onHandleIntent方法执行结束后，IntentService会通过stopSelf（int startId）来尝试停止服务。<strong>这里之所以采用stopSelf（int startId）而不是stopSelf（）来停止服务，是因为stopSelf（）会立刻停止服务，而这个时候还可能有其他消息未处理，stopSelf（int startId）则会等待所有的消息都处理完毕后才终止服务</strong>。一般来说，stopSelf（int startId）在尝试停止服务之前会判断最近启动服务的次数是否和startId相等，如果相等就立刻停止服务，不相等则不停止服务，这个策略可以从AMS的stopServiceToken方法的实现中找到依据。ServiceHandler的实现如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(looper);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">		onHandleIntent((Intent)msg.obj);</div><div class="line">		stopSelf(msg.arg1);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>IntentService的onHandleIntent方法是一个抽象方法，它需要我们在子类中实现，它的作用是从Intent参数中区分具体的任务并执行这些任务。如果目前只存在一个后台任务，那么onHandleIntent(Intent)方法执行完这个任务后，stopSelf（int startId）就会直接停止服务；如果目前存在多个后台任务，那么当onHandleIntent方法执行完最后一个任务时，stopSelf（int startId）才会直接停止服务。另外，由于没执行一个后台任务就必须启动一次IntentService，而IntentService内部则通过消息的方式向HandlerThread请求执行任务，Handler中的Looper是顺序处理消息的，这就意味着IntentService也是顺序执行后台任务，当有多个后台任务同时存在时，这些后台任务会按照外界发起的顺序排队执行。</p>
<p>下面通过一个示例来说明IntentService的工作方式，首先派生一个IntentService的子类，它的实现如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalIntentService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LocalIntentService</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(<span class="string">"LocalIntentService"</span>);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"onStartCommand"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		String action = intent.getStringExtra(<span class="string">"task"</span>);</div><div class="line">		System.out.println(<span class="string">"action: "</span> + action);</div><div class="line">		SystemClock.sleep(<span class="number">3000</span>); <span class="comment">//休眠模拟耗时的后台任务</span></div><div class="line">		<span class="keyword">if</span> (action.equals(<span class="string">"task1"</span>)) &#123;</div><div class="line">			System.out.println(<span class="string">"handle action: "</span> + action);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (action.equals(<span class="string">"task2"</span>)) &#123;</div><div class="line">			System.out.println(<span class="string">"handle action: "</span> + action);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (action.equals(<span class="string">"task3"</span>)) &#123;</div><div class="line">			System.out.println(<span class="string">"handle action: "</span> + action);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"onDestroy"</span>);</div><div class="line">		<span class="keyword">super</span>.onDestroy();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LocalIntentService实现完成以后，就可以在外界请求执行后台任务了，下面在Activity中发起3个后台任务的请求，如下所示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Intent service = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, LocalIntentService.class);</div><div class="line">service.putExtra(<span class="string">"task"</span>, <span class="string">"task1"</span>);</div><div class="line">startService(service);</div><div class="line">service.putExtra(<span class="string">"task"</span>, <span class="string">"task2"</span>);</div><div class="line">startService(service);</div><div class="line">service.putExtra(<span class="string">"task"</span>, <span class="string">"task3"</span>);</div><div class="line">startService(service);</div></pre></td></tr></table></figure>
<p>运行程序，观察日记如下</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">22</span>:<span class="number">14</span>:<span class="number">19.407</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): onStartCommand</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">19.407</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): action: task1</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">19.407</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): onStartCommand</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">19.408</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): onStartCommand</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">22.407</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): handle action: task1</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">22.409</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): action: task2</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">25.410</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): handle action: task2</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">25.418</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): action: task3</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">28.418</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): handle action: task3</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">28.429</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): onDestroy</div></pre></td></tr></table></figure>
<p>从日志可以看出，三个后台任务是排队执行的，它们的执行顺序就是它们发起请求对的顺序。当task3执行完毕后，LocalIntentService才真正地停止，执行了onDestroy方法。</p>
<h1 id="Android中的线程池"><a href="#Android中的线程池" class="headerlink" title="Android中的线程池"></a>Android中的线程池</h1><p>线程池的有点主要有三点：</p>
<ul>
<li><p>重用线程池中的线程，避免因为线程的创建和销毁所带来的性能开销</p>
</li>
<li><p>能有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞现象。</p>
</li>
<li><p>能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。</p>
</li>
</ul>
<p>Android中的线程池概念来源于Java中的Executor，Executor是一个接口，真正的线程池的实现为ThreadPoolExecutor。ThreadPoolExecutor提供了一系列参数来配置线程池，通过不同的参数可以创建不同的线程池。由于Android中的线程池都是直接或者间接通过配置ThreadPoolExecutor来实现的，因此需要先介绍ThreadPoolExecutor。</p>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>ThreadPoolExecutor是线程池的真正实现，它的构造方法提供了一系列参数来配置线程池，下面介绍ThreadPoolExecutor的构造方法中各个参数的含义，这些参数将会直接影响到线程池的功能特性，下面是ThreadPoolExecutor的一个比较常用的构造方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                          <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                          <span class="keyword">long</span> keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                          ThreadFactory threadFactory) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>corePoolSize</strong>  </li>
</ul>
<p>线程池的核心线程数，默认情况下，核心线程会在线程池中一直存活，即使他们处于闲置状态。如果将ThreadPoolExecutor的allowCoreThreadTimeout属性设置为true，那么闲置的核心线程在等待新任务到来会有超时策略，这个时间间隔由keepAliveTime所指定，当等待时间超时keepAliveTime所指定的时长后，核心线程会被终止。</p>
<ul>
<li><strong>maximumPoolSize</strong></li>
</ul>
<p>线程池所能容纳的最大线程数，当活动线程达到这个数值后，后续的新任务将会被阻塞。</p>
<ul>
<li><strong>keepAliveTime</strong></li>
</ul>
<p>非核心线程闲置时的超时时长，超过这个时间，非核心线程就会被收回。当ThreadPoolExecutor的allowCoreThreadTimeout属性设置为true时，keepAliveTime同样会作用于核心线程。</p>
<ul>
<li><strong>unit</strong></li>
</ul>
<p>用于指定keepAliveTime参数的时间单位，这是一个枚举，常用的有TimeUnit.MILLISECONDS;TimeUnit.SECONDS;TimeUnit.MINUTES等</p>
<ul>
<li><strong>workQueue</strong></li>
</ul>
<p>线程池的任务队列，通过线程池的execute方法提交的Runnable对象会存储在这个参数中。</p>
<ul>
<li><strong>ThreadFactory</strong></li>
</ul>
<p>线程工厂，为线程池提供创建新线程的功能。ThreadFactory是一个接口，它只有一个方法：Thread newThread(Runnable r);</p>
<p>除上面的这些主要的参数外，ThreadPoolExecutor还有一个不常用的参数RejectedExecutionHandler。当线程池无法执行新的任务时，这可能是由于任务队列已满或者是无法成功执行任务，这个时候ThreadPoolExecutor回调用RejectedExecutionHandler的rejectedExecution(Runnable r, ThreadPoolExecutor executor)方法来通知调用者，默认情况下rejectedExecution会直接抛出一个RejectedExecutionException的运行时异常。ThreadPoolExecutor为RejectedExectutionHandler提供了几个可选值：CallerRunsPolicy、AbortPolicy、DiscardPolicy、DiscardOldestPolicy，其中AbortPolicy是默认值，但是RejectedExecutionHandler这个参数不常用。</p>
<p>ThreadPoolExecutor执行任务时大致遵循如下规则：</p>
<ul>
<li><p>如果线程池中的线程数量未达到核心线程的数量，那么会直接启动一个核心线程来执行任务</p>
</li>
<li><p>如果线程池中的线程数量已经达到或超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。</p>
</li>
<li><p>如果在步骤2中无法将任务插入到任务队列中，这往往是由于任务队列已满，这个时候如果线程数量未达到线程池规定的最大值，那么会立刻启动一个非核心线程来执行任务。</p>
</li>
<li><p>如果步骤3中线程数量已经达到线程池中规定的最大值，那么就拒绝执行此任务，ThreadPoolExecutor会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者。</p>
</li>
</ul>
<p>ThreadPoolExecutor的参数配置在AsyncTask中有明显的体现，下面是AsyncTask中的线程池配置情况</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</div><div class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * An &#123;<span class="doctag">@link</span> Executor&#125; that can be used to execute tasks in parallel.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</div><div class="line">        = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</div><div class="line">                TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</div></pre></td></tr></table></figure>
<p>AsyncTask线程池配置后的规格如下：</p>
<ul>
<li>核心线程数等于CPU核心数+1</li>
<li>线程池的最大线程数为CPU的核心数的2倍 + 1</li>
<li>核心线程无超时机制，非核心线程在闲置时的超时时间为1秒</li>
<li>任务队列的容量为128</li>
</ul>
<h2 id="线程池的分类"><a href="#线程池的分类" class="headerlink" title="线程池的分类"></a>线程池的分类</h2><ul>
<li><strong>FixedThreadPool</strong></li>
</ul>
<p>通过Executors的newFixedThreadPool方法来创建。它是一种线程数量固定的线程池，当线程处于空闲状态时，它们并不会被收回，除非线程池关闭了。当所有的线程都处于活动状态时，新任务都会处于等待状态，直到有线程空闲出来。由于FixedThreadPool只有核心线程并且这些核心线程都不会被回收，<strong>这意味着它能够更加快速的响应外界的请求</strong>。实现如下，可以发现FixedThreadPool中只有核心线程并且这些核心线程没有超时机制，另外任务队列也是没有大小限制的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">    * @param nThreads the number of threads in the pool</div><div class="line">    * @return the newly created thread pool</div><div class="line">    * </div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                     <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                     <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>CachedThreadPool</strong></li>
</ul>
<p>通过Executors的newCachedThreadPool方法来创建。它是一种线程数量不定的线程池，它只有非核心线程，并且最大线程数为Integer.MAX_VALUE。由于Integer.MAX_VALUE是一个很大的数，实际上就相当于最大线程数可以任意大。当线程池中的线程都处于活动状态时，线程池会创建新的线程来处理新任务，否则就会利用空闲的线程来处理新的任务。线程池中的空闲线程都有超时机制，这个超时时长为60秒，超过60秒闲置线程就会被回收。和FixedThreadPool不同的是，CachedThreadPool的任务队列其实相当于一个空集合，这将导致任何任务都会立即被执行，因为这种情况下SynchronousQueue是无法插入任务的。SynchronousQueue是一个非常特殊的队列，很多情况下可以理解为一个无法存储元素的队列（实际中很少使用）。从CachedThreadPool的特性来看<strong>这类线程池比较适合执行大量的耗时较少的任务</strong>。当整个线程池都处于闲置状态时，线程池中的线程都会超时而被停止，这个时候CachedThreadPool之中是没有任何线程的，它几乎不占用任何系统资源的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>ScheduledThreadPoll</strong></li>
</ul>
<p>通过Executors的newScheduledThreadPool方法来创建。它的核心线程数量是固定的，而非核心线程数量是没有限制的，并且当核心线程闲置时会被立即收回。ScheduledThreadPoll这类线程<strong>主要用于执行定时任务和具有固定周期的重复任务</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">								   ThreadFactory threadFactory) &#123;</div><div class="line">	<span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</div><div class="line">		  <span class="keyword">new</span> DelayedWorkQueue(), threadFactory);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>SingleThreadExecutor</strong></li>
</ul>
<p>通过Executors的newSingleThreadExecutor方法来创建。这类线程池内部只有一个核心线程，它确保所有的任务都在同一个线程中顺序执行。SingleThreadExecutor的意义在于统一所有的外界任务到一个线程中，这使得在这些任务之间不需要处理线程同步的问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</div><div class="line">		(<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">								<span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">								<span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;线程在Android中是一个很重要的概念，从用途上来说，线程分为主线程和子线程，主线程主要处理和界面相关的事情，而子线程则往往用于执行耗时操
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android系统" scheme="http://liuguoquan727.github.io/tags/Android%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android的IPC方式</title>
    <link href="http://liuguoquan727.github.io/2016/04/19/Android%E7%9A%84IPC%E6%96%B9%E5%BC%8F/"/>
    <id>http://liuguoquan727.github.io/2016/04/19/Android的IPC方式/</id>
    <published>2016-04-19T14:49:47.000Z</published>
    <updated>2016-04-19T14:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h1><p>四大组件中的三大组件（Activity、Service、BroadcastReceiver）都是支持在Intent中传递Bundle数据的，由于Bundle实现了Parcelable接口，所以它可以方便地在不同的进程间传输，基于这一点，当我们在一个进程中启动了另一个进程的Activity、Service和BroadcastReceiver，我们就可以在Bundle中附加我们需要传输给远程进程的信息并通过Intent发送出去。当然，我们传输的数据必须能够被序列化，比如基本类型、实现了Parcelable接口的对象、实现了Serializable接口的对象以及一些Android所支持的特殊对象（如Bundle、Size、SizeF、IBinder）。</p>
<h1 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h1><p>共享文件也是一种不错的进程间通信方式，两个进程提供读/写同一个文件来交换数据，比如A进程把数据写入文件，B进程提供读取这个文件来获取数据。通过文件交换数据很好使用，除了可以交换一些文本信息外，我们还可以序列化一个对象到文件中，从另一进程中恢复这个对象。</p>
<p>通过文件共享方式来共享数据对文件格式是没有具体要求的，比如可以是文本文件，也可以是XML文件，只要读写双方约定数据格式即可。通过文件共享的方式是有局限性的，比如并发读/写的问题，因此我们要尽量避免并发写这种情况的发生或者考虑使用线程同步来限制多个线程的写操作。通过上面的分析可以知道，<strong>文件共享方式适合在对数据同步要求不高的进程之间进行通信</strong>，并且要妥善处理并发读/写的问题。</p>
<p>SharedPreference是个特例，SharedPreference是Android中提供的轻量级存储方案，它通过键值对的方式来存储数据，在底层实现上采用XML文件来存储键值对，每个应用的SharedPreference文件都可以在当前包所在的data目录下查到，一般来说，它的目录位于/data/data/package name/shared_prefs目录下。<strong>从本质上来说，</strong>SharedPreference属于文件的一种，但是由于系统对它的读/写有一定的缓存策略2，即在内存中会有一份SharedPreference文件的缓存。因此在多进程模式下，系统对它的读/写变得不可靠，当面对搞并发的读/写访问时，SharedPreference有很大几率会丢失数据，因此不建议在进程间通信中使用SharedPreference。</p>
<h1 id="Messenger"><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h1><p>Messenger可以翻译为信使，通过它可以在不同进程中传递Message对象，在Message中放入我们需要传递的数据，就可以轻松实现数据的进程间传递,也可以在同一个进程中使用。Messenger是一种轻量级的IPC方案，它的底层实现是AIDL。Messenger类的构造方法如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(Handler target)</span> </span>&#123;</div><div class="line">	mTarget = target.getIMessenger();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(IBinder target)</span> </span>&#123;</div><div class="line">	mTarget = IMessenger.Stub.asInterface(target);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Messenger使用简单，它对AIDL做了封装。同时，由于它一次处理一个请求，因此在服务端我们不用考虑线程同步的问题，这是因为服务端不存在并发执行的情形。实现一个Messenger由如下几个步骤，分为服务端和客户端。</p>
<ul>
<li><strong>1. 服务端进程</strong></li>
</ul>
<p>首先，我们需要在服务端创建一个Service来处理客户端的连接请求，同时创建一个Handler，并通过它来创建一个Messenger对象，然后在Service的onBind中返回这个Messenger对象底层的Binder即可。</p>
<ul>
<li><strong>2. 客户端进程</strong></li>
</ul>
<p>客户端进程中，首先要绑定服务端的Servcie，绑定成功后用服务端返回的IBinder对象创建一个Messenger，通过这个Messenger就可以向服务器发送消息了，发送消息类型为Message对象。如果需要服务端回应客户端蛮久和服务端一样，我们还需要创建一个Handler并创建一个新的Messenger，并把这个Messenger对象通过Messge的replyTo参数传递给服务端，服务端通过这个replyTo参数就可以回应客户端。</p>
<p>首先是服务端的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//1.创建Handler对象处理Message</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">case</span> Constants.MSG_FROM_CLIENT:</div><div class="line">				</div><div class="line">				System.out.println(<span class="string">"receiver msg from client: "</span> + msg.getData().get(<span class="string">"msg"</span>));</div><div class="line">				</div><div class="line">				<span class="comment">//返回信息到服务端</span></div><div class="line">				<span class="comment">//获取客户端接收消息的Messenger</span></div><div class="line">				Messenger client = msg.replyTo;</div><div class="line">				Message replyMessage = Message.obtain();</div><div class="line">				replyMessage.what = Constants.MSG_FROM_SERVER;</div><div class="line">				Bundle data = <span class="keyword">new</span> Bundle();</div><div class="line">				data.putString(<span class="string">"reply"</span>, <span class="string">"嗯，你的消息我已经收到!"</span>);</div><div class="line">				replyMessage.setData(data);</div><div class="line">				</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					client.send(replyMessage);</div><div class="line">				&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">					<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				<span class="keyword">break</span>;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			</div><div class="line">			<span class="keyword">super</span>.handleMessage(msg);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//2.创建一个Messenger,将客户端发送的消息传递给MessengerHandler处理</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line"></div><div class="line">	<span class="comment">//3.返回Messenger对象底层Binder</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> mMessenger.getBinder();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，注册Service</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;service</div><div class="line">    android:name="com.ryg.chapter_2.messenger.MessengerService"</div><div class="line">    android:process=":remote" &gt;</div><div class="line">&lt;/service&gt;</div></pre></td></tr></table></figure>
<p>最后是客户端代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Messenger mService;</div><div class="line">	</div><div class="line">	<span class="comment">//将服务端返回的消息传递MessengerHandler处理</span></div><div class="line">	<span class="keyword">private</span> Messenger mGetReplyMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			</div><div class="line">			<span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">case</span> Constants.MSG_FROM_SERVER:</div><div class="line">				</div><div class="line">				System.out.println(<span class="string">"receiv msg from server: "</span> + msg.getData().getString(<span class="string">"reply"</span>));</div><div class="line">				</div><div class="line">				<span class="keyword">break</span>;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">super</span>.handleMessage(msg);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="comment">//2.创建一个Messenger</span></div><div class="line">			mService = <span class="keyword">new</span> Messenger(service);</div><div class="line">			</div><div class="line">	    	<span class="comment">//3.通过Messenger发送Message消息到服务端</span></div><div class="line">	    	<span class="keyword">if</span> (mService != <span class="keyword">null</span>) &#123;</div><div class="line">				Message msg = Message.obtain();</div><div class="line">				msg.what = Constants.MSG_FROM_CLIENT;</div><div class="line">				Bundle data = <span class="keyword">new</span> Bundle();</div><div class="line">				data.putString(<span class="string">"msg"</span>, <span class="string">"hello,this is client"</span>);</div><div class="line">				msg.setData(data);</div><div class="line">				</div><div class="line">				<span class="comment">//将接收服务端回复的Messenger传递给服务端，必须要传递过去，否则收不到回复</span></div><div class="line">				msg.replyTo = mGetReplyMessenger;</div><div class="line">				</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					mService.send(msg);</div><div class="line">				&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">					<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//1.绑定服务</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MessengerService.class);</div><div class="line">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    	<span class="keyword">if</span> (mConnection != <span class="keyword">null</span>) &#123;</div><div class="line">			</div><div class="line">    		unbindService(mConnection);</div><div class="line">		&#125;</div><div class="line">    	<span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="number">13</span>:<span class="number">20</span>:<span class="number">43.218</span>: I/System.<span class="keyword">out</span>(<span class="number">3280</span>): receiver msg <span class="keyword">from</span> client: hello,<span class="keyword">this</span> <span class="keyword">is</span> client</div><div class="line"><span class="number">01</span><span class="number">-11</span> <span class="number">13</span>:<span class="number">20</span>:<span class="number">43.234</span>: I/System.<span class="keyword">out</span>(<span class="number">3222</span>): receiv msg <span class="keyword">from</span> server: 嗯，你的消息我已经收到!</div></pre></td></tr></table></figure>
<p>通过上面的例子可以看出，在Messenger中进行数据传递必须将数据放入Message中，而Messenger和Message都实现了Parcelable接口，因此可以跨进程传输。简单来说，Message中所支持的数据类型就是Messenger中所支持的传输类型。实际上，通过Messenger来传输Message，Message中能使用的载体只有what、arg1、arg2、Bundle以及reply。Message中的另一个字段object在同一进程中的很实用的，但是再进程间通信的时候，在Android2.2以前object字段不支持跨进程传输，即便是android2.2以后，也仅仅是系统提供的实现了Parcelable接口的对象才能通过它来传输，这就意味着我们自定义的Parcelable对象无法通过object字段来传输。因此使用Bundle可以支持大量的数据类型。</p>
<h1 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h1><p>Messenger是以串行的方式处理客户端发来的消息，如果大量的消息同时发送到服务器，服务端仍然只能一个一个处理,（1）如果有大量的并发请求，那么用Messenger就不太合适了。同时，Messenger的作用仅仅是为了传递消息，（2）很多时候我们可能需要跨进程调用服务端的方法，这种情形用Messenger就无法做到了，但是我们可以使用AIDL来实现跨进程的方法调用。</p>
<p>下面介绍使用AIDL来进行进程间通信的流畅，分为服务端和客户端两个方面</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>服务端要首先创建一个Service用来监听客户端的连接，然后创建一个AIDL文件，将暴露给客户端的接口再这个AIDL文件中声明，最后在Service中实现这个AIDL接口。</p>
<p>（1）AIDL接口的创建<br>创建一个后缀为aidl的文件，在里面声明了一个接口和两个接口方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//IBookManager.aidl</span></div><div class="line"></div><div class="line"><span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.ryg.chapter_2.aidl.Book;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在AIDL文件中，并不是所有的数据类型都是可以使用的，AIDL到底支持哪些数据类型呢？如下所示</p>
<ul>
<li>基本数据类型</li>
<li>String和CharSequence</li>
<li>List：只支持ArrayList，并且里面的每个元素必须能够被AIDL支持</li>
<li>Map： 只支持HashMap，并且里面的每个元素都必须能够被AIDL文件支持，包括key和value</li>
<li>Parcelable：所有实现了Parcelable接口的对象</li>
<li>AIDL：所有的AIDL接口本身也可以在AIDL文件中使用</li>
</ul>
<p>以上6中就是AIDL支持的数据类型，其中自定义的Parcelable对象和AIDL对象必须要显示的import进来，不管它们是否和当前的AIDL文件位于同一个文件夹内。</p>
<p>IBookManager.aidl文件中引用了Book这个类，Book类是一个自定义的Parcelable对象，所以必须新建一个与它同名的AIDL文件，并在其中声明它为Parcelable，如下所示：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//Book.aidl</div><div class="line"></div><div class="line">package com.ryg.chapter_2.aidl<span class="comment">;</span></div><div class="line"></div><div class="line">parcelable Book<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>除此之外，AIDL中除了基本数据类型，其他类型的参数必须标上方向：in、out或者inout，in表示输入型参数，out表示输出型参数，inout表示输入输出型参数。</p>
<p>AIDL的包结构在客户端工程和服务端工程中要保持一致，否则会运行出错，这是因为客户端需要反序列化服务端中和AIDL接口相关的所有类，如果类的完整路径不一致，就无法成功反序列化，程序也就无法正常运行。</p>
<p>（2）远程服务端service的实现  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;Book&gt;();</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> mBookList;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">if</span> (!mBookList.contains(book)) &#123;</div><div class="line">				mBookList.add(book);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCreate();</div><div class="line">		</div><div class="line">		mBookList.add(<span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"Android"</span>));</div><div class="line">		mBookList.add(<span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">"IOS"</span>));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> mBinder;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面是一个服务端Service的典型实现，首先在onCreate中初始化添加两本书的信息，然后创建一个Binder对象并在Binder中返回次对象，这个对象继承自IBookManager.Stub并实现了内部的AIDL方法。这里采用了CopyOnWriteArrayList，这个CopyOnWriteArrayList支持并发读/写。AIDL方法是在服务端的Binder线程池中执行的，因此当多个客户端同时连接的时候，会存在多个线程同时访问的情形，所以我们要在AISL方法中处理线程的同步，这里使用CopyOnWriteArrayList来进行自动的线程同步。</p>
<p>AIDL中能够使用的List只有ArrayList，但是我们这里使用的CopyOnWriteArrayList不是继承自ArrayList，为什么能够正常工作呢？这是因为AIDL所支持的是抽象的List，而List只是一个接口，因此虽然服务端返回的是CopyOnWriteArrayList，但在Binder中会按照List的规范去访问数据并最终形成一个ArrayList传递给客户端。所以，在服务端采用CopyOnWriteArrayList是完全可行的，与此类似的类还有ConCureentHashMap。</p>
<p>注册Service</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.ryg.chapter_2.aidl.BookManagerService"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":remote1"</span> &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端首先要绑定远程服务，绑定成功后将服务端返回的Binder对象转换成AIDL接口，然后就可以通过这个接口去调用服务端的远程方法了，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		IBookManager bookManager = IBookManager.Stub.asInterface(service);</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			List&lt;Book&gt; list = bookManager.getBookList();</div><div class="line">			System.out.println(<span class="string">"query book list type: "</span> + list.getClass().getCanonicalName());</div><div class="line">			System.out.println(<span class="string">"query book list: "</span> + list.toString());</div><div class="line">			</div><div class="line">			bookManager.addBook(<span class="keyword">new</span> Book(<span class="number">3</span>, <span class="string">"Windows Phone"</span>));</div><div class="line">			list = bookManager.getBookList();</div><div class="line">			System.out.println(<span class="string">"query book list: "</span> + list.toString());</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	setContentView(R.layout.activity_main);</div><div class="line">	Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">	bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="number">14</span>:<span class="number">51</span>:<span class="number">36</span>.<span class="number">937</span>: I/System.out(<span class="number">24841</span>): query <span class="keyword">book </span>list type: java.util.ArrayList  //CopyOnWriteArrayList转为Arraylist</div><div class="line"><span class="number">01</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">36</span>.<span class="number">937</span>: I/System.out(<span class="number">24841</span>): query <span class="keyword">book </span>list: [<span class="keyword">Book </span>[<span class="keyword">bookId=1, </span><span class="keyword">bookName=Android], </span><span class="keyword">Book </span>[<span class="keyword">bookId=2, </span><span class="keyword">bookName=IOS]]</span></div><div class="line"><span class="number">01</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">36</span>.<span class="number">939</span>: I/System.out(<span class="number">24841</span>): query <span class="keyword">book </span>list: [<span class="keyword">Book </span>[<span class="keyword">bookId=1, </span><span class="keyword">bookName=Android], </span><span class="keyword">Book </span>[<span class="keyword">bookId=2, </span><span class="keyword">bookName=IOS], </span><span class="keyword">Book </span>[<span class="keyword">bookId=3, </span><span class="keyword">bookName=Windows </span>Phone]]</div></pre></td></tr></table></figure>
<h2 id="Binder意外死亡的处理办法"><a href="#Binder意外死亡的处理办法" class="headerlink" title="Binder意外死亡的处理办法"></a>Binder意外死亡的处理办法</h2><p>（1）给Binder设置DeathRecipinent监听，当Binder死亡时，会收到binderDied的回调，在此回调中重新连接远程服务，次方法在客户端的Binder线程池中调用，不能直接访问UI  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> IBinder.DeathRecipient mDeathRecipient = <span class="keyword">new</span> IBinder.DeathRecipient() &#123;</div><div class="line">	</div><div class="line">	<span class="comment">//Binder死亡时的回调方法</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binderDied</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">if</span> (bookManager == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		bookManager.asBinder().unlinkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">		bookManager = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		<span class="comment">//重新绑定远程服务</span></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent(BookManagerActivity.<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">		bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		bookManager = IBookManager.Stub.asInterface(service);</div><div class="line">		<span class="comment">//给binder设置死亡代理</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			service.linkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (RemoteException e1) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>（2）在onServiceDisconnected中重连远程服务，此方法在客户端的UI线程中调用  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="comment">//重新绑定远程服务</span></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent(BookManagerActivity.<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">		bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		bookManager = IBookManager.Stub.asInterface(service);</div><div class="line">		<span class="comment">//给binder设置死亡代理</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			service.linkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (RemoteException e1) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AIDL中使用权限验证功能"><a href="#AIDL中使用权限验证功能" class="headerlink" title="AIDL中使用权限验证功能"></a>AIDL中使用权限验证功能</h2><p>默认情况下，我们的远程服务任何人都可以连接，所以我们必须给服务加入权限验证功能，权限验证失败则无法调用服务的方法，这里介绍两种常用的方法。</p>
<ul>
<li><strong>onBind中验证</strong></li>
</ul>
<p>早onBind中进行验证，验证不通过就直接返回null，这样验证失败的客户端无法绑定服务，比如使用permission验证。首先，在Manifest.xml中声明所需要的权限，比如：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;permission </div><div class="line">    android:<span class="built_in">name</span>=<span class="string">"com.ryg.chapter_2.permission.ACCESS_BOOK_SERVICE"</span></div><div class="line">    android:protectionLevel=<span class="string">"normal"</span>&gt;</div></pre></td></tr></table></figure>
<p>然后在BookManagerService的onBind做权限验证，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	<span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"com.ryg.chapter_2.permission.ACCESS_BOOK_SERVICE"</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (check == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//客户端就无法绑定到此服务</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> mBinder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方法同样适用于Messenger中。如果我们自己内部的应用想绑定到我们的服务中，只需要在它的AndroidManifest文件中使用permission即可</p>
<uses-permission android:name="com.ryg.chapter_2.permission.ACCESS_BOOK_SERVICE">

<ul>
<li><strong>服务端的onTransact方法中验证</strong></li>
</ul>
<p>在服务端的onTransact方法中进行权限验证，验证失败就返回false，这样服务端就不会终止执行AIDL中的方法从而达到保护服务端的效果。至于验证的方式有很多，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> mBookList;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">if</span> (!mBookList.contains(book)) &#123;</div><div class="line">			mBookList.add(book);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span></div><div class="line">			<span class="keyword">throws</span> RemoteException &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		<span class="comment">//1.通过permission验证</span></div><div class="line">		<span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"com.ryg.chapter_2.permission.ACCESS_BOOK_SERVICE"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (check == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//2.验证包名</span></div><div class="line">		String packageName = <span class="keyword">null</span>;</div><div class="line">		String[] packages = getPackageManager().getPackagesForUid(getCallingUid());</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (packages != <span class="keyword">null</span> &amp;&amp; packages.length &gt; <span class="number">0</span>) &#123;</div><div class="line">			packageName = packages[<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (!packageName.startsWith(<span class="string">"com.ryg"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面介绍了常用的两种权限验证方式，但是还有其他方式做权限验证，比如为Service指定android:permission属性等。</p>
<h1 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h1><p>ContentProvider是Android中专门用于不同应用间进行数据共享的方式，从这一点来看，它天生适合进程间通信。和Messenger一样，ContentProvider的底层实现同样是Binder。</p>
<p>系统预置了许多ContentProvider，比如通讯录信息<br>日程表信息等，要跨进程访问这些信息，只需要通过ContentResolver的query、update、insert和delete方法。下面我们演示实现一个自定义的ContentProvider，并演示如何在其他应用中获取ContentProvider中的数据从而实现进行间通信的目的。首先，创建一个ContentProvider的类，叫BookProvider，并实现6个抽象方法即可onCreate、query、delete、update、insert和getType。onCreate代表ContentProvider的创建，需要做一些初始化的工作；getType用来返回一个Uri请求所对应的MIME类型，比如视频、图片、等，如果应用不关心这个选项，可以直接在方法中返回null或者“*/*”剩下的四个方法对应于CRUD操作，对数据表的增删改查功能。</p>
<p>根据Binder的工作原理，这留个方法均运行在ContentProvider的进程中，除了onCreate有系统回调运行在主线程里，其他无非方法由外界回调并运行在Binder线程池中。</p>
<p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BookProvider.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"onCreate current thread:"</span> + Thread.currentThread().getName());</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection,</span></span></div><div class="line">			String[] selectionArgs, String sortOrder) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"query current thread:"</span> + Thread.currentThread().getName());</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection,</span></span></div><div class="line">			String[] selectionArgs) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们需要注册这个BookProvider，如下所示。其中android:anthorities是ContentProvider的唯一标识，通过这个属性外部应用就可以访问我们的BookProvide。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;provider</div><div class="line">    android:name=<span class="string">"com.ryg.chapter_2.provider.BookProvider"</span></div><div class="line">    android:authorities=<span class="string">"com.ryg.chapter_2.provider.book.provider"</span> <span class="regexp">//</span>标识</div><div class="line">    android:permission=<span class="string">"com.ryg.PROVIDER"</span> <span class="regexp">//</span>权限</div><div class="line">    android:process=<span class="string">":provider"</span></div><div class="line">    <span class="regexp">//</span>ndroid:readPermission=<span class="string">"com.ryg.PROVIDER.READ"</span> <span class="regexp">//</span>读权限</div><div class="line">    <span class="regexp">//</span>android:writePermission=<span class="string">"com.ryg.PROVIDER.WRITE"</span> &gt;  <span class="regexp">//</span>写权限</div><div class="line">&lt;<span class="regexp">/provider&gt;</span></div></pre></td></tr></table></figure>
<p>然后声明权限和加入权限</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"com.ryg.PROVIDER"</span> /&gt;</div><div class="line"></div><div class="line">  &lt;permission</div><div class="line">      android:<span class="built_in">name</span>=<span class="string">"com.ryg.PROVIDER"</span></div><div class="line">      android:protectionLevel=<span class="string">"normal"</span> /&gt;</div></pre></td></tr></table></figure>
<p>创建BookActivity.java访问这个ContentProvider，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		Uri uri = Uri.parse(<span class="string">"content://com.ryg.chapter_2.provider.book.provider"</span>);</div><div class="line">		getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码中，我们提供ContentResolver对象的query方法查询BookProvider中的数据，其中”content://com.ryg.chapter_2.provider.book.provider”位移标识了BookProvider，这个标识正式为BookProvider的android:authorities属性所指定的值。</p>
<p>运行结果如下</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> 16:50:31.678: I/System.<span class="keyword">out</span>(22482): onCreate current thread:main        <span class="comment">//主线程</span></div><div class="line">01-11 16:50:31.680: I/System.<span class="keyword">out</span>(22482): <span class="keyword">query</span> current thread:Binder_2  <span class="comment">//Binder线程池中</span></div><div class="line">01-11 16:50:31.681: I/System.<span class="keyword">out</span>(22482): <span class="keyword">query</span> current thread:Binder_1</div><div class="line">01-11 16:50:31.682: I/System.<span class="keyword">out</span>(22482): <span class="keyword">query</span> current thread:Binder_2</div><div class="line">01-11 16:50:31.682: I/System.<span class="keyword">out</span>(22482): <span class="keyword">query</span> current thread:Binder_1</div></pre></td></tr></table></figure>
<p>从结果可以看出，onCreate运行于主线程中，所以不能在onCreate中做耗时操作，query方法的四次调用不在同一个线程中，但是在同一个Binder线程池中。</p>
<p>接下来，我们继续完善BookProvider，从而使其对外界的应用提供数据。为了完成上述功能，我们需要一个数据库来管理图示和用户信息，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"book_provider.db"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BOOK_TABLE_NAME = <span class="string">"book"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_TABLE_NAME = <span class="string">"user"</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="comment">//图书列表</span></div><div class="line">	<span class="keyword">private</span> String CREATE_BOOK_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + BOOK_TABLE_NAME +<span class="string">"(_id INTEGER PRIMARY KEY, name TEXT)"</span>;</div><div class="line">	<span class="comment">//用户列表</span></div><div class="line">	<span class="keyword">private</span> String CREATE_USER_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + USER_TABLE_NAME +<span class="string">"(_id INTEGER PRIMARY KEY, name TEXT, sex INT)"</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BookOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		db.execSQL(CREATE_BOOK_TABLE);</div><div class="line">		db.execSQL(CREATE_USER_TABLE);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，分别为book表和user表指定Uri，并关联对应的uri——code</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"book_provider.db"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BOOK_TABLE_NAME = <span class="string">"book"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_TABLE_NAME = <span class="string">"user"</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="comment">//图书列表</span></div><div class="line">	<span class="keyword">private</span> String CREATE_BOOK_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + BOOK_TABLE_NAME +<span class="string">"(_id INTEGER PRIMARY KEY, name TEXT)"</span>;</div><div class="line">	<span class="comment">//用户列表</span></div><div class="line">	<span class="keyword">private</span> String CREATE_USER_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + USER_TABLE_NAME +<span class="string">"(_id INTEGER PRIMARY KEY, name TEXT, sex INT)"</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BookOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	.......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们就可以通过如下方式获取外界要访问点饿数据源，根据Uri取出Uri_code，根据Uri_code得到数据表的名称</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getTableName</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line"></div><div class="line">	String tableName = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">switch</span> (sUriMatcher.match(uri)) &#123;</div><div class="line"></div><div class="line">	<span class="keyword">case</span> BOOK_URI_CODE:</div><div class="line"></div><div class="line">		tableName = BookOpenHelper.BOOK_TABLE_NAME;</div><div class="line">		</div><div class="line">		<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	<span class="keyword">case</span> USER_URI_CODE:</div><div class="line">		</div><div class="line">		tableName = BookOpenHelper.USER_TABLE_NAME;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> tableName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们就实现query、update、insert、delete方法了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY = <span class="string">"com.ryg.chapter_2.provider.book.provider"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri BOOK_CONTENT_URI = Uri.parse(<span class="string">"content://"</span></div><div class="line">			+ AUTHORITY + <span class="string">"/book"</span>);</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOK_URI_CODE = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri USER_CONTENT_URI = Uri.parse(<span class="string">"content://"</span></div><div class="line">			+ AUTHORITY + <span class="string">"/user"</span>);</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> USER_URI_CODE = <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMatcher sUriMatcher = <span class="keyword">new</span> UriMatcher(</div><div class="line">			UriMatcher.NO_MATCH);</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">// 将Uri和Uri_Code关联起来</span></div><div class="line">		sUriMatcher.addURI(AUTHORITY, <span class="string">"book"</span>, <span class="number">0</span>);</div><div class="line">		sUriMatcher.addURI(AUTHORITY, <span class="string">"book"</span>, <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Context mContext;</div><div class="line">	<span class="keyword">private</span> SQLiteDatabase db;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		mContext = getContext();</div><div class="line">		initData();</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		db = <span class="keyword">new</span> BookOpenHelper(mContext).getWritableDatabase();</div><div class="line">		db.execSQL(<span class="string">"delete from "</span> + BookOpenHelper.BOOK_TABLE_NAME);</div><div class="line">		db.execSQL(<span class="string">"delete from "</span> + BookOpenHelper.USER_TABLE_NAME);</div><div class="line">		db.execSQL(<span class="string">"insert into book values(2,'Android');"</span>);</div><div class="line">		db.execSQL(<span class="string">"insert into book values(3,'IOS');"</span>);</div><div class="line">		db.execSQL(<span class="string">"insert into book values(4,'Window Phone');"</span>);</div><div class="line">		db.execSQL(<span class="string">"insert into user values(6,'lee',1);"</span>);</div><div class="line">		db.execSQL(<span class="string">"insert into book values(7,'lau',0);"</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection,</span></span></div><div class="line">			String[] selectionArgs, String sortOrder) &#123;</div><div class="line">		</div><div class="line">		String table = getTableName(uri);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> db.query(table, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		String table = getTableName(uri);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		db.insert(table, <span class="keyword">null</span>, values);</div><div class="line">		mContext.getContentResolver().notifyChange(uri, <span class="keyword">null</span>); <span class="comment">//通过数据源变化</span></div><div class="line">		</div><div class="line">		<span class="keyword">return</span> uri;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		String table = getTableName(uri);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> count = db.delete(table, selection, selectionArgs);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (count &gt;<span class="number">0</span>) &#123;</div><div class="line">			mContext.getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection,</span></span></div><div class="line">			String[] selectionArgs) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		String table = getTableName(uri);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> row = db.update(table, values, selection, selectionArgs);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (row &gt; <span class="number">0</span>) &#123;</div><div class="line">			mContext.getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> row;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">getTableName</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line"></div><div class="line">		String tableName = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">switch</span> (sUriMatcher.match(uri)) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> BOOK_URI_CODE:</div><div class="line"></div><div class="line">			tableName = BookOpenHelper.BOOK_TABLE_NAME;</div><div class="line">			</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> USER_URI_CODE:</div><div class="line">			</div><div class="line">			tableName = BookOpenHelper.USER_TABLE_NAME;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> tableName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问BookProvider</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> ContentObserver mObserver = <span class="keyword">new</span> ContentObserver(<span class="keyword">new</span> Handler()) &#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange, Uri uri)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			System.out.println(uri);</div><div class="line">			<span class="keyword">super</span>.onChange(selfChange, uri);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		</div><div class="line">		Uri uri = Uri.parse(<span class="string">"content://com.ryg.chapter_2.provider.book.provider/book"</span>);</div><div class="line">		getContentResolver().registerContentObserver(uri, <span class="keyword">false</span>, mObserver);</div><div class="line">		ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">		values.put(<span class="string">"_id"</span>, <span class="number">7</span>);</div><div class="line">		values.put(<span class="string">"name"</span>, <span class="string">"Html"</span>);</div><div class="line">		getContentResolver().insert(uri, values);</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，query、update、insert、delete四大方法是存在多线程并发访问的，因此方法内部要做好线程同步本例中，由于采用的是SQLite并且只有一个SQLiteDataBase的连接，所以可以正确应对多线程的情况。具体原因是SQLiteDatabase内部对数据库的操作是有同步处理的，但是如果通过多个SQLiteDatabase对象来操作数据库就无法保证线程同步，因为SQLiteDatabase对象之间无法进行线程同步。如果ContentProvider的底层数据是一块内存的话，比如List，在这种情况下同List的遍历、插入、删除操作就需要进行线程同步，否则就会引起并发错误。</p>
<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>Socket又称为套接字，是网络通信的概念，它分为流式套接字和用户数据报套接字，分别对应于网络传输层的TCP和UDP协议。TCP是面向连接的协议，提供稳定的双向通信功能，TCP连接的建立需要经过“三次握手”才能完成，为了提供稳定的数据传输功能，其本身提供了超时重传机制，因此具有很高的稳定性；而UDP是面向无连接的协议，提供不稳定的单向通信功能，当然UDP也可以实现双向通信功能。在性能上，UDP具有更高的效率，其缺点是不能保证数据一定能够正确传输，尤其是在网络拥塞的情况下。</p>
<p>下面示例一个聊天室程序，首先是服务端的设计，当Service启动时，会在线程中建立TCP服务，这里监听的是8688端口，然后就可以等待客户端的连接请求。当有客户端连接时，就会生成一个新的Socket，通过每次新创建的Socket就可以分别和不同的客户端通信了。当客户端断开连接时，服务端这边也会关闭对应Socket并结束通话线程。这点是如何做到的呢？这里是通过判断服务端输入流的返回值来确定的，当客户端断开连接后，服务端这边的输入流会返回null，这个时候我们就知道客户端退出了。服务端代码如下：</p>
<h1 id="选用合适的IPC方式"><a href="#选用合适的IPC方式" class="headerlink" title="选用合适的IPC方式"></a>选用合适的IPC方式</h1><table>
<thead>
<tr>
<th>名称</th>
<th>优点</th>
<th>缺点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bundle</td>
<td>简单易用</td>
<td>只能传输Bundle支持的数据类型</td>
<td>四大组件间的进程间通信</td>
</tr>
<tr>
<td>文件共享</td>
<td>简单易用</td>
<td>不适合高并发场景，并且无法做到进程间的即时通信</td>
<td>无并发访问情形，交换简单的数据实时性不高的场景</td>
</tr>
<tr>
<td>AIDL</td>
<td>功能强大，支持一对多并发通信，支持实时通信</td>
<td>使用稍复杂，需要处理好现场同步</td>
<td>一对多通信且有RPC需求</td>
</tr>
<tr>
<td>Messenger</td>
<td>功能一般，支持一对多串行通信，支持实时通信</td>
<td>不能很好地处理搞并发情形，不支持RPC，数据通过Messenger进行传输，因此只能传输Bundle支持的数据类型</td>
<td>低并发的一对多即时通信，无RPC需求，或者无需要返回结果的RPC需求</td>
</tr>
<tr>
<td>ContentProvider</td>
<td>在数据源访问方面功能强大，支持一对多并发数据共享，可通过Call方法扩展其他操作</td>
<td>可以理解为受约束的AIDL，主要提供数据源的CRUD操作</td>
<td>一对多的进程间的数据共享</td>
</tr>
<tr>
<td>Socket</td>
<td>功能强大，可通过网络传输字节流，支持一对多并发实时通信</td>
<td>实现细节稍微有些烦琐，不支持直接的RPC</td>
<td>网络数据交换</td>
</tr>
</tbody>
</table>
</uses-permission>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Bundle&quot;&gt;&lt;a href=&quot;#Bundle&quot; class=&quot;headerlink&quot; title=&quot;Bundle&quot;&gt;&lt;/a&gt;Bundle&lt;/h1&gt;&lt;p&gt;四大组件中的三大组件（Activity、Service、BroadcastReceiver）都是支持在Int
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android系统" scheme="http://liuguoquan727.github.io/tags/Android%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android的IPC机制</title>
    <link href="http://liuguoquan727.github.io/2016/04/19/Android%E7%9A%84IPC%E6%9C%BA%E5%88%B6/"/>
    <id>http://liuguoquan727.github.io/2016/04/19/Android的IPC机制/</id>
    <published>2016-04-19T14:39:32.000Z</published>
    <updated>2017-02-19T03:40:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-IPC简介"><a href="#Android-IPC简介" class="headerlink" title="Android IPC简介"></a>Android IPC简介</h1><p>IPC是Inter-Process Communication的缩写，含义为进程间通信，是指两个进程之间进行数据交换的过程。</p>
<p>Android中IPC的使用情况分为两种：</p>
<ul>
<li><p>第一种情况是一个应用因为某些原因自身需要采用多进程模式来实现，至于原因，可能有很多，比如有些模块由于特殊的原因需要运行在单独的进程中，又或者为了加大一个应用可使用的内存所以需要通过多进行来获取多分内存空间。</p>
</li>
<li><p>第二种情况是当前应用需要向其他应用获取数据，由于是两个应用，所以必须采用跨进程的方式来获取所需要的数据，甚至我们系统提供的ContentProvider去查询数据的时候，其实也是一种进程间通信，只不过通信细节被系统内部屏蔽了。</p>
</li>
</ul>
<h1 id="Android中的多进程模式"><a href="#Android中的多进程模式" class="headerlink" title="Android中的多进程模式"></a>Android中的多进程模式</h1><h2 id="开启多进行模式"><a href="#开启多进行模式" class="headerlink" title="开启多进行模式"></a>开启多进行模式</h2><p>正常情况下，在Android中多进程是指一个应用中存在多个进程的情况，因此这里不讨论两个应用之间的多进程情况。首先，在Android中使用多进程只有一种方法，就是给四大组件在AndroidManifest中指定android:process属性，除此之外没有其他办法。其实还有另一种非常规的多进程方法，那就是通过JNI在native层其fork一个新的进程，这种方法属于特殊情况，也不是常用的创建多进程的方式。下面示例，描述如何在Android中创建多进程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">"com.example.demo.AActivity"</span></div><div class="line">    android:process=<span class="string">":remote"</span> /&gt;</div><div class="line"></div><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">"com.example.demo.BActivity"</span></div><div class="line">    android:process=<span class="string">"com.example.demo.BaseActivity.remote"</span> /&gt;</div></pre></td></tr></table></figure>
<p>上面示例分为为AActivity和BActivity指定了process属性，并且他们的属性值不同，意味着当前应用又增加了两个进程。当AActivity启动时，系统会为它创建一个单独的进程，进程名为”com.example.demo.BaseActivity:remote”；当BActivity启动时，系统也会为它创建一个单独的进程，进程名为”com.example.demo.BaseActivity.remote”。</p>
<p>“:remote”和”com.example.demo.BaseActivity.remote”这两种命名方式的区别？</p>
<ul>
<li><p>首先“:”的含义是指要在当前的进程名前面附加当前的包名，而”com.example.demo.BaseActivity.remote”是完整的命名方式不会附加包名信息</p>
</li>
<li><p>其次，进程名以“:”开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，而进程名不易“：”开头的进程属于全局进程，其他应用通过ShareUID方式可以和它跑在同一个进程中。</p>
</li>
</ul>
<h2 id="多进程模式的运行机制"><a href="#多进程模式的运行机制" class="headerlink" title="多进程模式的运行机制"></a>多进程模式的运行机制</h2><p>Android为你每个应用分配了一个独立的虚拟机，或者说为每个进程都分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这就会导致在不同的虚拟机中访问同一个类对象会产生多份副本。</p>
<p>所有运行在不同进程中的四大组件，只要它们之间需要通过内存来共享数据，都会共享失败，这也是多线程所带来的主要影响。</p>
<p>一般来说，使用多线程会造成如下四个方面的问题：</p>
<ul>
<li>（1）静态成员和单例模式完全失效</li>
</ul>
<p>Android为你每个应用分配了一个独立的虚拟机，或者说为每个进程都分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这就会导致在不同的虚拟机中访问同一个类对象会产生多份副本。</p>
<ul>
<li>（2）线程同步机制完全失效</li>
</ul>
<p>本质上和第一个问题是类似的，既然都不是一块内存了，那么不管锁对象还是锁全局类都无法保证线程同步，因为不同进程锁的不是同一个对象。</p>
<ul>
<li>（3）SharedPreference的可靠性下降</li>
</ul>
<p>是因为SharedPreference不支持两个进程同步去执行写操作，否则会导致一定几率的丢失，这是因为SharedPreference底层是通过读/写XML文件实现的，并发写文件显然是可能出问题的，甚至并发读/写都有可能出问题。</p>
<ul>
<li>（4）Application会多次创建</li>
</ul>
<p>当一个组件跑在一个新的进程中的时候，<strong>由于系统要在创建新的进程同时分配独立的虚拟机，所以这个过程其实就是启动一个新应用的过程</strong>。因此，相当于系统又把这个应用重新启动了一遍，既然重新启动了，那么自然会创建新的Application。</p>
<p>在多进程模式中，不同进程的组件的确会拥有独立的虚拟机、Application和内存空间。</p>
<p>为了解决这个问题，Android系统提供了很多跨进程通信方法实现数据交互。如Intent来传递数据，共享文件和SharedPreference，基于Binder的Messenger和AIDL，Socket等。</p>
<h1 id="IPC基础概念介绍"><a href="#IPC基础概念介绍" class="headerlink" title="IPC基础概念介绍"></a>IPC基础概念介绍</h1><h2 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h2><p>Serializable是Java所提供的一个序列化接口，它是一个空接口，为对象提供标准的序列化和反序列化操作。使用Serializable来实现序列化相当简单只需要在类的声明中指定一个类似下面的标志即可自动实现默认的序列化过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5123020951483359287L</span>; <span class="comment">//系统生成的hash值</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>; <span class="comment">//指定为1L</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5123020951483359287L</span>; <span class="comment">//系统生成的hash值</span></div><div class="line">	</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> 		userId;</div><div class="line">	<span class="keyword">public</span> String 	userName;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> 	isMale;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [userId="</span> + userId + <span class="string">", userName="</span> + userName</div><div class="line">				+ <span class="string">", isMale="</span> + isMale + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Serializable接口来实现对象的序列化过程非常简单，几乎所有的工作都被系统自动完成了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//序列化存储</span></div><div class="line">User user = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"liuguoquan"</span>, <span class="keyword">true</span>);</div><div class="line">	ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(Environment.getExternalStorageDirectory()+<span class="string">"/cache.txt"</span>));</div><div class="line">	out.writeObject(user);</div><div class="line">	out.close();</div><div class="line"></div><div class="line"><span class="comment">//反序列化</span></div><div class="line">	ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(Environment.getExternalStorageDirectory()+<span class="string">"/cache.txt"</span>));</div><div class="line">	User newUser = (User) in.readObject();</div><div class="line">	in.close();</div></pre></td></tr></table></figure>
<p>上述代码描述了采用Serializable方式序列化对象的典型过程，很简单，只需要把实现了Serializable接口的User对象写到文件中就可以快速恢复了，恢复后的对象newUser和user的内容完全一样，但是两者并不是同一个对象。</p>
<p>其实，不指定serialVersionUID也可以实现序列化，那到底要不要指定呢？系统既然提供了这个serialVersionUID，那么它必须是有用的，原则上序列化的数据中的serialVersionUID只有和当前类的serialVersionUID相同时才能够正常地被反序列化。</p>
<p>serialVersionUID的详细工作机制是这样的：序列化的时候系统会把当前类的serialVersionUID写入序列化的文件中，当反序列化的时候系统会去检查文件中的serialVersionUID，看它是否和当前类的serialVersionUID一致，如果一致说明序列化的类版本与当前类的版本是相同的则可以成功反序列化；否则就说明当前类和序列化的类相比发生了某些变化，比如成员变量的数量、类型可能发生了改变，这个时候是无法正常反序列化的。</p>
<p>给serialVersionUID指定为1L或者采用系统当前类结构去生成的hash值，这两者并没有什么区别，效果完全一样。以下两点需要注意：</p>
<ul>
<li>静态成员变量属于类不属于对象，所以不会参与序列化过程</li>
<li>用transient关键字标记的成员变量不参与序列化过程</li>
</ul>
<h2 id="Parcalable接口"><a href="#Parcalable接口" class="headerlink" title="Parcalable接口"></a>Parcalable接口</h2><p>Parcelable也是一个也是一个接口，只要实现这个接口，一个类的对象就要就可以实现序列化并可以通过Intent和Binder传递。下面的示例是一个典型的用法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> sex;</div><div class="line">	<span class="keyword">private</span> User user;</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//序列化</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		dest.writeInt(id);</div><div class="line">		dest.writeString(name);</div><div class="line">		dest.writeInt(sex);</div><div class="line">		dest.writeSerializable(user);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//反序列化</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Person&gt;() &#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			</div><div class="line">			Person person = <span class="keyword">new</span> Person();</div><div class="line">			<span class="comment">//必须要按照成员变量的初始化顺序</span></div><div class="line">			person.id = source.readInt();</div><div class="line">			person.name = source.readString();</div><div class="line">			person.sex = source.readInt();</div><div class="line">			person.user = (User) source.readSerializable();</div><div class="line">			<span class="keyword">return</span> person;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Person[size];</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>系统已经为我们提供了许多实现了Parcelable接口的类，它们逗死可以直接序列化的，比如Intent、Bundle、Bitmap等，同时List和Map也可以序列化，前提是他们里面的每个元素都可以序列化。</p>
<p>既然Parcelable和Serializable都能实现序列化并且都可用于Intent间的数据传递，那么二者该如何选取呢？Serializable是Java中的序列化接口，其使用起来非常简单但是开销很大，序列化和反序列化过程需要大量的I/O操作。而Parcelable是Android中的序列化方式，因此更适合在Android平台上，它的缺点就是使用起来稍微麻烦点，但是它的效率很高，这是Android推荐的序列化方式。因此首选Parcelable。Parcelable主要用在内存序列化上，通过Parcelable将对象序列化到存储设备中或者将对象序列化后通过网络传输也都是可以的，但这个过程显得复杂，因此这两种情况下建议使用Serializable。</p>
<p>Binder是Android中的一个类，它实现了IBinder接口。从IPC角度来说，Binder是Android中的一种跨进程通信方式，Binder还可以理解为一种虚拟的物理设备，它的设备驱动是/dev/binder，该通信方式在Linux中没有；从Android Framework角度来说，Binder是ServiceManager连接各种Manager（ActivityManager、WindowManager，等待）和相应的ManagerService的桥梁；从Android应用层来说，Binder是客户端和服务端进行通信的媒介，当bindservice时候，服务端会返回一个包含了服务端业务调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或数据，这里的服务包括普通的服务和基于AIDL的服务。</p>
<p>Android开发中，Binder主要用在service中，包括AIDL和Messenger，其中普通Service中的Binder不涉及进程间通信，而Messenger的底层其实是AIDL，所以这里选用AIDL来分析Binder的工作机制。</p>
<p>下面新建一个AIDL示例，新建三个文件Book.java、Book.aidl、IBookManager.aidl，代码如下所示：</p>
<p>Book.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">import</span> android.os.Parcel;</div><div class="line">	<span class="keyword">import</span> android.os.Parcelable;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">int</span> bookId;</div><div class="line">		<span class="keyword">public</span> String bookName;</div><div class="line">	</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> bookId, String bookName)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.bookId = bookId;</div><div class="line">			<span class="keyword">this</span>.bookName = bookName;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			dest.writeInt(bookId);</div><div class="line">			dest.writeString(bookName);</div><div class="line">	</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Book&gt;() &#123;</div><div class="line">	</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> Book(source);</div><div class="line">			&#125;</div><div class="line">	</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> Book[size];</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="title">Book</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">			</div><div class="line">			bookId = in.readInt();</div><div class="line">			bookName = in.readString();</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">Book.aidl</div><div class="line"></div><div class="line">	<span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line">	</div><div class="line">	parcelable Book;</div><div class="line"></div><div class="line">IBookManager.aidl</div><div class="line"></div><div class="line">	<span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line">	</div><div class="line">	<span class="keyword">import</span> com.ryg.chapter_2.aidl.Book;</div><div class="line">	</div><div class="line">	<span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">	</div><div class="line">		<span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>Book.java是一个图书信息的类，它实现了Parcelable接口。Book.aidl是Book类在AIDL的声明。IBookManager.aidl是我们定义的一个接口，里面有两个方法，其中getBookList用于从远程服务端获取图书列表，而addBook用于向图书列表中添加一本书。尽管Book类已经和IBookManager位于相同的包中，但是IBookManager中仍然要导入Book类，接下来系统会在gen目录自动生成一个IBookManager的类。如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * This file is auto-generated.  DO NOT MODIFY.</div><div class="line"> * Original file: D:\\liuguoquan\\workspace\\chapter_2\\src\\com\\ryg\\chapter_2\\aidl\\IBookManager.aidl</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line"></div><div class="line"><span class="comment">//在Binder传输的接口都要实现IInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</div><div class="line">	<span class="comment">/** Local-side IPC implementation stub class. */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span></span></div><div class="line">			<span class="title">com</span>.<span class="title">ryg</span>.<span class="title">chapter_2</span>.<span class="title">aidl</span>.<span class="title">IBookManager</span> &#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"com.ryg.chapter_2.aidl.IBookManager"</span>;</div><div class="line"></div><div class="line">		<span class="comment">//内部类，这个Stub就是一个Binder类</span></div><div class="line">		<span class="comment">/** Construct the stub at attach it to the interface. */</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * Cast an IBinder object into an com.ryg.chapter_2.aidl.IBookManager</div><div class="line">		 * interface, generating a proxy if needed.</div><div class="line">		 */</div><div class="line">		<span class="keyword">public</span> <span class="keyword">static</span> com.ryg.chapter_2.aidl.<span class="function">IBookManager <span class="title">asInterface</span><span class="params">(</span></span></div><div class="line">				android.os.IBinder obj) &#123;</div><div class="line">			<span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">			<span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.ryg.chapter_2.aidl.IBookManager))) &#123;</div><div class="line">				<span class="keyword">return</span> ((com.ryg.chapter_2.aidl.IBookManager) iin);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> com.ryg.chapter_2.aidl.IBookManager.Stub.Proxy(obj);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data,</span></span></div><div class="line">				android.os.Parcel reply, <span class="keyword">int</span> flags)</div><div class="line">				<span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">			<span class="keyword">switch</span> (code) &#123;</div><div class="line">			<span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">				reply.writeString(DESCRIPTOR);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">case</span> TRANSACTION_getBookList: &#123;  <span class="comment">//用于标识方法</span></div><div class="line">				data.enforceInterface(DESCRIPTOR);</div><div class="line">				java.util.List&lt;com.ryg.chapter_2.aidl.Book&gt; _result = <span class="keyword">this</span></div><div class="line">						.getBookList();</div><div class="line">				reply.writeNoException();</div><div class="line">				reply.writeTypedList(_result);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">case</span> TRANSACTION_addBook: &#123;</div><div class="line">				data.enforceInterface(DESCRIPTOR);</div><div class="line">				com.ryg.chapter_2.aidl.Book _arg0;</div><div class="line">				<span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">					_arg0 = com.ryg.chapter_2.aidl.Book.CREATOR</div><div class="line">							.createFromParcel(data);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					_arg0 = <span class="keyword">null</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">this</span>.addBook(_arg0);</div><div class="line">				reply.writeNoException();</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span></span></div><div class="line">				<span class="title">com</span>.<span class="title">ryg</span>.<span class="title">chapter_2</span>.<span class="title">aidl</span>.<span class="title">IBookManager</span> &#123;</div><div class="line">			<span class="keyword">private</span> android.os.IBinder mRemote;</div><div class="line"></div><div class="line">			Proxy(android.os.IBinder remote) &#123;</div><div class="line">				mRemote = remote;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">return</span> mRemote;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">return</span> DESCRIPTOR;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="keyword">public</span> java.util.List&lt;com.ryg.chapter_2.aidl.Book&gt; getBookList()</div><div class="line">					<span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">				android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">				android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">				java.util.List&lt;com.ryg.chapter_2.aidl.Book&gt; _result;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					_data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">					mRemote.transact(Stub.TRANSACTION_getBookList, _data,</div><div class="line">							_reply, <span class="number">0</span>);</div><div class="line">					_reply.readException();</div><div class="line">					_result = _reply</div><div class="line">							.createTypedArrayList(com.ryg.chapter_2.aidl.Book.CREATOR);</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					_reply.recycle();</div><div class="line">					_data.recycle();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> _result;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.ryg.chapter_2.aidl.Book book)</span></span></div><div class="line">					<span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">				android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">				android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					_data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">					<span class="keyword">if</span> ((book != <span class="keyword">null</span>)) &#123;</div><div class="line">						_data.writeInt(<span class="number">1</span>);</div><div class="line">						book.writeToParcel(_data, <span class="number">0</span>);</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						_data.writeInt(<span class="number">0</span>);</div><div class="line">					&#125;</div><div class="line">					mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</div><div class="line">					_reply.readException();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					_reply.recycle();</div><div class="line">					_data.recycle();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getBookList = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>); <span class="comment">//标识方法的id</span></div><div class="line">		<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> java.util.List&lt;com.ryg.chapter_2.aidl.Book&gt; getBookList()</div><div class="line">			<span class="keyword">throws</span> android.os.RemoteException;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.ryg.chapter_2.aidl.Book book)</span></span></div><div class="line">			<span class="keyword">throws</span> android.os.RemoteException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码实现的功能：<br>（1）IBookManager类继承IInterface接口，同时它自己也是个接口，所有可以在Binder中传输的接口都需要继承IInterface接口<br>（2）首先，它声明了两个方法getBookList和addBook，就是我们自IBookManager.aidl中定义的方法，同时还声明了两个整形id分别用于标识这两个方法，这两个id用于标识在transact中客户端所请求的到底是哪个方法<br>（3）接着，它声明了一个内部类Stub，这个Stub就是一个Binder类，当客户端和服务端都位于一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由Stub的内部代理类Proxy来完成。这个接口的核心实现就是<strong>内部了Stub和Stub的内部代理类Proxy</strong></p>
<p><strong>说明：</strong>首先，当客户端发起远程请求时，由于当前线程会被挂起直至服务器进程返回数据，所以如果一个远程方法是很耗时的，那么不能在UI线程中发起次远程请求；其次，由于服务器的Binder方法运行在Binder线程池中，所以Binder方法不管是否耗时都应该采用同步的方式去实现，因为它已经运行在一个线程中了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-IPC简介&quot;&gt;&lt;a href=&quot;#Android-IPC简介&quot; class=&quot;headerlink&quot; title=&quot;Android IPC简介&quot;&gt;&lt;/a&gt;Android IPC简介&lt;/h1&gt;&lt;p&gt;IPC是Inter-Process Communic
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android系统" scheme="http://liuguoquan727.github.io/tags/Android%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android EventBus3.0源码解析</title>
    <link href="http://liuguoquan727.github.io/2016/04/18/Android%20EventBus3.0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://liuguoquan727.github.io/2016/04/18/Android EventBus3.0源码解析/</id>
    <published>2016-04-18T15:05:06.000Z</published>
    <updated>2016-06-06T14:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面已经介绍了EventBus3.0开源库的详细使用，下面我们开始进入其源代码的学习，先看看EventBus3.0与2.x版本之间的区别。</p>
<blockquote>
<p>项目地址<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a><br>EventBus版本是3.0</p>
</blockquote>
<h1 id="EventBus-3-0与2-x的区别"><a href="#EventBus-3-0与2-x的区别" class="headerlink" title="EventBus 3.0与2.x的区别"></a>EventBus 3.0与2.x的区别</h1><h2 id="注册订阅者"><a href="#注册订阅者" class="headerlink" title="注册订阅者"></a>注册订阅者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3.0版本的注册</span></div><div class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">//2.x版本的注册</span></div><div class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line">EventBus.getDefault().register(<span class="keyword">this</span>, <span class="number">100</span>);</div><div class="line">EventBus.getDefault().registerSticky(<span class="keyword">this</span>, <span class="number">100</span>);</div><div class="line">EventBus.getDefault().registerSticky(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p>2.x版本中有四种注册方法，区分了普通注册和粘性事件注册，并且在注册时可以选择接受事件的优先级；</p>
<p>3.0版本中将粘性事件以及订阅事件的优先级用注解的方式实现，所以3.0版本中的注册就变得只有一个register()方法注册。</p>
<h2 id="事件订阅方法"><a href="#事件订阅方法" class="headerlink" title="事件订阅方法"></a>事件订阅方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3.0版本</span></div><div class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND, sticky = <span class="keyword">true</span>, priority = <span class="number">100</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//2.x版本</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventBackgroundThread</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.x版本中只有通过onEvent开头的方法会被注册，而且响应事件方法触发的线程通过onEventMainThread或onEventBackgroundThread这些方法名区分；</p>
<p>3.0版本中，通过@Subscribe注解来确定运行的线程threadMode，是否接收粘性事件sticky以及事件优先级priority，而且方法名不再需要使用onEvent开头，所以3.0提高了简单性和灵活性。</p>
<h2 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h2><p>发送事件和发送粘性事件在2.x和3.0版本中是相同的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(<span class="string">"str"</span>);</div><div class="line">EventBus.getDefault().postSticky(<span class="string">"str"</span>);</div></pre></td></tr></table></figure>
<h2 id="解除注册"><a href="#解除注册" class="headerlink" title="解除注册"></a>解除注册</h2><p>2.x和3.0版本的解除注册的方法也是相同的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<h1 id="类关系图"><a href="#类关系图" class="headerlink" title="类关系图"></a>类关系图</h1><p>类图引用自<a href="http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">CodeKK的EventBus源代码分析</a></p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/eventbus-%E7%B1%BB%E5%9B%BE.png" alt="类图"></p>
<p>从类图可以看出，上部分主要是订阅相关信息，中间是EventBus，下面部分是发布者发布事件后的调用。下面开始进入源码分析:</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>通过EventBus的使用流程来分析它的调用流程及实现原理。</p>
<h2 id="创建EventBus"><a href="#创建EventBus" class="headerlink" title="创建EventBus"></a>创建EventBus</h2><p>一般都是通过<code>EventBus.getDefault()</code>静态方法获取到EventBus对象，先来看看getDefault()方法的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">synchronized</span> (EventBus.class) &#123;</div><div class="line">			<span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</div><div class="line">				defaultInstance = <span class="keyword">new</span> EventBus();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> defaultInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用<strong>单例模式</strong>获取EventBus对象，目的是保证getDefault方法得到的是同一个EventBus对象。第一次创建实例，会调用EventBus的构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventBus</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(DEFAULT_BUILDER);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//key:订阅的事件 value：订阅这个事件的所有订阅者集合</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</div><div class="line"></div><div class="line"><span class="comment">//key:订阅者对象， value：这个订阅者订阅的事件集合</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</div><div class="line"></div><div class="line"><span class="comment">//粘性事件 key：粘性事件的class对象， value：事件对象</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; stickyEvents;</div><div class="line"></div><div class="line">EventBus(EventBusBuilder builder) &#123;</div><div class="line">	subscriptionsByEventType = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	typesBySubscriber = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	stickyEvents = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line">	</div><div class="line">	<span class="comment">//事件主线程处理</span></div><div class="line">	mainThreadPoster = <span class="keyword">new</span> HandlerPoster(<span class="keyword">this</span>, Looper.getMainLooper(), <span class="number">10</span>);</div><div class="line">	<span class="comment">//事件Background处理</span></div><div class="line">	backgroundPoster = <span class="keyword">new</span> BackgroundPoster(<span class="keyword">this</span>);</div><div class="line">	<span class="comment">//事件异步线程处理</span></div><div class="line">	asyncPoster = <span class="keyword">new</span> AsyncPoster(<span class="keyword">this</span>);</div><div class="line">	indexCount = builder.subscriberInfoIndexes != <span class="keyword">null</span> ? builder.subscriberInfoIndexes.size() : <span class="number">0</span>;</div><div class="line">	<span class="comment">//订阅者想要方法信息存储和查找</span></div><div class="line">	subscriberMethodFinder = <span class="keyword">new</span> SubscriberMethodFinder(builder.subscriberInfoIndexes,</div><div class="line">			builder.strictMethodVerification, builder.ignoreGeneratedIndex);</div><div class="line">	logSubscriberExceptions = builder.logSubscriberExceptions;</div><div class="line">	logNoSubscriberMessages = builder.logNoSubscriberMessages;</div><div class="line">	sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;</div><div class="line">	sendNoSubscriberEvent = builder.sendNoSubscriberEvent;</div><div class="line">	throwSubscriberException = builder.throwSubscriberException;</div><div class="line">	<span class="comment">//是否支持事件继承</span></div><div class="line">	eventInheritance = builder.eventInheritance;</div><div class="line">	executorService = builder.executorService;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注册事件过程"><a href="#注册事件过程" class="headerlink" title="注册事件过程"></a>注册事件过程</h2><h3 id="register-方法的实现"><a href="#register-方法的实现" class="headerlink" title="register()方法的实现"></a>register()方法的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber)</span> </span>&#123;</div><div class="line">	<span class="comment">//首先获取订阅者的class对象</span></div><div class="line">	Class&lt;`?&gt; subscriberClass = subscriber.getClass();</div><div class="line">	<span class="comment">//1 获取订阅者订阅的事件集合</span></div><div class="line">	List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</div><div class="line">			<span class="comment">//2 订阅</span></div><div class="line">			subscribe(subscriber, subscriberMethod);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubscriberMethod</span><span class="params">(Method method, Class&lt;?&gt; eventType, ThreadMode threadMode, <span class="keyword">int</span> priority, <span class="keyword">boolean</span> sticky)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.method = method; <span class="comment">//事件处理方法的Method对象</span></div><div class="line">	<span class="keyword">this</span>.threadMode = threadMode; <span class="comment">//线程的ThreadMode</span></div><div class="line">	<span class="keyword">this</span>.eventType = eventType; <span class="comment">//订阅的事件类型</span></div><div class="line">	<span class="keyword">this</span>.priority = priority; <span class="comment">//事件优先级</span></div><div class="line">	<span class="keyword">this</span>.sticky = sticky; <span class="comment">//是否接收粘性事件</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过subscriberMethodFinder.findSubscriberMethods(subscriberClass)方法可以返回一个SubscriberMethod对象的集合，下面来看看findSubscriberMethods()方法的实现</p>
<h3 id="SubscriberMethodFinder的实现"><a href="#SubscriberMethodFinder的实现" class="headerlink" title="SubscriberMethodFinder的实现"></a>SubscriberMethodFinder的实现</h3><p>SubscriberMethodFinder类就是用来查找和缓存订阅者响应方法的信息的类。那么怎么能获得订阅者响应函数的相关信息呢？在3.0版本中,EventBus提供了一个EventBusAnnotationProcessor注解处理器来在编译期通过读取@Subscribe注解并解析，然后生成java类来保存所有订阅者关于订阅的信息，这样就比在运行时使用反射来获得这些订阅者的信息速度要快。我们可以参考EventBus项目里的EventBusPerformance这个例子，编译后我们可以在build文件夹里找到这个类，MyEventBusIndex类，当然类名是可以自定义的，下面看一下生成的MyEventBusIndex类的组成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This class is generated by EventBus, do not edit.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventBusIndex</span> <span class="keyword">implements</span> <span class="title">SubscriberInfoIndex</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        SUBSCRIBER_INDEX = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();</div><div class="line"></div><div class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(org.greenrobot.eventbusperf.testsubject.PerfTestEventBus.SubscriberClassEventBusAsync.class,</div><div class="line">                <span class="keyword">true</span>, <span class="keyword">new</span> SubscriberMethodInfo[]&#123;</div><div class="line">                <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventAsync"</span>, TestEvent.class, ThreadMode.ASYNC),</div><div class="line">        &#125;));</div><div class="line"></div><div class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(TestRunnerActivity.class, <span class="keyword">true</span>, <span class="keyword">new</span> SubscriberMethodInfo[]&#123;</div><div class="line">                <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread"</span>, TestFinishedEvent.class, ThreadMode.MAIN),</div><div class="line">        &#125;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putIndex</span><span class="params">(SubscriberInfo info)</span> </span>&#123;</div><div class="line">        SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SubscriberInfo <span class="title">getSubscriberInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class="line">        SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);</div><div class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> info;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出是使用一个静态HashMap即：SUBSCRIBER_INDEX来保存订阅类的信息，其中包括了订阅类的Class对象，是否需要检查父类，以及订阅方法的信息SubscriberMethodInfo的数组，SubscriberMethodInfo中又保存了订阅方法的方法名、订阅的事件类型、触发线程，是否接收sticky事件以及优先级priority。这其中就保存了register()的所有需要的信息，如果再配置EventBus的时候通过EventBuilder配置：<code>eventBus=EventBus.builder().addIndex(new MyEventBusIndex()).build()</code>；来将编译生成的MyEventBusIndex配置进去，这样能在SubscriberMethodFinder类中直接查找出订阅类的信息，就不需要再利用注解判断了，这种方法是作为EventBus的可选配置存在的。</p>
<p>SubscriberMethodFinder同样提供了通过注解来获得订阅类信息的方法，下面来看看findSubscriberMethods()到底是如何实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;SubscriberMethod&gt; <span class="title">findSubscriberMethods</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//先从Method_CACHE取看是否有缓存，key：保存订阅类的类名，value:保存类中订阅的方法名</span></div><div class="line">	List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</div><div class="line">	<span class="keyword">if</span> (subscriberMethods != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> subscriberMethods;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//是否忽略注解器生成的MyEventIndex类，默认false</span></div><div class="line">	<span class="keyword">if</span> (ignoreGeneratedIndex) &#123;</div><div class="line">		<span class="comment">//利用反射来读取订阅类中的订阅方法</span></div><div class="line">		subscriberMethods = findUsingReflection(subscriberClass);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">//从注解器生成的MyEventBusIndex类中获得订阅类的订阅方法</span></div><div class="line">		subscriberMethods = findUsingInfo(subscriberClass);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (subscriberMethods.isEmpty()) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriberClass</div><div class="line">				+ <span class="string">" and its super classes have no public methods with the @Subscribe annotation"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">//保存到缓存中</span></div><div class="line">		METHOD_CACHE.put(subscriberClass, subscriberMethods);</div><div class="line">		<span class="keyword">return</span> subscriberMethods;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>findUsingInfo()方法就是通过查找MyEventBusIndex类中的信息来转换成List<subscribermethod>从而获得订阅类的相关订阅方法的信息集合。</subscribermethod></p>
<p>下面来看看findUsingReflection()的实现过程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingReflection</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class="line">	<span class="comment">//FindState用来做订阅方法的校验和保存</span></div><div class="line">	FindState findState = prepareFindState();</div><div class="line">	findState.initForSubscriber(subscriberClass);</div><div class="line">	<span class="keyword">while</span> (findState.clazz != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">//通过反射获得订阅方法信息</span></div><div class="line">		findUsingReflectionInSingleClass(findState);</div><div class="line">		<span class="comment">//查找父类的订阅方法</span></div><div class="line">		findState.moveToSuperclass();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//获取findState中的SubscriberMethod(也就是订阅方法List)并返回</span></div><div class="line">	<span class="keyword">return</span> getMethodsAndRelease(findState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过FindState类来做订阅方法的校验和保存，并通过FIND_STATE_POOL静态数组来保存FindState对象，可以使FindState复用，避免重复创建过多的对象，最终是通过findUsingReflectionSingleClass()来具体获得相关订阅方法的信息的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findUsingReflectionInSingleClass</span><span class="params">(FindState findState)</span> </span>&#123;</div><div class="line">	Method[] methods;</div><div class="line">	<span class="comment">//通过反射得到方法数组</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// This is faster than getMethods, especially when subscribers are fat classes like Activities</span></div><div class="line">		methods = findState.clazz.getDeclaredMethods();</div><div class="line">	&#125; <span class="keyword">catch</span> (Throwable th) &#123;</div><div class="line">		<span class="comment">// Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149</span></div><div class="line">		methods = findState.clazz.getMethods();</div><div class="line">		findState.skipSuperClasses = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//遍历Method</span></div><div class="line">	<span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">		<span class="keyword">int</span> modifiers = method.getModifiers();</div><div class="line">		<span class="keyword">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class="number">0</span>) &#123;</div><div class="line">			Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class="line">			<span class="comment">//保证必须只有一个事件参数</span></div><div class="line">			<span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>) &#123;</div><div class="line">				<span class="comment">//得到注解</span></div><div class="line">				Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</div><div class="line">				<span class="keyword">if</span> (subscribeAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">					Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</div><div class="line">					<span class="comment">//校验是否添加该方法</span></div><div class="line">					<span class="keyword">if</span> (findState.checkAdd(method, eventType)) &#123;</div><div class="line">						ThreadMode threadMode = subscribeAnnotation.threadMode();</div><div class="line">						<span class="comment">//实例化SubscriberMethod对象并添加</span></div><div class="line">						findState.subscriberMethods.add(<span class="keyword">new</span> SubscriberMethod(method, eventType, threadMode,</div><div class="line">								subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class="line">				String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"@Subscribe method "</span> + methodName +</div><div class="line">						<span class="string">"must have exactly 1 parameter but has "</span> + parameterTypes.length);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class="line">			String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(methodName +</div><div class="line">					<span class="string">" is a illegal @Subscribe method: must be public, non-static, and non-abstract"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码运行后，订阅类的所有SubscriberMethod都已经被保存了，最后在通过getMethodsAndRelease方法返回List<subscribermethod>集合。</subscribermethod></p>
<p>下面接着来看subscribe()是如何实现的</p>
<h3 id="subsribe-方法的实现"><a href="#subsribe-方法的实现" class="headerlink" title="subsribe()方法的实现"></a>subsribe()方法的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 必须在同步代码块中调用</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Object subscriber, SubscriberMethod subscriberMethod)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//获取订阅事件的事件类型</span></div><div class="line">	Class&lt;?&gt; eventType = subscriberMethod.eventType;</div><div class="line">	<span class="comment">//创建SubScription对象</span></div><div class="line">	Subscription newSubscription = <span class="keyword">new</span> Subscription(subscriber, subscriberMethod);</div><div class="line">	<span class="comment">//检查是否已经添加过该SubScription对象，添加过则抛出异常</span></div><div class="line">	CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</div><div class="line">	<span class="keyword">if</span> (subscriptions == <span class="keyword">null</span>) &#123;</div><div class="line">		subscriptions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line">		subscriptionsByEventType.put(eventType, subscriptions);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (subscriptions.contains(newSubscription)) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriber.getClass() + <span class="string">" already registered to event "</span></div><div class="line">					+ eventType);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//根据优先级来添加SubScription对象</span></div><div class="line">	<span class="keyword">int</span> size = subscriptions.size();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</div><div class="line">			subscriptions.add(i, newSubscription);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//将订阅者对象以及订阅的事件保存到typesBySubscriber中</span></div><div class="line">	List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</div><div class="line">	<span class="keyword">if</span> (subscribedEvents == <span class="keyword">null</span>) &#123;</div><div class="line">		subscribedEvents = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		typesBySubscriber.put(subscriber, subscribedEvents);</div><div class="line">	&#125;</div><div class="line">	subscribedEvents.add(eventType);</div><div class="line">	<span class="comment">//如果接受sticky事件则立即分发sticky事件</span></div><div class="line">	<span class="keyword">if</span> (subscriberMethod.sticky) &#123;</div><div class="line">		<span class="comment">//eventInheritance表示是否分发订阅了响应事件类及父类事件的方法</span></div><div class="line">		<span class="keyword">if</span> (eventInheritance) &#123;</div><div class="line">			<span class="comment">// Existing sticky events of all subclasses of eventType have to be considered.</span></div><div class="line">			<span class="comment">// <span class="doctag">Note:</span> Iterating over all events may be inefficient with lots of sticky events,</span></div><div class="line">			<span class="comment">// thus data structure should be changed to allow a more efficient lookup</span></div><div class="line">			<span class="comment">// (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;).</span></div><div class="line">			Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</div><div class="line">			<span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</div><div class="line">				Class&lt;?&gt; candidateEventType = entry.getKey();</div><div class="line">				<span class="keyword">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</div><div class="line">					Object stickyEvent = entry.getValue();</div><div class="line">					checkPostStickyEventToSubscription(newSubscription, stickyEvent);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			Object stickyEvent = stickyEvents.get(eventType);</div><div class="line">			checkPostStickyEventToSubscription(newSubscription, stickyEvent);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一下结合一张图来理解整个注册过程：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/eventbus-%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B.png" alt="注册过程"></p>
<h2 id="事件分发过程"><a href="#事件分发过程" class="headerlink" title="事件分发过程"></a>事件分发过程</h2><p>EventBus通过post方法来发送一个事件，首先看看post方法的实现过程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</div><div class="line">	<span class="comment">//得到当前线程的Posting状态</span></div><div class="line">	PostingThreadState postingState = currentPostingThreadState.get();</div><div class="line">	<span class="comment">//获取当前线程的事件队列</span></div><div class="line">	List&lt;Object&gt; eventQueue = postingState.eventQueue;</div><div class="line">	<span class="comment">//加入事件到队列</span></div><div class="line">	eventQueue.add(event);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!postingState.isPosting) &#123;</div><div class="line">		postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();</div><div class="line">		postingState.isPosting = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (postingState.canceled) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//发送知道队列为空</span></div><div class="line">			<span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</div><div class="line">				<span class="comment">//发送单个事件</span></div><div class="line">				postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			postingState.isPosting = <span class="keyword">false</span>;</div><div class="line">			postingState.isMainThread = <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先是通过currentPostingThreadState.get()方法来得到当前线程PostingThreadState的对象，为什么是说当前线程？我们来看看currentPostingThreadState的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = <span class="keyword">new</span> ThreadLocal&lt;PostingThreadState&gt;() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> PostingThreadState <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PostingThreadState();</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>currentPostingThreadState的实现是一个包含了PostingThreadState的ThreadLocal对象。</p>
<p>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储线程，而这段数据是不会与其他线程共享的，其内部原理是通过生成一个它包裹的泛型对象的数组，在不同的线程会有不同的数组索引值，这样就可以做到每个线程通过get()方法获取的时候，取到的只能是自己线程所对应的数据，所以这里取到的就是每个线程的PostingThreadState状态。</p>
<p>接下来我们来看postingSingleEvent()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSingleEvent</span><span class="params">(Object event, PostingThreadState postingState)</span> <span class="keyword">throws</span> Error </span>&#123;</div><div class="line">	Class&lt;?&gt; eventClass = event.getClass();</div><div class="line">	<span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</div><div class="line">	<span class="comment">//是否触发订阅了该事件（eventClass）的父类，以及接口的类的响应方法</span></div><div class="line">	<span class="keyword">if</span> (eventInheritance) &#123;</div><div class="line">		<span class="comment">////查找eventClass类所有的父类以及接口</span></div><div class="line">		List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</div><div class="line">		<span class="keyword">int</span> countTypes = eventTypes.size();</div><div class="line">		<span class="comment">//循环postSingleEventForEventType</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</div><div class="line">			Class&lt;?&gt; clazz = eventTypes.get(h);</div><div class="line">			subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//post单个事件</span></div><div class="line">		subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//如果没有发现</span></div><div class="line">	<span class="keyword">if</span> (!subscriptionFound) &#123;</div><div class="line">		<span class="keyword">if</span> (logNoSubscriberMessages) &#123;</div><div class="line">			Log.d(TAG, <span class="string">"No subscribers registered for event "</span> + eventClass);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</div><div class="line">				eventClass != SubscriberExceptionEvent.class) &#123;</div><div class="line">				<span class="comment">//发送一个NoSubscriberEvent事件，如果我们需要处理这种状态，接收这个事件就可以了</span></div><div class="line">			post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面可知，实际上事件分发是在postSingleEventForEventType()方法里进行的，代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">postSingleEventForEventType</span><span class="params">(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass)</span> </span>&#123;</div><div class="line">	CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</div><div class="line">	<span class="comment">//获取订阅了这个事件的Subscription列表.</span></div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		subscriptions = subscriptionsByEventType.get(eventClass);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</div><div class="line">		<span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</div><div class="line">			postingState.event = event;</div><div class="line">			postingState.subscription = subscription;</div><div class="line">			<span class="comment">//是否被中断</span></div><div class="line">			<span class="keyword">boolean</span> aborted = <span class="keyword">false</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">//分发给订阅者</span></div><div class="line">				postToSubscription(subscription, event, postingState.isMainThread);</div><div class="line">				aborted = postingState.canceled;</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				postingState.event = <span class="keyword">null</span>;</div><div class="line">				postingState.subscription = <span class="keyword">null</span>;</div><div class="line">				postingState.canceled = <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (aborted) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</div><div class="line">	<span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</div><div class="line">		<span class="keyword">case</span> POSTING:</div><div class="line">			invokeSubscriber(subscription, event);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> MAIN:</div><div class="line">			<span class="keyword">if</span> (isMainThread) &#123;</div><div class="line">				invokeSubscriber(subscription, event);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				mainThreadPoster.enqueue(subscription, event);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> BACKGROUND:</div><div class="line">			<span class="keyword">if</span> (isMainThread) &#123;</div><div class="line">				backgroundPoster.enqueue(subscription, event);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				invokeSubscriber(subscription, event);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> ASYNC:</div><div class="line">			asyncPoster.enqueue(subscription, event);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先从subscriptionsByEventType里获得所有订阅了这个事件的Subscription列表，然后在通过postToSubScription()方法来分发事件，在postToSubScription()通过不同的threadMode在不同的线程里invoke()订阅者的方法，ThreadMode共有四类：</p>
<ul>
<li><p>PostThread：默认的 ThreadMode，表示在执行 Post 操作的线程直接调用订阅者的事件响应方法，不论该线程是否为主线程（UI 线程）。当该线程为主线程时，响应方法中不能有耗时操作，否则有卡主线程的风险。适用场景：对于是否在主线程执行无要求，但若 Post 线程为主线程，不能耗时的操作；</p>
</li>
<li><p>MainThread：在主线程中执行响应方法。如果发布线程就是主线程，则直接调用订阅者的事件响应方法，否则通过主线程的 Handler 发送消息在主线程中处理——调用订阅者的事件响应函数。显然，MainThread类的方法也不能有耗时操作，以避免卡主线程。适用场景：必须在主线程执行的操作；</p>
</li>
<li><p>BackgroundThread：在后台线程中执行响应方法。如果发布线程不是主线程，则直接调用订阅者的事件响应函数，否则启动唯一的后台线程去处理。由于后台线程是唯一的，当事件超过一个的时候，它们会被放在队列中依次执行，因此该类响应方法虽然没有PostThread类和MainThread类方法对性能敏感，但最好不要有重度耗时的操作或太频繁的轻度耗时操作，以造成其他操作等待。适用场景：操作轻微耗时且不会过于频繁，即一般的耗时操作都可以放在这里；</p>
</li>
<li><p>Async：不论发布线程是否为主线程，都使用一个空闲线程来处理。和BackgroundThread不同的是，Async类的所有线程是相互独立的，因此不会出现卡线程的问题。适用场景：长耗时操作，例如网络访问。</p>
</li>
</ul>
<p>下面我们来看看invokeSubscriber(subscription, event)是如何实现的，关于不同线程的Poster使用可以参考这篇文章<a href="http://kymjs.com/code/2015/12/12/01" target="_blank" rel="external">http://kymjs.com/code/2015/12/12/01</a></p>
<p>invokeSubscriber(subscription, event)代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invokeSubscriber</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</div><div class="line">	&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">		handleSubscriberException(subscription, event, e.getCause());</div><div class="line">	&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected exception"</span>, e);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上就是通过反射调用了订阅者的订阅函数并把event对象作为参数传入，至此post()流程如上述所示。整体流程图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/eventbus-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.png" alt="Post流程"></p>
<h2 id="解除注册过程"><a href="#解除注册过程" class="headerlink" title="解除注册过程"></a>解除注册过程</h2><p>解除注册只要调用unregister()方法即可，实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object subscriber)</span> </span>&#123;</div><div class="line">	<span class="comment">//通过typesBySubscriber来取出这个subscriber订阅者订阅的事件类型,</span></div><div class="line">	List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);</div><div class="line">	<span class="keyword">if</span> (subscribedTypes != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">//分别解除每个订阅了的事件类型</span></div><div class="line">		<span class="keyword">for</span> (Class&lt;?&gt; eventType : subscribedTypes) &#123;</div><div class="line">			unsubscribeByEventType(subscriber, eventType);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//从typesBySubscriber移除subscriber</span></div><div class="line">		typesBySubscriber.remove(subscriber);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		Log.w(TAG, <span class="string">"Subscriber to unregister was not registered before: "</span> + subscriber.getClass());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unsubscribeByEventType</span><span class="params">(Object subscriber, Class&lt;?&gt; eventType)</span> </span>&#123;</div><div class="line">	<span class="comment">//subscriptionsByEventType里拿出这个事件类型的订阅者列表.</span></div><div class="line">	List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</div><div class="line">	<span class="keyword">if</span> (subscriptions != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">int</span> size = subscriptions.size();</div><div class="line">		<span class="comment">//取消订阅</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">			Subscription subscription = subscriptions.get(i);</div><div class="line">			<span class="keyword">if</span> (subscription.subscriber == subscriber) &#123;</div><div class="line">				subscription.active = <span class="keyword">false</span>;</div><div class="line">				subscriptions.remove(i);</div><div class="line">				i--;</div><div class="line">				size--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终分别从typesBySubscriber和subscriptions里分别移除订阅者以及相关信息即可</p>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式是对象的行为模式，又叫发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者模式。观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。EventBus并不是标准的观察者模式的实现，但是它的整体就是一个发布/订阅框架，也拥有观察者模式的有点，比如：发布者和订阅者的解耦。</p>
<p>参考文章:</p>
<p><a href="http://www.jianshu.com/p/f057c460c77e" target="_blank" rel="external">EventBus 3.0 源码分析</a><br><a href="http://kymjs.com/code/2015/12/12/01" target="_blank" rel="external">EventBus源码研读</a><br><a href="http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">EventBus 源码解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面已经介绍了EventBus3.0开源库的详细使用，下面我们开始进入其源代码的学习，先看看EventBus3.0与2.x版本之间的区别。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址&lt;a href=&quot;https://github.com/greenrobot/Even
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="源码分析" scheme="http://liuguoquan727.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Otto源码解析</title>
    <link href="http://liuguoquan727.github.io/2016/04/18/Android%20Otto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://liuguoquan727.github.io/2016/04/18/Android Otto源码解析/</id>
    <published>2016-04-18T15:04:06.000Z</published>
    <updated>2016-05-03T02:18:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了<a href="http://liuguoquan727.github.io/2016/04/17/Android_Otto%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">Otto的使用情况</a>，下面开始进入Otto的源码分析之旅。</p>
<p>首先来看看构造函数：</p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String identifier;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadEnforcer enforcer;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> HandlerFinder handlerFinder;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(DEFAULT_IDENTIFIER);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">(String identifier)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(ThreadEnforcer.MAIN, identifier);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">(ThreadEnforcer enforcer, String identifier)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(enforcer, identifier, HandlerFinder.ANNOTATED);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Bus(ThreadEnforcer enforcer, String identifier, HandlerFinder handlerFinder) &#123;</div><div class="line">    <span class="keyword">this</span>.enforcer =  enforcer;</div><div class="line">    <span class="keyword">this</span>.identifier = identifier;</div><div class="line">    <span class="keyword">this</span>.handlerFinder = handlerFinder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认参数enforcer=ThreadEnforcer.MAIN，identifier=DEFAULT_IDENTIFIER，handlerFinder=HandlerFinder.ANNOTATED。下面来看看这些参数是什么意思：</p>
<h2 id="ThreadEnforce"><a href="#ThreadEnforce" class="headerlink" title="ThreadEnforce"></a>ThreadEnforce</h2><p>ThreadEnforce是一个接口，enforce()方法用于检查当前的线程是否为指定的线程类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadEnforcer</span> </span>&#123;</div><div class="line"></div><div class="line">    ThreadEnforcer ANY = <span class="keyword">new</span> ThreadEnforcer() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enforce</span><span class="params">(Bus bus)</span> </span>&#123;</div><div class="line">                <span class="comment">// Allow any thread.</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    ThreadEnforcer MAIN = <span class="keyword">new</span> ThreadEnforcer() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enforce</span><span class="params">(Bus bus)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (Looper.myLooper() != Looper.getMainLooper()) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Event bus "</span> + bus +</div><div class="line">                        <span class="string">" accessed from non-main thread "</span> + Looper.myLooper());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enforce</span><span class="params">(Bus bus)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不带参数的构造函数默认使用ThreadEnforcer.MAIN，表示enforce()方法必须在主线程上执行。</p>
<h2 id="identifier"><a href="#identifier" class="headerlink" title="identifier"></a>identifier</h2><p>identifier为Bus对象的名字，debug用</p>
<h2 id="HandlerFinder"><a href="#HandlerFinder" class="headerlink" title="HandlerFinder"></a>HandlerFinder</h2><p>HandlerFinder用于在注册/反注册的时候查找Subscriber和Produce，后文会对其展开源码级别的解析。默认使用HandlerANNOTATED，表示使用注解来进行查找。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除上述以外，Bus类还有两个成员变量handlersByType和producersByType:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">** 通过event的类型（class类型）来查找event handle。</div><div class="line">*	键为 event类型  值为 事件订阅者集合</div><div class="line">*	一个事件类型可以有多个事件订阅者</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; handlersByType =</div><div class="line">	  <span class="keyword">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt;();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">** 通过event的类型（class类型）来查找event producer。</div><div class="line">*	键为 event类型  值为 事件生产者</div><div class="line">*	一个事件类型，只能有一个事件生产者</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, EventProducer&gt; producersByType =</div><div class="line">	  <span class="keyword">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, EventProducer&gt;();</div></pre></td></tr></table></figure>
<h1 id="注册-反注册事件"><a href="#注册-反注册事件" class="headerlink" title="注册/反注册事件"></a>注册/反注册事件</h1><p>如下所示要成为订阅者HandlerEvent，只需将其注册到bus，然后使用@Subscribe注解标记回调处理方法即可。回调方法要求可见性为public，有且仅有一个参数，类型为订阅的event。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</div><div class="line">        bus.register(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answerAvailable</span><span class="params">(HandlerEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// process event</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Subsrible"><a href="#Subsrible" class="headerlink" title="@Subsrible"></a>@Subsrible</h2><p>首先看一下@Subscribe注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Subscribe &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RetentionPolicy.RUNTIME表示它是运行时的注解，ElementType.METHOD表示用于注解方法。</p>
<h2 id="register"><a href="#register" class="headerlink" title="register()"></a>register()</h2><p>register流程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//1.检查当前线程是否符合ThreadEnforcer的设置</span></div><div class="line">	<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</div><div class="line">	  <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Object to register must not be null."</span>);</div><div class="line">	&#125;</div><div class="line">	enforcer.enforce(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">	<span class="comment">//2.默认情况下，通过@Producer注解找到所有的事件生产者Producers</span></div><div class="line">	Map&lt;Class&lt;?&gt;, EventProducer&gt; foundProducers = handlerFinder.findAllProducers(object);</div><div class="line">	<span class="keyword">for</span> (Class&lt;?&gt; type : foundProducers.keySet()) &#123;</div><div class="line"></div><div class="line">	  <span class="comment">//2-1 判断object上的produce注册的event是否已经被别人注册过</span></div><div class="line">	  <span class="keyword">final</span> EventProducer producer = foundProducers.get(type);</div><div class="line"></div><div class="line">	  <span class="comment">//type存在则返回type对应的值 type不存在则将type的键值设为producer</span></div><div class="line">	  EventProducer previousProducer = producersByType.putIfAbsent(type, producer);</div><div class="line">	  <span class="comment">//checking if the previous producer existed</span></div><div class="line">	  <span class="keyword">if</span> (previousProducer != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Producer method for type "</span> + type</div><div class="line">		  + <span class="string">" found on type "</span> + producer.target.getClass()</div><div class="line">		  + <span class="string">", but already registered by type "</span> + previousProducer.target.getClass() + <span class="string">"."</span>);</div><div class="line">	  &#125;</div><div class="line"></div><div class="line"></div><div class="line">	  <span class="comment">//2-2 如果没有被注册过，那么找出对应event的handler，触发一次回调</span></div><div class="line">	  Set&lt;EventHandler&gt; handlers = handlersByType.get(type);</div><div class="line">	  <span class="keyword">if</span> (handlers != <span class="keyword">null</span> &amp;&amp; !handlers.isEmpty()) &#123;</div><div class="line">		<span class="keyword">for</span> (EventHandler handler : handlers) &#123;</div><div class="line">		  dispatchProducerResultToHandler(handler, producer);</div><div class="line">		&#125;</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//3. 找出object上用@Subscribe注解的方法</span></div><div class="line">	Map&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; foundHandlersMap = handlerFinder.findAllSubscribers(object);</div><div class="line">	<span class="keyword">for</span> (Class&lt;?&gt; type : foundHandlersMap.keySet()) &#123;</div><div class="line">	  Set&lt;EventHandler&gt; handlers = handlersByType.get(type);</div><div class="line">	  </div><div class="line">	  </div><div class="line">	  <span class="keyword">if</span> (handlers == <span class="keyword">null</span>) &#123;</div><div class="line">		</div><div class="line">		<span class="comment">//3-1，该event是第一次注册，那么新建一个CopyOnWriteArraySet用来保存handler和event的对应关系</span></div><div class="line">		</div><div class="line">		Set&lt;EventHandler&gt; handlersCreation = <span class="keyword">new</span> CopyOnWriteArraySet&lt;EventHandler&gt;();</div><div class="line">		handlers = handlersByType.putIfAbsent(type, handlersCreation);</div><div class="line">		<span class="keyword">if</span> (handlers == <span class="keyword">null</span>) &#123;</div><div class="line">			handlers = handlersCreation;</div><div class="line">		&#125;</div><div class="line">	  &#125;</div><div class="line">	  </div><div class="line">	  <span class="comment">//3-2,保存object中新增的event-handler对应关系</span></div><div class="line">	  <span class="keyword">final</span> Set&lt;EventHandler&gt; foundHandlers = foundHandlersMap.get(type);</div><div class="line">	  <span class="keyword">if</span> (!handlers.addAll(foundHandlers)) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Object already registered."</span>);</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//4.检查object上的event是否存在对应的Producer，有则触发一次调用</span></div><div class="line">	<span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; entry : foundHandlersMap.entrySet()) &#123;</div><div class="line">	  Class&lt;?&gt; type = entry.getKey();</div><div class="line">	  EventProducer producer = producersByType.get(type);</div><div class="line">	  <span class="keyword">if</span> (producer != <span class="keyword">null</span> &amp;&amp; producer.isValid()) &#123;</div><div class="line">		Set&lt;EventHandler&gt; foundHandlers = entry.getValue();</div><div class="line">		<span class="keyword">for</span> (EventHandler foundHandler : foundHandlers) &#123;</div><div class="line">		  <span class="keyword">if</span> (!producer.isValid()) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		  &#125;</div><div class="line">		  <span class="keyword">if</span> (foundHandler.isValid()) &#123;</div><div class="line">			dispatchProducerResultToHandler(foundHandler, producer);</div><div class="line">		  &#125;</div><div class="line">		&#125;</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>register方法主要做了三件事情：触发新的Producer；注册新的event-handler关系；触发旧的Producer。另外有两点要注意：</p>
<ul>
<li>在保证线程安全的情况下，使用CopyOnWriteArraySet作为保存event和handler的容器，可以大大提高效率。</li>
<li>由于register方法没有加锁，所有在3-1中，尽管已经检查了handlers是否存在，但仍需使用putIfAbsent来保存handler。</li>
</ul>
<h2 id="HandlerFinder-1"><a href="#HandlerFinder-1" class="headerlink" title="HandlerFinder"></a>HandlerFinder</h2><p>注意到Bus通过HandlerFinder来查找object上的producer和subscriber，接下来看一下HanderFinder的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HandlerFinder</span> </span>&#123;</div><div class="line"></div><div class="line">  Map&lt;Class&lt;?&gt;, EventProducer&gt; findAllProducers(Object listener);</div><div class="line"></div><div class="line">  Map&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; findAllSubscribers(Object listener);</div><div class="line"></div><div class="line"></div><div class="line">  HandlerFinder ANNOTATED = <span class="keyword">new</span> HandlerFinder() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Map&lt;Class&lt;?&gt;, EventProducer&gt; findAllProducers(Object listener) &#123;</div><div class="line">      <span class="keyword">return</span> AnnotatedHandlerFinder.findAllProducers(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Map&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; findAllSubscribers(Object listener) &#123;</div><div class="line">      <span class="keyword">return</span> AnnotatedHandlerFinder.findAllSubscribers(listener);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中findAllProducers方法返回某event type对应的EventProducers，findAllSubscribers返回某event type对应的EventHandler集合。</p>
<h2 id="EventProducer"><a href="#EventProducer" class="headerlink" title="EventProducer"></a>EventProducer</h2><p>EventProducer是producer方法的包装类，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventProducer</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Object target;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method method;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> hashCode;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    EventProducer(Object target, Method method) &#123;</div><div class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(</div><div class="line">                <span class="string">"EventProducer target cannot be null."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(</div><div class="line">                <span class="string">"EventProducer method cannot be null."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        <span class="keyword">this</span>.method = method;</div><div class="line">        method.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 提前计算hashcode，以防每次调用hash()时消耗资源</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">        hashCode = ((prime + method.hashCode()) * prime) + target.hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> valid;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 应在object unregister时调用</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</div><div class="line">        valid = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">produceEvent</span><span class="params">()</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!valid) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(toString() +</div><div class="line">                <span class="string">" has been invalidated and can no longer produce events."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> method.invoke(target);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</div><div class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">            <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> Error) &#123;</div><div class="line">                <span class="keyword">throw</span> (Error) e.getCause();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 produceEvent方法用于获得event。可以看出Otto要求produce方法不能有参数。</p>
<h2 id="EventHandler"><a href="#EventHandler" class="headerlink" title="EventHandler"></a>EventHandler</h2><p>EventHandler是一个event handler方法（事件回调）的包装类，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method method;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> hashCode;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    EventHandler(Object target, Method method) &#123;</div><div class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(</div><div class="line">                <span class="string">"EventHandler target cannot be null."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(</div><div class="line">                <span class="string">"EventHandler method cannot be null."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        <span class="keyword">this</span>.method = method;</div><div class="line">        method.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Compute hash code eagerly since we know it will be used frequently and we cannot estimate the runtime of the</span></div><div class="line">        <span class="comment">// target's hashCode call.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">        hashCode = ((prime + method.hashCode()) * prime) + target.hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> valid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</div><div class="line">        valid = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEvent</span><span class="params">(Object event)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!valid) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(toString() +</div><div class="line">                <span class="string">" has been invalidated and can no longer handle events."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            method.invoke(target, event);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</div><div class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">            <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> Error) &#123;</div><div class="line">                <span class="keyword">throw</span> (Error) e.getCause();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中handlEvent方法用于在object上调用handle方法（事件回调），传入event对象。Otto要求event handler方法只能有一个参数就是event handler类。</p>
<h2 id="dispatchProducerResultToHandler"><a href="#dispatchProducerResultToHandler" class="headerlink" title="dispatchProducerResultToHandler()"></a>dispatchProducerResultToHandler()</h2><p>dispatchProducerResultToHandler方法用于将Producer产生的event分发给对应的handler，源码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchProducerResultToHandler</span><span class="params">(EventHandler handler, EventProducer producer)</span> </span>&#123;</div><div class="line">    Object event = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        event = producer.produceEvent();</div><div class="line">    &#125; <span class="keyword">catch</span>(InvocationTargetException e) &#123;</div><div class="line">        throwRuntimeException(<span class="string">"Producer "</span> + producer + <span class="string">" threw an exception."</span>, e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    dispatch(event, handler);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Object event, EventHandler wrapper)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        wrapper.handleEvent(event);</div><div class="line">    &#125; <span class="keyword">catch</span>(InvocationTargetException e) &#123;</div><div class="line">        throwRuntimeException(<span class="string">"Could not dispatch event: "</span> + event.getClass() + <span class="string">" to handler "</span> + wrapper, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要使用了Producer的produceEvent()获取event对象后，调用EventHandler的handleEvent（）方法处理事件。</p>
<h2 id="unregister"><a href="#unregister" class="headerlink" title="unregister()"></a>unregister()</h2><p>Bus类的unregister()方法用于解除目标对象和Bus之间的关联关系，包括对象上的producer方法，subscriber方法，源码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Object to unregister must not be null."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//1. 检查当前线程是否符合ThreadEnforcer的设置</span></div><div class="line">    enforcer.enforce(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="comment">//2. 默认情况下，通过注解在object上找出所有Producer，将其从producersByType中删除并标记为invalidate</span></div><div class="line">    Map&lt;Class&lt;?&gt;, EventProducer&gt; producersInListener = handlerFinder.findAllProducers(object);</div><div class="line">    <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, EventProducer&gt; entry : producersInListener.entrySet()) &#123;</div><div class="line">        <span class="keyword">final</span> Class&lt;?&gt; key = entry.getKey();</div><div class="line">        EventProducer producer = getProducerForEventType(key);</div><div class="line">        EventProducer value = entry.getValue();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span> || !value.equals(producer)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">            <span class="string">"Missing event producer for an annotated method. Is "</span> + object.getClass() + <span class="string">" registered?"</span>);</div><div class="line">        &#125;</div><div class="line">        producersByType.remove(key).invalidate();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3. 默认情况下，找出object上用@Subscribe注解了的handler，将其从event集合中删除并标记为invalidate</span></div><div class="line">    Map&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; handlersInListener = handlerFinder.findAllSubscribers(object);</div><div class="line">    <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; entry : handlersInListener.entrySet()) &#123;</div><div class="line">        Set&lt;EventHandler&gt; currentHandlers = getHandlersForEventType(entry.getKey());</div><div class="line">        Collection&lt;EventHandler&gt; eventMethodsInListener = entry.getValue();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (currentHandlers == <span class="keyword">null</span> || !currentHandlers.containsAll(eventMethodsInListener)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">            <span class="string">"Missing event handler for an annotated method. Is "</span> + object.getClass() + <span class="string">" registered?"</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (EventHandler handler : currentHandlers) &#123;</div><div class="line">            <span class="keyword">if</span> (eventMethodsInListener.contains(handler)) &#123;</div><div class="line">                handler.invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        currentHandlers.removeAll(eventMethodsInListener);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="投递事件"><a href="#投递事件" class="headerlink" title="投递事件"></a>投递事件</h1><h2 id="post"><a href="#post" class="headerlink" title="post()"></a>post()</h2><p>简单的事件投递过程如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bus.post(<span class="keyword">new</span> HandlerEvent(<span class="number">42</span>));</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">bus.post(getEvent);</div><div class="line"></div><div class="line"><span class="meta">@Producer</span></div><div class="line"><span class="function"><span class="keyword">public</span> HandlerEvent <span class="title">getEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> HandlerEvent(<span class="number">42</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来看下post方法实现的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function">ublic <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Event to post must not be null."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//1. 检查当前线程是否符合ThreadEnforcer的设置</span></div><div class="line">    enforcer.enforce(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2. 向上追溯event的所有父类</span></div><div class="line">    Set&lt;Class&lt;?&gt;&gt;dispatchTypes = flattenHierarchy(event.getClass());</div><div class="line">    </div><div class="line">    <span class="comment">//3. 当前event没有注册handler，则发送一个DeadEvent事件</span></div><div class="line">    <span class="keyword">boolean</span> dispatched = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span> (Class&lt;?&gt;eventType: dispatchTypes) &#123;</div><div class="line">        Set&lt;EventHandler&gt; wrappers = getHandlersForEventType(eventType);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (wrappers != <span class="keyword">null</span> &amp;&amp; !wrappers.isEmpty()) &#123;</div><div class="line">            dispatched = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">for</span> (EventHandler wrapper: wrappers) &#123;</div><div class="line">                <span class="comment">//3-1 将事件和handler放到分发队列里</span></div><div class="line">                enqueueEvent(event, wrapper);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//4. 当前event没有注册handler，则发送一个DeadEvent事件</span></div><div class="line">    <span class="keyword">if</span> (!dispatched &amp;&amp; !(event <span class="keyword">instanceof</span> DeadEvent)) &#123;</div><div class="line">        post(<span class="keyword">new</span> DeadEvent(<span class="keyword">this</span>, event));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//5. 通知队列进行分发操作</span></div><div class="line">    dispatchQueuedEvents();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意两点：</p>
<ul>
<li>发送一个Event时，订阅了Event父类的Subscriber方法也会被调用</li>
<li>事件被放到调用者所在线程的队列里依次分发</li>
</ul>
<h2 id="flattenHierarchy"><a href="#flattenHierarchy" class="headerlink" title="flattenHierarchy()"></a>flattenHierarchy()</h2><p>进行post操作时，首先会通过flattenHierarchy方法获得event的所有父类或接口的集合：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> Set&lt;Class&lt;?&gt;&gt; flattenHierarchy(Class&lt;?&gt; concreteClass) &#123;</div><div class="line">   Set&lt;Class&lt;?&gt;&gt; classes = flattenHierarchyCache.get(concreteClass);</div><div class="line">   <span class="keyword">if</span> (classes == <span class="keyword">null</span>) &#123;</div><div class="line">     Set&lt;Class&lt;?&gt;&gt; classesCreation = getClassesFor(concreteClass);</div><div class="line">     classes = flattenHierarchyCache.putIfAbsent(concreteClass, classesCreation);</div><div class="line">     <span class="keyword">if</span> (classes == <span class="keyword">null</span>) &#123;</div><div class="line">       classes = classesCreation;</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> classes;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">//利用深度优先遍历导出了concreteClass的所有父类</span></div><div class="line"> <span class="keyword">private</span> Set&lt;Class&lt;?&gt;&gt; getClassesFor(Class&lt;?&gt; concreteClass) &#123;</div><div class="line">   List&lt;Class&lt;?&gt;&gt; parents = <span class="keyword">new</span> LinkedList&lt;Class&lt;?&gt;&gt;();</div><div class="line">   Set&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;();</div><div class="line"></div><div class="line">   parents.add(concreteClass);</div><div class="line"></div><div class="line"><span class="comment">//深度优先遍历</span></div><div class="line">   <span class="keyword">while</span> (!parents.isEmpty()) &#123;</div><div class="line">     Class&lt;?&gt; clazz = parents.remove(<span class="number">0</span>);</div><div class="line">     classes.add(clazz);</div><div class="line"></div><div class="line">     Class&lt;?&gt; parent = clazz.getSuperclass();</div><div class="line">     <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">       parents.add(parent);</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> classes;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="Dispatch-Queue"><a href="#Dispatch-Queue" class="headerlink" title="Dispatch Queue"></a>Dispatch Queue</h2><p>通过post方法投递的event首先会放到当前线程所在的Dispatch Queue中，然后依次分发。Bus类有如下成员属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;ConcurrentLinkedQueue&lt;EventWithHandler&gt;&gt; eventsToDispatch =</div><div class="line">    <span class="keyword">new</span> ThreadLocal&lt;ConcurrentLinkedQueue&lt;EventWithHandler&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> ConcurrentLinkedQueue&lt;EventWithHandler&gt; <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcurrentLinkedQueue&lt;EventWithHandler&gt;();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>eventsToDispatch是一个ThreadLocal对象，通过initialValue()方法，eventsToDispatch每次在新的线程上调用的时候都会生成新的ConcurrentLinkedQueue实例。event是通过enqueueEvent方法放到queue中的，下面看看equeueEvent()的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">enqueueEvent</span><span class="params">(Object event, EventHandler handler)</span> </span>&#123;</div><div class="line">	eventsToDispatch.get().offer(<span class="keyword">new</span> EventWithHandler(event, handler));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>offer()方法会将EventWithHandler对象放到当前线程的queue的尾部。offer方法和add方法的区别在于，当无法插入（例如空间不够）情况下会返回false，而不是抛出异常。EventWithHandler类对event和handler的关系进行了简单的包装，实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventWithHandler</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> Object event;</div><div class="line">	<span class="keyword">final</span> EventHandler handler;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EventWithHandler</span><span class="params">(Object event, EventHandler handler)</span> </span>&#123;</div><div class="line">	  <span class="keyword">this</span>.event = event;</div><div class="line">	  <span class="keyword">this</span>.handler = handler;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来看看dispatchQueuedEvents方法的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchQueuedEvents</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// don't dispatch if we're already dispatching, that would allow reentrancy and out-of-order events. Instead, leave</span></div><div class="line">    <span class="comment">// the events to be dispatched after the in-progress dispatch is complete.</span></div><div class="line">    <span class="comment">//1. 不能重复分发，否则会导致event的分发次序混乱</span></div><div class="line">    <span class="keyword">if</span> (isDispatching.get()) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    isDispatching.set(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="comment">//2. 依次取出EventWithHandler，并通过dispatch方法进行分发。</span></div><div class="line">            EventWithHandler eventWithHandler = eventsToDispatch.get().poll();</div><div class="line">            <span class="keyword">if</span> (eventWithHandler == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (eventWithHandler.handler.isValid()) &#123;</div><div class="line">                dispatch(eventWithHandler.event, eventWithHandler.handler);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        isDispatching.set(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Object event, EventHandler wrapper)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      wrapper.handleEvent(event);</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">      throwRuntimeException(</div><div class="line">          <span class="string">"Could not dispatch event: "</span> + event.getClass() + <span class="string">" to handler "</span> + wrapper, e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>值得注意的是，所有subscrible方法抛出的异常都会在这里捕获，捕获到异常以后event分发过程即停止，直到下一次在该线程上调用post为止。</p>
<h1 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h1><p>Otto的总体结构如下表示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">            +-------------------------+</div><div class="line">            |Bus(ThreadLocal)         |</div><div class="line">            |     +--------------+    |</div><div class="line">            |     |EventProducers|    |</div><div class="line">            |     |  +-------+   |  register  +-------+</div><div class="line">            |     |  |Produce|   &lt;----+-------+Produce|</div><div class="line">            |     |  +-------+   |    |       +-------+</div><div class="line">            |     |  +-------+   |    |</div><div class="line">            |     |  |Produce|   |    |</div><div class="line">            |     |  +-------+   |    |</div><div class="line">            |     +--------------+    |</div><div class="line">            |            |            |</div><div class="line">            |          event          |</div><div class="line">            |            |            |</div><div class="line"> post(event)|    +-------v--------+   |</div><div class="line">+----------------&gt; Dispatch Queue |   |</div><div class="line">            |    +-------+--------+   |</div><div class="line">            |            |            |</div><div class="line">            |          event          |</div><div class="line">            |            |            |</div><div class="line">            |     +------v------+     |</div><div class="line">            |     |EventHandlers|     |</div><div class="line">            |     | +---------+ |     |</div><div class="line">            |     | |Subscribe| |   register  +---------+</div><div class="line">            |     | +---------+ &lt;-----+-------+Subscribe|</div><div class="line">            |     | +---------+ |     |       +---------+</div><div class="line">            |     | |Subscribe| |     |</div><div class="line">            |     | +---------+ |     |</div><div class="line">            |     +-------------+     |</div><div class="line">            |                         |</div><div class="line">            +-------------------------+</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面介绍了&lt;a href=&quot;http://liuguoquan727.github.io/2016/04/17/Android_Otto%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/&quot;&gt;Otto的使用情况&lt;/a&gt;，下面开始进入Otto的源码分析之
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="源码分析" scheme="http://liuguoquan727.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Okhttp使用详解</title>
    <link href="http://liuguoquan727.github.io/2016/04/17/Android%20Okhttp%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://liuguoquan727.github.io/2016/04/17/Android Okhttp使用详解/</id>
    <published>2016-04-17T14:04:06.000Z</published>
    <updated>2016-04-30T02:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Okhttp是高性能的http库，支持同步、异步，而且实现了spdy、http2、websocket协议，api很简洁易用，和volley一样实现了http协议的缓存。Okhttp已经被Android官方采用，实现了几乎和Java.net.HttpURLConnection一样的功能。</p>
<h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p><a href="http://square.github.io/okhttp/" target="_blank" rel="external">官方介绍：http://square.github.io/okhttp/</a><br><a href="https://github.com/square/okhttp" target="_blank" rel="external">Github源代码：https://github.com/square/okhttp</a></p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li>一般的Get请求</li>
<li>一般的Post请求</li>
<li>基于Http的文件上传</li>
<li>文件下载</li>
<li>加载图片</li>
<li>支持请求回调，直接返回对象、对象集合</li>
<li>支持session的保持</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="Http-Get"><a href="#Http-Get" class="headerlink" title="Http Get"></a>Http Get</h2><p>对于网络加载库，最常用的就是http get请求，比如获取一个网页的内容。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//1.创建OkHttpClient对象</span></div><div class="line">    OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">    <span class="comment">//2.创建一个Request</span></div><div class="line">    <span class="keyword">final</span> Request mRequest = <span class="keyword">new</span> Request.Builder().url(<span class="string">"https://www.baidu.com"</span>).build();</div><div class="line"></div><div class="line">    <span class="comment">//3.创建Call对象</span></div><div class="line">    Call mCall = mOkHttpClient.newCall(mRequest);</div><div class="line"></div><div class="line">    <span class="comment">//4.请求加入调度</span></div><div class="line">    mCall.enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mMsgTxt.setText(<span class="string">"failure"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, <span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">//字符串</span></div><div class="line">            <span class="keyword">final</span> String msg = response.body().string();</div><div class="line">            <span class="comment">//字节数组</span></div><div class="line">            <span class="keyword">byte</span>[] msgBytes = response.body().bytes();</div><div class="line">            <span class="comment">//流</span></div><div class="line">            InputStream inputStream = response.body().byteStream();</div><div class="line"></div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mMsgTxt.setText(msg);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是发送一个Get请求的步骤</p>
<ol>
<li>首先构造一个Request对象，参数最少有个url，可以通过Request.Builder设置更多的参数，比如：header、method等。</li>
<li>然后通过Request的对象去够着一个Call对象，类似于将你的请求封装成任务。</li>
<li>最后，我们希望以异步的方式去执行请求，所以我们调用的是call.equeue，将call加入调度队列，然后等待任务执行完成，在Callback中即可得到结果。注意，回调方法都是运行在子线程中，如果需要操作控件，需要使用Handler切换到主线程。</li>
</ol>
<p>上面是异步的方式执行get请求，当然也支持阻塞的方式，直接调用call.execute()方法返回一个Response。如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//阻塞调用</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Response response = mCall.execute();</div><div class="line">			System.out.println(response.body().string());</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<h2 id="Http-post请求"><a href="#Http-post请求" class="headerlink" title="Http post请求"></a>Http post请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Request request = buildMultipartFormRequest(</div><div class="line">        url, <span class="keyword">new</span> File[]&#123;file&#125;, <span class="keyword">new</span> String[]&#123;fileKey&#125;, <span class="keyword">null</span>);</div><div class="line">FormEncodingBuilder builder = <span class="keyword">new</span> FormEncodingBuilder();   </div><div class="line">builder.add(<span class="string">"username"</span>,<span class="string">"liuguoquan"</span>);</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                   .url(url)</div><div class="line">                .post(builder.build())</div><div class="line">                .build();</div><div class="line"> mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback()&#123;&#125;);</div></pre></td></tr></table></figure>
<p>Post请求时，参数是包含在请求体中的，所以我们通过FormEncodingBuilder，添加多个String键值对，然后去构造RequestBody，最后完成Request的构造。</p>
<h2 id="基于Http的文件上传"><a href="#基于Http的文件上传" class="headerlink" title="基于Http的文件上传"></a>基于Http的文件上传</h2><p>接下来构造一个RequestBody的Builder叫做MultipartBuilder。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">File file = new File(Environment.getExternalStorageDirectory(), "balabala.mp4");</div><div class="line"></div><div class="line">RequestBody fileBody = RequestBody.create(MediaType.parse("application/octet-stream"), file);</div><div class="line"></div><div class="line">RequestBody requestBody = new MultipartBuilder()</div><div class="line">     .type(MultipartBuilder.FORM)</div><div class="line">     .addPart(Headers.of(</div><div class="line">          "Content-Disposition", </div><div class="line">              "form-data; name=\"username\""), </div><div class="line">          RequestBody.create(null, "liu"))</div><div class="line">     .addPart(Headers.of(</div><div class="line">         "Content-Disposition", </div><div class="line">         "form-data; name=\"mFile\"; </div><div class="line">         filename=\"wjd.mp4\""), fileBody)</div><div class="line">     .build();</div><div class="line"></div><div class="line">Request request = new Request.Builder()</div><div class="line">    .url("http://192.168.1.103:8080/okHttpServer/fileUpload")</div><div class="line">    .post(requestBody)</div><div class="line">    .build();</div><div class="line"></div><div class="line">Call call = mOkHttpClient.newCall(request);</div><div class="line">call.enqueue(new Callback()</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上述代码向服务器传递了一个键值对username：liu和一个文件。通过MultipartBuilder的addPart方法可以添加键值对或者文件。</p>
<h2 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h2><p>图片下载和文件下载，这两个是通过回调的Response拿到byte[]然后解码成图片；文件下载就是拿到InputStream后做写文件操作。</p>
<p>参考文章：</p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/23781773" target="_blank" rel="external">从原理角度解析Android （Java） http 文件上传</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0106/2275.html" target="_blank" rel="external">泡网：OkHttp使用教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Okhttp是高性能的http库，支持同步、异步，而且实现了spdy、http2、websocket协议，api很简洁易用，和volley一样实现了http协议的缓存。Okhttp已经被Android官方采用，实现了几乎和Java.net.HttpURLConnection
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="实战" scheme="http://liuguoquan727.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Otto使用详解</title>
    <link href="http://liuguoquan727.github.io/2016/04/17/Android_Otto%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://liuguoquan727.github.io/2016/04/17/Android_Otto使用详解/</id>
    <published>2016-04-17T12:04:06.000Z</published>
    <updated>2016-04-25T13:04:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Otto是Square推出的基于Guava项目的Android支持库，otto是一个事件总线，用于应用程序的不同组件之间进行有效的通信。OTTO是基于Observer的设计模式。它有发布者，订阅者这两个主要对象。OTTO的最佳实践就是通过反射牺牲了微小的性能，同时极大的降低了程序的耦合度。</p>
<p>Otto官网: <a href="http://square.github.io/otto/" target="_blank" rel="external">http://square.github.io/otto/</a></p>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>Otto框架的主要功能是帮助我们来降低多个组件通信之间的耦合度（解耦）。</p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>比如：由界面A跳转至界面B，然后点击B中的Button发送消息更新界面A的视图；<br>比如：界面有一个界面A，A里面有个Fragment，点击Fragment中的一个Button，跳转至界面B，点击界面B的Button来更新界面A的Fragment视图，等等。</p>
<p>上面列出的两种场景，以前可以用startActivityForResult和interface的方式实现的话会比较麻烦，并且产生了很多的状态判断和逻辑判断，并且可能产生很多不必要的bug，代码量也比较大和繁琐，使用Otto就可以容易的避免这些问题。</p>
<h1 id="基本用法实例"><a href="#基本用法实例" class="headerlink" title="基本用法实例"></a>基本用法实例</h1><h2 id="添加Otto"><a href="#添加Otto" class="headerlink" title="添加Otto"></a>添加Otto</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.squareup:otto:1.3.8'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实现一个Bus的单例"><a href="#实现一个Bus的单例" class="headerlink" title="实现一个Bus的单例"></a>实现一个Bus的单例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  单例Bus对象</div><div class="line"> * Created by Michael on 2016/4/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BusProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Bus bus = <span class="keyword">new</span> Bus();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bus <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BusProvider</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义一个Event事件，封装消息"><a href="#自定义一个Event事件，封装消息" class="headerlink" title="自定义一个Event事件，封装消息"></a>自定义一个Event事件，封装消息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义一个Event事件，用来封装信息</div><div class="line"> * Created by Michael on 2016/4/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventFirst</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String msg;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventFirst</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.msg = msg;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MainActivity，订阅事件"><a href="#MainActivity，订阅事件" class="headerlink" title="MainActivity，订阅事件"></a>MainActivity，订阅事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mBtn1;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">//订阅事件</span></div><div class="line">        BusProvider.getInstance().register(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mBtn1 = (Button) findViewById(R.id.btn_1);</div><div class="line"></div><div class="line">        mBtn1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,BActivity.class));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理事件EventFirst</div><div class="line">     * <span class="doctag">@param</span> event</div><div class="line">     */</div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventFirst</span><span class="params">(EventFirst event)</span> </span>&#123;</div><div class="line"></div><div class="line">        mBtn1.setText(event.msg);</div><div class="line">        System.out.println(<span class="string">"onEventFirst:"</span> + event.msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventSecond</span><span class="params">(EventFirst event)</span> </span>&#123;</div><div class="line"></div><div class="line">        mBtn1.setText(event.msg);</div><div class="line">        System.out.println(<span class="string">"onEventFirst:"</span> + event.msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="comment">//取消订阅</span></div><div class="line">        BusProvider.getInstance().register(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Subscrible这个注解在调用了register之后有效，表示订阅一个事件，并且方法用public修饰，方法名可以任意取，参数为自定义的事件类，Otto根据事件对象的类名来判断和处理对应的事件。</p>
<h2 id="BActivity发送订阅事件"><a href="#BActivity发送订阅事件" class="headerlink" title="BActivity发送订阅事件"></a>BActivity发送订阅事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_b);</div><div class="line"></div><div class="line"><span class="comment">//        BusProvider.getInstance().register(this);</span></div><div class="line"></div><div class="line">        mBtn = (Button) findViewById(R.id.btn_1);</div><div class="line"></div><div class="line">        mBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"> <span class="comment">//               BusProvider.getInstance().post(new EventFirst("Event First"));</span></div><div class="line">                BusProvider.getInstance().post(produceEventFirst());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 产生事件</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Produce</span></div><div class="line">    <span class="function"><span class="keyword">public</span> EventFirst <span class="title">produceEventFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EventFirst(<span class="string">"Event First"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"><span class="comment">//        BusProvider.getInstance().unregister(this);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Produce注解告诉Bus该函数是一个事件产生者，产生的事件类型为该函数的返回值。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>点击BActivity中的按钮发送消息，然后返回至MainActivity中，打印如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">04</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">52</span>:<span class="number">13.179</span> <span class="number">24744</span>-<span class="number">24744</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.ottodemo</span> I/System<span class="selector-class">.out</span>: onEventSecond:Event First</div><div class="line"><span class="number">04</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">52</span>:<span class="number">13.179</span> <span class="number">24744</span>-<span class="number">24744</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.ottodemo</span> I/System<span class="selector-class">.out</span>: onEventFirst:Event First</div></pre></td></tr></table></figure>
<p>结果说明：@Subscrible注解的消息处理函数时根据事件对象的类名来确定事件类型，这里的两个方法的参数都是EventFirst类型，所以两个方法都处理了EventFirst事件消息。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过例子我们可以发现，其实事件发布者不用@Produce注解和注册事件也可以发布消息。但是你要Subscribe订阅事件就一定要register这个类了,否则是接受不到事件的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Otto是Square推出的基于Guava项目的Android支持库，otto是一个事件总线，用于应用程序的不同组件之间进行有效的通信。OTTO是基于Observer的设计模式。它有发布者，订阅者这两个主要对象。OTTO的最佳实践就是通过反射牺牲了微小的性能，同时极大的降低
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="实战" scheme="http://liuguoquan727.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>EventBus使用详解</title>
    <link href="http://liuguoquan727.github.io/2016/04/17/Android_EventBus%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://liuguoquan727.github.io/2016/04/17/Android_EventBus使用详解/</id>
    <published>2016-04-17T11:22:20.000Z</published>
    <updated>2016-04-30T02:21:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>EventBus是一个Android事件发布/订阅框架，通过解耦发布者和订阅者简化Android事件传递，这里的事件可以理解为消息。事件传递既可以用于Android四大组件间通讯，也可以用于异步线程和主线程间通讯等。<br>传统的事件传递方式包括：Handler、BroadcastReceiver、Interface回调，相比之下EventBus的有点是代码简洁，使用简单，并将事件发布和 订阅充分解耦。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>事件Event： </strong>又可成为消息，其实就是一个对象，可以是网络请求返回的字符串，也可以是某个开关状态等等。事件类型EventType是指事件所属的Class。</p>
<p>事件分为一般事件和Sticky事件，相对于一般事件，Sticky事件不同之处在于，当事件发布后，再有订阅者开始订阅该类型事件，依然能收到该类型事件的最近一个Sticky事件。</p>
<p><strong>订阅者Subscriber： </strong>订阅某种事件类型的对象，当有发布者发布这类事件后，EventBus会执行订阅者的onEvent函数，这个函数叫事件响应函数。订阅者通过register接口订阅某个事件类型，unregister接口退订。订阅者存在优先级，优先级高的订阅者可以取消事件继续向优先级低的订阅者分发，默认所有订阅者优先级都为0。</p>
<p><strong>发布者Publisher： </strong>发布某事件的对象，通过post接口发布事件。</p>
<h2 id="GitHub地址"><a href="#GitHub地址" class="headerlink" title="GitHub地址"></a>GitHub地址</h2><p><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus源码：https://github.com/greenrobot/EventBus</a></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="自定义一个事件类"><a href="#自定义一个事件类" class="headerlink" title="自定义一个事件类"></a>自定义一个事件类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnyEventType</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">AnyEventType</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="在要接受消息的页面注册"><a href="#在要接受消息的页面注册" class="headerlink" title="在要接受消息的页面注册"></a>在要接受消息的页面注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<h3 id="接收消息的方法"><a href="#接收消息的方法" class="headerlink" title="接收消息的方法"></a>接收消息的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Subscribe</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(AnyEventType event)</span> </span>&#123;<span class="comment">/* Do something */</span>&#125;;</div></pre></td></tr></table></figure>
<h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(event);</div></pre></td></tr></table></figure>
<h3 id="取消注册"><a href="#取消注册" class="headerlink" title="取消注册"></a>取消注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面我们来实现一个具体的例子来介绍EventBus的基本使用。</p>
<p>需求如下：在MainActivity中注册EventBus事件，并实现事件响应方法，当点击MainActivity中的按钮时跳转到SecondActivity，当点击SecondActivity中的按钮时向MainActivity发送Event事件，当MainActivity收到事件后，将事件内容显示在TextView中。</p>
<ol>
<li><p>MainActivity<br><img src="http://7xs7a3.com1.z0.glb.clouddn.com/EventBus_before.png" alt="MainActivity"></p>
</li>
<li><p>SecondActivity<br><img src="http://7xs7a3.com1.z0.glb.clouddn.com/EnventBus_middle.png" alt=""></p>
</li>
<li><p>事件处理<br><img src="http://7xs7a3.com1.z0.glb.clouddn.com/EventBus_Afer.png" alt=""></p>
</li>
</ol>
<h3 id="事件类Event"><a href="#事件类Event" class="headerlink" title="事件类Event"></a>事件类Event</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><p>在OnCreate()函数中注册EventBus，在Ondestroy()函数中反注册。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.btn_open)</div><div class="line">    Button mOpenBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.tv_showinfo)</div><div class="line">    TextView mInfoTxt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//注册</span></div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 事件响应方法</div><div class="line">     * 接收消息</div><div class="line">     * <span class="doctag">@param</span> event</div><div class="line">     */</div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        mInfoTxt.setText(msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//绑定点击事件</span></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_open)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSecondActivity</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">            startActivity(intent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="comment">//反注册</span></div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SecondActivity"><a href="#SecondActivity" class="headerlink" title="SecondActivity"></a>SecondActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.btn_post)</div><div class="line">    Button mPostBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_second);</div><div class="line"></div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"></div><div class="line">        mPostBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        <span class="comment">//发送事件</span></div><div class="line">                        EventBus.getDefault().post(<span class="keyword">new</span> Event(<span class="string">"Just do it"</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="EventBus的事件订阅函数"><a href="#EventBus的事件订阅函数" class="headerlink" title="EventBus的事件订阅函数"></a>EventBus的事件订阅函数</h2><h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><p>在上面的例子中，我们再注解<code>@Subscribe(threadMode = ThreadMode.MAIN)</code>中使用了ThreadMode.MAIN这个模式，表示该函数在主线程即UI线程中执行，实际上EventBus总共有四种线程模式，分别是：</p>
<ul>
<li><p>ThreadMode.MAIN：表示无论事件是在哪个线程发布出来的，该事件订阅方法onEvent都会在UI线程中执行，这个在Android中是非常有用的，因为在Android中只能在UI线程中更新UI，所有在此模式下的方法是不能执行耗时操作的。</p>
</li>
<li><p>ThreadMode.POSTING：表示事件在哪个线程中发布出来的，事件订阅函数onEvent就会在这个线程中运行，也就是说发布事件和接收事件在同一个线程。使用这个方法时，在onEvent方法中不能执行耗时操作，如果执行耗时操作容易导致事件分发延迟。</p>
</li>
<li><p>ThreadMode.BACKGROUND：表示如果事件在UI线程中发布出来的，那么订阅函数onEvent就会在子线程中运行，如果事件本来就是在子线程中发布出来的，那么订阅函数直接在该子线程中执行。</p>
</li>
<li><p>ThreadMode.AYSNC：使用这个模式的订阅函数，那么无论事件在哪个线程发布，都会创建新的子线程来执行订阅函数。</p>
</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="如何调用不同的订阅函数"><a href="#如何调用不同的订阅函数" class="headerlink" title="如何调用不同的订阅函数"></a>如何调用不同的订阅函数</h3><p>要调用四种不同模式的订阅函数，我们首先要用清楚EventBus是如何指定调用的函数的？</p>
<p>先回顾一下上一节中的例子是如何调用订阅函数onEvent的，首先新建一个事件类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发布事件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(<span class="keyword">new</span> Event(<span class="string">"Just do it"</span>));</div></pre></td></tr></table></figure></p>
<p>订阅事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 事件响应方法</div><div class="line"> * <span class="doctag">@param</span> event</div><div class="line"> */</div><div class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMain</span><span class="params">(Event event)</span> </span>&#123;</div><div class="line"></div><div class="line">    String msg = event.getMessgae();</div><div class="line">    mInfoTxt.setText(msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>观察可以发现：发布事件中的参数是Event的实例，而订阅函数中的参数也是Event的实例，可以推断EventBus是通过post函数传进去的类的实例来确定调用哪个订阅函数的，是哪个就调用哪个，如果有多个订阅函数呢，那么这些函数都会被调用！</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面我们来验证这个推断：</p>
<p>我们在基本使用章节的例子上进行扩展，首先建立四个类：FirstEvent、SecondEvent、ThirdEvent、FourthEvent。</p>
<p>FirstEvent.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstEvent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstEvent</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SecondEvent.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondEvent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecondEvent</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ThirdEvent.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdEvent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThirdEvent</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FourthEvent.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourthEvent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FourthEvent</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在MainActivity中，增加四种模式的订阅函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.btn_open)</div><div class="line">    Button mOpenBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.tv_showinfo)</div><div class="line">    TextView mInfoTxt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//注册</span></div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 事件响应方法</div><div class="line">     * <span class="doctag">@param</span> event</div><div class="line">     */</div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMain</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        Log.i(TAG, <span class="string">"onEventMain: "</span> + event.getMessgae());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.POSTING)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventPosting</span><span class="params">(SecondEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        Log.i(TAG, <span class="string">"onEventPosting: "</span>+ event.getMessgae());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventBackgroud</span><span class="params">(ThirdEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        Log.i(TAG, <span class="string">"onEventBackgroud: "</span> + event.getMessgae());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.ASYNC)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventAsync</span><span class="params">(FourthEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        Log.i(TAG, <span class="string">"onEventAsync: "</span> + event.getMessgae());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//绑定点击事件</span></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_open)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSecondActivity</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">            startActivity(intent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="comment">//反注册</span></div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来在SecondActivity中增加四个按钮，分别发送不同类别的事件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_second);</div><div class="line"></div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_post)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostA</span><span class="params">()</span> </span>&#123;</div><div class="line">        EventBus.getDefault().post(<span class="keyword">new</span> FirstEvent(<span class="string">"FirstEvent"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_post2)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostB</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        EventBus.getDefault().post(<span class="keyword">new</span> SecondEvent(<span class="string">"SecondEvent"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_post3)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostC</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        EventBus.getDefault().post(<span class="keyword">new</span> ThirdEvent(<span class="string">"ThirdEvent"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_post4)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostD</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        EventBus.getDefault().post(<span class="keyword">new</span> FourthEvent(<span class="string">"FourthEvent"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后，分别顺序点击SecondActivity的四个按钮，打印信息如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">02</span>:<span class="number">53</span>:<span class="number">45.950</span> <span class="number">4779</span>-<span class="number">4779</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventMain: FirstEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">02</span>:<span class="number">53</span>:<span class="number">47.528</span> <span class="number">4779</span>-<span class="number">4779</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventPosting: SecondEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">02</span>:<span class="number">53</span>:<span class="number">48.882</span> <span class="number">4779</span>-<span class="number">4940</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventBackgroud: ThirdEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">02</span>:<span class="number">53</span>:<span class="number">50.462</span> <span class="number">4779</span>-<span class="number">4940</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventAsync: FourthEvent</div></pre></td></tr></table></figure>
<blockquote>
<p>由此可见，通过发布不同的事件类的实例，EventBus根据类的实例分别调用了不同的订阅函数来处理事件。</p>
</blockquote>
<p>那么，当同一个类的实例有多个函数订阅时，结果会是怎样呢？答案是，这些函数都会执行。下面我们来验证一下，将MainActivity中订阅函数的参数都改为FirstEvent，代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 事件响应方法</div><div class="line">  * <span class="doctag">@param</span> event</div><div class="line">  */</div><div class="line"> <span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMain</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">     String msg = event.getMessgae();</div><div class="line">     Log.i(TAG, <span class="string">"onEventMain: "</span> + event.getMessgae());</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Subscribe</span>(threadMode = ThreadMode.POSTING)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventPosting</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">     String msg = event.getMessgae();</div><div class="line">     Log.i(TAG, <span class="string">"onEventPosting: "</span>+ event.getMessgae());</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventBackgroud</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">     String msg = event.getMessgae();</div><div class="line">     Log.i(TAG, <span class="string">"onEventBackgroud: "</span> + event.getMessgae());</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Subscribe</span>(threadMode = ThreadMode.ASYNC)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventAsync</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">     String msg = event.getMessgae();</div><div class="line">     Log.i(TAG, <span class="string">"onEventAsync: "</span> + event.getMessgae());</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>运行程序，点击SecondActivity的FirstEvent按钮，打印信息如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07.032</span> <span class="number">23611</span>-<span class="number">23746</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventAsync: FirstEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07.033</span> <span class="number">23611</span>-<span class="number">23611</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventMain: FirstEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07.033</span> <span class="number">23611</span>-<span class="number">23611</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventPosting: FirstEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07.034</span> <span class="number">23611</span>-<span class="number">23748</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventBackgroud: FirstEvent</div></pre></td></tr></table></figure>
<blockquote>
<p>分析可知，当SecondActivity发送FirstEvent事件过来的时候，这个四个订阅函数会同时接收到这个事件并执行。</p>
</blockquote>
<p><strong>总结： </strong>订阅函数的执行是根据参数中的事件类的类名来决定的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;EventBus是一个Android事件发布/订阅框架，通过解耦发布者和订阅者简化Android事件传递，这里的事件可以理解为消息。事件传递
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="实战" scheme="http://liuguoquan727.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Android开发模式之MVP</title>
    <link href="http://liuguoquan727.github.io/2016/04/17/Android%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8BMVP/"/>
    <id>http://liuguoquan727.github.io/2016/04/17/Android开发模式之MVP/</id>
    <published>2016-04-17T07:28:06.000Z</published>
    <updated>2016-04-17T07:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在开发Android App时，越到最后肯定会发现，Activity的负担非常重，既要初始化控件，又要写一些逻辑操作的展示等等，很多Activity中的代码都充当了Controller和Model的角色，因而发现Activity违背了单一职责原则，负担过重。所以，MVP架构模式应运而生。</p>
<h2 id="MVP架构是什么"><a href="#MVP架构是什么" class="headerlink" title="MVP架构是什么"></a>MVP架构是什么</h2><p>MVP就是Model-View-Presenter，MVP是从经典的MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，MVP与MVC有着一个重大的区别：在MVP中View并不会直接使用Model，它们之间的通信是通过Presenter（MVC中是Controller）来进行的，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过Controller。</p>
<p>在MVC里，View是可以直接访问Model的，从而View里会包含Model信息，不可避免的还要包括一些业务逻辑。在MVC模型里，更关注的是Model的不变，而同时有多个对Model的不同显示的View。所有在MVC模型里，Model不依赖于View，但是View依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。</p>
<p>用流程图的方式解释就更清楚了：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/mvp-mvp%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="MVP流程图"></p>
<h2 id="MVC与MVP的区别"><a href="#MVC与MVP的区别" class="headerlink" title="MVC与MVP的区别"></a>MVC与MVP的区别</h2><h3 id="MVP架构"><a href="#MVP架构" class="headerlink" title="MVP架构"></a>MVP架构</h3><blockquote>
<p>View：对应于Activity，负责View的绘制以及与用户交互、<br>Model：业务逻辑和实体模型<br>Presenter：负责完成View与Model间的交互</p>
</blockquote>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/mvp-mvp.png" alt="MVP示意图"></p>
<ul>
<li>View不直接与Model交互，而是通过Presenter交互来与Model间接交互</li>
<li>Presenter与View的交互是通过接口来进行的</li>
<li>通过View与Presenter是一对一的，但复杂的View可能绑定多个Presenter来处理逻辑</li>
</ul>
<h3 id="MVC架构"><a href="#MVC架构" class="headerlink" title="MVC架构"></a>MVC架构</h3><blockquote>
<p>View：对应于布局文件<br>Model：业务逻辑和实体模型<br>Controller：对应于Activity</p>
</blockquote>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/mvp-mvc.png" alt="mvc示意图"></p>
<ul>
<li>View可以和Model直接交互</li>
<li>Controller是基于行为的，并且可以被多个View共享。</li>
<li>可以复杂决定显示哪个View</li>
</ul>
<p>总的就是说：从MVC到MVP的一个转变，就是减少了Activity的职责，减轻了它的负担，简化了Activity中的代码和一些操作，将逻辑代码提取到了Presenter中进行处理，降低其耦合度。</p>
<p>在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。</p>
<h3 id="MVP的优点"><a href="#MVP的优点" class="headerlink" title="MVP的优点"></a>MVP的优点</h3><ul>
<li>降低耦合度，隐藏数据，Activity中代码更简洁</li>
<li>模块职责划分明显</li>
<li>方便测试驱动开发</li>
<li>代码复用度较高</li>
<li>代码灵活性增强</li>
</ul>
<h2 id="MVP架构模式示例"><a href="#MVP架构模式示例" class="headerlink" title="MVP架构模式示例"></a>MVP架构模式示例</h2><p>这个示例是根据用户id获取用户信息并展示的一个过程，其中获取信息用了一个线程进行了模拟获取。</p>
<p>先看一下MVP包结构图：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/mvp-mvp%E5%8C%85%E7%BB%93%E6%9E%84.png" alt=""></p>
<h3 id="1-Model层"><a href="#1-Model层" class="headerlink" title="1.Model层"></a>1.Model层</h3><p>首先是建一个JavaBean User实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.mvpdemo.bean;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String id;</div><div class="line">	<span class="keyword">private</span> String sex;</div><div class="line">	<span class="keyword">private</span> String age;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sex;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sex = sex;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建Model层抽象接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGetUser</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfo</span><span class="params">(<span class="keyword">int</span> id,OnUserInfoListener listener)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnUserInfoListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoSuccess</span><span class="params">(User user)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoFailed</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Model层抽象接口实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetUserInfo</span> <span class="keyword">implements</span> <span class="title">IGetUser</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfo</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> OnUserInfoListener listener)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				SystemClock.sleep(<span class="number">5000</span>); <span class="comment">//模拟子线程耗时操作</span></div><div class="line"></div><div class="line">				<span class="keyword">if</span> (id == <span class="number">1</span>) &#123;</div><div class="line">					User user = <span class="keyword">new</span> User();</div><div class="line">					user.setName(<span class="string">"liu"</span>);</div><div class="line">					user.setAge(<span class="string">"27"</span>);</div><div class="line">					user.setSex(<span class="string">"男"</span>);</div><div class="line">					user.setId(<span class="string">"1"</span>);</div><div class="line">					listener.getUserInfoSuccess(user);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					listener.getUserInfoFailed();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-View层"><a href="#2-View层" class="headerlink" title="2.View层"></a>2.View层</h3><p>Presenter和View交互是通过接口，所有我们需要定义一个IShowUserView的接口，这个接口封装的方法基本都跟视图展示有关。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IShowUserView</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toMainActivity</span><span class="params">(User user)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFailedError</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-Presenter层"><a href="#3-Presenter层" class="headerlink" title="3.Presenter层"></a>3.Presenter层</h3><p>Presenter是Model和View之间交互的桥梁，里面有一些业务逻辑的操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoPresenter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> IGetUser iGetUser;</div><div class="line">	<span class="keyword">private</span> IShowUserView iShowUserView;</div><div class="line">	<span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserInfoPresenter</span><span class="params">(IShowUserView iShowUserView)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.iShowUserView = iShowUserView;</div><div class="line">		<span class="keyword">this</span>.iGetUser = <span class="keyword">new</span> GetUserInfo();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoToShow</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		iShowUserView.showLoading();</div><div class="line">		iGetUser.getUserInfo(id, <span class="keyword">new</span> OnUserInfoListener() &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoSuccess</span><span class="params">(<span class="keyword">final</span> User user)</span> </span>&#123;</div><div class="line">				<span class="comment">// UI线程执行</span></div><div class="line">				mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">					</div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">						<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">						iShowUserView.toMainActivity(user);</div><div class="line">						iShowUserView.hideLoading();</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoFailed</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">					</div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">						<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">						iShowUserView.showFailedError();</div><div class="line">						iShowUserView.hideLoading();</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-Activity中调用"><a href="#4-Activity中调用" class="headerlink" title="4.Activity中调用"></a>4.Activity中调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">IShowUserView</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> TextView mNameTxt;</div><div class="line">	<span class="keyword">private</span> TextView mAgeTxt;</div><div class="line">	<span class="keyword">private</span> TextView mSexTxt;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Button mLoadBtn;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> ProgressDialog mDialog;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> UserInfoPresenter mPresenter;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		mPresenter = <span class="keyword">new</span> UserInfoPresenter(<span class="keyword">this</span>);</div><div class="line">		</div><div class="line">		mDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">		</div><div class="line">		mNameTxt = (TextView) findViewById(R.id.tv_name);</div><div class="line">		mAgeTxt = (TextView) findViewById(R.id.tv_age);</div><div class="line">		mSexTxt = (TextView) findViewById(R.id.tv_sex);</div><div class="line">		mLoadBtn = (Button) findViewById(R.id.btn_load);</div><div class="line">		mLoadBtn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				mPresenter.getUserInfoToShow(<span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mDialog.show();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mDialog.dismiss();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toMainActivity</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mNameTxt.setText(user.getName());</div><div class="line">		mAgeTxt.setText(user.getAge());</div><div class="line">		mSexTxt.setText(user.getSex());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFailedError</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Toast.makeText(<span class="keyword">this</span>, <span class="string">"Load failed"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看出，虽说是代码量增加了，但是Activity中的代码变得简洁起来，程序也清晰明了，好处还是很多的。好记性不如烂笔头，勤加练习和实践。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在开发Android App时，越到最后肯定会发现，Activity的负担非常重，既要初始化控件，又要写一些逻辑操作的展示等等，很多Acti
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
      <category term="架构" scheme="http://liuguoquan727.github.io/categories/Android/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://liuguoquan727.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Android-Universal-Image-Loader源码分析</title>
    <link href="http://liuguoquan727.github.io/2016/04/17/Android-Universal-Image-Loader%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://liuguoquan727.github.io/2016/04/17/Android-Universal-Image-Loader源码分析/</id>
    <published>2016-04-17T07:25:31.000Z</published>
    <updated>2016-04-19T14:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1><h2 id="Android-Universal-Image-Loader"><a href="#Android-Universal-Image-Loader" class="headerlink" title="Android-Universal-Image-Loader"></a>Android-Universal-Image-Loader</h2><p>Android-Universal-Image-Loader是一个强大的、可高度定制的开源图片缓存框架，简称UIL。简单的说UIL就做了一件事–获取图片并显示在相应的控件上。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>添加完依赖后再Application或Activity中初始化ImageLoader，一般式在Application中初始化，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UILApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">		initImageLoader(getApplicationContext());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initImageLoader</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//缓存目录</span></div><div class="line">		File cacheDir = StorageUtils.getCacheDirectory(context);</div><div class="line">		<span class="comment">//添加配置需求</span></div><div class="line">		ImageLoaderConfiguration config = <span class="keyword">new</span> ImageLoaderConfiguration.Builder(context)</div><div class="line">		  .memoryCacheExtraOptions(<span class="number">480</span>, <span class="number">800</span>) <span class="comment">// default = device screen dimensions</span></div><div class="line">		  .diskCacheExtraOptions(<span class="number">480</span>, <span class="number">800</span>, CompressFormat.JPEG, <span class="number">75</span>, <span class="keyword">null</span>)</div><div class="line">		  .taskExecutor(...)</div><div class="line">		  .taskExecutorForCachedImages(...)</div><div class="line">		  .threadPoolSize(<span class="number">3</span>) <span class="comment">// default 线程池大小</span></div><div class="line">		  .threadPriority(Thread.NORM_PRIORITY - <span class="number">1</span>) <span class="comment">// default 线程优先级</span></div><div class="line">		  .tasksProcessingOrder(QueueProcessingType.FIFO) <span class="comment">// default 任务队列模式</span></div><div class="line">		  .denyCacheImageMultipleSizesInMemory()</div><div class="line">		  .memoryCache(<span class="keyword">new</span> LruMemoryCache(<span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>)) <span class="comment">//</span></div><div class="line">		  .memoryCacheSize(<span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>)</div><div class="line">		  .memoryCacheSizePercentage(<span class="number">13</span>) <span class="comment">// default</span></div><div class="line">		  .diskCache(<span class="keyword">new</span> UnlimitedDiscCache(cacheDir)) <span class="comment">// default</span></div><div class="line">		  .diskCacheSize(<span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>)</div><div class="line">		  .diskCacheFileCount(<span class="number">100</span>)</div><div class="line">		  .diskCacheFileNameGenerator(<span class="keyword">new</span> HashCodeFileNameGenerator()) <span class="comment">// default</span></div><div class="line">		  .imageDownloader(<span class="keyword">new</span> BaseImageDownloader(context)) <span class="comment">// default</span></div><div class="line">		  .imageDecoder(<span class="keyword">new</span> BaseImageDecoder()) <span class="comment">// default</span></div><div class="line">		  .defaultDisplayImageOptions(DisplayImageOptions.createSimple()) <span class="comment">// default</span></div><div class="line">		  .writeDebugLogs()</div><div class="line">		  .build();</div><div class="line"></div><div class="line">		<span class="comment">// 初始化ImageLoader配置</span></div><div class="line">		ImageLoader.getInstance().init(config);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ImageLoaderConfiguration表示ImageLoader的配置信息，可包括图片最大尺寸、线程池、下载器、缓存等参数的配置。</p>
<h3 id="Manifest配置"><a href="#Manifest配置" class="headerlink" title="Manifest配置"></a>Manifest配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</div><div class="line"></div><div class="line">&lt;application</div><div class="line">	android:name=<span class="string">".UILApplication"</span></div><div class="line">	``</div><div class="line">	``</div><div class="line">	``</div><div class="line">/application&gt;</div></pre></td></tr></table></figure>
<p>添加网络权限和添加读写外部存储权限</p>
<h3 id="下载显示图片"><a href="#下载显示图片" class="headerlink" title="下载显示图片"></a>下载显示图片</h3><p>下载图片，解析为Bitmap并在ImageView中显示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ImageLoadingListener animateFirstListener = <span class="keyword">new</span> AnimateFirstDisplayListener();</div><div class="line"></div><div class="line"><span class="keyword">private</span> DisplayImageOptions options;</div><div class="line"></div><div class="line">ImageAdapter(Context context) &#123;</div><div class="line">		inflater = LayoutInflater.from(context);</div><div class="line">		</div><div class="line">		<span class="comment">//下载图片选项</span></div><div class="line">options = <span class="keyword">new</span> DisplayImageOptions.Builder()</div><div class="line">		.showImageOnLoading(R.drawable.ic_stub) <span class="comment">//下载中</span></div><div class="line">		.showImageForEmptyUri(R.drawable.ic_empty) <span class="comment">//空URL</span></div><div class="line">		.showImageOnFail(R.drawable.ic_error) <span class="comment">//失败</span></div><div class="line">		.cacheInMemory(<span class="keyword">true</span>)</div><div class="line">		.cacheOnDisk(<span class="keyword">true</span>)</div><div class="line">		.considerExifParams(<span class="keyword">true</span>)</div><div class="line">		.displayer(<span class="keyword">new</span> CircleBitmapDisplayer(Color.WHITE, <span class="number">5</span>))</div><div class="line">		.build();</div><div class="line"><span class="comment">//显示图片</span></div><div class="line">ImageLoader.getInstance().displayImage(imageUrl, holder.image, options, animateFirstListener);	</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">*监听下载图片，传递Bitmap给回调接口</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimateFirstDisplayListener</span> <span class="keyword">extends</span> <span class="title">SimpleImageLoadingListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; displayedImages = Collections.synchronizedList(<span class="keyword">new</span> LinkedList&lt;String&gt;());</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadingComplete</span><span class="params">(String imageUri, View view, Bitmap loadedImage)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (loadedImage != <span class="keyword">null</span>) &#123;</div><div class="line">			ImageView imageView = (ImageView) view;</div><div class="line">			<span class="keyword">boolean</span> firstDisplay = !displayedImages.contains(imageUri);</div><div class="line">			<span class="keyword">if</span> (firstDisplay) &#123;</div><div class="line">				FadeInBitmapDisplayer.animate(imageView, <span class="number">500</span>);</div><div class="line">				displayedImages.add(imageUri);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>可配置度高。支持任务线程池、下载器、解码器、内存及磁盘缓存、显示选项等的配置。</li>
<li>包含内存缓存和磁盘缓存两级缓存。</li>
<li>支持多线程，支持异步和同步加载</li>
<li>支持多种缓存算法、下载进度监听、ListView图片错乱解决等。</li>
</ul>
<h1 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h1><h2 id="总体设计框图"><a href="#总体设计框图" class="headerlink" title="总体设计框图"></a>总体设计框图</h2><p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-overall-design.png" alt="UIL框架图"></p>
<p>上面是UIL的总体框架图。整个库主要分为ImageLoader、ImageLoaderEngine、Cache、ImageDownloader、ImageDecoder、BitmapDisplayer、BitmapProcessor七大模块，其中Cache分为Memory Cache和DiskCache两部分。</p>
<p>简单的讲就是ImageLoader收到加载及显示图片的任务，并将它交给ImageLoaderEngine，ImageLoaderEngine分发任务到具体线程池去执行，任务通过Cache及ImageDownloader获取图片，中间可能经过BitmapProcessor和ImageDecoder处理，最终转换为Bitmap交给BitmapDisplayer在ImageAware中显示。</p>
<h2 id="UIL中的概念"><a href="#UIL中的概念" class="headerlink" title="UIL中的概念"></a>UIL中的概念</h2><ul>
<li><strong>ImageLoaderEngine</strong></li>
</ul>
<p>任务分发器，负责分发LoadAndDisplayImageTask和ProcessAndDisplayImageTask给具体的线程去执行。</p>
<ul>
<li><strong>LoadAndDisplayImageTask</strong></li>
</ul>
<p>用于加载并显示图片的任务。</p>
<ul>
<li><strong>ProcessAndDisplayImageTask</strong></li>
</ul>
<p>用于处理并显示图片的任务。</p>
<ul>
<li><strong>DisplayBitmapTask</strong></li>
</ul>
<p>用于显示图片的任务</p>
<ul>
<li><strong>ImageAware</strong></li>
</ul>
<p>显示图片的对象，可以是ImageView等。</p>
<ul>
<li><strong>BitmapDisplayer</strong></li>
</ul>
<p>将Bitmap对象显示在相应的控件ImageAware上。</p>
<ul>
<li><strong>ImageDownloader</strong></li>
</ul>
<p>图片下载器，负责从图片的各个来源获取输入流</p>
<ul>
<li><strong>MemoryCache</strong></li>
</ul>
<p>内存图片缓存，可向内存缓存图片或从内存读取图片</p>
<ul>
<li><strong>DiskCache</strong></li>
</ul>
<p>本地图片缓存，可向本地磁盘缓存保存图片或从本地磁盘读取图片</p>
<ul>
<li><strong>ImageDecoder</strong></li>
</ul>
<p>图片解码器，负责将图片输入流InputStream转换为Bitmap对象。</p>
<ul>
<li><strong>BitmapProcessor</strong></li>
</ul>
<p>图片处理器，负责从缓存读取或写入前对图片进行处理</p>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-flow.png" alt="图片加载及显示流程图"></p>
<p>上图为图片加载及显示流程图,可知有三种情况:</p>
<ul>
<li>[ 1 ] - 图片没有缓存</li>
</ul>
<p>先下载图片，然后显示图片，同时异步将图片缓存到磁盘和内存中。</p>
<ul>
<li>[ 2 ] - 图片缓存在磁盘上</li>
</ul>
<p>若图片不在缓存中，则从磁盘缓存中查找图片，然后将图片解码为Bitmap对象并显示在控件上。</p>
<ul>
<li>[ 3 ] - Bitmap对象缓存在内存里</li>
</ul>
<p>直接从内存缓存取出相应的Bitmap对象并显示在控件上。</p>
<h1 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h1><h2 id="类关系图"><a href="#类关系图" class="headerlink" title="类关系图"></a>类关系图</h2><p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-relation-class.png" alt="类关系图"></p>
<h2 id="核心类介绍"><a href="#核心类介绍" class="headerlink" title="核心类介绍"></a>核心类介绍</h2><h3 id="ImageLoader-java"><a href="#ImageLoader-java" class="headerlink" title="ImageLoader.java"></a>ImageLoader.java</h3><p>图片加载器，对外的主要API，采用了<strong>单例设计模式</strong>，用于图片的加载和显示。</p>
<p>主要函数：</p>
<ul>
<li>getInstance()</li>
</ul>
<p>得到ImageLoader单例，通过双层是否为null判断提高性能。</p>
<ul>
<li>init(ImageLoaderConfiguration configuration)</li>
</ul>
<p>初始化配置参数，参数为configuration为ImageLoader的配置信息，包括图片最大尺寸、任务线程池、磁盘缓存、下载器、解码器等等。实现中会初始化ImageLoaderEngine engine属性，该属性为任务分发器。</p>
<ul>
<li>displayImage(String uri, ImageAware imageAware, DisplayImageOptions options, ImageLoadingListener listener, ImageLoadingProgressListener progressListener)</li>
</ul>
<p>加载并显示图片或加载并执行回调接口。ImageLoader加载图片主要分为三类接口：</p>
<ol>
<li>displayImage()表示异步加载并显示图片到对应的ImageAware上。</li>
<li>loadImage()表示异步加载图片并执行回调接口。</li>
<li>loadImageSync()表示同步加载图片。</li>
</ol>
<p>以上三类接口最终都会调用到这个函数进行图片加载。函数参数解释如下：</p>
<p>Uri: 图片的uri，uri支持多种来源的图片，包括http、https、file、content、assets、drawable及自定义<br>ImageAware： 一个接口，表示需要加载图片的对象，可包装View。<br>Options： 图片显示的配置项。比如加载前、加载中、加载失败应该显示的占位图片，图片是否需要在磁盘缓存，是否需要在内存缓存等。<br>listener： 图片加载各种时刻的回调接口，包括开始加载、加载失败、加载成功、取消加载四个时刻的回调函数。<br>progressListener： 图片加载进度的回调接口。</p>
<p>函数流程图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-display-image-flow-chart.png" alt=""></p>
<h3 id="ImageLoaderConfiguration-java"><a href="#ImageLoaderConfiguration-java" class="headerlink" title="ImageLoaderConfiguration.java"></a>ImageLoaderConfiguration.java</h3><p>ImageLoader的配置信息，包括图片最大尺寸、线程池、缓存、下载器、解码器等等。</p>
<p>主要属性：</p>
<ul>
<li><p>Resources resources 程序本地资源访问器，用于加载DisplayImageOptions中设置的一些App中图片资源。</p>
</li>
<li><p>int maxImageWidthForMemoryCache 内存缓存的图片最大宽度。</p>
</li>
<li><p>int maxImageHeightForMemoryCache 内存缓存的图片最大高度。</p>
</li>
<li><p>int maxImageWidthForDiskCache 磁盘缓存的图片最大宽度。</p>
</li>
<li><p>int maxImageHeightForDiskCache 磁盘缓存的图片最大高度。</p>
</li>
<li><p>BitmapProcessor processorForDiskCache 图片处理器，用于处理从磁盘缓存中读取到的图片。</p>
</li>
<li><p>Executor taskExecutor  ImageLoaderEngine中用于执行从源获取图片的任务</p>
</li>
<li><p>Executor taskExecutorForCachedImages ImageLoaderEngine中用于执行从缓存获取图片任务的Executor。</p>
</li>
<li><p>boolean customExecutor 用户是否自定义了上面的taskExecutor</p>
</li>
<li><p>boolean customExecutorForCachedImages 用户是否自定义了上面的taskExecutorForCachedImages</p>
</li>
<li><p>int threadPoolSize 上面两个默认线程池的核心池大小，即最大并发数</p>
</li>
<li><p>int threadPriority 上面默认线程池的线程优先级。</p>
</li>
<li><p>QueueProcessingType tasksProcessingType 上面两个默认线程池的线程队列类型，目前只有FIFO，LIFO两种选择</p>
</li>
<li><p>MemoryCache MemoryCache 图片内存缓存</p>
</li>
<li><p>DiskCache diskCache 图片磁盘缓存，一般放在SD卡</p>
</li>
<li><p>ImageDownloader downloader 图片下载器</p>
</li>
<li><p>ImageDecoder decoder 图片解码器，内部可使用我们常见的BitmapFactory.decode()将图片资源解码成Bitmap对象</p>
</li>
<li><p>DisplayImageOptions defaultDisplayImageOptions 图片显示的配置项。比如加载前、加载中、加载失败应该显示的占位图片，图片是否需要在磁盘缓存，是否需要在内存缓存等。</p>
</li>
<li><p>ImageDownloader networkDeniedDownloader 不允许访问网络的图片下载器</p>
</li>
<li><p>ImageDownloader slowNetworkDownloader 慢网络情况下的图片下载器</p>
</li>
</ul>
<h3 id="ImageLoaderConfiguration-Builder-java-静态内部类"><a href="#ImageLoaderConfiguration-Builder-java-静态内部类" class="headerlink" title="ImageLoaderConfiguration.Builder.java 静态内部类"></a>ImageLoaderConfiguration.Builder.java 静态内部类</h3><p><strong>Builder模式</strong>，用于构造参数繁多的ImageLoaderConfiguration。其属性与ImageLoaderConfiguration类似，函数多是属性设置函数。</p>
<p>主要函数及含义：</p>
<ul>
<li>builder()</li>
</ul>
<p>按照配置，生成ImageLoaderConfiguration。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ImageLoaderConfiguration <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">	initEmptyFieldsWithDefaultValues();</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ImageLoaderConfiguration(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>initEmptyFieldsWithDefaultValues()</li>
</ul>
<p>初始化值为null的属性。若用户没有配置相关项，UIL会通过调用DefaultConfigurationFactory中的函数返回一个默认值当配置。</p>
<p>taskExecutorForCacheImages、taskExecutor及ImageLoaderEngine的taskDistributor的默认值如下：</p>
<table>
<thead>
<tr>
<th>parameters</th>
<th>taskDistributor</th>
<th>taskExecutorForCacheImages/taskExecutor</th>
</tr>
</thead>
<tbody>
<tr>
<td>corePoolSize</td>
<td>0</td>
<td>3</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>Integer.MAX_VALUE</td>
<td>3</td>
</tr>
<tr>
<td>keepAliveTime</td>
<td>60</td>
<td>3</td>
</tr>
<tr>
<td>unit</td>
<td>SECONDS</td>
<td>MILLISECONDS</td>
</tr>
<tr>
<td>workQueue</td>
<td>SynchronousQueue</td>
<td>LIFOLinkedBlockingDequeu/LinkedBlockingQueue</td>
</tr>
<tr>
<td>priority</td>
<td>5</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>diskCacheFileNameGenerator默认值为HashCodeFileNameGenerator</p>
<p>memoryCache默认值为LruMemoryCache。如果内存缓存不允许缓存一张图片的多个尺寸，则用FuzzyKeyMemoryCache做封装，同一个图片新的尺寸会覆盖缓存中该图片老的尺寸。</p>
<p>diskCache默认值与diskCacheSize和diskCacheFileCount值有关，如果他们有一个大于0，则默认为LruDiskCache，否则使用无大小限制的UnlimitedDiskCache。</p>
<p>downloader默认值为BaseImageDownloader。</p>
<p>decoder默认值为BaseImageDecoder</p>
<p>defaultDisplayImageOptions为Builder().build()</p>
<ul>
<li>denyCacheImageMultipleSizeInMemory()</li>
</ul>
<p>设置内存缓存不允许缓存一张图片的多个尺寸，默认允许。后面会讲到的View的getWidth()在初始化前后的不同值与这个设置的关系。</p>
<ul>
<li>diskCacheSize(int maxCacheSize)</li>
</ul>
<p>设置磁盘缓存的最大字节数，如果大于0或者下面的maxFileCount大于0，默认的DiskCache会用LruDiskCache，否则使用无大小限制的UnlimitedDiskCache。</p>
<ul>
<li>diskCacheFileCount(int maxFileCount)</li>
</ul>
<p>设置磁盘缓存的最大文件数，如果大于0或者上面的maxCacheSize大于0，默认的DiskCache会用LruDiskCache，否则使用无大小限制的UnlimitedDiskCache。</p>
<h3 id="ImageLoaderConfiguration-NetworkDeniedDownloader-java-静态内部类"><a href="#ImageLoaderConfiguration-NetworkDeniedDownloader-java-静态内部类" class="headerlink" title="ImageLoaderConfiguration.NetworkDeniedDownloader.java 静态内部类"></a>ImageLoaderConfiguration.NetworkDeniedDownloader.java 静态内部类</h3><p>不允许访问网络的图片下载器，实现了ImageDownloader接口。实现也比较简单，包装了一个ImageDownloader对象，通过getStream()函数中禁止Http和Https Scheme禁止网络访问，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkDeniedImageDownloader</span> <span class="keyword">implements</span> <span class="title">ImageDownloader</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ImageDownloader wrappedDownloader;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NetworkDeniedImageDownloader</span><span class="params">(ImageDownloader wrappedDownloader)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.wrappedDownloader = wrappedDownloader;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> InputStream <span class="title">getStream</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		<span class="keyword">switch</span> (Scheme.ofUri(imageUri)) &#123;</div><div class="line">			<span class="keyword">case</span> HTTP:</div><div class="line">			<span class="keyword">case</span> HTTPS:</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				<span class="keyword">return</span> wrappedDownloader.getStream(imageUri, extra);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ImageLoaderConfiguration-SlowNetworkingImageDownloader-java-静态内部类"><a href="#ImageLoaderConfiguration-SlowNetworkingImageDownloader-java-静态内部类" class="headerlink" title="ImageLoaderConfiguration.SlowNetworkingImageDownloader.java 静态内部类"></a>ImageLoaderConfiguration.SlowNetworkingImageDownloader.java 静态内部类</h3><p>慢网络情况下的图片下载器，实现了ImageDownloader接口。<br>通过包装一个ImageDownloader对象实现，在getStream()函数中当Scheme为Http和Https时，用FlushedInputStream代替InputStream处理慢网络情况。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SlowNetworkImageDownloader</span> <span class="keyword">implements</span> <span class="title">ImageDownloader</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ImageDownloader wrappedDownloader;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SlowNetworkImageDownloader</span><span class="params">(ImageDownloader wrappedDownloader)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.wrappedDownloader = wrappedDownloader;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> InputStream <span class="title">getStream</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		InputStream imageStream = wrappedDownloader.getStream(imageUri, extra);</div><div class="line">		<span class="keyword">switch</span> (Scheme.ofUri(imageUri)) &#123;</div><div class="line">			<span class="keyword">case</span> HTTP:</div><div class="line">			<span class="keyword">case</span> HTTPS:</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> FlushedInputStream(imageStream);</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				<span class="keyword">return</span> imageStream;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ImageLoaderEngine-java"><a href="#ImageLoaderEngine-java" class="headerlink" title="ImageLoaderEngine.java"></a>ImageLoaderEngine.java</h3><p>LoadAndDisplayImageTask和ProcessAndDisplayImageTask任务分发器，负责分发任务给具体的线程池。</p>
<p>主要属性：</p>
<ul>
<li>ImageLoaderConfiguration configuration</li>
</ul>
<p>ImageLoader的配置信息，可包括图片最大尺寸、线程池、缓存、下载器、解码器等等。</p>
<ul>
<li>Executor taskExecutor</li>
</ul>
<p>用于执行从源执行获取图片任务的Executor，为configuration中的taskExecutor，如果为null，则会调用DefaultConfigurationFactory.createExecutor()根据配置返回一个默认的线程池。</p>
<ul>
<li>Executor taskExecutorForCachedImages</li>
</ul>
<p>用于执行从缓存获取图片任务的Executor，为configuration中的taskExecutorForCachedImages，如果为null，则会调用DefaultConfigurationFactory.createExecutor()根据配置返回一个默认的线程池。</p>
<ul>
<li>Executor taskDistributor</li>
</ul>
<p>任务分发线程池，任务指LoadAndDisplayImageTask和ProcessAndDisplayImageTask，因为需要分发给上面的两个Executor去执行任务，不存在较耗时或阻塞操作，所以无并发数（Int最大值）限制的线程池即可。</p>
<ul>
<li>Map cacheKeysForImageAwares</li>
</ul>
<p>ImageAware与内存缓存key对应的map，key为ImageAware的id，value为内存缓存的key。</p>
<ul>
<li>Map uriLocks</li>
</ul>
<p>图片正在加锁的重入锁map，key为图片的uri，value为标识其正在加载的重入锁。</p>
<ul>
<li>AtomicBoolean pause</li>
</ul>
<p>是否被暂停。如果为true，则所有新的加载或显示任务都会等待直到取消暂停（为false）</p>
<ul>
<li>AtomicBooleannetWorkDenied</li>
</ul>
<p>是否不允许访问网络，如果为true，通过回调ImageLoadingListener.onLoadingFailed()获取图片，则所有不在缓存中需要网络访问的请求都会失败，返回失败的原因为：网络访问被禁止。</p>
<ul>
<li>AtomicBoolean slowNetwork</li>
</ul>
<p>是否是慢网络情况，如果未true，则自动调用SlowNetworkImageDownloader下载图片</p>
<ul>
<li>Object pauseLock</li>
</ul>
<p>暂停的等待锁，可在engine被暂停后调用这个锁等待</p>
<p>主要函数：</p>
<ul>
<li>void submit(final LoadAndDisplayImageTask task)</li>
</ul>
<p>传入一个LoadAndDisplayImageTask，直接用taskDistributor执行一个Runnable，在Runnable内部根据图片是否被磁盘缓存过确定使用taskExecutorForCachedImages还是taskExecutor执行该task。</p>
<ul>
<li>void submit(ProcessAndDisplayImageTask task)</li>
</ul>
<p>传入一个ProcessAndDisplayImageTask，直接用taskExecutorForCachedImages执行该task，从缓存中去图片。</p>
<ul>
<li>void pause()</li>
</ul>
<p>暂停图片加载任务，所有新的加载或显示任务都会等待直到取消暂停为止。</p>
<ul>
<li>void resume()</li>
</ul>
<p>继续图片加载任务</p>
<ul>
<li>stop()</li>
</ul>
<p>暂停所有加载和显示图片任务并清除这里的内部属性值。</p>
<ul>
<li>fireCallBack(Runnable r)</li>
</ul>
<p>taskDistributor立即执行某个任务</p>
<ul>
<li>getLockForUri(String uri)</li>
</ul>
<p>得到某个uri的重入锁，如果不存在则新建一个</p>
<ul>
<li>private Executor createTaskExecutor()</li>
</ul>
<p>调用DefaultConfigurationFactor.createExecutor()创建一个线程池</p>
<ul>
<li>String getLoadingUriForView(ImageAware imageAware)</li>
</ul>
<p>得到某个ImageAware正在加载的图片uri</p>
<ul>
<li>prepareDisplayTaskFor(ImageAware imageAware, String memoryCacheKey)</li>
</ul>
<p>准备开始一个Task。向cacheKeysForImageAwares中插入ImageAware的id和图片在内存缓存中的key</p>
<ul>
<li>void cancelDisplayTaskFor(ImageAware imageAware)</li>
</ul>
<p>取消一个显示任务。从cacheKeysForImageAwares中删除ImageAware对应元素</p>
<ul>
<li>void denyNetworkDownloads(boolean denyNetworkDownloads)</li>
</ul>
<p>设置是否不允许网络访问</p>
<ul>
<li>void handleSlowNetwork(boolean handleSlowNetwork)</li>
</ul>
<p>设置是否慢网络情况</p>
<h3 id="DefaultConfigurationFactory-java"><a href="#DefaultConfigurationFactory-java" class="headerlink" title="DefaultConfigurationFactory.java"></a>DefaultConfigurationFactory.java</h3><p>为ImageLoaderConfiguration及ImageLoaderEngine提供一些默认配置</p>
<p>主要函数：</p>
<ul>
<li>Executor createExecutor(int threadPoolSize, int threadPriority,QueueProcessingType tasksProcessingType)</li>
</ul>
<p>创建线程池：<br>threadPoolSize表示核心线程池大小（最大并发数）<br>threadPriority表示线程优先级<br>tasksProcessingType表示线程队列类型，目前只有FIFO，LIFO两种可选择</p>
<p>内部实现会调用createThreadFactory(…)返回一个支持线程优先级设置，并且以固定规则命名新建的线程的线程工厂类DefaultConfigurationFactory.DefaultThreadFactory。</p>
<ul>
<li>Executor createTaskDistributor()</li>
</ul>
<p>为ImageLoaderEngine中的任务分发器taskDistributor提供线程池，该线程池为normal优先级的无并发大小限制的线程池。</p>
<ul>
<li>FileNameGenerator createFileNameGenerator()</li>
</ul>
<p>返回一个HashCodeFileNameGenerator对象，即以uri HashCode为文件名的文件名生成器。</p>
<ul>
<li>DiskCache createDiskCache(Context context, FileNameGenerator diskCacheFileNameGenerator,long diskCacheSize, int diskCacheFileCount)</li>
</ul>
<p>创建一个 Disk Cache。如果 diskCacheSize 或者 diskCacheFileCount 大于 0，返回一个LruDiskCache，否则返回无大小限制的UnlimitedDiskCache。</p>
<ul>
<li>MemoryCache createMemoryCache(Context context, int memoryCacheSize)</li>
</ul>
<p>创建一个 Memory Cache。返回一个LruMemoryCache，若 memoryCacheSize 为 0，则设置该内存缓存的最大字节数为App最大可用内存的1/8。这里的App的最大可用内存也支持系统在Honeycomb之后（Api Level &gt;= 11)application中android:largeHeap=”true”的设置。</p>
<ul>
<li>ImageDownloader createImageDownloader(Context context)</li>
</ul>
<p>创建图片下载器，返回一个BaseImageDownloader。</p>
<ul>
<li>ImageDecoder createImageDecoder(boolean loggingEnabled)</li>
</ul>
<p>创建图片解码器，返回一个BaseImageDecoder。</p>
<ul>
<li>BitmapDisplayer createBitmapDisplayer()</li>
</ul>
<p>创建图片显示器，返回一个SimpleBitmapDisplayer。</p>
<h3 id="DefaultConfigurationFactory-DefaultThreadFactory"><a href="#DefaultConfigurationFactory-DefaultThreadFactory" class="headerlink" title="DefaultConfigurationFactory.DefaultThreadFactory"></a>DefaultConfigurationFactory.DefaultThreadFactory</h3><p>默认的线程工厂类，为</p>
<p>DefaultConfigurationFactory.createExecutor(…)<br>和<br>DefaultConfigurationFactory.createTaskDistributor(…)<br>提供线程工厂。支持线程优先级设置，并且以固定规则命名新建的线程。</p>
<h3 id="ImageAware"><a href="#ImageAware" class="headerlink" title="ImageAware"></a>ImageAware</h3><p>需要显示图片的对象的接口，可包装View表示某个需要显示图片的View。</p>
<p>主要函数：</p>
<ul>
<li>View getWrappedView()</li>
</ul>
<p>得到被包装的View，图片显示在该View上</p>
<ul>
<li>int getWidth()和int getHeight()</li>
</ul>
<p>得到宽度高度，在计算图片缩放比例时会用到</p>
<ul>
<li>int getId()</li>
</ul>
<p>得到唯一标识id。ImageLoaderEngine中用这个id标识正在加载图片的ImageAware和图片内存缓存key的对应关系，图片请求前会将内存缓存key与新的内存缓存key进行比较，如果不相等，则之前的图片请求会被取消。这样当ImageAware被复用时就不会因异步加载（前面任务未取消）而造成错乱了。</p>
<h3 id="ViewAware-java"><a href="#ViewAware-java" class="headerlink" title="ViewAware.java"></a>ViewAware.java</h3><p>封装Android View来显示图片的抽象类，实现类ImageAware接口，利用Reference来Wrap View防止内存泄露。</p>
<p>主要函数：</p>
<ul>
<li>ViewAware(View view, boolean checkActualViewSize)</li>
</ul>
<p>构造函数：<br>view表示需要显示图片的对象<br>checkActualViewSize表示通过getWidth()和getHeight()获取图片宽高时返回真实的宽和高，还是LayoutParams的宽高，true表示返回真实宽和高。</p>
<p>如果为true会导致一个问题，view在还没有初始化完成时加载图片，这是它的真实宽高为0，会取它LayoutParams的宽高，而图片缓存的key与这个宽高有关，所以当view的初始化完成再次需要加载该图片时，getWidth()和getHeight()返回的宽高都已经变化了，缓存key不一样，从而导致缓存读取失败会再次从网络下载一次图片。可通过ImageLoaderConfiguration.Builder.denyCacheImageMultipleSizesInMemory()设置不允许内存缓存缓存一张图片的多个尺寸。</p>
<ul>
<li>boolean setImageDrawable(Drawable drawable)</li>
</ul>
<p>如果当前操作在主线程并且View没有被回收，则调用抽象函数setImageDrawableInto(Drawable drawable, View view)去向view设置图片。</p>
<ul>
<li>boolean setImageBitmap(Bitmap bitmap)</li>
</ul>
<p>如果当前操作在主线程并且View没有被回收，则调用抽象函数setImageBitmapInto(Bitmap bitmap, View view)去向view设置图片。</p>
<h3 id="ImageViewAware-java"><a href="#ImageViewAware-java" class="headerlink" title="ImageViewAware.java"></a>ImageViewAware.java</h3><p>封装Android ImageView来显示图片的ImageAware，继承了viewAware，利用Reference来Wrap View防止内存泄露。</p>
<p>如果getWidth()函数小于等于0，会利用反射获取mMaxWidth的值作为宽。<br>如果getHeight()函数小于等于0，会利用反射获取mMaxHeight的值作为高。</p>
<h3 id="NonViewAware"><a href="#NonViewAware" class="headerlink" title="NonViewAware"></a>NonViewAware</h3><p>仅包含处理图片相关信息却没有需要显示图片的View的ImageAware，实现了ImageAware接口。常用于加载图片后调用回调接口而不是显示的情况。</p>
<h3 id="DisplayImagesOptions-java"><a href="#DisplayImagesOptions-java" class="headerlink" title="DisplayImagesOptions.java"></a>DisplayImagesOptions.java</h3><p>图片显示的配置项。比如加载前、加载中、加载失败应该显示的占位图片，图片是否需要在磁盘缓存，是否需要在memory缓存等。</p>
<p>主要属性及含义：</p>
<ul>
<li>int imageResOnLoading</li>
</ul>
<p>图片正在加载中的占位图片的resource id，优先级比下面的imageOnLoading高，当存在时，imageOnLoading不起作用。</p>
<ul>
<li>int imageResForEmptyUri</li>
</ul>
<p>空uri时的占位图片的resource id，优先级比下面的imageForEmptyUri高，当存在时，imageForEmptyUri不起作用。</p>
<ul>
<li>int imageResOnFail</li>
</ul>
<p>加载失败时的占位图片的resource id，优先级比下面的imageOnFail高，当存在时，imageOnFail不起作用。</p>
<ul>
<li>Drawable imageOnLoading</li>
</ul>
<p>加载中的占位图片的Drawable对象，默认为null</p>
<ul>
<li>Drawable imageForEmptyUri</li>
</ul>
<p>空uri时的占位图片drawable对象，默认为null</p>
<ul>
<li>boolean resetViewBeforeLoading</li>
</ul>
<p>在加载前是否重置view，通过Builder构建的对象默认为false</p>
<ul>
<li>boolean cacheInMemory</li>
</ul>
<p>是否缓存在内存中，通过Builder构建的对象默认为false。</p>
<ul>
<li>boolean cacheOnDisk</li>
</ul>
<p>是否缓存在磁盘中，通过Builder构建的对象默认为false。</p>
<ul>
<li>ImageScaleType imageScaleType</li>
</ul>
<p>图片的缩放类型，通过Builder构建的对象默认为IN_SAMPLE_POWER_OF_2</p>
<ul>
<li>Options decodingOptions</li>
</ul>
<p>为BitmapFactory.Options，用于BitmapFactory.decodeStream(imageStream, null, decodingOptions)得到图片尺寸等信息。</p>
<ul>
<li>int delayBeforeLoading</li>
</ul>
<p>设置在开始加载前的延迟时间，单位为毫秒，通过Builder构建的对象默认为0。</p>
<ul>
<li>boolean considerExitParams</li>
</ul>
<p>是否考虑图片的EXIF信息，通过Builder构建的对象默认为false。</p>
<ul>
<li>Object extraForDownloader</li>
</ul>
<p>下载器需要的辅助信息。下载时传入ImageDownloader.getStream(String,Object)的对象，方面用户自己扩展，默认为null</p>
<ul>
<li>BitmapProcessor preProcessor;</li>
</ul>
<p>缓存在内存之前的处理程序，默认为null</p>
<ul>
<li>BitmapProcessor postProcessor</li>
</ul>
<p>缓存在内存之后的处理程序，默认为null</p>
<ul>
<li>BitmapDisplayer displayer;</li>
</ul>
<p>图片的显示方式，通过Builder构建的对象默认为SimpleBitmapDisplayer</p>
<ul>
<li>Handler handler;</li>
</ul>
<p>handler对象，默认为null</p>
<ul>
<li>boolean isSyncLoading;</li>
</ul>
<p>是否同步加载，通过Builder构建的对象默认为false。</p>
<h3 id="DisplayImageOptions-Builder-java-静态内部类"><a href="#DisplayImageOptions-Builder-java-静态内部类" class="headerlink" title="DisplayImageOptions.Builder.java 静态内部类"></a>DisplayImageOptions.Builder.java 静态内部类</h3><p>Builder模式，用于构造参数繁多的DisplayImageOptions。</p>
<h3 id="ImageLoadingListener"><a href="#ImageLoadingListener" class="headerlink" title="ImageLoadingListener"></a>ImageLoadingListener</h3><p>图片加载各种时刻的回调接口，可在图片加载的某些点做监听。<br>包括开始加载（onLoadingStarted）、加载失败（onLoadingFailed）、加载成功（onLoadingComplete）、取消加载（onLoadingCancelled）四个回调函数。</p>
<h3 id="SimpleImageLoadingListener"><a href="#SimpleImageLoadingListener" class="headerlink" title="SimpleImageLoadingListener"></a>SimpleImageLoadingListener</h3><p>实现ImageLoadingListener接口，不过各个函数都是空实现，表示不在Image加载过程中做任何回调监听实现。ImageLoader.displayImage()函数中当listener传入值为null时的默认值。</p>
<h3 id="ImageLoadingProgressListener-java"><a href="#ImageLoadingProgressListener-java" class="headerlink" title="ImageLoadingProgressListener.java"></a>ImageLoadingProgressListener.java</h3><p>Image加载进度的回调接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageLoadingProgressListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Is called when image loading progress changed.</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> imageUri Image URI</div><div class="line">	 * <span class="doctag">@param</span> view     View for image. Can be &lt;b&gt;null&lt;/b&gt;.</div><div class="line">	 * <span class="doctag">@param</span> current  Downloaded size in bytes</div><div class="line">	 * <span class="doctag">@param</span> total    Total size in bytes</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(String imageUri, View view, <span class="keyword">int</span> current, <span class="keyword">int</span> total)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>会在获取图片存储到文件系统时被调用，其中total表示图片总大小，为网络请求结果Response Header中content-length字段，如果不存在则为-1。</p>
<h3 id="DisplayBitmapTask-java"><a href="#DisplayBitmapTask-java" class="headerlink" title="DisplayBitmapTask.java"></a>DisplayBitmapTask.java</h3><p>显示图片的Task，实现类Runnable接口，必须在主线程调用。</p>
<p>主要函数：</p>
<ul>
<li>run()</li>
</ul>
<p>首先判断ImageAware是否被GC回收，如果是直接调用取消加载回调接口listener.onLoadingCancelled()；<br>否则判断ImageAware是否被复用，如果是直接调用取消加载回调接口listener.onLoadingCancelled()；<br>否则调用diaplay显示图片，并将ImageAware从正在加载的map中移除。调用加载成功回调接口listener.onLoadingComplete()；</p>
<p>对于ListView或是GridView这里缓存item的View来说，单个Item中如果含有ImageView，在滑动过程中可能因为异步加载及View复用导致图片错乱，这里对ImageAware是否被复用的判断就能很好的解决这个问题。原因类似：<a href="http://www.trinea.cn/android/android-listview-display-error-image-when-scroll/" target="_blank" rel="external"><br>Android ListView滑动过程中图片显示重复错位闪烁问题解决</a></p>
<h3 id="ProcessAndDisplayImageTask-java"><a href="#ProcessAndDisplayImageTask-java" class="headerlink" title="ProcessAndDisplayImageTask.java"></a>ProcessAndDisplayImageTask.java</h3><p>处理并显示图片的Task，实现了Runnable接口。</p>
<p>主要函数：</p>
<ul>
<li>run()</li>
</ul>
<p>主要通过imageLoadingInfo得到BitmapProcessor处理图片，并且处理后的图片和配置新建一个DisplayBitmapTask在ImageAware中显示图片。</p>
<h3 id="LoadAndDisplayImageTask-java"><a href="#LoadAndDisplayImageTask-java" class="headerlink" title="LoadAndDisplayImageTask.java"></a>LoadAndDisplayImageTask.java</h3><p>加载并显示图片的Task，实现了Runnable接口，用于从网络、文件系统或内存获取图片并解析，然后调用DisplayBitmapTask在ImageAware中显示图片。</p>
<p>主要函数：</p>
<ul>
<li>run()</li>
</ul>
<p>获取图片并显示，核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">bmp = configuration.memoryCache.get(memoryCacheKey);</div><div class="line"><span class="keyword">if</span> (bmp == <span class="keyword">null</span> || bmp.isRecycled()) &#123;</div><div class="line">	bmp = tryLoadBitmap();</div><div class="line">	<span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span>; <span class="comment">// listener callback already was fired</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (bmp != <span class="keyword">null</span> &amp;&amp; options.isCacheInMemory()) &#123;</div><div class="line">		L.d(LOG_CACHE_IMAGE_IN_MEMORY, memoryCacheKey);</div><div class="line">		configuration.memoryCache.put(memoryCacheKey, bmp);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (bmp != <span class="keyword">null</span> &amp;&amp; options.shouldPostProcess()) &#123;</div><div class="line">		L.d(LOG_POSTPROCESS_IMAGE, memoryCacheKey);</div><div class="line">		bmp = options.getPostProcessor().process(bmp);</div><div class="line">		<span class="keyword">if</span> (bmp == <span class="keyword">null</span>) &#123;</div><div class="line">			L.e(ERROR_POST_PROCESSOR_NULL, memoryCacheKey);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">DisplayBitmapTask displayBitmapTask = <span class="keyword">new</span> DisplayBitmapTask(bmp, imageLoadingInfo, engine, loadedFrom);</div><div class="line">runTask(displayBitmapTask, syncLoading, handler, engine);</div></pre></td></tr></table></figure>
<p>从上面代码可以看到显示从内存缓存中去读bitmap对象，若bitmap对象不存在，则调用tryLoadBitma()函数获取bitmap对象，获取成功后若在DisplayImageOptions.Builder中设置类cacheInMemory(true),同时将Bitmap对象缓存到内存中。最后新建DisplayBitmapTask对象显示图片。</p>
<p>函数流程图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-load-display-flow-chart.png" alt=""></p>
<ol>
<li>判断图片的内存缓存是否存在，若存在直接执行步骤8；</li>
<li>判断图片的内存缓存是否存在，若存在直接执行步骤5；</li>
<li>从网络上下载图片</li>
<li>将图片缓存在磁盘上</li>
<li>将图片decode成bitmap对象；</li>
<li>根据DisplayImageOptions配置对图片进行预处理；</li>
<li>将Bitmap对象缓存到内存中；</li>
<li>根据DisplayImageOptions配置对图片进行后处理；</li>
<li>执行DisplayBitmapTask将图片显示在相应的控件上；</li>
</ol>
<ul>
<li>tryLoadBitmap()</li>
</ul>
<p>从磁盘缓存或网络获取图片，核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">tryLoadBitmap</span><span class="params">()</span> <span class="keyword">throws</span> TaskCancelledException </span>&#123;</div><div class="line">	Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		File imageFile = configuration.diskCache.get(uri);</div><div class="line">		<span class="keyword">if</span> (imageFile != <span class="keyword">null</span> &amp;&amp; imageFile.exists() &amp;&amp; imageFile.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">			</div><div class="line">			...</div><div class="line">			</div><div class="line">			bitmap = decodeImage(Scheme.FILE.wrap(imageFile.getAbsolutePath()));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (bitmap == <span class="keyword">null</span> || bitmap.getWidth() &lt;= <span class="number">0</span> || bitmap.getHeight() &lt;= <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">			...</div><div class="line"></div><div class="line">			String imageUriForDecoding = uri;</div><div class="line">			<span class="keyword">if</span> (options.isCacheOnDisk() &amp;&amp; tryCacheImageOnDisk()) &#123;</div><div class="line">				imageFile = configuration.diskCache.get(uri);</div><div class="line">				<span class="keyword">if</span> (imageFile != <span class="keyword">null</span>) &#123;</div><div class="line">					imageUriForDecoding = Scheme.FILE.wrap(imageFile.getAbsolutePath());</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			checkTaskNotActual();</div><div class="line">			bitmap = decodeImage(imageUriForDecoding);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> bitmap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先根据uri看磁盘中是不是已经缓存了这个文件，如果已经缓存，调用decodeImage函数，将图片文件decode成Bitmap对象；如果Bitmap对象不合法或缓存文件不存在，判断是否需要缓存在磁盘，需要则调用tryCacheImageOnDisk()函数去下载并缓存图片到本地磁盘，再通过decodeImage(imageUri)函数将图片文件decode成bitmap对象，否则直接通过decodeImage(imageUriForDecoding)下载图片并解析。</p>
<h3 id="tryCacheImageOnDisk"><a href="#tryCacheImageOnDisk" class="headerlink" title="tryCacheImageOnDisk()"></a>tryCacheImageOnDisk()</h3><p>下载图片并存储在磁盘内，根据磁盘缓存图片最长宽高的配置处理图片</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryCacheImageOnDisk</span><span class="params">()</span> <span class="keyword">throws</span> TaskCancelledException </span>&#123;</div><div class="line">	L.d(LOG_CACHE_IMAGE_ON_DISK, memoryCacheKey);</div><div class="line"></div><div class="line">	<span class="keyword">boolean</span> loaded;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		loaded = downloadImage(); <span class="comment">//调用下载器并保存图片</span></div><div class="line">		<span class="keyword">if</span> (loaded) &#123;</div><div class="line">			<span class="keyword">int</span> width = configuration.maxImageWidthForDiskCache;</div><div class="line">			<span class="keyword">int</span> height = configuration.maxImageHeightForDiskCache;</div><div class="line">			<span class="keyword">if</span> (width &gt; <span class="number">0</span> || height &gt; <span class="number">0</span>) &#123;</div><div class="line">				L.d(LOG_RESIZE_CACHED_IMAGE_FILE, memoryCacheKey);</div><div class="line">				resizeAndSaveImage(width, height); <span class="comment">// TODO : process boolean result</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		L.e(e);</div><div class="line">		loaded = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> loaded;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你在ImageLoaderConfiguration中配置了maxImageWidthForDiskCache或者maxImageHeightForDiskCache，还会调用resizeAndSaveImage()函数，调整图片尺寸，并保存新的图片文件。</p>
<h3 id="downloadImage"><a href="#downloadImage" class="headerlink" title="downloadImage()"></a>downloadImage()</h3><p>下载图片并存储在磁盘内。调用getDownloader()得到ImageDownloader其下载图片。</p>
<h3 id="resizeAndSaveImage-int-maxWidth-int-maxHeight"><a href="#resizeAndSaveImage-int-maxWidth-int-maxHeight" class="headerlink" title="resizeAndSaveImage(int maxWidth,int maxHeight)"></a>resizeAndSaveImage(int maxWidth,int maxHeight)</h3><p>从磁盘缓存中得到图片，重新设置大小及进行一些处理后保存。</p>
<h3 id="geDownloader"><a href="#geDownloader" class="headerlink" title="geDownloader()"></a>geDownloader()</h3><p>根据ImageLoaderEngine配置得到下载器。<br>如果不允许访问网络，则使用不允许访问网络的图片下载器NetWorkDeniedImageDownloader；如果是慢网络情况，则使用慢网络情况下的图片下载器SlowNetworkImageDownloader；否则直接使用ImageLoaderConfiguration中的downloader。</p>
<h3 id="ImageLoadingInfo-java"><a href="#ImageLoadingInfo-java" class="headerlink" title="ImageLoadingInfo.java"></a>ImageLoadingInfo.java</h3><p>加载和显示图片任务需要的信息。成员变量如下：</p>
<p>String uri  图片url<br>String memoryCacheKey  图片缓存key<br>ImageAware imageAware  需要加载图片的对象<br>ImageSize targetSize  图片的显示尺寸<br>DisplayImageOptions options; 图片显示的配置项<br>ImageLoadingListener listener; 图片加载时状态的回调接口<br>ImageLoadingProgressListener progressListener; 图片加载进度的回调接口<br>ReentrantLock loadFromUriLock; 图片加载中的重入锁</p>
<h3 id="ImageDownloader-java"><a href="#ImageDownloader-java" class="headerlink" title="ImageDownloader.java"></a>ImageDownloader.java</h3><p>图片下载接口，待实现函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getString(String imageUri, Object extra)</div></pre></td></tr></table></figure>
<p>表示通过uri得到InputStream<br>通过内部定义的枚举Scheme，可以看出UIL支持哪些图片来源。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">HTTP</span>(<span class="string">"http"</span>), <span class="selector-tag">HTTPS</span>(<span class="string">"https"</span>), <span class="selector-tag">FILE</span>(<span class="string">"file"</span>), <span class="selector-tag">CONTENT</span>(<span class="string">"content"</span>), <span class="selector-tag">ASSETS</span>(<span class="string">"assets"</span>), <span class="selector-tag">DRAWABLE</span>(<span class="string">"drawable"</span>), <span class="selector-tag">UNKNOWN</span>(<span class="string">""</span>);</div></pre></td></tr></table></figure>
<h3 id="BaseImageDownloader-java"><a href="#BaseImageDownloader-java" class="headerlink" title="BaseImageDownloader.java"></a>BaseImageDownloader.java</h3><p>ImageDownloader的具体实现类。得到上面各种Scheme对应的图片InputStream。</p>
<p>主要函数：</p>
<ul>
<li>InputStream getStream(String imageUri, Object extra)</li>
</ul>
<p>函数内根据不同Scheme类型获取图片输入流</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getStream</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="keyword">switch</span> (Scheme.ofUri(imageUri)) &#123;</div><div class="line">		<span class="keyword">case</span> HTTP:</div><div class="line">		<span class="keyword">case</span> HTTPS:</div><div class="line">			<span class="keyword">return</span> getStreamFromNetwork(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> FILE:</div><div class="line">			<span class="keyword">return</span> getStreamFromFile(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> CONTENT:</div><div class="line">			<span class="keyword">return</span> getStreamFromContent(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> ASSETS:</div><div class="line">			<span class="keyword">return</span> getStreamFromAssets(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> DRAWABLE:</div><div class="line">			<span class="keyword">return</span> getStreamFromDrawable(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> UNKNOWN:</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">return</span> getStreamFromOtherSource(imageUri, extra);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>InputStream getStreamFromNetwork(String imageUri, Object extra)</li>
</ul>
<p>通过HttpURLConnection从网络获取图片的InputStream，支持response code为3xx的重定向。这里有个小细节代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">InputStream imageStream;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	imageStream = conn.getInputStream();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">	<span class="comment">// Read all data to allow reuse connection (http://bit.ly/1ad35PY)</span></div><div class="line">	IoUtils.readAndCloseStream(conn.getErrorStream());</div><div class="line">	<span class="keyword">throw</span> e;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!shouldBeProcessed(conn)) &#123;</div><div class="line">	IoUtils.closeSilently(imageStream);</div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Image request failed with response code "</span> + conn.getResponseCode());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在发生异常时会调用<code>conn.getErrorStream()</code>继续读取Error Stream，这是为了利用网络连接回收及复用，但有意思的是在2.2之前，HttpURLConnection有个重大Bug，调用close()函数会影响连接池，导致连接复用失效，不过2.3以后已经解决了此went。</p>
<ul>
<li>InputStream getStreamFromFile(String imageUri, Object extra)</li>
</ul>
<p>从文件系统获取图片的InputStream。如果uri的类型是Video，则得到video的缩略图返回，否则按照一般文件操作返回。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> InputStream <span class="title">getStreamFromFile</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	String filePath = Scheme.FILE.crop(imageUri);</div><div class="line">	<span class="keyword">if</span> (isVideoFileUri(imageUri)) &#123;</div><div class="line">		<span class="keyword">return</span> getVideoThumbnailStream(filePath); <span class="comment">//缩略图</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		BufferedInputStream imageStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(filePath), BUFFER_SIZE);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ContentLengthInputStream(imageStream, (<span class="keyword">int</span>) <span class="keyword">new</span> File(filePath).length());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>InputStream getStreamFromContent(String imageUri, Object extra)</li>
</ul>
<p>从ContentProvider获取图片的InputStream。<br>如果是video类型，则先从MediaStore得到video的缩略图返回；<br>如果是联系人类型，则通过<code>ContactsContract.Contacts.openContactPhotoInputStream(res, uri, true)</code>读取内容返回；<br>否则通过<code>ContentResolver..openInputStream(uri)</code>读取内容返回</p>
<ul>
<li>InputStream getStreamFromAssets(String imageUri, Object extra)</li>
</ul>
<p>从Assets文件夹中获取图片的InputStream</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> InputStream <span class="title">getStreamFromAssets</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	String filePath = Scheme.ASSETS.crop(imageUri);</div><div class="line">	<span class="keyword">return</span> context.getAssets().open(filePath);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>InputStream getStreamFromDrawable(String imageUri, Object extra)</li>
</ul>
<p>从Drawable资源中获取图片的InputStream。</p>
<ul>
<li>InputStream getStreamFromOtherSource(String imageUri, Object extra)</li>
</ul>
<p>UNKNOWN类型的处理，目前直接抛出不支持的异常</p>
<h3 id="MemoryCache-java"><a href="#MemoryCache-java" class="headerlink" title="MemoryCache.java"></a>MemoryCache.java</h3><p>Bitmap内存缓存接口，需要实现的接口包括get()、put()、remove()、clear()、keys()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemoryCache</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Puts value into cache by key</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">put</span><span class="params">(String key, Bitmap value)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Returns value by key. If there is no value for key then null will be returned. */</span></div><div class="line">	<span class="function">Bitmap <span class="title">get</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Removes item by key */</span></div><div class="line">	<span class="function">Bitmap <span class="title">remove</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Returns all keys of cache */</span></div><div class="line">	<span class="function">Collection&lt;String&gt; <span class="title">keys</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Remove all items from cache */</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BaseMemoryCache-java"><a href="#BaseMemoryCache-java" class="headerlink" title="BaseMemoryCache.java"></a>BaseMemoryCache.java</h3><p>实现了MemoryCache主要函数的抽象类，以<code>Map&lt;String, Reference&lt;Bitmap&gt;&gt; softMap</code>作为缓存池，利于虚拟机在内存不足是回收缓存对象。提供抽象函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Reference&lt;Bitmap&gt; <span class="title">createReference</span><span class="params">(Bitmap value)</span></span>;</div></pre></td></tr></table></figure>
<p>表示根据Bitmap创建一个Reference作为缓存对象。Reference可以是WeakReference、SoftReference等。</p>
<h3 id="WeakMemoryCache-java"><a href="#WeakMemoryCache-java" class="headerlink" title="WeakMemoryCache.java"></a>WeakMemoryCache.java</h3><p>以<code>WeakReference&lt;Bitmap&gt;</code>作为缓存value的内存缓存，实现了BaseMemoryCache的<code>createReference(Bitmap value)</code>函数，直接返回一个<code>new WeakReference&lt;Bitmap&gt;(value)</code>作为缓存value。</p>
<h3 id="LimitedMemoryCache-java"><a href="#LimitedMemoryCache-java" class="headerlink" title="LimitedMemoryCache.java"></a>LimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，继承自BaseMemoryCache抽象类。<br>会在put(…)函数中判断总体大小是否超出上限，超出则循环删除缓存对象直到小于上限。删除顺序由抽象函数<code>protected abstract Bitmap removeNext()</code>决定。抽象函数<code>protected abstract int getSize(Bitmap value)</code>表示每个元素大小。</p>
<h3 id="LargestLimitedMemoryCache-java"><a href="#LargestLimitedMemoryCache-java" class="headerlink" title="LargestLimitedMemoryCache.java"></a>LargestLimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满时优先删除size最大的元素，继承自LimitedMemoryCache。实现了LimitedMemoryCache的removeNext()函数，总是返回当前缓存中size最大的元素。</p>
<h3 id="UsingFreqLimitedMemoryCache-java"><a href="#UsingFreqLimitedMemoryCache-java" class="headerlink" title="UsingFreqLimitedMemoryCache.java"></a>UsingFreqLimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满时优先删除使用次数最少的元素，继承自LimitedMemoryCache。实现了LimitedMemoryCache的removeNext()函数，总是返回当前缓存中使用次数最少的元素。</p>
<h3 id="LRULimitedMemoryCache-java"><a href="#LRULimitedMemoryCache-java" class="headerlink" title="LRULimitedMemoryCache.java"></a>LRULimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满时优先删除最近最少使用的元素，继承自LimitedMemoryCache。通过<code>new LinkedHashMap&lt;String, Bitmap&gt;(10, 1.1f, true)</code>作为缓存池。LinkedHashMap第三个参数表示是否需要根据访问顺序(accessOrder)排序，true表示根据accessOrder排序，最近访问的跟最新加入的一样放到最后面，false表示根据插入顺序排序。这里为true且缓存满时始终删除第一个元素，即始终删除最近最少访问的元素。实现了LimitedMemoryCache的removeNext()函数，总是返回当前缓存中最近最少使用的元素。</p>
<h3 id="FIFOLimitedMemoryCache-java"><a href="#FIFOLimitedMemoryCache-java" class="headerlink" title="FIFOLimitedMemoryCache.java"></a>FIFOLimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满的时优先删除进入缓存的元素，继承自LimitedMemoryCache。实现了LimitedMemoryCache的removeNext()函数，总是返回当前缓存中最先进入缓存的元素。</p>
<blockquote>
<p><strong>以上所有LimitedMemoryCache子类都有个问题，就是Bitmap虽然通过WeakReference<bitmap>包装，但实际根本不会被虚拟机回收，因为他们子类中同时都保留了Bitmap的强引用。这些大都是UIL早期实现的版本，不推荐使用</bitmap></strong></p>
</blockquote>
<h3 id="LruMemoryCache-java"><a href="#LruMemoryCache-java" class="headerlink" title="LruMemoryCache.java"></a>LruMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满时优先删除最近最少使用的元素，实现了MemoryCache。LRU(Least Recently Used)为最少使用算法。</p>
<p>通过<code>new LinkedHashMap&lt;String, Bitmap&gt;(0, 0.75f, true)</code>作为缓存池。LinkedHashMap第三个参数表示是否需要根据访问顺序(accessOrder)排序，true表示根据accessOrder排序，最近访问的跟最新加入的一样放到最后面，false表示根据插入顺序排序。这里为true且缓存满时始终删除第一个元素，即始终删除最近最少访问的元素。</p>
<p>在put(..)函数中通过trimToSize(int maxtSize)函数判断总体大小是否超出了上限，是则删除缓存池中第一个元素，即最近最少使用的元素，指导总体大小小于上限。</p>
<p>LruMemory功能上谕LRULimitedMemoryCache类似，不过在实现上更加优雅，用简单的实现接口方式，而不是不断继承的方式。</p>
<h3 id="LimitedAgeMemoryCache-java"><a href="#LimitedAgeMemoryCache-java" class="headerlink" title="LimitedAgeMemoryCache.java"></a>LimitedAgeMemoryCache.java</h3><p>限制类对象最长存活周期的内存缓存。<br>MemoryCache的装饰者，相当于为MemoryCache添加一个特性，以一个MemoryCache内存缓存和一个maxAge作为构造函数参数。在get()中判断如果对象存活时间已经超过设置的最长时间，则删除。</p>
<h3 id="FuzzyKeyMemoryCache-java"><a href="#FuzzyKeyMemoryCache-java" class="headerlink" title="FuzzyKeyMemoryCache.java"></a>FuzzyKeyMemoryCache.java</h3><p>可以将某些原本不同的key看做相等，在put时删除这些相等的key。<br>MemoryCache的装饰者，相当于为MemoryCache添加一个特性，以一个MemoryCache内存缓存和一个 keyComparator作为构造函数参数。在put()函数中判断如果key与缓存中已有key经过Comparator比较后相等，则删除之前的元素。</p>
<h3 id="FileNameGenerator-java"><a href="#FileNameGenerator-java" class="headerlink" title="FileNameGenerator.java"></a>FileNameGenerator.java</h3><p>根据uri得到文件名的接口</p>
<h3 id="HashCodeFileNameGenerator-java"><a href="#HashCodeFileNameGenerator-java" class="headerlink" title="HashCodeFileNameGenerator.java"></a>HashCodeFileNameGenerator.java</h3><p>以uri的hashCode值作为文件名</p>
<h3 id="Md5FileNameGenerator-java"><a href="#Md5FileNameGenerator-java" class="headerlink" title="Md5FileNameGenerator.java"></a>Md5FileNameGenerator.java</h3><p>以uri的MD5值作为文件名</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5FileNameGenerator</span> <span class="keyword">implements</span> <span class="title">FileNameGenerator</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HASH_ALGORITHM = <span class="string">"MD5"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RADIX = <span class="number">10</span> + <span class="number">26</span>; <span class="comment">// 10 digits + 26 letters</span></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">generate</span><span class="params">(String imageUri)</span> </span>&#123;</div><div class="line">		<span class="keyword">byte</span>[] md5 = getMD5(imageUri.getBytes());</div><div class="line">		BigInteger bi = <span class="keyword">new</span> BigInteger(md5).abs();</div><div class="line">		<span class="keyword">return</span> bi.toString(RADIX);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">byte</span>[] getMD5(<span class="keyword">byte</span>[] data) &#123;</div><div class="line">		<span class="keyword">byte</span>[] hash = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);</div><div class="line">			digest.update(data);</div><div class="line">			hash = digest.digest();</div><div class="line">		&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">			L.e(e);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> hash;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DiskCache-java"><a href="#DiskCache-java" class="headerlink" title="DiskCache.java"></a>DiskCache.java</h3><p>图片的磁盘缓存接口。</p>
<p>主要函数：</p>
<ul>
<li>File getDirectory()</li>
</ul>
<p>得到磁盘缓存的根目录</p>
<ul>
<li>File get(String imageUri)</li>
</ul>
<p>根据原始图片uri去获取缓存图片的文件</p>
<ul>
<li>boolean save(String imageUri, InputStream imageStream, IoUtils.CopyListener listener)</li>
</ul>
<p>保存imageStream到磁盘中，listener表示保存进度且可在其中取消某些段的保存。</p>
<ul>
<li>boolean save(String imageUri, Bitmap bitmap)</li>
</ul>
<p>保存图片到磁盘</p>
<ul>
<li>boolean remove(String imageUri)</li>
</ul>
<p>根据图片uri删除缓存图片</p>
<ul>
<li>void close()</li>
</ul>
<p>关闭磁盘缓存，并释放资源</p>
<ul>
<li>void clear()</li>
</ul>
<p>清空磁盘缓存</p>
<h3 id="BaseDiskCache-java"><a href="#BaseDiskCache-java" class="headerlink" title="BaseDiskCache.java"></a>BaseDiskCache.java</h3><p>一个无大小限制的本地图片缓存，实现了DiskCache主要函数的抽象类。<br>图片缓存在cacheDir文件夹内，当cacheDir不可用时，则使用备用库reserveCacheDir。</p>
<p>主要函数：</p>
<ul>
<li>boolean save(String imageUri, InputStream imageStream, IoUtils.CopyListener listener)</li>
</ul>
<p>先根据imageUri得到目标文件，将imageStream先写入与目标文件同一文件夹的.tmp结尾的临时文件内，若未被listener取消且写入成功则将临时文件重命名为目标文件并返回true，否则删除临时文件并返回false。</p>
<ul>
<li>boolean save(String imageUri, Bitmap bitmap)</li>
</ul>
<p>先根据imageUri得到目标文件，通过Bitmap.compress(..)函数将bitmap先写入与目标文件同一文件夹的.tmp结尾的临时文件内，若写入成功则将临时文件名重命名为目标文件并返回true，否则删除临时文件并返回false。</p>
<ul>
<li>File getFile(String imageUri)</li>
</ul>
<p>根据imageUri和fileNameGenerator得到文件名，返回cacheDir文件夹内该文件，若cacheDir不可用，则使用备用库reserveCacheDir。</p>
<h3 id="LimitedAgeDiskCache-java"><a href="#LimitedAgeDiskCache-java" class="headerlink" title="LimitedAgeDiskCache.java"></a>LimitedAgeDiskCache.java</h3><p>限制缓存对象最长存活周期的磁盘缓存，继承自BaseDiskCache。<br>在get()函数判断如果缓存对象存活时间已经超过设置的最长时间，则删除。在save()中保存当前时间作为对象的创建时间。</p>
<h3 id="UnLimitedDiskCache-java"><a href="#UnLimitedDiskCache-java" class="headerlink" title="UnLimitedDiskCache.java"></a>UnLimitedDiskCache.java</h3><p>一个无大小限制的本地图片缓存。与BaseDiskCache无异，只是用了个意思明确的类名。</p>
<h3 id="DiskLruCache-java"><a href="#DiskLruCache-java" class="headerlink" title="DiskLruCache.java"></a>DiskLruCache.java</h3><p>限制总字节大小的磁盘缓存，会在缓存满时优先删除最近最少使用的元素。</p>
<p>通过缓存目录下名为journal的文件记录缓存的所有操作，并在缓存open时读取journal的文件内容存储到<code>LinkedHashMap&lt;String, Bitmap&gt; lruEntries</code>，后面<code>get(String key)</code>获取缓存内容时，会先从lruEntries中得到图片文件名返回文件。</p>
<p>通过<code>new LinkedHashMap&lt;String, Entry&gt;(0, 0.75f, true)</code>作为缓存池。LinkedHashMap第三个参数表示是否需要根据访问顺序(accessOrder)排序，true表示根据accessOrder排序，最近访问的跟最新加入的一样放到最后面，false表示根据插入顺序排序。这里为true且缓存满时trimToSize()函数始终删除第一个元素，即始终删除最近最少访问的元素。</p>
<h3 id="LruDiskCache-java"><a href="#LruDiskCache-java" class="headerlink" title="LruDiskCache.java"></a>LruDiskCache.java</h3><p>限制总字节大小的本地缓存，会在缓存满时优先删除最近最少使用的元素，实现了DiskCache。内部有个DiskLruCache cache、属性，缓存的存、取操作基本都是由该属性代理完成。</p>
<h3 id="StrictLineReader-java"><a href="#StrictLineReader-java" class="headerlink" title="StrictLineReader.java"></a>StrictLineReader.java</h3><p>通过readLine()函数从InputStream中读取一行，目前仅用于磁盘缓存操作记录文件journal的解析。</p>
<h3 id="Util-java"><a href="#Util-java" class="headerlink" title="Util.java"></a>Util.java</h3><p>工具类：</p>
<p>String readFully(Reader reader)读取 reader 中内容。<br>deleteContents(File dir)递归删除文件夹内容。</p>
<h3 id="ContentLengthInputStream-java"><a href="#ContentLengthInputStream-java" class="headerlink" title="ContentLengthInputStream.java"></a>ContentLengthInputStream.java</h3><p>InputStream的装饰者，可通过available()函数得到 InputStream 对应数据源的长度(总字节数)。主要用于计算文件存储进度即图片下载进度时的总进度。</p>
<h3 id="FailReason-java"><a href="#FailReason-java" class="headerlink" title="FailReason.java"></a>FailReason.java</h3><p>图片下载及显示时的错误原因，目前包括：<br>IO_ERROR 网络连接或是磁盘存储错误。<br>DECODING_ERROR decode image 为 Bitmap 时错误。<br>NETWORK_DENIED 当图片不在缓存中，且设置不允许访问网络时的错误。<br>OUT_OF_MEMORY 内存溢出错误。<br>UNKNOWN 未知错误。</p>
<h3 id="FlushedInputStream-java"><a href="#FlushedInputStream-java" class="headerlink" title="FlushedInputStream.java"></a>FlushedInputStream.java</h3><p>为了解决早期 Android 版本BitmapFactory.decodeStream(…)在慢网络情况下 decode image 异常的 Bug。<br>主要通过重写FilterInputStream的 skip(long n) 函数解决，确保 skip(long n) 始终跳过了 n 个字节。如果返回结果即跳过的字节数小于 n，则不断循环直到 skip(long n) 跳过 n 字节或到达文件尾。</p>
<h3 id="ImageScaleType-java"><a href="#ImageScaleType-java" class="headerlink" title="ImageScaleType.java"></a>ImageScaleType.java</h3><p>Image 的缩放类型，目前包括：<br>NONE不缩放。<br>NONE_SAFE根据需要以整数倍缩小图片，使得其尺寸不超过 Texture 可接受最大尺寸。<br>IN_SAMPLE_POWER_OF_2根据需要以 2 的 n 次幂缩小图片，使其尺寸不超过目标大小，比较快的缩小方式。<br>IN_SAMPLE_INT根据需要以整数倍缩小图片，使其尺寸不超过目标大小。<br>EXACTLY根据需要缩小图片到宽或高有一个与目标尺寸一致。<br>EXACTLY_STRETCHED根据需要缩放图片到宽或高有一个与目标尺寸一致。</p>
<h3 id="ViewScaleType-java"><a href="#ViewScaleType-java" class="headerlink" title="ViewScaleType.java"></a>ViewScaleType.java</h3><p>ImageAware的 ScaleType。<br>将 ImageView 的 ScaleType 简化为两种FIT_INSIDE和CROP两种。FIT_INSIDE表示将图片缩放到至少宽度和高度有一个小于等于 View 的对应尺寸，CROP表示将图片缩放到宽度和高度都大于等于 View 的对应尺寸。</p>
<h3 id="ImageSize-java"><a href="#ImageSize-java" class="headerlink" title="ImageSize.java"></a>ImageSize.java</h3><p>表示图片宽高的类。<br>scaleDown(…) 等比缩小宽高。<br>scale(…) 等比放大宽高。</p>
<h3 id="LoadedFrom-java"><a href="#LoadedFrom-java" class="headerlink" title="LoadedFrom.java"></a>LoadedFrom.java</h3><p>图片来源枚举类，包括网络、磁盘缓存、内存缓存。</p>
<h3 id="ImageDecoder-java"><a href="#ImageDecoder-java" class="headerlink" title="ImageDecoder.java"></a>ImageDecoder.java</h3><p>将图片转换为 Bitmap 的接口，抽象函数：<br>Bitmap decode(ImageDecodingInfo imageDecodingInfo) throws IOException;<br>表示根据ImageDecodingInfo信息得到图片并根据参数将其转换为 Bitmap。</p>
<h3 id="BaseImageDecoder-java"><a href="#BaseImageDecoder-java" class="headerlink" title="BaseImageDecoder.java"></a>BaseImageDecoder.java</h3><p>实现类ImageDecoder。调用ImageDownloader获取图片，然后根据ImageDecodingInfo或图片Exif信息处理图片转换为Bitmap。</p>
<p>主要函数：</p>
<ul>
<li>decode(ImageDecodingInfo decodingInfo)</li>
</ul>
<p>调用ImageDownloader获取图片，再调用defineImageSizeAndRotation()函数得到图片的相关信息，调用preparedDecodingOptions()得到图片缩放的比例，调用BitmapFactory.decodeStream()将InputStream转换为Bitmap，最后调用considerExactScaleAndOrientatiton()根据参数将图片放大、翻转、旋转为合适的样子返回。</p>
<ul>
<li>ImageFileInfo defineImageSizeAndRotation(InputStream imageStream, ImageDecodingInfo decodingInfo)</li>
</ul>
<p>得到图片真实大小以及Exif信息（设置考虑Exif的条件下）</p>
<ul>
<li>ExifInfo defineExifOrientation(String imageUri)</li>
</ul>
<p>得到图片Exif信息中的翻转以及旋转角度信息。</p>
<ul>
<li>Options prepareDecodingOptions(ImageSize imageSize, ImageDecodingInfo decodingInfo)</li>
</ul>
<p>得到图片缩放的比例：</p>
<ol>
<li>如果scaleType等于ImageScaleType.NONE，则缩放比例为1；</li>
<li>如果scaleType等于ImageScaleType.NONE_SAFE，则缩放比例为ImageSizeUtils.computeImageSampleSize.computeMinImageSampleSize()的返回值。</li>
<li>否则，调用ImageSizeUtils.computeImageSampleSize()计算返回值。</li>
</ol>
<p>在computeImageSampleSize()中</p>
<ol>
<li><p>如果viewScaleType等于FIT_INSIDE：<br> 1.1 如果scaleType等于ImageScaleType.IN_SAMPLE_POWER_OF_2，则缩放比例从1开始不断*2直到宽或高小于最大尺寸。<br> 1.2 否则，取宽和高分别与最大尺寸比例中较大值，即Math.max(srcWidth / targetWidth, srcHeight / targetHeight)。</p>
</li>
<li><p>如果viewScaleType等于CROP；<br> 2.1 如果scaleType等于ImageScaleType.IN_SAMPLE_POWER_OF_2，则缩放比例从1开始不断*2直到宽或高小于最大尺寸。<br> 2.2 否则，取宽和高分别与最大尺寸比例中较小值，即Math.min(srcWidth / targetWidth, srcHeight / targetHeight)</p>
</li>
<li><p>最后，在considerMaxTextureSize()中判断宽和高是否超过最大值，如果是则*2或是+1缩放。</p>
</li>
</ol>
<ul>
<li>Bitmap considerExactScaleAndOrientatiton(Bitmap subsampledBitmap, ImageDecodingInfo decodingInfo,int rotation, boolean flipHorizontal)</li>
</ul>
<p>根据参数将图片放大、翻转、旋转为合适的样子返回。</p>
<h3 id="ImageDownloadingInfo-java"><a href="#ImageDownloadingInfo-java" class="headerlink" title="ImageDownloadingInfo.java"></a>ImageDownloadingInfo.java</h3><p>Image Decode 需要的信息。<br>String imageKey 图片。<br>String imageUri 图片 uri，可能是缓存文件的 uri。<br>String originalImageUri 图片原 uri。<br>ImageSize targetSize 图片的显示尺寸。<br>imageScaleType 图片的 ScaleType。<br>ImageDownloader downloader 图片的下载器。<br>Object extraForDownloader 下载器需要的辅助信息。<br>boolean considerExifParams 是否需要考虑图片 Exif 信息。<br>Options decodingOptions 图片的解码信息，为 BitmapFactory.Options。</p>
<h3 id="BitmapDisplayer-java"><a href="#BitmapDisplayer-java" class="headerlink" title="BitmapDisplayer.java"></a>BitmapDisplayer.java</h3><p>在ImageAware中显示 bitmap 对象的接口。可在实现中对 bitmap 做一些额外处理，比如加圆角、动画效果。</p>
<h3 id="FadeInBitmapDisplayer-java"><a href="#FadeInBitmapDisplayer-java" class="headerlink" title="FadeInBitmapDisplayer.java"></a>FadeInBitmapDisplayer.java</h3><p>图片淡入方式显示在ImageAware中，实现了BitmapDisplayer接口。</p>
<h3 id="RoundedBitmapDisplayer-java"><a href="#RoundedBitmapDisplayer-java" class="headerlink" title="RoundedBitmapDisplayer.java"></a>RoundedBitmapDisplayer.java</h3><p>为图片添加圆角显示在ImageAware中，实现了BitmapDisplayer接口。主要通过BitmapShader实现。</p>
<h3 id="RoundedVignetteBitmapDisplayer-java"><a href="#RoundedVignetteBitmapDisplayer-java" class="headerlink" title="RoundedVignetteBitmapDisplayer.java"></a>RoundedVignetteBitmapDisplayer.java</h3><p>为图片添加渐变效果的圆角显示在ImageAware中，实现了BitmapDisplayer接口。主要通过RadialGradient实现。</p>
<h3 id="SimpleBitmapDisplayer-java"><a href="#SimpleBitmapDisplayer-java" class="headerlink" title="SimpleBitmapDisplayer.java"></a>SimpleBitmapDisplayer.java</h3><p>直接将图片显示在ImageAware中，实现了BitmapDisplayer接口。</p>
<h3 id="BitmapProcessor-java"><a href="#BitmapProcessor-java" class="headerlink" title="BitmapProcessor.java"></a>BitmapProcessor.java</h3><p>图片处理接口。可用于对图片预处理(Pre-process Bitmap）和后处理(Post-process Bitmap)。抽象函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BitmapProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function">Bitmap <span class="title">process</span><span class="params">(Bitmap bitmap)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户可以根据自己的需要去实现它。比如你想要为你的图片添加一个水印，那么可以自己去实现BitmapProcessor接口。在DisplayImageOptions中配置Pre-process阶段预处理图片，这样设置后存储在文件系统以及内存缓存中的图片都是加了水印的。如果只希望在显示时改变不动原图片，可以在BitmapDisplayer中处理。</p>
<h3 id="PauseOnScrollListener-java"><a href="#PauseOnScrollListener-java" class="headerlink" title="PauseOnScrollListener.java"></a>PauseOnScrollListener.java</h3><p>可以在View滚动过程中暂停图片加载的Listener，实现了OnScrollListener接口。<br>它的好处是防止滚动中不必要的图片加载，在ListView或GridView中item加载图片最好使用它，简单的一行代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gridView.setOnScrollListener(<span class="keyword">new</span> PauseOnScrollListener(ImageLoader.getInstance(), <span class="keyword">false</span>, <span class="keyword">true</span>));</div></pre></td></tr></table></figure>
<p>主要成员变量：</p>
<p>pauseOnScroll; 触摸(手指依然在屏幕上)滑动过程中是否暂停图片加载<br>pauseOnFling;  甩指(手指已离开屏幕)过程中是否暂停图片加载<br>externalListener; 自定义的OnScrollListener接口，适用于View原来就有自定义OnScrollListener情况设置</p>
<p>实现原理：重写onScrollStateChanged(…)函数判断不同的状态下暂停或继续图片加载。</p>
<p>OnScrollListener.SCROLL_STATE_IDLE表示 View 处于空闲状态，没有在滚动，这时候会加载图片。</p>
<p>OnScrollListener.SCROLL_STATE_TOUCH_SCROLL表示 View 处于触摸滑动状态，手指依然在屏幕上，通过pauseOnScroll变量确定是否需要暂停图片加载。这种时候大都属于慢速滚动浏览状态，所以建议继续图片加载。</p>
<p>OnScrollListener.SCROLL_STATE_FLING表示 View 处于甩指滚动状态，手指已离开屏幕，通过pauseOnFling变量确定是否需要暂停图片加载。这种时候大都属于快速滚动状态，所以建议暂停图片加载以节省资源。</p>
<h3 id="QueueProcessingType-java"><a href="#QueueProcessingType-java" class="headerlink" title="QueueProcessingType.java"></a>QueueProcessingType.java</h3><p>任务队列的处理类型，包括FIFO先进先出、LIFO后进先出。</p>
<h3 id="LIFOLinkedBlockingDeque-java"><a href="#LIFOLinkedBlockingDeque-java" class="headerlink" title="LIFOLinkedBlockingDeque.java"></a>LIFOLinkedBlockingDeque.java</h3><p>后进先出阻塞队列。重写LinkedBlockingDeque的offer()函数如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T e)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.offerFirst(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让LinkedBlockingDeque插入总在最前，而remove()本身始终删除第一个元素，所以就变为了后进先出阻塞队列。实际一般情况只重写offer(…)函数是不够的，但因为ThreadPoolExecutor默认只用到了BlockingQueue的offer(…)函数，所以这种简单重写后做为ThreadPoolExecutor的任务队列没问题。</p>
<p>LIFOLinkedBlockingDeque.java包下的LinkedBlockingDeque.java、BlockingDeque.java、Deque.java都是 Java 1.6 源码中的，这里不做分析。</p>
<h3 id="DiskCacheUtils-java"><a href="#DiskCacheUtils-java" class="headerlink" title="DiskCacheUtils.java"></a>DiskCacheUtils.java</h3><p>磁盘缓存工具类，可用于查找或删除某个 uri 对应的磁盘缓存。</p>
<h3 id="MemoryCacheUtils-java"><a href="#MemoryCacheUtils-java" class="headerlink" title="MemoryCacheUtils.java"></a>MemoryCacheUtils.java</h3><p>内存缓存工具类。可用于根据 uri 生成内存缓存 key，缓存 key 比较，根据 uri 得到所有相关的 key 或图片，删除某个 uri 的内存缓存。<br>generateKey(String imageUri, ImageSize targetSize)<br>根据 uri 生成内存缓存 key，key 规则为[imageUri]_[width]x[height]。</p>
<h3 id="StorageUtils-java"><a href="#StorageUtils-java" class="headerlink" title="StorageUtils.java"></a>StorageUtils.java</h3><p>得到图片 SD 卡缓存目录路径。<br>缓存目录优先选择/Android/data/[app_package_name]/cache；若无权限或不可用，则选择 App 在文件系统的缓存目录context.getCacheDir()；若无权限或不可用，则选择/data/data/[app_package_name]/cache。<br>如果缓存目录选择了/Android/data/[app_package_name]/cache，则新建.nomedia文件表示不允许类似 Galley 这些应用显示此文件夹下图片。不过在 4.0 系统有 Bug 这种方式不生效。</p>
<h3 id="ImageSizeUtils-java"><a href="#ImageSizeUtils-java" class="headerlink" title="ImageSizeUtils.java"></a>ImageSizeUtils.java</h3><p>用于计算图片尺寸、缩放比例相关的工具类。</p>
<h3 id="IoUtils-java"><a href="#IoUtils-java" class="headerlink" title="IoUtils.java"></a>IoUtils.java</h3><p>IO 相关工具类，包括 stream 拷贝，关闭等。</p>
<h3 id="L-java"><a href="#L-java" class="headerlink" title="L.java"></a>L.java</h3><p>Log 工具类。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>UIL的内存缓存默认使用了LRU算法，即近期最少使用算法，选用了基于链表结构的LinkedHashMap作为存储结构。</p>
<p>假设情景：内存缓存设置的阈值只够存储两个bitmap对象，当put第三个bitmap对象时，将近期最少使用的bitmap对象移除。</p>
<ol>
<li>初始化LinkedHashMap，并按使用顺序来排序，accessOrder = true</li>
<li>向缓存池中放入bitmap1和bitmap2两个对象</li>
<li>继续放入第三个bitmap3，根据假设情景，将会超过设定缓存池阈值</li>
<li>释放对bitmap1对象的引用</li>
<li>bitmap1对象被GC回收</li>
</ol>
<p>UIL的磁盘缓存默认使用了UnlimitedDiskCache</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;功能介绍&quot;&gt;&lt;a href=&quot;#功能介绍&quot; class=&quot;headerlink&quot; title=&quot;功能介绍&quot;&gt;&lt;/a&gt;功能介绍&lt;/h1&gt;&lt;h2 id=&quot;Android-Universal-Image-Loader&quot;&gt;&lt;a href=&quot;#Android-Univers
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="源码分析" scheme="http://liuguoquan727.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android官方数据绑定框架DataBinding</title>
    <link href="http://liuguoquan727.github.io/2016/04/17/Android_DataBinding%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://liuguoquan727.github.io/2016/04/17/Android_DataBinding使用详解/</id>
    <published>2016-04-17T07:23:25.000Z</published>
    <updated>2016-04-17T07:24:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="http://blog.csdn.net/jdsjlzx/article/details/48133293" target="_blank" rel="external">一叶飘舟</a></p>
<p>Android新推出了一个官方的数据绑定框架Data Binding Library，既然是官方推出的新玩意，我们就有必要了解一下Android新带来的数据绑定框架，等到该框架推出正式版的时候，我们就可以快速地运用到项目中去。数据绑定框架给我们带来了很大的方便性，以前我们可能需要在Activity里写很多的findViewById，烦人的代码也增加了我们代码的耦合性，现在我们马上就可以抛弃那些findViewById。说到这里，有人可能会问：我使用的一些注解框架也可以不用findViewById啊，是的，但是注解的缺点是拖累代码的效率，Data Binding则不会，Android官方文档说还会提高解析XML的速度，最主要的是Data Binding并不是单单减少我们的findViewById，更多的好处我们接下来一起探寻。</p>
<p>##1.环境</p>
<p>使用最新的Android Studio 1.5.1正式版，并更新你的Suport Repository到最新的版本，确保Android Studio的Gradle插件不低于1.5.0</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.5.0'</span></div></pre></td></tr></table></figure>
<p>然后修改对应模块（Module）的build.gradle，添加如下脚本代码：</p>
<pre><code>android {

    //添加DataBinding Library
    dataBinding {
    enabled true
    }
}
</code></pre><p>最后，点击Sync同步一下Gradle即可完成环境配置</p>
<p>##2.Data Binding示例</p>
<p>首先，我们需要新建一个Java Bean，一个简单的学生类。</p>
<pre><code><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.example.jimi098.databinding;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jimi098 on 2016/2/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Student &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> addr;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Student() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Student(<span class="keyword">String</span> name,<span class="keyword">String</span> addr) &#123;</div><div class="line">        <span class="keyword">this</span>.addr = addr;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getName() &#123;</div><div class="line">        <span class="built_in">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setName(<span class="keyword">String</span> name) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getAddr() &#123;</div><div class="line">        <span class="built_in">return</span> addr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setAddr(<span class="keyword">String</span> addr) &#123;</div><div class="line">        <span class="keyword">this</span>.addr = addr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>其次，编写布局文件data_binding.xml:</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>	            </div><div class="line">			<span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  //也可以是android:text="@</span><span class="template-variable">&#123;stu.getName()&#125;</span><span class="xml">"</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.addr&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span> //也可以是android:text="@</span><span class="template-variable">&#123;stu.getAddr()&#125;</span><span class="xml">"</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>最后，实现MainActivity,为变量赋值</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.example.jimi098.databinding.databinding.<span class="type">DataBindingBinding</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="type">DataBindingBinding</span> binding =  <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>, <span class="type">R</span>.layout.data_binding);</div><div class="line">        binding.setStu(<span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"lee"</span>, <span class="string">"Shenzhen"</span>));</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>由上面可以看出，MainActivity的代码非常简单，就添加了两行代码，需要注意的是我们并没有findViewById然后再去setText。</p>
<p>运行结果如下图所示：</p>
<p>##3.Data Binding详解</p>
<p>上面的示例仅仅是带领我们进入了Data Binding的世界，接下来我们解释一下Data Binding的开发步骤。先看看上面的布局文件。</p>
<pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>	            </div><div class="line">			<span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">	.....</div></pre></td></tr></table></figure>
</code></pre><p>根节点使用的是layout，在layout中分成两部分，第一部分是data节点，第二部分才是我们布局的根节点，在data节点下我们定义了一个variable，它是一个变量，变量名称是stu，类型是com.example.jimi098.databinding.Student，这类似我们在java文件中的定义：</p>
<pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.jimi098</span><span class="selector-class">.databinding</span><span class="selector-class">.Student</span> <span class="selector-tag">stu</span>;</div></pre></td></tr></table></figure>
</code></pre><p>不过这里要写Student完整的包名，如果这里我们需要多个Student呢？我们可以像写java文件那样导入类包</p>
<pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--导入类包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">	.....</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>这样就类似于java中的</p>
<pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.jimi098</span><span class="selector-class">.databinding</span><span class="selector-class">.Student</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">Student</span> <span class="selector-tag">stu1</span>,<span class="selector-tag">stu2</span>,...</div></pre></td></tr></table></figure>
</code></pre><p>既然变量定义好了，那该怎么使用呢？我们仍然看上面的xml文件</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">	....</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.addr&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>由上面可以看出，两个TextView的android:text，它的值是以@开始，以{}包裹的形式出现，而值呢？是stu.name，stu就是上面定义的variable，name就是Student类中的成员变量，其实这里就会去调用stu.getName()方法。</p>
<p>最后，我们看看如何给变量赋值呢？如下代码:</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.example.jimi098.databinding.databinding.<span class="type">DataBindingBinding</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="type">DataBindingBinding</span> binding =  <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>, <span class="type">R</span>.layout.data_binding);</div><div class="line">        binding.setStu(<span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"lee"</span>, <span class="string">"Shenzhen"</span>)); <span class="comment">//赋值</span></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>大部分情况，我们会在Activity中去使用它，以前我们都是在OnCreate方法中通过setContextView去设置布局。但现在不一样了，现在我们是通过DataBindingUtil类的一个静态方法setContentView设置布局，同时该方法会返回一个对象，这个对象时一个自动生成的类的对象，如DataBindingBinding？<strong>那么它的命名规则是什么呢？将我们布局文件的首字母大写，并且去掉下划线，将下划线后面的字母大写，加上后缀Binding组成。</strong>最后，我们通过这个对象来给变量赋值。</p>
<p>通过以上分析，我们了解Data Binding的具体开发步骤，下面让我们定义不同的几个变量看看</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span> /&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"str"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"String"</span>/&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"error"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"boolean"</span>/&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"num"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"int"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;str&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(num)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>由上面代码可以看出，String类型的变量没有导入包，这是因为Data Binding和Java一样，java.lang包里的类，我们是可以不用导入包的，再往下一个boolean和int类型的变量，都是java基本类型，也不用导入包。</p>
<p>再来看看几个TextView，第二个TextView，我们直接使用@{str}来为android:text设置文本内容；<strong>接下来注意第三个TextView，我们使用android:text=”@{String.valueOf(num)}”来设置一个int类型的变量，因为在给android:text设置int类型的值一定要转化为String类型，不然系统会认为是资源文件id。此外，我们还学习到了一点，在Xml中，我们不仅可以使用变量，而且还可以调用方法</strong></p>
<p>##4. 变量定义的高级部分</p>
<p>在上面，我们学会了如何在xml中定义变量，但是我们并没有定义像List、Map等这样的集合变量。那么到底能不能定义呢？答案是肯定的，而且定义的方式和我们上面的基本一致，区别就在于我们还需要为它定义key的变量，例如：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--导入类包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.graphics.Bitmap"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"java.util.ArrayList"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"java.util.HashMap"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"str"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"String"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"error"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"boolean"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"num"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"list"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"ArrayList&lt;String&gt;"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"map"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"HashMap&lt;String, String&gt;"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"array"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"String[]"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"listKey"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"mapKey"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"String"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"arrayKey"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">    </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;str&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(num)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;list[listKey]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;map[mapKey]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;array[arrayKey]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>然后在java代码中为变量赋值</p>
<pre><code><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line"></div><div class="line">        DataBindingBinding binding =  DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.data_binding);</div><div class="line">        binding.setStu(<span class="keyword">new</span> Student(<span class="string">"lee"</span>, <span class="string">"Shenzhen"</span>));</div><div class="line">        binding.setStr(<span class="string">"just do it"</span>);</div><div class="line">        binding.setNum(<span class="number">10</span>);</div><div class="line"></div><div class="line">        ArrayList&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</div><div class="line">        list.add(<span class="string">"list1"</span>);</div><div class="line">        list.add(<span class="string">"list2"</span>);</div><div class="line"></div><div class="line">        binding.setList(list);</div><div class="line">        binding.setListKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">        HashMap&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt;();</div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"name"</span>,<span class="string">"liu"</span>);</div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"sex"</span>,<span class="string">"male"</span>);</div><div class="line"></div><div class="line">        binding.setMap(<span class="built_in">map</span>);</div><div class="line">        binding.setMapKey(<span class="string">"sex"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">String</span>[] <span class="keyword">array</span> = <span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">array</span>[<span class="number">0</span>] = <span class="string">"array0"</span>;</div><div class="line">        <span class="keyword">array</span>[<span class="number">1</span>] = <span class="string">"array1"</span>;</div><div class="line"></div><div class="line">        binding.setArray(<span class="keyword">array</span>);</div><div class="line">        binding.setArrayKey(<span class="number">1</span>);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>##5.表达式</p>
<p>xml中还支持表达式</p>
<pre><code><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;TextView  </div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span>  </div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span>  </div><div class="line">    android:<span class="built_in">text</span>='@&#123;<span class="keyword">error</span> ? <span class="string">"error"</span> : <span class="string">"ok"</span>&#125;'/&gt;</div></pre></td></tr></table></figure>
</code></pre><p>如上所示，android:text后是一个三元表达式，如果error是true，则text就是error，否则是OK。</p>
<p>除此外还支持null合并操作,??–左边的对象如果它不是null，选择左边的对象；或者如果它是null，选择右边的对象</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">TextView</span></span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">'@</span><span class="template-variable">&#123;str ?? "not null"&#125;</span><span class="xml"><span class="tag"><span class="string">'</span> /&gt;</span></span></div></pre></td></tr></table></figure>
</code></pre><p>还支持以下表达式:</p>
<ul>
<li>数学 + - / * % </li>
<li>字符串连接 + </li>
<li>逻辑 &amp;&amp; || </li>
<li>二进制 &amp; | ^ </li>
<li>一元运算 + - ! ~ </li>
<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt; </li>
<li>比较 == &gt; &lt; &gt;= &lt;= </li>
<li>instanceof</li>
<li>分组 () </li>
<li>null</li>
<li>Cast</li>
<li>方法调用</li>
<li>数据访问 [] </li>
<li>三元运算 ?: </li>
</ul>
<p>示例：</p>
<pre><code><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">android:</span>text=<span class="string">"@&#123;String.valueOf(index + 1)&#125;"</span></div><div class="line"><span class="string">android:</span>visibility=<span class="string">"@&#123;age &lt; 13 ? View.GONE : View.VISIBLE&#125;"</span></div><div class="line"><span class="string">android:</span>transitionName=<span class="string">'@&#123;"image_" + id&#125;'</span></div></pre></td></tr></table></figure>
</code></pre><p>但是它不支持一下表达式：</p>
<ul>
<li>this</li>
<li>super</li>
<li>new</li>
<li>显式泛型调用</li>
</ul>
<p>##6. 其他知识点</p>
<p>###6.1 设置别名</p>
<p>假如我们import了两个相同名称的类咋办？我们可以借助于别名来解决，别名借助alias字段来标识，例如：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">data</span>&gt;</span>  </span></div><div class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"xxx.Name"</span> <span class="attr">alias</span>=<span class="string">"MyName"</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"xxx.xx.Name"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xxx:</span>@</span><span class="template-variable">&#123;MyName.getName()&#125;</span><span class="xml"><span class="tag">&gt;</span>  </span></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xxx:</span>@</span><span class="template-variable">&#123;Name.getName()&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div></pre></td></tr></table></figure>
</code></pre><p>###6.2 自定义Binding类名称</p>
<p>默认情况下，Binding类的命名是基于所述layout文件的名称，用大写开头，除去下划线（）以及（）后的第一个字母大写，然后添加“Binding”后缀。这个类将被放置在一个模块封装包里的databinding封装包下。例如，所述layout文件contact_item.xml将生成ContactItemBinding。如果模块包是com.example.my.app，那么它将被放置在com.example.my.app.databinding。</p>
<p>Binding类可通过调整data元素中的class属性来重命名或放置在不同的包中。例如：</p>
<pre><code><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="class"><span class="keyword">data</span> class="<span class="type">ContactItem</span>"&gt;</span></div><div class="line">    ...</div><div class="line">&lt;/<span class="class"><span class="keyword">data</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p> 在模块封装包的databinding包中会生成名为ContactItem的Binding类。如果要想让该类生成在不同的包中，你需要添加前缀.，如下：</p>
<pre><code><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="class"><span class="keyword">data</span> class=".<span class="type">ContactItem</span>"&gt;</span></div><div class="line">    ...</div><div class="line">&lt;/<span class="class"><span class="keyword">data</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p> 在这个情况下，ContactItem类直接在模块包中生成。或者你可以提供整个包名：</p>
<pre><code><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="class"><span class="keyword">data</span> class="com.example.<span class="type">ContactItem</span>"&gt;</span></div><div class="line">    ...</div><div class="line">&lt;/<span class="class"><span class="keyword">data</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>###6.3 字符串</p>
<p>当使用单引号包含属性值时，在表达式中使用双引号很容易：<br>android:text=’@{map[“firstName”]}’</p>
<p>使用双引号来包含属性值也是可以的。字符串前后需要使用”<code>&quot;：
android:text=&quot;@{map[</code>`firstName`]}”</p>
<p>###6.4 Resources</p>
<p>使用正常的表达式来访问resources也是可行的：<br>android:padding=”@{large? @dimen/largePadding : @dimen/smallPadding}”</p>
<p>###6.5 include</p>
<p>通过使用application namespace以及在属性中的Variable名字从容器layout中传递Variables到一个被包含的layout：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">        <span class="attr">xmlns:bind</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/name"</span></span></div><div class="line">           <span class="attr">bind:user</span>=<span class="string">"@</span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/contact"</span></span></div><div class="line">           <span class="attr">bind:user</span>=<span class="string">"@</span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p><strong> 注意：在name.xml以及contact.xml两个layout文件中必需要有user variable</strong></p>
<p>##7.事件绑定</p>
<p>大家都知道，在xml中我们可以给button设置一个onClick来达到事件的绑定，现在DataBinding也提供了事件绑定，而且不仅仅是button。首先定义一个对象处理点击事件，如下：</p>
<pre><code><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jimi098 on 2016/2/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventHandler</span> &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleClick</span>(<span class="params">View view</span>) </span>&#123;</div><div class="line"></div><div class="line">        Toast.makeText(view.getContext(),<span class="string">"click"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>其次看布局：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.EventHandler"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"handler"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"EventHandler"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Click"</span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"@</span><span class="template-variable">&#123;handler.handleClick&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>最后，实现事件绑定</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="type">ClickBindingBinding</span> binding =  <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>, <span class="type">R</span>.layout.click_binding);</div><div class="line">        binding.setHandler(<span class="keyword">new</span> <span class="type">EventHandler</span>());</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>##8.Data对象</p>
<p>我们学会了通过binding为我们的变量设置数据，但是不知道你有没有发现一个问题，当我们数据改变的时候会怎样？数据是跟随着改变呢？还是原来的数据呢？这里告诉你答案：很不幸，显示的还是原来的数据？那有没有办法让数据源发生变化后显示的数据也随之发生变化？先来想想ListView是怎么做的， ListView的数据是通过Adapter提供的，当数据发生改变时，我们通过notifyDatasetChanged通过UI去改变数据，这里面的原理其实就是内容观察者，庆幸的是DataBinding也支持内容观察者，而且使用起来也相当方便！</p>
<p>###8.1 Observable</p>
<p>我们可以通过Observable的方式去通知UI数据已经改变了，当然了，官方为我们提供了更加简便的方式BaseObservable，我们的实体类只需要继承该类，稍做几个操作，就能轻松实现数据变化的通知。如何使用呢？ 首先我们的实体类要继承BaseObservale类，第二步在Getter上使用注解@Bindable，第三步，在Setter里调用方法notifyPropertyChanged，第四步，完成。就是这么简单，下面我们来实际操作一下。 </p>
<p>首先定义一个实体类，并继承BaseObservable</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jimi098 on 2016/2/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String addr;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,String addr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.addr = addr;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bindable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        notifyPropertyChanged(com.example.jimi098.databinding.BR.name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bindable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> addr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(String addr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.addr = addr;</div><div class="line">        notifyPropertyChanged(com.example.jimi098.databinding.BR.addr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>观察getName方法，我们使用了@Bindable注解，观察setName，我们调用了notifyPropertyChanged方法，这个方法还需要一个参数，这里参数类似于R.java，保存了我们所有变量的引用地址，这里我们使用了name。 </p>
<p>其次，看看布局文件</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"click"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.MainActivity"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name+stu.addr&#125;</span><span class="xml"><span class="tag"><span class="string">"</span></span></span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"@</span><span class="template-variable">&#123;click.click&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>最后，java实现</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">Student</span> mStu;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="type">ClickBindingBinding</span> binding =  <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>, <span class="type">R</span>.layout.click_binding);</div><div class="line">        mStu = <span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"lau"</span>,<span class="string">"Shenzhen"</span>);</div><div class="line"></div><div class="line">        binding.setStu(mStu); <span class="comment">//设置初始显示数据</span></div><div class="line">        binding.setClick(<span class="keyword">this</span>); <span class="comment">//设置点击事件</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public void click(<span class="type">View</span> view) &#123;</div><div class="line">		<span class="comment">//点击时数据发生改变</span></div><div class="line">        mStu.setName(<span class="string">"lee"</span>);</div><div class="line">        mStu.setAddr(<span class="string">"Beijing"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>###8.2 ObservableFields</p>
<p>上面使用BaseObservable已经非常容易了，但是google工程师还不满足，继续给我们封装了一系列的ObservableFields，这里有ObservableField,ObservableBoolean,ObservableByte,ObservableChar,ObservableShort,ObservableInt,ObservableLong,ObservableFloat,ObservableDouble,ObservableParcelable</p>
<p>ObservableFields的使用方法就更加简单了，例如下面代码:</p>
<pre><code><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;  </div><div class="line">    <span class="keyword">public</span> ObservableField&lt;<span class="keyword">String</span>&gt; name = <span class="keyword">new</span> <span class="type">ObservableField</span>&lt;&gt;();  </div><div class="line">    <span class="keyword">public</span> ObservableInt age = <span class="keyword">new</span> <span class="type">ObservableInt</span>();  </div><div class="line">    <span class="keyword">public</span> ObservableBoolean isMan = <span class="keyword">new</span> <span class="type">ObservableBoolean</span>();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>很简单，只有三个ObservableField变量，并且没有getter和setter，因为我们不需要getter和setter。<br>在xml中怎么使用呢？</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"people"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"org.loader.app4.People"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;people.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(people.age)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">'@</span><span class="template-variable">&#123;people.isMan ? "man" : "women"&#125;</span><span class="xml"><span class="tag"><span class="string">'</span>/&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>也很简单，直接使用变量，那怎么赋值和取值呢?这些ObservableField都会有一对get和set方法，所以使用起来也很方便了：</p>
<pre><code><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mPeople = new People()<span class="comment">;  </span></div><div class="line"><span class="keyword">binding.setPeople(mPeople); </span> </div><div class="line">mPeople.name<span class="meta">.set</span>(<span class="string">"people"</span>)<span class="comment">;  </span></div><div class="line">mPeople.age<span class="meta">.set</span>(<span class="number">19</span>)<span class="comment">;  </span></div><div class="line">mPeople.isMan<span class="meta">.set</span>(true)<span class="comment">;</span></div></pre></td></tr></table></figure>
</code></pre><p>###8.3 Observable Collections </p>
<p>既然普通的变量我们有了ObservableFields的分装，那集合呢？当然也有啦，来看着两个：ObservableArrayMap,ObservableArrayList。使用和普通的Map、List基本相同，直接看代码：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"map"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"android.databinding.ObservableArrayMap&lt;String,String&gt;"</span> /&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"list"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"android.databinding.ObservableArrayList&lt;String&gt;"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;map[`name`]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;list[0]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>在来看java文件，怎么设置数据</p>
<pre><code><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ObservableArrayMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; <span class="built_in">map</span> = <span class="literal">new</span> ObservableArrayMap&lt;&gt;();  </div><div class="line">ObservableArrayList&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ObservableArrayList&lt;&gt;();  </div><div class="line"><span class="built_in">map</span>.put(<span class="string">"name"</span>, <span class="string">"loader or qibin"</span>);  </div><div class="line"><span class="built_in">list</span>.add(<span class="string">"loader!!!"</span>);  </div><div class="line">binding.setMap(<span class="built_in">map</span>);  </div><div class="line">binding.setList(<span class="built_in">list</span>);</div></pre></td></tr></table></figure>
</code></pre><p>##9.Inflate</p>
<p>上面的代码我们都是在activity中通过DataBindingUtil.setContentView来加载的布局的，现在有个问题了，如果我们是在Fragment中使用呢？Fragment没有setContentView怎么办？不要着急，Data Binding也提供了inflate的支持！ </p>
<p>使用方法如下，大家肯定会觉得非常眼熟。</p>
<pre><code><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">MyLayoutBinding binding</span> = MyLayoutBinding.inflate(layoutInflater);  </div><div class="line"><span class="attribute">MyLayoutBinding binding</span> = MyLayoutBinding.inflate(layoutInflater, viewGroup, false);</div></pre></td></tr></table></figure>
</code></pre><p>接下来，我们就尝试着在Fragment中使用一下Data Binding吧。 </p>
<p>首先还是那个学生类，Student</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.age = age;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Bindable</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> age;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.age = age;  </div><div class="line">        notifyPropertyChanged(org.loader.app5.BR.age);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Bindable</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> name;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        notifyPropertyChanged(org.loader.app5.BR.name);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>其次，activity的布局</p>
<pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/container"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>Activity的实现</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);  </div><div class="line">        getSupportFragmentManager().beginTransaction()  </div><div class="line">                .replace(<span class="type">R</span>.id.container, <span class="keyword">new</span> <span class="type">MyFragment</span>()).commit();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>重点来了，我们这里data binding的操作都放在了fragment里，那么我们先来看看fragment的布局。</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"org.loader.app5.Student"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span> /&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"frag"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"org.loader.app5.MyFragment"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"@</span><span class="template-variable">&#123;frag.click&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(stu.age)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>两个TextView分别绑定了Student的name和age字段，而且给name添加了一个点击事件，点击后会调用Fragment的click方法。我们来迫不及待的看一下Fragment怎么写：</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="type">Student</span> mStu;  </div><div class="line">  </div><div class="line">    <span class="meta">@Nullable</span>  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater,  </div><div class="line">                             <span class="type">ViewGroup</span> container, <span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        org.loader.app5.<span class="type">Custom</span> binding = <span class="type">DataBindingUtil</span>.inflate(inflater,  </div><div class="line">                <span class="type">R</span>.layout.frag_layout, container, <span class="literal">false</span>);  </div><div class="line">        mStu = <span class="keyword">new</span> <span class="type">Student</span>(<span class="number">20</span>, <span class="string">"loader"</span>);  </div><div class="line">        binding.setStu(mStu);  </div><div class="line">        binding.setFrag(<span class="keyword">this</span>);  </div><div class="line">        <span class="keyword">return</span> binding.getRoot();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public void click(<span class="type">View</span> view) &#123;  </div><div class="line">        mStu.setName(<span class="string">"qibin"</span>);  </div><div class="line">        mStu.setAge(<span class="number">18</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>在onCreateView中，不同于在Activity中，这里我们使用了DataBindingUtil.inflate方法，接受4个参数，第一个参数是一个LayoutInflater对象，正好，我们这里可以使用onCreateView的第一个参数，第二个参数是我们的布局文件，第三个参数是一个ViewGroup，第四个参数是一个boolean类型的，和在LayoutInflater.inflate一样，后两个参数决定了是否想container中添加我们加载进来的布局。 </p>
<p>下面的代码和我们之前写的并无差别，但是有一点，onCreateView方法需要返回一个View对象，我们从哪获取呢？ViewDataBinding有一个方法getRoot可以获取我们加载的布局，是不是很简单？ </p>
<p>来看一下效果：</p>
<p><img src="http://img.blog.csdn.net/20150817084236708" alt="ALT TEXT"></p>
<p>##10.Data Binding VS RecyclerView </p>
<p>有了上面的思路，大家是不是也会在ListView和RecyclerView中使用了？我们仅以一个RecyclerView来学习一下。 </p>
<p>首先来看看item的布局，</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"org.loader.app6.Student"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">            <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span>/&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(stu.age)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span>/&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>可以看到，还是用了那个Student实体，这样得代码，相信你也已经看烦了吧。<br>那我们来看看activity的。</p>
<pre><code><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> RecyclerView mRecyclerView;  </div><div class="line"><span class="keyword">private</span> ArrayList&lt;Student&gt; mData = <span class="keyword">new</span> ArrayList&lt;Student&gt;() &#123;  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) add(<span class="keyword">new</span> Student(<span class="string">"loader"</span> + i, <span class="number">18</span> + i));  </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">    setContentView(R.layout.activity_main);  </div><div class="line">  </div><div class="line">    mRecyclerView = (RecyclerView) findViewById(R.id.recycler);  </div><div class="line">    mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>,  </div><div class="line">            LinearLayoutManager.VERTICAL, <span class="keyword">false</span>));  </div><div class="line">    mRecyclerView.setAdapter(<span class="keyword">new</span> MyAdapter(mData));  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>这里给RecyclerView设置了一个Adapter，相信最主要的代码就在这个Adapter里。</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Student&gt; mData = <span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyAdapter</span><span class="params">(ArrayList&lt;Student&gt; data)</span> </span>&#123;  </div><div class="line">        mData.addAll(data);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup viewGroup, <span class="keyword">int</span> i)</span> </span>&#123;  </div><div class="line">        ViewDataBinding binding = DataBindingUtil.inflate(LayoutInflater  </div><div class="line">                .from(viewGroup.getContext()), R.layout.item, viewGroup, <span class="keyword">false</span>);  </div><div class="line">        ViewHolder holder = <span class="keyword">new</span> ViewHolder(binding.getRoot());  </div><div class="line">        holder.setBinding(binding);  </div><div class="line">        <span class="keyword">return</span> holder;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder viewHolder, <span class="keyword">int</span> i)</span> </span>&#123;  </div><div class="line">        viewHolder.getBinding().setVariable(org.loader.app6.BR.stu, mData.get(i));  </div><div class="line">        viewHolder.getBinding().executePendingBindings();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mData.size();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="keyword">private</span> ViewDataBinding binding;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;  </div><div class="line">            <span class="keyword">super</span>(itemView);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBinding</span><span class="params">(ViewDataBinding binding)</span> </span>&#123;  </div><div class="line">            <span class="keyword">this</span>.binding = binding;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> ViewDataBinding <span class="title">getBinding</span><span class="params">()</span> </span>&#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.binding;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>果然，这个adapter的写法和我们之前的写法不太一样，首先看看ViewHolder，在这个holder里，我们保存了一个ViewDataBinding对象，并给它提供了Getter和Setter方法， 这个ViewDataBinding是干嘛的？我们稍后去讲。继续看看onCreateViewHolder，在这里面，我们首先调用DataBindingUtil.inflate方法返回了一个ViewDataBinding的对象，这个ViewDataBinding是个啥？我们以前没见过啊，这里告诉大家我们之前返回的那些都是ViewDataBinding的子类！继续看代码，我们new了一个holder，参数是肯定是我们的item布局了，继续看，接着我们又把binding设置给了holder，最后返回holder。这时候，我们的holder里就保存了刚刚返回的ViewDataBinding对象，干嘛用呢?继续看onBindViewHolder就知道了。</p>
<pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">Override</span>  </div><div class="line">public void onBindViewHolder(ViewHolder viewHolder, int i) &#123;  </div><div class="line">    <span class="selector-tag">viewHolder</span><span class="selector-class">.getBinding</span>()<span class="selector-class">.setVariable</span>(<span class="selector-tag">org</span><span class="selector-class">.loader</span><span class="selector-class">.app6</span><span class="selector-class">.BR</span><span class="selector-class">.stu</span>, <span class="selector-tag">mData</span><span class="selector-class">.get</span>(<span class="selector-tag">i</span>));  </div><div class="line">    <span class="selector-tag">viewHolder</span><span class="selector-class">.getBinding</span>()<span class="selector-class">.executePendingBindings</span>();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>只有两行代码，但是都是我们没有见过的，首先第一行，我们以前都是使用类似binding.setStu这样方法去设置变量，那这个setVariable呢？ 为什么没有setStu，这里要记住，ViewDataBinding是我们之前用的那些binding的父类，只有自动生成的那些子类才会有setXXX方法，那现在我们需要在ViewDataBinding中设置变量咋办？这个类为我们提供了setVariable去设置变量，第一个参数是我们的变量名的引用，第二个是我们要设置的值。</p>
<p>第二行代码，executePendingBindings的作用是干嘛的？</p>
<p>官方的回答是：<br>当数据改变时，binding会在下一帧去改变数据，如果我们需要立即改变，就去调用executePendingBindings方法。<br>所以这里的作用就是去让数据的改变立即执行。 </p>
<p>ok，现在看起来，我们的代码更加简洁了，而且不需要保存控件的实例，是不是很爽？ 来看看效果：</p>
<p><img src="http://img.blog.csdn.net/20150817084333489" alt="ALT TEXT"></p>
<p>##11.View with ID</p>
<p>在使用Data Binding的过程中，我们发现并没有保存View的实例，但是现在我们有需求需要这个View的实例咋办？难道走老路findViewById？当然不是啦，当我们需要某个view的实例时，我们只要给该view一个id，然后Data Binding框架就会给我们自动生成该view的实例，放哪了？当然是ViewDataBinding里面。 </p>
<p>上代码：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"str"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"android.databinding.ObservableField&lt;String&gt;"</span> /&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"handler"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"org.loader.app7.MainActivity"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;str.get&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"@</span><span class="template-variable">&#123;handler.click&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>xml中代码没有什么好说的，都是之前的代码。需要注意的是，<br>我们给TextView设定了一个id-textView。 </p>
<p>activity代码如下：</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> org.loader.app7.<span class="type">Custom</span> mBinding;  </div><div class="line">    <span class="keyword">private</span> <span class="type">ObservableField</span>&lt;<span class="type">String</span>&gt; mString;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        mBinding = <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>,  </div><div class="line">                <span class="type">R</span>.layout.activity_main);  </div><div class="line">        mString = <span class="keyword">new</span> <span class="type">ObservableField</span>&lt;<span class="type">String</span>&gt;();  </div><div class="line">        mString.set(<span class="string">"loader"</span>);  </div><div class="line">        mBinding.setStr(mString);  </div><div class="line">        mBinding.setHandler(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public void click(<span class="type">View</span> view) &#123;  </div><div class="line">        mString.set(<span class="string">"qibin"</span>);  </div><div class="line">        mBinding.textView.setTextColor(<span class="type">Color</span>.<span class="type">GREEN</span>);  <span class="comment">//找到控件 </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>通过ViewDataBinding类的实例直接去获取的。<strong>只要我们给了view一个id，那么框架就会在ViewDataBinding中自动帮我们保存这个view的实例，变量名就是我们设置的id。</strong></p>
<p>##12.自定义setter(BindingAdapter)</p>
<p>想想这样的一种情景，一个ImageView需要通过网络去加载图片，那我们怎么办？看似好像使用DataBinding不行，恩，我们上面所学到东西确实不能够解决这个问题，但是DataBinding框架给我们提供了很好的扩展，允许我们自定义setter，那该怎么做呢？这里就要引出另一个知识点——BindingAdapter，这是一个注解，参数是一个数组，数组中存放的是我们自定义的’属性’。接下来就以一个例子学习一下BindingAdapter的使用。</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"imageUrl"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"String"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">app:image</span>=<span class="string">"@</span><span class="template-variable">&#123;imageUrl&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>这里我们增加了一个命名空间app，并且注意ImageView的app:image属性，这里和我们自定义view时自定义的属性一样，但是这里并不需要我们去重写ImageView，这条属性的值是我们上面定义的String类型的imageUrl，从名称中看到这里我们可能会塞给他一个url。 </p>
<p>activity代码如下:</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        org.loader.app8.<span class="type">Custom</span> binding = <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>,  </div><div class="line">                <span class="type">R</span>.layout.activity_main);  </div><div class="line">        binding.setImageUrl(<span class="string">"http://images.csdn.net/20150810/Blog-Image%E5%89%AF%E6%9C%AC.jpg"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>果然在这里我们set了一个url，那图片怎么加载呢？这里就要使用到我们刚才说的BindingAdapter注解了。</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;  </div><div class="line">    <span class="meta">@BindingAdapter</span>(&#123;<span class="string">"bind:image"</span>&#125;)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">imageLoader</span><span class="params">(ImageView imageView, String url)</span> </span>&#123;  </div><div class="line">        ImageLoaderUtils.getInstance().displayImage(url, imageView);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>我们定义了一个Utils类，这个类你可以随便起名，该类中只有一个静态的方法imageLoader，该方法有两个参数，一个是需要设置数据的view，<br>一个是我们需要的url。值得注意的是那个BindingAdapter注解，看看他的参数，是一个数组，内容只有一个bind:image，仅仅几行代码，我们不需要 手工调用Utils.imageLoader，也不需要知道imageLoader方法定义到哪了，一个网络图片加载就搞定了，是不是很神奇，这里面起关键作用的就是BindingAdapter 注解了，来看看它的参数怎么定义的吧，难道是乱写？当然不是，这里要遵循一定的规则,</p>
<blockquote>
<p>以bind:开头，接着书写你在控件中使用的自定义属性名称。</p>
</blockquote>
<p>这里就是image了，不信来看。</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ImageView</span>  </span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">app:image</span>=<span class="string">"@</span><span class="template-variable">&#123;imageUrl&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div></pre></td></tr></table></figure>
</code></pre><p>##13.Converters</p>
<p>Converter是什么呢？举个例子吧：假如你的控件需要一个格式化好的时间，但是你只有一个Date类型额变量咋办？肯定有人会说这个简单，转化完成后在设置，恩，这也是一种办法，但是DataBinding还给我们提供了另外一种方式，虽然原理一样，但是这种方式使用的场景更多，那就是——Converter。和上面的BindingAdapter使用方法一样，这也是一个注解。下面还是以一段代码的形式进行学习。</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"time"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"java.util.Date"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;time&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>看TextView的text属性，我们需要一个String类型的值，但是这里确给了一个Date类型的，这就需要我们去定义Converter去转换它， </p>
<p>activity代码如下:</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        org.loader.app9.<span class="type">Custom</span> binding = <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>,  </div><div class="line">                <span class="type">R</span>.layout.activity_main);  </div><div class="line">        binding.setTime(<span class="keyword">new</span> <span class="type">Date</span>());  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>去给这个Date类型的变量设置值。怎么去定义Converter呢？ 看代码：</p>
<pre><code><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@BindingConversion</span>  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">convertDate</span><span class="params">(Date date)</span> </span>&#123;  </div><div class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);  </div><div class="line">        <span class="function"><span class="keyword">return</span> sdf.<span class="title">format</span><span class="params">(date)</span></span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>和上面一样，我们不需要关心这个convertDate在哪个类中，重要的是他的@BindingConversion注解，这个方法接受一个Date类型的变量，正好我们的android:text设置的就是一个Date类型的值，在方法内部我们将这个Date类型的变量转换成String类型的日期并且返回。这样UI上就显示出我们转化好的字符串。<br>看看效果：</p>
<p><img src="http://img.blog.csdn.net/20150817084443284" alt="ALT TEXT"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;http://blog.csdn.net/jdsjlzx/article/details/48133293&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一叶飘舟&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android新推出了一个官方的数据绑定框架D
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="实战" scheme="http://liuguoquan727.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Butterknife使用详解</title>
    <link href="http://liuguoquan727.github.io/2016/04/17/Android_Butterknife%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://liuguoquan727.github.io/2016/04/17/Android_Butterknife使用详解/</id>
    <published>2016-04-17T07:20:54.000Z</published>
    <updated>2016-04-17T07:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">GitHub地址:https://github.com/JakeWharton/butterknife</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ButterKnife这个开源库可以让我们从大量的findViewById和setOnClickListener中解放出来，其对性能的影响微乎其微（其自定义注解的实现都是限定为RetentionPolicy.CLASS，也就是编译出.class文件为止有效，在运行时不额外消耗性能，其实通过java注解自动生成java代码的形式来完成工作），但也有一个明显的缺点，那就是代码的可读性差些，凡事有利有弊，我们需要做到有的放矢。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="Activity-Binding"><a href="#Activity-Binding" class="headerlink" title="Activity Binding"></a>Activity Binding</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.title) TextView title;</div><div class="line">  <span class="meta">@Bind</span>(R.id.subtitle) TextView subtitle;</div><div class="line">  <span class="meta">@Bind</span>(R.id.footer) TextView footer;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.simple_activity);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// TODO Use fields...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用注解bind生成的代码是可见的并且能够调试，上面的示例通过Bind注解生成的代码相当于下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(ExampleActivity activity)</span> </span>&#123;</div><div class="line">  activity.subtitle = (android.widget.TextView) activity.findViewById(<span class="number">2130968578</span>);</div><div class="line">  activity.footer = (android.widget.TextView) activity.findViewById(<span class="number">2130968579</span>);</div><div class="line">  activity.title = (android.widget.TextView) activity.findViewById(<span class="number">2130968577</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="RESOURCE-BINDING"><a href="#RESOURCE-BINDING" class="headerlink" title="RESOURCE BINDING"></a>RESOURCE BINDING</h3><p>Bind pre-defined resources with @BindBool, @BindColor, @BindDimen, @BindDrawable, @BindInt, @BindString, which binds an R.bool ID (or your specified type) to its corresponding field.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="meta">@BindString</span>(R.string.title) String title;</div><div class="line">  <span class="meta">@BindDrawable</span>(R.drawable.graphic) Drawable graphic;</div><div class="line">  <span class="meta">@BindColor</span>(R.color.red) <span class="keyword">int</span> red; <span class="comment">// int or ColorStateList field</span></div><div class="line">  <span class="meta">@BindDimen</span>(R.dimen.spacer) Float spacer; <span class="comment">// int (for pixel size) or float (for exact value) field</span></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="NON-ACTIVITY-BINDING"><a href="#NON-ACTIVITY-BINDING" class="headerlink" title="NON-ACTIVITY BINDING"></a>NON-ACTIVITY BINDING</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button1) Button button1;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button2) Button button2;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    <span class="comment">// TODO Use fields...</span></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ADAPTER-BINDING"><a href="#ADAPTER-BINDING" class="headerlink" title="ADAPTER BINDING"></a>ADAPTER BINDING</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> public <span class="type">View</span> getView(int position, <span class="type">View</span> view, <span class="type">ViewGroup</span> parent) &#123;</div><div class="line">    <span class="type">ViewHolder</span> holder;</div><div class="line">    <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</div><div class="line">      holder = (<span class="type">ViewHolder</span>) view.getTag();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      view = inflater.inflate(<span class="type">R</span>.layout.whatever, parent, <span class="literal">false</span>);</div><div class="line">      holder = <span class="keyword">new</span> <span class="type">ViewHolder</span>(view);</div><div class="line">      view.setTag(holder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    holder.name.setText(<span class="string">"John Doe"</span>);</div><div class="line">    <span class="comment">// etc...</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">    <span class="meta">@Bind</span>(<span class="type">R</span>.id.title) <span class="type">TextView</span> name;</div><div class="line">    <span class="meta">@Bind</span>(<span class="type">R</span>.id.job_title) <span class="type">TextView</span> jobTitle;</div><div class="line"></div><div class="line">    public <span class="type">ViewHolder</span>(<span class="type">View</span> view) &#123;</div><div class="line">      <span class="type">ButterKnife</span>.bind(<span class="keyword">this</span>, view);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="LIST-OR-ARRAY-BINDING"><a href="#LIST-OR-ARRAY-BINDING" class="headerlink" title="LIST OR ARRAY BINDING"></a>LIST OR ARRAY BINDING</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bind</span>(&#123; R.id.first_name, R.id.middle_name, R.id.last_name &#125;)</div><div class="line">List&lt;EditText&gt; nameViews;</div><div class="line"><span class="comment">//允许同时作用于list中的view</span></div><div class="line">ButterKnife.apply(nameViews, DISABLE);</div><div class="line">ButterKnife.apply(nameViews, ENABLED, <span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="comment">//Action and Setter interfaces allow specifying simple behavior.</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Action&lt;View&gt; DISABLE = <span class="keyword">new</span> ButterKnife.Action&lt;View&gt;() &#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(View view, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    view.setEnabled(<span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = <span class="keyword">new</span> ButterKnife.Setter&lt;View, Boolean&gt;() &#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(View view, Boolean value, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    view.setEnabled(value);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//An Android Property can also be used with the apply method.</span></div><div class="line">ButterKnife.apply(nameViews, View.ALPHA, <span class="number">0.0f</span>);</div></pre></td></tr></table></figure>
<h3 id="LISTENER-BINDING"><a href="#LISTENER-BINDING" class="headerlink" title="LISTENER BINDING"></a>LISTENER BINDING</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//带View参数</span></div><div class="line"><span class="meta">@OnClick</span>(R.id.submit)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO submit data to server...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不带View参数</span></div><div class="line"><span class="meta">@OnClick</span>(R.id.submit)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO submit data to server...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//带Button参数</span></div><div class="line"><span class="meta">@OnClick</span>(R.id.submit)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(Button button)</span> </span>&#123;</div><div class="line">  button.setText(<span class="string">"Hello!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//同时注入多个View事件</span></div><div class="line"><span class="meta">@OnClick</span>(&#123; R.id.door1, R.id.door2, R.id.door3 &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pickDoor</span><span class="params">(DoorView door)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (door.hasPrizeBehind()) &#123;</div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"You win!"</span>, LENGTH_SHORT).show();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"Try again"</span>, LENGTH_SHORT).show();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</div><div class="line">  <span class="meta">@OnClick</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// TODO do something!</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BINDING-RESET"><a href="#BINDING-RESET" class="headerlink" title="BINDING RESET"></a>BINDING RESET</h3><p>相对于Activity，Fragment有与之不同的视图声明周期。当早onCreateView中bind一个Fragment的时候，需要在OnDestroyView中将views设置为null。Butter Knife 通过一个ButterKnife.Unbinder接口来自动完成这个过程. Simply bind an unbinder with @Unbinder to the fragment.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button1) Button button1;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button2) Button button2;</div><div class="line">  <span class="meta">@Unbinder</span> ButterKnife.Unbinder unbinder;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    <span class="comment">// TODO Use fields...</span></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroyView();</div><div class="line">    unbinder.unbind();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="OPTIONAL-BINDINGS"><a href="#OPTIONAL-BINDINGS" class="headerlink" title="OPTIONAL BINDINGS"></a>OPTIONAL BINDINGS</h3><p>默认情况下,@Bind和绑定的目标是必须存在的，如果目标View不存在将会抛出异常。</p>
<p>为了避免这样情况并且创建一个可选的绑定目标，给变量增加@Nullable注解或者给方法增加 @Optional注解.</p>
<p>Note: Any annotation named @Nullable or can be used for fields. It is encouraged to use the @Nullable annotation from Android’s “support-annotations” library.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给变量增加@Nullable注解</span></div><div class="line"><span class="meta">@Nullable</span> <span class="meta">@Bind</span>(R.id.might_not_be_there) TextView mightNotBeThere;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给方法增加@Optional注解</span></div><div class="line"><span class="meta">@Optional</span> <span class="meta">@OnClick</span>(R.id.maybe_missing) <span class="function"><span class="keyword">void</span> <span class="title">onMaybeMissingClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MULTI-METHOD-LISTENERS"><a href="#MULTI-METHOD-LISTENERS" class="headerlink" title="MULTI-METHOD LISTENERS"></a>MULTI-METHOD LISTENERS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnItemSelected</span>(R.id.list_view)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnItemSelected</span>(value = R.id.maybe_missing, callback = NOTHING_SELECTED)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BONUS"><a href="#BONUS" class="headerlink" title="BONUS"></a>BONUS</h3><p>Also included are findById methods which simplify code that still has to find views on a View, Activity, or Dialog. It uses generics to infer the return type and automatically performs the cast.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, <span class="keyword">null</span>);</div><div class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);</div><div class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);</div><div class="line">ImageView photo = ButterKnife.findById(view, R.id.photo);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot; target=&quot;_
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="实战" scheme="http://liuguoquan727.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Java内部类</title>
    <link href="http://liuguoquan727.github.io/2016/04/17/Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://liuguoquan727.github.io/2016/04/17/Java内部类/</id>
    <published>2016-04-17T07:17:46.000Z</published>
    <updated>2016-04-17T07:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>可以将一个类的定义放在另一个类的定义内部，这就是内部类。</p>
<p>内部类是一种非常有用的特性，因为它允许你把一些逻辑相关的类组织在一起，并控制位于内部的类的可视性。然而必须要了解的是内部类与组合是完全不同的概念。</p>
<h2 id="创建局部内部类"><a href="#创建局部内部类" class="headerlink" title="创建局部内部类"></a>创建局部内部类</h2><p>创建内部类的方式就是把类的定义置于外部类的里面。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Destination</span><span class="params">(String where)</span> </span>&#123;</div><div class="line">            label = where;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> label;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ship</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">        Content content = <span class="keyword">new</span> Content();</div><div class="line">        System.out.println(content.value());</div><div class="line">        Destination destination = <span class="keyword">new</span> Destination(dest);</div><div class="line">        System.out.println(destination.readLabel());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Parcel1 parcel = <span class="keyword">new</span> Parcel1();</div><div class="line">        parcel.ship(<span class="string">"ShangHai"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"><span class="number">11</span></div><div class="line">ShangHai</div></pre></td></tr></table></figure>
<p>当我们在ship()方法里面使用内部类的时候，与使用普通类没有什么不同。在这里实际的区别只是内部类的名字是嵌套在Parcel里面的。不过这不是唯一的区别。</p>
<p>更典型的情况是，外部类将有一个方法，该方法返回一个指向内部类的引用，就像to()和contexts()看到的那样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Destination</span><span class="params">(String where)</span> </span>&#123;</div><div class="line">            label = where;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> label;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">to</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination(dest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Content <span class="title">content</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Content();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ship</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">        Content content = content();</div><div class="line">        System.out.println(content.value());</div><div class="line">        Destination destination = to(dest);</div><div class="line">        System.out.println(destination.readLabel());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Parcel2 p = <span class="keyword">new</span> Parcel2();</div><div class="line">        p.ship(<span class="string">"ShangHai"</span>);</div><div class="line"></div><div class="line">        Parcel2 q = <span class="keyword">new</span> Parcel2();</div><div class="line">        Parcel2.Content content = q.content();</div><div class="line">        System.out.println(content.value());</div><div class="line">        Parcel2.Destination destination = q.to(<span class="string">"Beijing"</span>);</div><div class="line">        System.out.println(destination.readLabel());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">打印结果：</div><div class="line"><span class="number">11</span></div><div class="line">ShangHai</div><div class="line"><span class="number">11</span></div><div class="line">Beijing</div></pre></td></tr></table></figure>
<p>如果想从外部类的非静态方法之外的任意位置创建某个内部类的对象，那么必须像在main()方法中那样，具体地指明这个对象的类型：OuterClassName.InnerClassName.</p>
<h2 id="链接到外部类"><a href="#链接到外部类" class="headerlink" title="链接到外部类"></a>链接到外部类</h2><p>当生产一个内部类的对象时，此对象与生产它的外部类对象之间就有了一种联系，所以它能访问其外部类对象的所有成员，而不需要任何特殊条件。此外，内部类还拥有其外部类的所有元素的访问权。看看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Selector</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Object <span class="title">cuurent</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sequence</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Object[] items;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> next = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sequence</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">		items = <span class="keyword">new</span> Object[size];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (next &lt; items.length) &#123;</div><div class="line">			items[next++] = obj;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceSelecotr</span> <span class="keyword">implements</span> <span class="title">Selector</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> i == items.length; <span class="comment">//直接使用外部类的对象</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">cuurent</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> items[i];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">if</span> (i &lt; items.length) &#123;</div><div class="line">				i++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Sequence sequence = <span class="keyword">new</span> Sequence(<span class="number">10</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++) &#123;</div><div class="line">			sequence.add(Integer.toString(i));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		SequenceSelecotr selector = sequence.new SequenceSelecotr();</div><div class="line">		<span class="keyword">while</span>(!selector.end()) &#123;</div><div class="line">			System.out.println(<span class="string">"current: "</span> + selector.cuurent());</div><div class="line">			selector.next();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">current: <span class="number">0</span></div><div class="line">current: <span class="number">1</span></div><div class="line">current: <span class="number">2</span></div><div class="line">current: <span class="number">3</span></div><div class="line">current: <span class="number">4</span></div><div class="line">current: <span class="number">5</span></div><div class="line">current: <span class="number">6</span></div><div class="line">current: <span class="number">7</span></div><div class="line">current: <span class="number">8</span></div><div class="line">current: <span class="number">9</span></div></pre></td></tr></table></figure>
<p>有结果可以得知，内部类可以直接访问其外部类的方法和字段，内部类自动拥有对其外部类所有成员的访问权。这是如何做到的呢？当某个外部类的对象创建一个内部类对象时，此内部类对象必定会秘密地捕获一个指向那个外部类对象的引用。然后，在你访问此外部类的成员时，就是用那个引用来选择外部类的成员。幸运的是，编译器会帮你处理所有的细节。但你现在可以看到的是：内部类的对象只能在与其外部类的对象相关联的情况下才能被创建（在内部类是非static类时）。构建内部类对象时，需要一个指向其外部类的引用，如果编译器访问不到这个引用就会报错。</p>
<h2 id="使用-this与-new"><a href="#使用-this与-new" class="headerlink" title="使用.this与.new"></a>使用.this与.new</h2><p>如果你需要生产对象外部类对象的引用，可以使外部类的名字后面紧跟.this。这样产生的引用自动地具有正确的类型，这一点在编译期就被知晓并受到检查，因此没有任何运行时开销。下面例子展示如何使用.this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoThis</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> DoThis <span class="title">outer</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> DoThis.<span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"DoThis.f()"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		DoThis dt = <span class="keyword">new</span> DoThis();</div><div class="line">		InnerClass innerClass = dt.new InnerClass();</div><div class="line">		innerClass.outer().f();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果:</div><div class="line">DoThis.f()</div></pre></td></tr></table></figure>
<p>有时候你肯想要告知某些其他对象，去创建其某个内部类的对象。要实现此目的，你必须在new表达式中提供对其他外部类对象的引用，这时需要使用.new语法，就像下面这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DotNew</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		DotNew dn = <span class="keyword">new</span> DotNew();</div><div class="line"></div><div class="line">		Inner inner = dn.new Inner();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要想直接创建内部类的对象，不能去引用外部类的名字DotNew，而是必须使用外部类的对象来创建该内部类对象。这也解决了内部类名字作用域的问题，因此你不必声明也不能声明dn.new DotNew.Inner()。</p>
<p>在拥有外部类对象之前是不可能创建内部类对象的，这是因为内部类对象会暗地里连接到创建它的外部类引用对象上。但是如果你创建的是静态内部类，那么它就不需要对外部类对象的引用。</p>
<h2 id="内部类与向上转型"><a href="#内部类与向上转型" class="headerlink" title="内部类与向上转型"></a>内部类与向上转型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">readlabel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Contents</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parcel4</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> <span class="number">11</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">			label = dest;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> label;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PDestination(<span class="string">"Beijing"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PContents();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParcel</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Parcel4 parcel4 = <span class="keyword">new</span> Parcel4();</div><div class="line">		Contents contents = parcel4.contents();</div><div class="line">		System.out.println(contents.value());</div><div class="line">		Destination destination = parcel4.destination();</div><div class="line">		System.out.println(destination.readlabel());</div><div class="line"></div><div class="line">        <span class="comment">//不能向下转型</span></div><div class="line"><span class="comment">//		PContents contents1 = parcel4.contents();</span></div><div class="line"><span class="comment">//		PDestination destination1 = parcel4.destination();</span></div><div class="line">		<span class="comment">//不能访问Parcel4的私有成员</span></div><div class="line"><span class="comment">//		Contents contents2 = parcel4.new PContents();</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">打印结果：</div><div class="line"><span class="number">11</span></div><div class="line">Beijing</div></pre></td></tr></table></figure>
<p>在Parcel4类中，PDestination相当于Parcel4类的protected成员，所以只有Parcel4及其子类、还有与Parcel4在同一个包中的类能访问PDestination;PContents相当于Parcel4的私有成员，只有Parcel4类能够访问它。</p>
<h2 id="在方法和作用域内的内部类"><a href="#在方法和作用域内的内部类" class="headerlink" title="在方法和作用域内的内部类"></a>在方法和作用域内的内部类</h2><p>下面的例子展示在方法的作用域内（而不是在其他类的作用域内）创建一个完整的类，这称为局部内部类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel5</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span></span>&#123;</div><div class="line">			</div><div class="line">			<span class="keyword">private</span> String label;</div><div class="line">			</div><div class="line">			<span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">				label = dest;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> label;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PDestination(dest);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		</div><div class="line">		Parcel5 p = <span class="keyword">new</span> Parcel5();</div><div class="line">		Destination destination = p.destination(<span class="string">"Beijing"</span>);</div><div class="line">		System.out.println(destination.readlabel());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：<br>在destination()中定义了内部类PDestination，并不意味着一旦dest()方法执行完毕，PDestination就不可用了。<br>你可以在同一个子目录下的任意类对某个内部类使用类标识符PDestination，这并不会有命名冲突。</p>
<p>下面的例子展示如何在任意的作用域内嵌入一个内部类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel6</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destination</span><span class="params">(<span class="keyword">boolean</span> isCreate)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (isCreate) &#123;</div><div class="line"></div><div class="line">			<span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">				<span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">				<span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">					label = dest;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">					<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">					<span class="keyword">return</span> label;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			PDestination destination = <span class="keyword">new</span> PDestination(<span class="string">"Beijing"</span>);</div><div class="line">			System.out.println(destination.readlabel());</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="comment">//error，超出作用域范围</span></div><div class="line"><span class="comment">//		PDestination destination = new PDestination("Beijing");</span></div><div class="line"><span class="comment">//		System.out.println(destination.readlabel());</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Parcel6 p = <span class="keyword">new</span> Parcel6();</div><div class="line">		p.destination(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line">Beijing</div></pre></td></tr></table></figure>
<h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>先看一个匿名内部类示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel7</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//匿名内部类</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Contents() &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> <span class="number">11</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Parcel7 p = <span class="keyword">new</span> Parcel7();</div><div class="line">		System.out.println(p.contents().value());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种语句的意思是：创建一个继承自Contents的匿名类的对象。</p>
<p>上述匿名内部类的语法是下述形式的简化形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel7</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MyContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> <span class="number">11</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyContents();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Parcel7 p = <span class="keyword">new</span> Parcel7();</div><div class="line">		System.out.println(p.contents().value());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的匿名内部类中，使用了默认的构造函数来生成Contents。下面的代码展示了带参数的构造器的匿名内部类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.i = x;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> i;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel8</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Wrapper <span class="title">wrapper</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Wrapper(x) &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">super</span>.value() * <span class="number">22</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Parcel8 p = <span class="keyword">new</span> Parcel8();</div><div class="line">		System.out.println(p.wrapper(<span class="number">3</span>).value());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实例初始化匿名内部类成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel9</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(<span class="keyword">final</span> String dest,<span class="keyword">final</span> <span class="keyword">float</span> price)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Destination() &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">private</span> <span class="keyword">int</span> cost;</div><div class="line">			</div><div class="line">			<span class="comment">//实例初始化成员变量</span></div><div class="line">			&#123;</div><div class="line">				cost = Math.round(price);</div><div class="line">				System.out.println(<span class="string">"Price: "</span> + cost);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">private</span> String label = dest;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> label;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Parcel9 p = <span class="keyword">new</span> Parcel9();</div><div class="line">		Destination destination = p.destination(<span class="string">"Beijing"</span>, <span class="number">25.6f</span>);</div><div class="line">		System.out.println(destination.readlabel());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">Price: <span class="number">26</span></div><div class="line">Beijing</div></pre></td></tr></table></figure>
<p>对于匿名类而言，实例初始化的实际效果就是构造器，当然它受到了限制-你不能重载实例初始化方法。</p>
<h2 id="嵌套类-静态内部类"><a href="#嵌套类-静态内部类" class="headerlink" title="嵌套类(静态内部类)"></a>嵌套类(静态内部类)</h2><p>如果不需要内部类对象与其外部类对象之间有联系，那么将内部类声明为static，这就是静态内部类(嵌套类)。静态内部类与普通内部类的区别在于：</p>
<ul>
<li>要创建静态内部的对象并不需要其外部类的对象</li>
<li>不能从静态内部类的对象中访问非静态的外部类对象</li>
<li>普通内部类的字段和方法，只能放在类的外部层次上，所以普通的内部类不能有static数据和static字段，也不能包含静态内部类，但是静态内部类可以包含这些特性。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.michael.java.innerclass.Parcel11.ParcelDestination.AnotherLevel;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel11</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="title">ParcelDestination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">			label = dest;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> label;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//静态方法</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</div><div class="line">			</div><div class="line">			System.out.println(<span class="string">"f()"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//静态变量</span></div><div class="line">		<span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">10</span>;</div><div class="line"></div><div class="line">		<span class="comment">//静态内部类</span></div><div class="line">		<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherLevel</span> </span>&#123;</div><div class="line">			</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"AnotherLevel f()"</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Destination <span class="title">destination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ParcelDestination(<span class="string">"Beijing"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ParcelContents();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Contents contents = contents();</div><div class="line">		contents.value();</div><div class="line">		</div><div class="line">		Destination destination = destination(<span class="string">"Beijing"</span>);</div><div class="line">		destination.readlabel();</div><div class="line">		</div><div class="line">		System.out.println(ParcelDestination.x);</div><div class="line">		ParcelDestination.f();</div><div class="line">		AnotherLevel.f();</div><div class="line">		System.out.println(AnotherLevel.x);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在main方法中，不需要任何Parcel11对象，而是使用选取static成员的普通语法来调用方法。</p>
<h2 id="接口的内部类"><a href="#接口的内部类" class="headerlink" title="接口的内部类"></a>接口的内部类</h2><p>正常情况下，不能在接口内放置任何代码，但静态内部类可以作为接口的一部分，你放到接口中的任何类都自动地是public和static、的。因为类是static的，只是将嵌套类置于接口的命名空间内，这并不违反接口的规则。你甚至可以在内部类中实现外部接口，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClassInInterface</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">ClassInInterface</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			System.out.println(<span class="string">"Howdy"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Test test = <span class="keyword">new</span> Test();</div><div class="line">		test.howdy();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="为什么需要内部类"><a href="#为什么需要内部类" class="headerlink" title="为什么需要内部类"></a>为什么需要内部类</h2><p>内部类最吸引人的原因是：每个内部类都能独立地继承自一个（接口的）实现，所有无论外部类是否已经继承了某个（接口的）实现，对于内部类都没有影响。</p>
<p>下面让我们考虑这样一种情况：即必须在一个类中以某种方式实现两个接口。由于接口的灵活性，你有两种选择：使用单一类，或者使用内部类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//内部类实现接口</span></div><div class="line">	<span class="function">B <span class="title">makeB</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> B() &#123;</div><div class="line">			</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiInterface</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesA</span><span class="params">(A a)</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesB</span><span class="params">(B b)</span></span>&#123;&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		X x = <span class="keyword">new</span> X();</div><div class="line">		Y y = <span class="keyword">new</span> Y();</div><div class="line">		</div><div class="line">		takesA(x);</div><div class="line">		takesA(y);</div><div class="line">		</div><div class="line">		takesB(x);</div><div class="line">		takesB(y.makeB());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果使用的是抽象的类或具体的类，而不是接口，那就只能使用内部类才能实现多重继承。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">extends</span> <span class="title">D</span> </span>&#123;</div><div class="line">	<span class="function">E <span class="title">makeE</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> E() &#123; &#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiImplementation</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesD</span><span class="params">(D d)</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesE</span><span class="params">(E e)</span></span>&#123;&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Z z = <span class="keyword">new</span> Z();</div><div class="line">		</div><div class="line">		takesD(z);</div><div class="line">		takesE(z.makeE());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用内部类可以获得一些特性：</p>
<ul>
<li>内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外部类对象的信息相互独立</li>
<li>在单个外部类中，可以让对个内部类以不同的方式实现同一个接口，或继承同一个类</li>
<li>创建内部类对象的时刻并不依赖于外部类对象的创建</li>
<li>内部类就是一个独立的实体</li>
</ul>
<h2 id="内部类的继承"><a href="#内部类的继承" class="headerlink" title="内部类的继承"></a>内部类的继承</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"Inner"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>.<span class="title">Inner</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">// !public InheritInner() 不会被编译</span></div><div class="line">	</div><div class="line">	InheritInner(WithInner wi) &#123;</div><div class="line">		wi.<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		WithInner wi = <span class="keyword">new</span> WithInner();</div><div class="line">		InheritInner inner = <span class="keyword">new</span> InheritInner(wi);</div><div class="line">		inner.print();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，InheritInner只继承自内部类，而不是外部类，但是当要生成一个构造器时，默认的构造器并不能通过，并且不能只是传递一个指向外部类对象的引用，还必须在构造器中使用如下语句<code>OuterClassNameReference.super()</code></p>
<h2 id="内部类可以被覆盖吗"><a href="#内部类可以被覆盖吗" class="headerlink" title="内部类可以被覆盖吗"></a>内部类可以被覆盖吗</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Yolk yolk;</div><div class="line">	</div><div class="line">	<span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"Egg.Yolk()"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Egg</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"New Egg"</span>);</div><div class="line">		yolk = <span class="keyword">new</span> Yolk();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigEgg</span> <span class="keyword">extends</span> <span class="title">Egg</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"BigEgg.Yolk()"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">new</span> BigEgg();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果是：</div><div class="line">New Egg</div><div class="line">Egg.Yolk()</div></pre></td></tr></table></figure>
<p>结果说明，当BigEgg继承了Egg之后，BigEgg里面的内部类Yolk并没有覆盖Egg里面的内部类Yolk，这两个内部类是完全独立的两个实体，各自在自己的命名空间内。</p>
<h2 id="内部类标识符"><a href="#内部类标识符" class="headerlink" title="内部类标识符"></a>内部类标识符</h2><p>由于每个类都会产生一个。class文件，其中包含了如何创建该类型的对象的全部信息（此信息产生一个“meta-class”，叫做Class对象），内部类也必须生成一个.class文件以包含它们的Class对象信息。这些类文件的命名有严格的规则，加上“$”，再加上内部类的名字。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Counter.class</div><div class="line">LocalInnerClass$1.class ## 匿名内部类 用数字1表示</div><div class="line">LocalInnerClass$1LocalCounter.class ##局部内部类  LocalCounter在LocalInnerClass里面</div><div class="line">LocalInnerClass.class</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可以将一个类的定义放在另一个类的定义内部，这就是内部类。&lt;/p&gt;
&lt;p&gt;内部类是一种非常有用的特性，因为它允许你把一些逻辑相关的类组织在一起，并控制位于内部的类的可视性。然而必须要了解的是内部类与组合是完全不同的概念。&lt;/p&gt;
&lt;h2 id=&quot;创建局部内部类&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="Java" scheme="http://liuguoquan727.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://liuguoquan727.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java字符串</title>
    <link href="http://liuguoquan727.github.io/2016/04/17/Java%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://liuguoquan727.github.io/2016/04/17/Java字符串/</id>
    <published>2016-04-17T07:17:06.000Z</published>
    <updated>2016-04-17T07:19:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不可变String"><a href="#不可变String" class="headerlink" title="不可变String"></a>不可变String</h2><p>String对象时不可变的。查看JDK文档你就会发现，String类中每一个看起来会修改String值的方法，实际上都是创建了一个全新的String对象，这个新的String对象来包含修改后的字符串内容，而最初的String对象则没有变化。</p>
<p>看看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Immutable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        String str = <span class="string">"hello"</span>;</div><div class="line">        System.out.println(str); <span class="comment">//hello</span></div><div class="line">        String str1 = upCase(str);</div><div class="line">        System.out.println(str1); <span class="comment">//HELLO</span></div><div class="line">        System.out.println(str); <span class="comment">//hello</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upCase</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s.toUpperCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果打印如下：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hello</span></div><div class="line">HELLO</div><div class="line">hello</div></pre></td></tr></table></figure>
<p>当把str传给upCase()方法时，实际上传递的是引用的一个拷贝。其实，每当把String对象作为方法的参数时，都会复制一份对象的引用，而该引用所指向的对象其实一直指向同一个内存地址，从未改变。 回到upCase方法的定义，传入其中的引用有了名字s，只有upCase方法运行的时候，局部引用s才回存在，一旦upCase运行结束，s就消失了。当然upCase的返回值，其实只是最终结果的引用。而这个引用已经指向了一个新的对象，而原本的str对象还在原始的位置。</p>
<h2 id="重载”-”与StringBuilder"><a href="#重载”-”与StringBuilder" class="headerlink" title="重载”+”与StringBuilder"></a>重载”+”与StringBuilder</h2><p>String的不可变性会带来一定的效率问题。为String对象重载的”+”操作符就是一个例子。重载的意思是，一个操作符在应用特定的类时，被赋予特殊的意义（用于String的”+”与”+=”是Java中仅有的两个重载过的操作符，而Java并不允许程序员重载任何操作符）。</p>
<p>操作符”+”可以用来连接String：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concatention</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">        String str = <span class="string">"hello"</span>;</div><div class="line">        String result = str + <span class="string">" welcom"</span> + <span class="string">" to beijing"</span>;</div><div class="line">        System.out.println(result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果是:</div><div class="line">hello welcom to beijing</div></pre></td></tr></table></figure>
<p>这段代码可能是这样工作的：String有一个append（）方法，它会生成一个新的String对象，以包含”欢迎来”与str连接后的字符串。然后，该对象再与”到北京”相连，生成一个新的String对象result。 这种工作方式当然是可行的，但是为了生成最终的String，此方式会产生一大堆需要垃圾回收的中间对象。当达到一定的数量之后，性能表现会相当糟糕。</p>
<p>下面来看下以上代码到底是如何工作的，可以用JDK自带的工具javap命令来反编译以上代码。命令如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javap -<span class="built_in">c</span> <span class="type">Concatention</span>  <span class="comment">//-c 表示生产JVM字节码</span></div></pre></td></tr></table></figure>
<p>编译后的字节码为：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Compiled from <span class="string">"Concatention.java"</span></div><div class="line">class Concatention &#123;</div><div class="line">  Concatention();</div><div class="line">    <span class="built_in">Code</span>:</div><div class="line">       <span class="number">0</span>: aload_0</div><div class="line">       <span class="number">1</span>: invokespecial <span class="meta">#1                  <span class="comment">// Method java/lang/Object."&lt;init&gt;":()V</span></span></div><div class="line">       <span class="number">4</span>: <span class="keyword">return</span></div><div class="line"></div><div class="line">  public static void main(java.lang.<span class="keyword">String</span>[]);</div><div class="line">    <span class="built_in">Code</span>:</div><div class="line">       <span class="number">0</span>: ldc           <span class="meta">#2                  <span class="comment">// String hello</span></span></div><div class="line">       <span class="number">2</span>: astore_1</div><div class="line">       <span class="number">3</span>: <span class="keyword">new</span>           <span class="meta">#3                  <span class="comment">// class java/lang/StringBuilder</span></span></div><div class="line">       <span class="number">6</span>: dup</div><div class="line">       <span class="number">7</span>: invokespecial <span class="meta">#4                  <span class="comment">// Method java/lang/StringBuilder."&lt;init&gt;":()V</span></span></div><div class="line">      <span class="number">10</span>: aload_1</div><div class="line">      <span class="number">11</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">      <span class="number">14</span>: ldc           <span class="meta">#6                  <span class="comment">// String  welcom</span></span></div><div class="line">      <span class="number">16</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">      <span class="number">19</span>: ldc           <span class="meta">#7                  <span class="comment">// String  to beijing</span></span></div><div class="line">      <span class="number">21</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">      <span class="number">24</span>: invokevirtual <span class="meta">#8                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></div><div class="line">      <span class="number">27</span>: astore_2</div><div class="line">      <span class="number">28</span>: getstatic     <span class="meta">#9                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span></div><div class="line">      <span class="number">31</span>: aload_2</div><div class="line">      <span class="number">32</span>: invokevirtual <span class="meta">#10                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span></div><div class="line">      <span class="number">35</span>: <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的重点是：编译器自动引入了java.lang.StringBuilder类。虽然我们在源代码中并没有使用StringBuilder类，但是编译器却自作主张地使用了它，因为它更高效。</p>
<p>现在，你也行会觉得可以随意使用String对象，反正编译器会自动优化性能。可是在这之前，让我们更深入地看看编译器能为我们优化到什么程序。下面的程序采用两种方式生成一个String：方法一使用说个String对象，方法二使用StringBuilder</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhitherStringBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">implicit</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line"></div><div class="line">        String result = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; strs.length;i++) &#123;</div><div class="line">            result += strs[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">explicit</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line"></div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; strs.length;i++) &#123;</div><div class="line">            builder.append(strs[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在运行<code>javap -c WitherStringBuilder</code>可以看到两个方法对应的字节码，首先是implicit()方法：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public java.lang.<span class="keyword">String</span> implicit(java.lang.<span class="keyword">String</span>[]);</div><div class="line">  <span class="built_in">Code</span>:</div><div class="line">     <span class="number">0</span>: ldc           <span class="meta">#2                  <span class="comment">// String</span></span></div><div class="line">     <span class="number">2</span>: astore_2</div><div class="line">     <span class="number">3</span>: iconst_0</div><div class="line">     <span class="number">4</span>: istore_3</div><div class="line">     <span class="number">5</span>: iload_3</div><div class="line">     <span class="number">6</span>: aload_1</div><div class="line">     <span class="number">7</span>: arraylength</div><div class="line">     <span class="number">8</span>: if_icmpge     <span class="number">38</span></div><div class="line">    <span class="number">11</span>: <span class="keyword">new</span>           <span class="meta">#3                  <span class="comment">// class java/lang/StringBuilder</span></span></div><div class="line">    <span class="number">14</span>: dup</div><div class="line">    <span class="number">15</span>: invokespecial <span class="meta">#4                  <span class="comment">// Method java/lang/StringBuilder."&lt;init&gt;":()V</span></span></div><div class="line">    <span class="number">18</span>: aload_2</div><div class="line">    <span class="number">19</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">    <span class="number">22</span>: aload_1</div><div class="line">    <span class="number">23</span>: iload_3</div><div class="line">    <span class="number">24</span>: aaload</div><div class="line">    <span class="number">25</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">    <span class="number">28</span>: invokevirtual <span class="meta">#6                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></div><div class="line">    <span class="number">31</span>: astore_2</div><div class="line">    <span class="number">32</span>: iinc          <span class="number">3</span>, <span class="number">1</span></div><div class="line">    <span class="number">35</span>: <span class="keyword">goto</span>          <span class="number">5</span></div><div class="line">    <span class="number">38</span>: aload_2</div><div class="line">    <span class="number">39</span>: areturn</div></pre></td></tr></table></figure>
<p>从第8行到第35行构成了一个循环体。要注意的重点是：StringBuilder是在循环之内构造的，这意味着每经过循环一次，就会创建一个新的StringBuilder对象。</p>
<p>下面是explicit()方法对应的字节码：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public java.lang.<span class="keyword">String</span> explicit(java.lang.<span class="keyword">String</span>[]);</div><div class="line">   <span class="built_in">Code</span>:</div><div class="line">      <span class="number">0</span>: <span class="keyword">new</span>           <span class="meta">#3                  <span class="comment">// class java/lang/StringBuilder</span></span></div><div class="line">      <span class="number">3</span>: dup</div><div class="line">      <span class="number">4</span>: invokespecial <span class="meta">#4                  <span class="comment">// Method java/lang/StringBuilder."&lt;init&gt;":()V</span></span></div><div class="line">      <span class="number">7</span>: astore_2</div><div class="line">      <span class="number">8</span>: iconst_0</div><div class="line">      <span class="number">9</span>: istore_3</div><div class="line">     <span class="number">10</span>: iload_3</div><div class="line">     <span class="number">11</span>: aload_1</div><div class="line">     <span class="number">12</span>: arraylength</div><div class="line">     <span class="number">13</span>: if_icmpge     <span class="number">30</span></div><div class="line">     <span class="number">16</span>: aload_2</div><div class="line">     <span class="number">17</span>: aload_1</div><div class="line">     <span class="number">18</span>: iload_3</div><div class="line">     <span class="number">19</span>: aaload</div><div class="line">     <span class="number">20</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">     <span class="number">23</span>: <span class="keyword">pop</span></div><div class="line">     <span class="number">24</span>: iinc          <span class="number">3</span>, <span class="number">1</span></div><div class="line">     <span class="number">27</span>: <span class="keyword">goto</span>          <span class="number">10</span></div><div class="line">     <span class="number">30</span>: aload_2</div><div class="line">     <span class="number">31</span>: invokevirtual <span class="meta">#6                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></div><div class="line">     <span class="number">34</span>: areturn</div></pre></td></tr></table></figure>
<p>可以看到，不仅循环部分的代码更简短、更简单，而且它只生成一个StringBuilder对象。显示地创建StringBuilder还允许你预先为其指定大小。如果你已经知道最终的字符串大概有多长，那预先指定StringBuilder的大小可以避免多次重新分配缓冲。</p>
<p>因此，当你为一个类编写toString()方法时，如果字符串操作比较简单，那就可以信赖编译器,它会为你合理地构造最终的字符串结果。但是，如果你要在toString方法中使用循环时，最好还是自己创建一个StringBuilder对象，用它来构造最终的结果。</p>
<h2 id="无意识的递归"><a href="#无意识的递归" class="headerlink" title="无意识的递归"></a>无意识的递归</h2><p>Java中的每个类从根本上都是继承自Object，标准容器类自然也不例外。因此容器类都有toString方法，并复写了该方法，使得它生成的String结果能够表达容器自身，以及容器所包含的对象。例如ArrayList.toString()，它会遍历ArrayList中包含的所有对象，调用每个元素上的toString方法：</p>
<p>如果你希望toString()方法打印出对象的内存地址，也许你会考虑使用this关键字：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfiniteRecursion</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Recursion address: "</span> + <span class="keyword">this</span> + <span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        List&lt;InfiniteRecursion&gt; list = <span class="keyword">new</span> ArrayList&lt;InfiniteRecursion&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">            list.add(<span class="keyword">new</span> InfiniteRecursion());</div><div class="line"></div><div class="line">        System.out.println(list);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果</div><div class="line">Exception in thread <span class="string">"main"</span> java.lang.StackOverflowError</div><div class="line">    at java.lang.String.getChars(String.java:<span class="number">826</span>)</div><div class="line">    at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:<span class="number">416</span>)</div><div class="line">    at java.lang.StringBuilder.append(StringBuilder.java:<span class="number">132</span>)</div><div class="line">    at com.micheal.java.staticdemo.InfiniteRecursion.toString(InfiniteRecursion.java:<span class="number">12</span>)</div><div class="line">    at com.micheal.java.staticdemo.InfiniteRecursion.toString(InfiniteRecursion.java:<span class="number">12</span>)</div><div class="line">    at com.micheal.java.staticdemo.InfiniteRecursion.toString(InfiniteRecursion.java:<span class="number">12</span>)</div></pre></td></tr></table></figure>
<p>这里发生了自动类型转换，由InfiniteRecursion类型转换成String类型。因为编译器看到一个String对象后面跟着”+”，而在后面的对象不是String而是this，于是编译器试着将this转换成一个String。它怎么转换的呢，正是通过调用this上的toString方法，于是就发生了递归调用，造成栈溢出。</p>
<p>如果你真的想要打印出对象的内存地址，应该调用Objec.toString()方法，所有，你应该调用super.toString()方法.</p>
<h2 id="String上的操作"><a href="#String上的操作" class="headerlink" title="String上的操作"></a>String上的操作</h2><p>以下是String对象具备的一些基本方法，重载的方法归纳在同一行中：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/string-String%E4%B8%8A%E7%9A%84%E6%93%8D%E4%BD%9C1.png" alt=""> <img src="http://7xs7a3.com1.z0.glb.clouddn.com/string-String%E4%B8%8A%E7%9A%84%E6%93%8D%E4%BD%9C2.png" alt=""></p>
<p>上上图表中可以看出，当需要改变字符串的内容时，String类的方法都会返回一个新的String对象。同时，如果内容没有发生改变，String的方法只是返回指向原对象的引用而已，这可以节约存储空间以及避免额外的开销。</p>
<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><h3 id="System-out-printf"><a href="#System-out-printf" class="headerlink" title="System.out.printf()"></a>System.out.printf()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.printf(<span class="string">"Row: %d %s\n"</span>,<span class="number">12</span>,<span class="string">"just"</span>);</div></pre></td></tr></table></figure>
<h3 id="System-out-format"><a href="#System-out-format" class="headerlink" title="System.out.format()"></a>System.out.format()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.format(<span class="string">"Row: %d %s\n"</span>,<span class="number">12</span>,<span class="string">"just"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;不可变String&quot;&gt;&lt;a href=&quot;#不可变String&quot; class=&quot;headerlink&quot; title=&quot;不可变String&quot;&gt;&lt;/a&gt;不可变String&lt;/h2&gt;&lt;p&gt;String对象时不可变的。查看JDK文档你就会发现，String类中每一个看起来会
    
    </summary>
    
      <category term="Java" scheme="http://liuguoquan727.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://liuguoquan727.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的构造函数调用顺序</title>
    <link href="http://liuguoquan727.github.io/2016/04/05/Java%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F/"/>
    <id>http://liuguoquan727.github.io/2016/04/05/Java中的构造函数调用顺序/</id>
    <published>2016-04-05T13:21:56.000Z</published>
    <updated>2016-04-05T13:28:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>面试题中经常这样的题目，分析子类父类构造函数的调用顺序，下面开始分情况讨论父类子类构造函数的调用顺序：</p>
<p>先创建两个类A和B，其中B继承A</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"A的无参构造函数"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"A的有参构造函数: "</span> + msg);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"A的print方法"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"B的无参构造函数"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">	<span class="comment">//	super(msg); //此句代码表示调用父类A的有参构造函数，不加此句代码则表示调用父类A的默认无参构造函数</span></div><div class="line">		System.out.println(<span class="string">"B的有参构造函数: "</span> + msg);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"B的print方法"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"A的add方法"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用上述类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	B b = <span class="keyword">new</span> B();</div><div class="line">	B b1 = <span class="keyword">new</span> B(<span class="string">"hello"</span>);</div><div class="line">	b.print();</div><div class="line">	b.add();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">A的无参构造函数</div><div class="line"><span class="keyword">B的无参构造函数</span></div><div class="line">A的无参构造函数: hello</div><div class="line"><span class="keyword">B的有参构造函数: </span>hello</div><div class="line"><span class="keyword">B的print方法</span></div><div class="line">A的<span class="keyword">add方法</span></div></pre></td></tr></table></figure>
<p>从运行结果可得出以下结论:</p>
<ul>
<li>实例化无参子类B时，先调用父类A的无参构造函数，再调用B的无参构造函数；</li>
<li>实例化有参子类B时，先调用父类A的默认无参构造函数，再调用B的有参构造函数；若要调用A的有参构造函数，则在类B的有参构造函数的第一行加上super(msg)这句代码。</li>
<li>子类B调用方法时有两种情况：一是如果子类B中的方法和父类A中的print方法一致时，则调用子类B中print的方法，但是可通过super.print()调用父类中的print方法;二是如果子类B中无add方法而父类A中有add方法时，则子类B的示例直接调用父类A中的add方法；</li>
<li>父类A不能调用子类B中的方法和变量</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试题中经常这样的题目，分析子类父类构造函数的调用顺序，下面开始分情况讨论父类子类构造函数的调用顺序：&lt;/p&gt;
&lt;p&gt;先创建两个类A和B，其中B继承A&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
    
    </summary>
    
      <category term="Java" scheme="http://liuguoquan727.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://liuguoquan727.github.io/tags/Java/"/>
    
      <category term="面试" scheme="http://liuguoquan727.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java中static关键字详解</title>
    <link href="http://liuguoquan727.github.io/2016/04/05/Java%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%A6%E8%A7%A3/"/>
    <id>http://liuguoquan727.github.io/2016/04/05/Java中static关键字详解/</id>
    <published>2016-04-05T13:20:58.000Z</published>
    <updated>2016-04-06T13:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>static是Java的一个关键字，我们在Java开发中经常使用static，static主要用于下面五种情况：</p>
<h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>我们可以将类级别的变量声明为static，静态变量是属于类的，而不是属于类创建的对象或实例的。因为静态变量被类的所有实例共用，所以是线程不安全的。通常静态变量还和关键字final一起用，作为所有对象共用的资源或常量。如果静态变量不是私有的，那么可以通过ClassName.variableName来访问它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String name;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"contacts"</span>;</div></pre></td></tr></table></figure>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>静态方法也属于类，不属于实例。静态类只能访问类的静态变量或调用类的静态方法。通常静态方法作为工具方法，被其他类使用，而不需要创建类的实例。<br>静态方法如果没有使用静态变量，则是线程安全的。因为静态方法内部声明的变量，每个线程调用时都会重新创建一份，而不会共用同一个存储单元。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="静态块"><a href="#静态块" class="headerlink" title="静态块"></a>静态块</h2><p>静态块是类加载器加载对象时要执行的一组语句，它用于初始化静态变量，通常用于类加载的时候创建静态资源。我们在静态块中不能访问非静态变量。我们可以在一个类中有多个静态块，尽管这么做没什么意义，静态块只会在类加载到内存中的时候执行一次。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String str;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">new</span> FinalDemo();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="string">"静态块3"</span>);</div><div class="line">		<span class="comment">//仅能访问静态变量和静态方法</span></div><div class="line">		str = <span class="string">"Just"</span>;</div><div class="line">		add(<span class="number">3</span>,<span class="number">4</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="string">"静态块1"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FinalDemo</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"构造函数"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">静态块<span class="number">3</span></div><div class="line">静态块<span class="number">1</span></div><div class="line">构造函数</div></pre></td></tr></table></figure></p>
<blockquote>
<p>由运行结果可知：</p>
<ul>
<li>静态块最先加载，其次是构造函数；</li>
<li>有多个静态块时，按静态块顺序加载；</li>
<li>静态块内部代码按顺序运行;</li>
</ul>
</blockquote>
<h2 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h2><p>一般我们对嵌套类使用static关键字，static不能用于最外层的类。静态的嵌套类和其他外层的类别无区别，嵌套只是方便打包。</p>
<p>下面我们来看一个使用static关键字的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 静态变量</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String str;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"str: "</span> + str);</div><div class="line">		System.out.println(<span class="string">"add(3,4):"</span>+add(<span class="number">3</span>, <span class="number">4</span>));</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 静态方法</div><div class="line">	 * <span class="doctag">@param</span> x</div><div class="line">	 * <span class="doctag">@param</span> y</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 静态块</div><div class="line">	 */</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="string">"静态块3"</span>);</div><div class="line">		<span class="comment">//仅能访问静态变量和静态方法</span></div><div class="line">		str = <span class="string">"Test"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 静态类</div><div class="line">	 * TODO</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStaticClass</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getTag</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">//只能访问外部类的静态变量或方法</span></div><div class="line">			<span class="keyword">return</span> str;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果是：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">静态块<span class="number">3</span></div><div class="line">str: Test</div><div class="line"><span class="keyword">add</span><span class="bash">(3,4):7</span></div><div class="line">staticclass tag: Test</div></pre></td></tr></table></figure></p>
<h2 id="静态导包"><a href="#静态导包" class="headerlink" title="静态导包"></a>静态导包</h2><p>静态导包就是java包的静态导入，用import static静态导入包是JDK1.5引入的特性。<br>一般我们导入一个类都用import com.java…className；而静态导入是这样：<code>import static com.java..className.*</code>。这里多了static关键字，还有就是类名后面多了<code>.*</code>，意思是导入这个类里所有的静态方法。当然也可以只导入某个静态方法，只要把<code>.*</code>替换成静态方法名就行了。然后在这个类中，就可以直接调用方法名来调用静态方法，而不必用<code>ClassName.</code>方法名的方式来调用。</p>
<p>优点：<br>这种方法可以简化一些操作，例如打印System.out.println()，就可以将其导入一个静态方法，在使用时直接println()就可以了。下面通过代码来看看两种方式的导包:</p>
<p>普通导包:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalImport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        System.out.println(Integer.MAX_VALUE);</div><div class="line">        System.out.println(Integer.toHexString(<span class="number">42</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>静态导包:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticImport</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        out.println(MAX_VALUE);</div><div class="line">        out.println(toHexString(<span class="number">43</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>两个类的运行结果都是一样的。</p>
<p>静态导包的几条原则：</p>
<ul>
<li>必须是import static而不是static import</li>
<li>提防含糊不清的static成员。例如，如果对Integer类和Long类执行了静态导入，引用MAX_VALUE时将导致一个编译器错误，因为Integer和Long都有一个MAX_VALUE常量，并且Java不会知道你在引用哪个MAX_VALUE。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;static是Java的一个关键字，我们在Java开发中经常使用static，static主要用于下面五种情况：&lt;/p&gt;
&lt;h2 id=&quot;静态变量&quot;&gt;&lt;a href=&quot;#静态变量&quot; class=&quot;headerlink&quot; title=&quot;静态变量&quot;&gt;&lt;/a&gt;静态变量&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="Java" scheme="http://liuguoquan727.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://liuguoquan727.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中final关键字详解</title>
    <link href="http://liuguoquan727.github.io/2016/04/05/Java%E4%B8%ADfinal%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%A6%E8%A7%A3/"/>
    <id>http://liuguoquan727.github.io/2016/04/05/Java中final关键字详解/</id>
    <published>2016-04-05T13:19:55.000Z</published>
    <updated>2016-04-05T13:20:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java开发中，我们常常见到final关键字，经常在使用匿名内部类的时候可能会经常用到final关键字。Java中的String类就是一个final类，下面我们就来详细了解一下final这个关键字的用法。</p>
<h2 id="final关键字的基本用法"><a href="#final关键字的基本用法" class="headerlink" title="final关键字的基本用法"></a>final关键字的基本用法</h2><p>Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。下面就从这三个方面来学习下final关键字的基本用法。</p>
<h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p>当final关键字修饰一个类时，表明这个类不能被继承。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/final-final%E4%BF%AE%E9%A5%B0%E7%B1%BB.png" alt=""></p>
<blockquote>
<p>在使用final修饰类的时候，要注意谨慎选择，除非这个类真的在以后不会用来继承或者是出于安全的考虑，尽量不要讲类设计为final类。</p>
</blockquote>
<h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><p>使用final关键字修饰方法的原因有两个：第一个原因是把方法锁定，以防止任何子类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用，但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升，不需要使用final方法进行这些优化。因此，如果想要禁止该方法在子类中被覆盖，那么久可以将该方法用final关键字修饰。</p>
<p>注：类的private方法会隐式地被指定为final方法。</p>
<h3 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h3><p>final修饰变量的基本语法：</p>
<ul>
<li>如果final修饰的是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；</li>
<li>如果final修饰的是引用类型的变量，则其初始化之后便不能再指向另一个对象；</li>
</ul>
<p>示例如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/final-final%E4%BF%AE%E9%A5%B0%E5%8F%98%E9%87%8F.png" alt=""></p>
<p>上面代码中，对变量i和obj的重新赋值都报错了。</p>
<h2 id="深入理解final关键字"><a href="#深入理解final关键字" class="headerlink" title="深入理解final关键字"></a>深入理解final关键字</h2><p>在了解final关键字的基本用法后，我们来看看final关键字容易混淆的地方。</p>
<h3 id="类的final变量和普通变量有什么区别？"><a href="#类的final变量和普通变量有什么区别？" class="headerlink" title="类的final变量和普通变量有什么区别？"></a>类的final变量和普通变量有什么区别？</h3><p>当用final作用于类的成员变量时，成员变量（注意是类的成员变量，局部变量只需要保证在使用之前被初始化赋值即可）必须在定义时或者构造器中进行初始化赋值，而且final变量一旦被初始化赋值之后，就不能再被赋值了。</p>
<p>final变量和普通变量到底有什么区别呢？先看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	</div><div class="line">	String a = <span class="string">"helloworld"</span>;</div><div class="line">	<span class="keyword">final</span> String b = <span class="string">"hello"</span>;</div><div class="line">	String c = <span class="string">"hello"</span>;</div><div class="line">	String d = b + <span class="string">"world"</span>;</div><div class="line">	String e = c + <span class="string">"world"</span>;</div><div class="line">	</div><div class="line">	System.out.println((a == d));</div><div class="line">	System.out.println((a == e));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>为什么第一个比较结果是true，而第二个比较结果为false？<br>这就是final变量和普变量的区别了，当final变量是基本数据类型以及String类型时，如果在编译期间能知道它的确切值，则编译器会把它当做编译器常量使用，也就是说用到该final变量的地方相当于直接访问这个常量，不需要在运行时确定。因此在上面的代码中，由于b被final修饰，因此会被当做编译器常量，所以在使用到b的地方会直接将变量b替换为它的值，而对于变量c的访问则在运行时通过链接来运行。要注意，只有在编译期间确切知道final变量值的情况下，编译器才会进行这样的优化，下面的这段代码就不会进行这样的优化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	</div><div class="line">	String a = <span class="string">"helloworld"</span>;</div><div class="line">	<span class="keyword">final</span> String b = getStr();</div><div class="line">	String c = <span class="string">"hello"</span>;</div><div class="line">	String d = b + <span class="string">"world"</span>;</div><div class="line">	String e = c + <span class="string">"world"</span>;</div><div class="line">	</div><div class="line">	System.out.println((a == d));</div><div class="line">	System.out.println((a == e));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"hell0"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果是：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">false</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h3 id="被final修饰的引用变量指向的对象内容可变吗？"><a href="#被final修饰的引用变量指向的对象内容可变吗？" class="headerlink" title="被final修饰的引用变量指向的对象内容可变吗？"></a>被final修饰的引用变量指向的对象内容可变吗？</h3><p>final修饰的引用变量一旦初始化赋值之后就不能再指向其他的对象，那么该引用变量指向的对象的内容可变吗？先看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">final</span> Person person = <span class="keyword">new</span> Person();</div><div class="line">		person.name = <span class="string">"liu"</span>;</div><div class="line">		person.age = <span class="number">27</span>;</div><div class="line">		System.out.println(person.toString());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String name = <span class="string">"zhang"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">0</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Person</span> <span class="comment">[name=liu, age=27]</span></div></pre></td></tr></table></figure>
<blockquote>
<p>由运行结果可知，引用变量被final修饰之后，虽然不能再指向其他的对象，但是它指向的对象的内容是可变的。</p>
</blockquote>
<h3 id="final和static"><a href="#final和static" class="headerlink" title="final和static"></a>final和static</h3><p>我们经常容易把final和static关键字混淆，static作用于成员变量用来表示只保存一份副本，而final的作用是用来保证变量不可变。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		MyClass class1 = <span class="keyword">new</span> MyClass();</div><div class="line">		System.out.println(<span class="string">"i: "</span> + class1.i);</div><div class="line">		System.out.println(<span class="string">"j: "</span> + class1.j);</div><div class="line"></div><div class="line">		MyClass class2 = <span class="keyword">new</span> MyClass();</div><div class="line">		System.out.println(<span class="string">"i: "</span> + class2.i);</div><div class="line">		System.out.println(<span class="string">"j: "</span> + class2.j);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> i = Math.random();</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> j = Math.random();</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">i</span>: 0.6230804434703052</div><div class="line"><span class="attribute">j</span>: 0.8707443438720905</div><div class="line"></div><div class="line"><span class="avrasm"><span class="symbol">i:</span> <span class="number">0.6451393896255735</span></span></div><div class="line"><span class="symbol">j:</span> <span class="number">0.8707443438720905</span></div></pre></td></tr></table></figure>
<p>从结果可知，每次打印的i值不同，而j值都是一样的。从这里口可以知道final和static的区别了。</p>
<h3 id="匿名内部类中使用的外部局部变量为什么只能是final变量？"><a href="#匿名内部类中使用的外部局部变量为什么只能是final变量？" class="headerlink" title="匿名内部类中使用的外部局部变量为什么只能是final变量？"></a>匿名内部类中使用的外部局部变量为什么只能是final变量？</h3><p>保证数据的一致性。Java编译器限定必须将外部局部变量限制为final变量，不允许对外部局部变量进行更改（对应引用类型的变量，是不允许指向新的对象），这样就保证了数据的一致性。</p>
<h3 id="关于final参数的问题"><a href="#关于final参数的问题" class="headerlink" title="关于final参数的问题"></a>关于final参数的问题</h3><p>关于网上流传的“当你在方法中不需要改变作为参数的对象变量时，明确使用final进行声明，会防止你无意的修改而影响到调用方法外的变量”，这句话其实是不恰当的。<br>因为无论参数是基本数据类型的变量还是引用类型的变量，使用final声明都不会达到上面所说的效果。</p>
<p>下面看例子：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/final-final%E4%BF%AE%E9%A5%B0%E5%8F%82%E6%95%B0.png" alt=""></p>
<p>上面的代码像是让人觉得final修饰之后，就不能在方法中更改变量i的值了。殊不知，方法changValue和main方法中的变量i根本就不是一个变量，因为对于基本类型的变量，Java参数传递采用的是值传递，相当于直接将变量进行了拷贝，所以即使没有final修饰的情况下，在方法内部改变了变量i的值也不会影响方法外的i。</p>
<p>再看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		MyClass myClass = <span class="keyword">new</span> MyClass();</div><div class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">"hello"</span>);</div><div class="line">		myClass.changValue(buffer);</div><div class="line">		System.out.println(buffer.toString());</div><div class="line">		myClass.changValue2(buffer);</div><div class="line">		System.out.println(buffer.toString());</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">		</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changValue</span><span class="params">(<span class="keyword">final</span> StringBuffer buffer)</span> </span>&#123;</div><div class="line">		buffer.append(<span class="string">"world"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changValue2</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</div><div class="line">		StringBuffer buffer2 = buffer;</div><div class="line">		buffer2.append(<span class="string">"你好"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果是：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">helloworld</span></div><div class="line">helloworld你好</div></pre></td></tr></table></figure>
<p>由结果可知，很显然，用final进行修饰参数和不修饰参数都没有阻止在changeValue中改变buffer指向的对象的内容。原因在对于引用数据类型，Java采用的是按引用传递，传递的是引用的地址，也就是变量所对象的内存空间的地址。在这里形参和实参指向的是同一个对象，因此让形参重新指向另一个对象对实参并没有任何影响。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java开发中，我们常常见到final关键字，经常在使用匿名内部类的时候可能会经常用到final关键字。Java中的String类就是一个final类，下面我们就来详细了解一下final这个关键字的用法。&lt;/p&gt;
&lt;h2 id=&quot;final关键字的基本用法&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Java" scheme="http://liuguoquan727.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://liuguoquan727.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android动画之Interpolator</title>
    <link href="http://liuguoquan727.github.io/2016/03/31/Android%E5%8A%A8%E7%94%BB%E4%B9%8BInterpolator/"/>
    <id>http://liuguoquan727.github.io/2016/03/31/Android动画之Interpolator/</id>
    <published>2016-03-31T13:47:19.000Z</published>
    <updated>2016-04-19T14:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Interpolator可以翻译成插值器。Android中interpolator的最底层接口如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.animation;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 时间插值器定义了一个动画的变化率。</div><div class="line"> * 这让动画让非线性的移动轨迹，例如加速和减速。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * A time interpolator defines the rate of change of an animation. This allows animations</div><div class="line"> * to have non-linear motion, such as acceleration and deceleration.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeInterpolator</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将动画已经消耗的时间的分数映射到一个表示插值的分数。</div><div class="line">     * 然后将插值与动画的变化值相乘来推导出当前已经过去的动画时间的动画变化量。</div><div class="line">     * &lt;hr/&gt;</div><div class="line">     * Maps a value representing the elapsed fraction of an animation to a value that represents</div><div class="line">     * the interpolated fraction. This interpolated value is then multiplied by the change in</div><div class="line">     * value of an animation to derive the animated value at the current elapsed animation time.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> input  一个0到1.0表示动画当前点的值，0表示开头。1表示结尾&lt;br/&gt; A value between 0 and 1.0 indicating our current point</div><div class="line">     *        in the animation where 0 represents the start and 1.0 represents</div><div class="line">     *        the end</div><div class="line">     * <span class="doctag">@return</span>   插值。它的值可以大于1来超出目标值，也小于0来空破底线。</div><div class="line">     *         interpolators which overshoot their targets, or less than 0 for</div><div class="line">     *         interpolators that undershoot their targets.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TimeInterpolator是在Android API11加入，之前的类叫Interpolator。现在Interpolator继承了TimeInterpolator</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.animation.TimeInterpolator;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 一个定义动画变化率的插值器。</div><div class="line"> * 它允许对基本的（如透明，缩放，平移，旋转）进行加速，减速，重复等动画效果</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator defines the rate of change of an animation. This allows</div><div class="line"> * the basic animation effects (alpha, scale, translate, rotate) to be</div><div class="line"> * accelerated, decelerated, repeated, etc.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interpolator</span> <span class="keyword">extends</span> <span class="title">TimeInterpolator</span> </span>&#123;</div><div class="line">    <span class="comment">// A new interface, TimeInterpolator, was introduced for the new android.animation</span></div><div class="line">    <span class="comment">// package. This older Interpolator interface extends TimeInterpolator so that users of</span></div><div class="line">    <span class="comment">// the new Animator-based animations can use either the old Interpolator implementations or</span></div><div class="line">    <span class="comment">// new classes that implement TimeInterpolator directly.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插值器分析"><a href="#插值器分析" class="headerlink" title="插值器分析"></a>插值器分析</h2><h3 id="AccelerateInterpolator-加速插值器"><a href="#AccelerateInterpolator-加速插值器" class="headerlink" title="AccelerateInterpolator  加速插值器"></a>AccelerateInterpolator  加速插值器</h3><p>效果：在动画开始的地方速率改变比较慢，然后开始加速</p>
<p>源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 一个开始很慢然后不断加速的插值器。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the rate of change starts out slowly and</div><div class="line"> * and then accelerates.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccelerateInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mFactor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mDoubleFactor;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        mFactor = <span class="number">1.0f</span>;</div><div class="line">        mDoubleFactor = <span class="number">2.0</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> factor </div><div class="line">     *     动画的快慢度。将factor设置为1.0f会产生一条y=x^2的抛物线。</div><div class="line">增加factor到1.0f之后为加大这种渐入效果（也就是说它开头更加慢，结尾更加快）</div><div class="line">     *   &lt;br/&gt;Degree to which the animation should be eased. Seting</div><div class="line">     *        factor to 1.0f produces a y=x^2 parabola（抛物线）. Increasing factor above</div><div class="line">     *        1.0f  exaggerates the ease-in effect (i.e., it starts even</div><div class="line">     *        slower and ends evens faster)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateInterpolator</span><span class="params">(<span class="keyword">float</span> factor)</span> </span>&#123;</div><div class="line">        mFactor = factor;</div><div class="line">        mDoubleFactor = <span class="number">2</span> * mFactor;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a =</div><div class="line">                context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.AccelerateInterpolator);</div><div class="line"> </div><div class="line">        mFactor = a.getFloat(com.android.internal.R.styleable.AccelerateInterpolator_factor, <span class="number">1.0f</span>);</div><div class="line">        mDoubleFactor = <span class="number">2</span> * mFactor;</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mFactor == <span class="number">1.0f</span>) &#123;</div><div class="line">            <span class="keyword">return</span> input * input;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">float</span>)Math.pow(input, mDoubleFactor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法可知加速度的大小由参数mFactor决定。<br>当mFactor值为1.0f时，动画加速轨迹相对于一条y=x^2的抛物线。如下图</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AccelerateInterpolator_1.png" alt=""></p>
<p>当mFactor不为1时，轨迹曲线是y=x^(2 * mFactor)(0 &lt; x &lt;= 1)的曲线。<br>示例：当mFractor为4时，插值器的加速轨迹曲线如下图:</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AccelerateInterpolator_2.png" alt=""></p>
<p>如果你在使用AccelerateInterpolator，想要那种一开始很慢，然后突然就很快的加速的动画效果的话，就将mFractor的值设置大点。</p>
<h3 id="DecelerateInterpolator减速插值器"><a href="#DecelerateInterpolator减速插值器" class="headerlink" title="DecelerateInterpolator减速插值器"></a>DecelerateInterpolator减速插值器</h3><p>效果：在动画开始的地方速率改变比较慢，然后开始加速</p>
<p>源代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个开始比较快然后减速的插值器</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the rate of change starts out quickly and</div><div class="line"> * and then decelerates.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecelerateInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecelerateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> factor</div><div class="line">     *        动画的快慢度。将factor值设置为1.0f时将产生一条从上向下的y=x^2抛物线。</div><div class="line">     *        增加factor到1.0f以上将使渐入的效果增强（也就是说，开头更快，结尾更慢）</div><div class="line">     *        &lt;br/&gt;</div><div class="line">     *        Degree to which the animation should be eased. Setting factor to 1.0f produces</div><div class="line">     *        an upside-down y=x^2 parabola. Increasing factor above 1.0f makes exaggerates the</div><div class="line">     *        ease-out effect (i.e., it starts even faster and ends evens slower)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecelerateInterpolator</span><span class="params">(<span class="keyword">float</span> factor)</span> </span>&#123;</div><div class="line">        mFactor = factor;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecelerateInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a =</div><div class="line">                context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.DecelerateInterpolator);</div><div class="line"> </div><div class="line">        mFactor = a.getFloat(com.android.internal.R.styleable.DecelerateInterpolator_factor, <span class="number">1.0f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> result;</div><div class="line">        <span class="keyword">if</span> (mFactor == <span class="number">1.0f</span>) &#123;</div><div class="line">            result = (<span class="number">1.0f</span> - ((<span class="number">1.0f</span> - input) * (<span class="number">1.0f</span> - input)));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result = (<span class="keyword">float</span>)(<span class="number">1.0f</span> - Math.pow((<span class="number">1.0f</span> - input), <span class="number">2</span> * mFactor));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mFactor = <span class="number">1.0f</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法可知加速度的大小由参数mFactor决定。<br>当mFactor为1.0f时，它减速的轨迹函数为y=1-(1 - X)^2;如下图</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-DecelerateInterpolator_1.png" alt=""></p>
<p>当mFactor不为1.0f时，它减速的轨迹函数为:y=1.0 - (1.0 -x )^(2 * mFactor)。<br>当mFactor增大到4时，曲线轨迹如下图所示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-DecelerateInterpolator_2.png" alt=""></p>
<h3 id="AccelerateDecelerateInterpolator-加速减速插值器"><a href="#AccelerateDecelerateInterpolator-加速减速插值器" class="headerlink" title="AccelerateDecelerateInterpolator  加速减速插值器"></a>AccelerateDecelerateInterpolator  加速减速插值器</h3><p>效果：动画开始与结束的地方速率改变比较慢，在中间的时候加速</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个变化率开始慢从中间后开始变快。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the rate of change starts and ends slowly but</div><div class="line"> * accelerates through the middle.</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccelerateDecelerateInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateDecelerateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateDecelerateInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)(Math.cos((input + <span class="number">1</span>) * Math.PI) / <span class="number">2.0f</span>) + <span class="number">0.5f</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法可以得出其变化曲线如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AccelerateDecelerateInterpolator.png" alt=""></p>
<h3 id="LinearInterpolator-线性插值器"><a href="#LinearInterpolator-线性插值器" class="headerlink" title="LinearInterpolator 线性插值器"></a>LinearInterpolator 线性插值器</h3><p>效果:动画按常速率变化</p>
<p>源代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * An interpolator where the rate of change is constant</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> input;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BounceInterpolator-弹跳插值器"><a href="#BounceInterpolator-弹跳插值器" class="headerlink" title="BounceInterpolator 弹跳插值器"></a>BounceInterpolator 弹跳插值器</h3><p>效果:动画结束的时候弹起</p>
<p>源代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个插值器的插值在后面呈弹跳状态。</div><div class="line"> * An interpolator where the change bounces at the end.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BounceInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BounceInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BounceInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">bounce</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t * t * <span class="number">8.0f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="comment">// _b(t) = t * t * 8</span></div><div class="line">        <span class="comment">// bs(t) = _b(t) for t &lt; 0.3535</span></div><div class="line">        <span class="comment">// bs(t) = _b(t - 0.54719) + 0.7 for t &lt; 0.7408</span></div><div class="line">        <span class="comment">// bs(t) = _b(t - 0.8526) + 0.9 for t &lt; 0.9644</span></div><div class="line">        <span class="comment">// bs(t) = _b(t - 1.0435) + 0.95 for t &lt;= 1.0</span></div><div class="line">        <span class="comment">// b(t) = bs(t * 1.1226)</span></div><div class="line">        t *= <span class="number">1.1226f</span>;</div><div class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0.3535f</span>) <span class="keyword">return</span> bounce(t);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0.7408f</span>) <span class="keyword">return</span> bounce(t - <span class="number">0.54719f</span>) + <span class="number">0.7f</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0.9644f</span>) <span class="keyword">return</span> bounce(t - <span class="number">0.8526f</span>) + <span class="number">0.9f</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> bounce(t - <span class="number">1.0435f</span>) + <span class="number">0.95f</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法得到以下插值曲线图：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-BounceInterpolator.png" alt=""></p>
<h3 id="AnticipateInterpolator-回荡秋千插值器"><a href="#AnticipateInterpolator-回荡秋千插值器" class="headerlink" title="AnticipateInterpolator 回荡秋千插值器"></a>AnticipateInterpolator 回荡秋千插值器</h3><p>效果：开始的时候向后，然后向前甩</p>
<p>源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个开始向后荡，然后向前荡的插值器。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the change starts backward then flings forward.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnticipateInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mTension;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTension = <span class="number">2.0f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> tension </div><div class="line">     *  绷紧程度，当绷紧程序为0.0f时，也就没有了反向作用力。插值器将退化成一个y=x^3的加速插值器。</div><div class="line">     * &lt;br/&gt;</div><div class="line">     * Amount of anticipation. When tension equals 0.0f, there is</div><div class="line">     *                no anticipation and the interpolator becomes a simple</div><div class="line">     *                acceleration interpolator.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateInterpolator</span><span class="params">(<span class="keyword">float</span> tension)</span> </span>&#123;</div><div class="line">        mTension = tension;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs,</div><div class="line">                com.android.internal.R.styleable.AnticipateInterpolator);</div><div class="line"> </div><div class="line">        mTension =</div><div class="line">                a.getFloat(com.android.internal.R.styleable.AnticipateInterpolator_tension, <span class="number">2.0f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="comment">// a(t) = t * t * ((tension + 1) * t - tension)</span></div><div class="line">        <span class="keyword">return</span> t * t * (((mTension + <span class="number">1</span>) * t) - mTension);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法：</p>
<p>当tension为默认值2时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AnticipateInterpolator_1.png" alt=""></p>
<p>当tension为4时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AnticipateInterpolator_2.png" alt=""></p>
<h3 id="AnticipateOvershootInterpolator"><a href="#AnticipateOvershootInterpolator" class="headerlink" title="AnticipateOvershootInterpolator"></a>AnticipateOvershootInterpolator</h3><p>效果：开始的时候向后，然后向前甩一定值后 返回最后的值</p>
<p>源代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个插值器它开始向上推，然后向下荡，荡过最低线。然后再回到最低线。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the change starts backward then flings forward and overshoots</div><div class="line"> * the target value and finally goes back to the final value.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnticipateOvershootInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mTension;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateOvershootInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTension = <span class="number">2.0f</span> * <span class="number">1.5f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> tension </div><div class="line">     *  anticipation/overshoot的比值。当和tension值为0.0f时，</div><div class="line">     *  也就没有anticipation/overshoot的比值了，插值器退化为一个加速/减速插值器。</div><div class="line">     *  &lt;br/&gt;</div><div class="line">     * Amount of anticipation/overshoot. When tension equals 0.0f,</div><div class="line">     *                there is no anticipation/overshoot and the interpolator becomes</div><div class="line">     *                a simple acceleration/deceleration interpolator.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateOvershootInterpolator</span><span class="params">(<span class="keyword">float</span> tension)</span> </span>&#123;</div><div class="line">        mTension = tension * <span class="number">1.5f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> tension Amount of anticipation/overshoot. When tension equals 0.0f,</div><div class="line">     *                there is no anticipation/overshoot and the interpolator becomes</div><div class="line">     *                a simple acceleration/deceleration interpolator.</div><div class="line">     * <span class="doctag">@param</span> extraTension </div><div class="line">     * 乘以tension的值。例如，在上面构造函数中extraTension的值为1.5f</div><div class="line">     * &lt;br/&gt;</div><div class="line">     * Amount by which to multiply the tension. For instance,</div><div class="line">     *                     to get the same overshoot as an OvershootInterpolator with</div><div class="line">     *                     a tension of 2.0f, you would use an extraTension of 1.5f.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateOvershootInterpolator</span><span class="params">(<span class="keyword">float</span> tension, <span class="keyword">float</span> extraTension)</span> </span>&#123;</div><div class="line">        mTension = tension * extraTension;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateOvershootInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, AnticipateOvershootInterpolator);</div><div class="line"> </div><div class="line">        mTension = a.getFloat(AnticipateOvershootInterpolator_tension, <span class="number">2.0f</span>) *</div><div class="line">                a.getFloat(AnticipateOvershootInterpolator_extraTension, <span class="number">1.5f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">a</span><span class="params">(<span class="keyword">float</span> t, <span class="keyword">float</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t * t * (((s + <span class="number">1</span>) * t) - s);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">o</span><span class="params">(<span class="keyword">float</span> t, <span class="keyword">float</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t * t * (((s + <span class="number">1</span>) * t) + s);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="comment">// a(t, s) = t * t * ((s + 1) * t - s)</span></div><div class="line">                <span class="comment">// o(t, s) = t * t * ((s + 1) * t + s)</span></div><div class="line">        <span class="comment">// f(t) = 0.5 * a(t * 2, tension * extraTension), when t &lt; 0.5</span></div><div class="line">        <span class="comment">// f(t) = 0.5 * (o(t * 2 - 2, tension * extraTension) + 2), when t &lt;= 1.0</span></div><div class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0.5f</span>) <span class="keyword">return</span> <span class="number">0.5f</span> * a(t * <span class="number">2.0f</span>, mTension);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0.5f</span> * (o((t * <span class="number">2.0f</span>) - <span class="number">2.0f</span>, mTension) + <span class="number">2.0f</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当tension为默认值时，曲线图为：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AnticipateOvershootInterpolator.png" alt=""></p>
<h3 id="CycleInterpolator-正弦周期变化插值器"><a href="#CycleInterpolator-正弦周期变化插值器" class="headerlink" title="CycleInterpolator 正弦周期变化插值器"></a>CycleInterpolator 正弦周期变化插值器</h3><p> 效果：动画循环播放特定的次数，速率改变沿着正弦曲线</p>
<p>源代码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 以指定的周期重复动画。变化率曲线为正弦。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * Repeats the animation for a specified number of cycles（周期）. The</div><div class="line"> * rate of change follows a sinusoidal（正弦） pattern.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CycleInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> cycles 要重复的周期数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CycleInterpolator</span><span class="params">(<span class="keyword">float</span> cycles)</span> </span>&#123;</div><div class="line">        mCycles = cycles;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CycleInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a =</div><div class="line">                context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.CycleInterpolator);</div><div class="line"> </div><div class="line">        mCycles = a.getFloat(com.android.internal.R.styleable.CycleInterpolator_cycles, <span class="number">1.0f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)(Math.sin(<span class="number">2</span> * mCycles * Math.PI * input));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCycles;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当cycle值为1时，即变化一周时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-CycleInterpolator%20png.png" alt=""></p>
<h3 id="OvershootInterpolator"><a href="#OvershootInterpolator" class="headerlink" title="OvershootInterpolator"></a>OvershootInterpolator</h3><p>效果：向前甩一定值后再回到原来位置</p>
<p>源代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * An interpolator where the change flings forward and overshoots the last value</div><div class="line"> * then comes back.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OvershootInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mTension;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OvershootInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTension = <span class="number">2.0f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> tension Amount of overshoot. When tension equals 0.0f, there is</div><div class="line">     *                no overshoot and the interpolator becomes a simple</div><div class="line">     *                deceleration interpolator.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OvershootInterpolator</span><span class="params">(<span class="keyword">float</span> tension)</span> </span>&#123;</div><div class="line">        mTension = tension;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OvershootInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs,</div><div class="line">                com.android.internal.R.styleable.OvershootInterpolator);</div><div class="line"> </div><div class="line">        mTension =</div><div class="line">                a.getFloat(com.android.internal.R.styleable.OvershootInterpolator_tension, <span class="number">2.0f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="comment">// _o(t) = t * t * ((tension + 1) * t + tension)</span></div><div class="line">        <span class="comment">// o(t) = _o(t - 1) + 1</span></div><div class="line">        t -= <span class="number">1.0f</span>;</div><div class="line">        <span class="keyword">return</span> (t * t * (((mTension + <span class="number">1</span>) * t) + mTension)) + <span class="number">1.0f</span>;</div><div class="line">        <span class="comment">//plot &#123;(x-1)(x-1)((tension+1)(x-1)+tension)+1,(0&lt;x&lt;=1)&#125;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当tension为默认值2时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-OvershootInterpolator%20_1.png" alt=""></p>
<p>当tension的值为4时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-OvershootInterpolator_3.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Interpolator可以翻译成插值器。Android中interpolator的最底层接口如下:&lt;/p&gt;
&lt;figure class=&quot;
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android动画" scheme="http://liuguoquan727.github.io/tags/Android%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>读书札记</title>
    <link href="http://liuguoquan727.github.io/2016/03/18/%E8%AF%BB%E4%B9%A6%E6%9C%AD%E8%AE%B0/"/>
    <id>http://liuguoquan727.github.io/2016/03/18/读书札记/</id>
    <published>2016-03-17T16:02:15.000Z</published>
    <updated>2016-03-17T16:23:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>There is always another way.</p>
<p>You know, people get up everyday, do the same thing, they tell themselves they change their life one day, they never do. I am gonna change my life. —-《城中大盗》</p>
<p>思考的时候，要像外行一样单纯直接，实践的时候则要像专家一样严密细致，并且要以专业知识和方法武装起来的“我做得到”的乐观精神。要记住，独特的、好的创意和好的结果，不管对研究而言，还是对商业运作而言，都不是自己突然冒出来的东西，那一定是刻苦的努力和长期的思考带来的。 —-金出武雄</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There is always another way.&lt;/p&gt;
&lt;p&gt;You know, people get up everyday, do the same thing, they tell themselves they change their life one 
    
    </summary>
    
      <category term="读书札记" scheme="http://liuguoquan727.github.io/categories/%E8%AF%BB%E4%B9%A6%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="读书札记" scheme="http://liuguoquan727.github.io/tags/%E8%AF%BB%E4%B9%A6%E6%9C%AD%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程之依赖倒置原则</title>
    <link href="http://liuguoquan727.github.io/2016/03/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/"/>
    <id>http://liuguoquan727.github.io/2016/03/11/面向对象编程之依赖倒置原则/</id>
    <published>2016-03-11T12:45:16.000Z</published>
    <updated>2016-04-17T07:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>依赖倒置原则英文全称是Dependence Inversion Principle，缩写是DIP。依赖倒置原则指代了一种特定解耦形式，使得高层次的模块不依赖于低层次的模块的实现细节的目的，依赖模块被颠倒了。这到底是什么意思呢？</p>
<p>依赖倒置原则则有以下关键点：</p>
<ul>
<li>高层模块不应该依赖底层模块，两者都应该依赖其抽象；</li>
<li>抽象不应该依赖细节。</li>
<li>细节应该依赖抽象。</li>
</ul>
<p>在Java语言中，抽象就是指接口或抽象类，两者都是不能直接被实例化的；细节就是实现类，实现接口或者继承抽象类而产生的类就是细节，其特点就是，可以直接被实例化，也就是可以加上关键字new产生的对象。<strong>高层模块就是调用端，底层模块就是具体实现类。</strong></p>
<p>依赖倒置原则在Java语言中的表现就是：模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或者抽象类产生的。概况为一句话就是：面向接口编程，或者说是面向抽象编程，这里的抽象只得就是接口或抽象类。面向接口是面向对象的精髓之一。</p>
<p>如果类与类直接依赖于细节，那么他们之间就有直接的耦合，当具体实现需要变化时，意味着需要同时修改依赖者的代码，这限制了系统的可扩展性。</p>
<p>在前面的面向对象编程之开闭原则这一节中，ImageLoader直接依赖于MemoryCache，这个MemoryCache事一个具体实现，而不是一个抽象类或者接口。这就导致了ImageLoader直接依赖了具体的细节，当MemoryCache不能满足ImageLoader而需要被其他缓存实现替换时，此时就必须修改ImageLoader的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    MemoryCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =   mMemoryCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		dowloadImage(url,imageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>随着产品的升级，用户发现MemoryCache以及不能满足需求，用户需要小民的ImageLoader可以将图片同时缓存到内存和SD卡中，或者可以让用户自定义实现缓存。此时，我们的 MemoryCache这个类名不仅不能够表达内存缓存和SD卡缓存的意义，也不能满足功能。另外，用户需要自定义缓存实现时还必须继承自MemoryCache，而用户的缓存实现可不一定与内存缓存有关，这在命名上的限制也让用户体验不好。重构的时候到了！第一种方案是将MemoryCache修改为DoubleCache，然后在DoubleCache中实现具体的缓存功能。我们需要将ImageLoader修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    DoubleCache mDoubleCache = <span class="keyword">new</span> DoubleCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =   mDoubleCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		dowloadImage(url,imageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在程序中我们将MemoryCache修改成DoubleCache，然后修改了ImageLoader中缓存类的具体实现，轻轻松松就满足了用户需求。这不还是依赖具体的实现类吗？当用户的需求发生变化时，我们又要通过修改缓存实现类和ImageLoader代码来实现？</p>
<p>针对这些问题，给出的解决方案就要能够让缓存系统更加灵活。一句话概括起来就是：依赖抽象，而不是依赖具体实现。针对图片缓存，建立ImageCache抽象（开闭原则小节所述），该抽象增加了get和put方法用以实现图片的存取。每种缓存实现都必须实现这个接口，并且实现自己的存取方法。当用户需要使用不同的缓存实现时，直接通过依赖注入即可，保证了系统的灵活性。我们来回顾一下相关代码：</p>
<p>ImageCache缓存接口类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 缓存图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ImageLoader类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    ImageCache mImageCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注入缓存实现</div><div class="line">     * <span class="doctag">@param</span> cache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIamgeCache</span><span class="params">(ImageCache cache)</span> </span>&#123;</div><div class="line">        mImageCache = cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =   mImageCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		dowloadImage(url,imageView);</div></pre></td></tr></table></figure>
<p>在这里，我们建立了ImageCache抽象类，并且让ImageLoader依赖于抽象而不是具体细节。当需求发生变化时，只要实现ImageCache类或者继承其他已有的ImageCache子类完成相应的缓存功能，然后将具体的实现类注入到ImageLoader即可实现缓存功能的替换，这就保证的缓存系统的高可扩展性，有了拥抱变化的能力，这就是依赖倒置原则。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;依赖倒置原则英文全称是Dependence Inversion Principle，缩写是DIP。依赖倒置原则指代了一种特定解耦形式，使得高层次的模块不依赖于低层次的模块的实现细节的目的，依赖模块被颠倒了。这到底是什么意思呢？&lt;/p&gt;
&lt;p&gt;依赖倒置原则则有以下关键点：&lt;/
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程之里氏替换原则</title>
    <link href="http://liuguoquan727.github.io/2016/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>http://liuguoquan727.github.io/2016/03/08/面向对象编程之里氏替换原则/</id>
    <published>2016-03-08T15:45:48.000Z</published>
    <updated>2016-04-17T07:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>里氏替换原则的英文全称是Liskov Substitution Principle，缩写是LSP。</p>
<p>LSP第一种定义是：如果对每一个类型的为S的对象O1，都有类型为T的对象O2，使得以T定义的所有程序P在所有对象O1都替换成O2时，程序P的行为不会发生变化，那么类型S是类型T的子类型。这不太好理解。</p>
<p>LSP的第二种定义是：所有引用基类的地方必须能透明地使用其子类的对象。通俗的讲就是：只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或者异常，使用者可能根本就不需要知道是父类还是子类，但是，反过来就不行了，有子类出现的地方，父类未必就能适应。因为子类有的东西父类不一定有。</p>
<p>说了这么多，最终总结就两个字：抽象。为了便于理解这个原则，我们写了一个简单示例来描述，先看UML图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-55a69a62200a6871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="里氏替换原则UML图"></p>
<p>再来看看具体的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 窗口类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span>  </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">show</span><span class="params">(View chile)</span> </span>&#123;</div><div class="line">        chile.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 建立视图抽象，测量视图的宽高为公用代码，绘制实现交给具体的子类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> width,<span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Button的具体实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//绘制Button</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * TextView的具体实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//绘制TextV</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述示例中，Window依赖于View，而View定义了一个视图抽象，measure是各个子类共享的方法，子类通过覆写View的draw方法实现各自的功能。任何继承自View的子类都可以设置给Window的show方法，这就是里氏替换原则。通过里氏替换，就可以自定义各自各样的view，然后传递个Window，Window负责组织view，并且将View显示到屏幕上。</p>
<p>里氏替换原则的核心是抽象，抽象又依赖于继承这个特性，在OOP当中，继承的优缺点都相当的明显。优点为：</p>
<ul>
<li>代码重用，减少创建的成本，每个子类拥有父类的方法和属性</li>
<li>子类和父类基本相似，但又与父类有所区别</li>
<li>提高代码的可扩展性,实现父类的方法就可以了，很多开源框架的扩展接口都是通过继承父类完成的。</li>
<li>提高产品或项目的开放性。</li>
</ul>
<p>继承的缺点：</p>
<ul>
<li>继承是侵入性的，只要继承就必须拥有父类的所有属性和方法</li>
<li>可能造成子类代码冗余、灵活性降低，因为子类必须拥有父类的属性和方法</li>
<li>增强了耦合性。当父类的常量、变量和方法被修改时，必须考虑子类的修改，而且在缺乏规范的环境下，这种修好可能带来非常糟糕的结果—大片的代码需要重构。</li>
</ul>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a><strong>结束</strong></h2><p>开闭原则中的示例图片缓存系统也很好地反应了里氏替换原则，即MemoryCache、DiskCache、DoubleCache都可以替换成ImageCache的工作，并保证行为的正确性。实际中，开闭原则和里氏替换原则往往是相互关联的，通过里氏替换来达到扩展开放、修改关闭的效果。然而，这两个原则都强调一个OOP的重要特性–抽象。</p>
<h2 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a><strong>参考书籍</strong></h2><p>《Android源码设计模式》 何红辉、关爱民著</p>
<p>March 17, 2016 11:48 PM</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;里氏替换原则的英文全称是Liskov Substitution Principle，缩写是LSP。&lt;/p&gt;
&lt;p&gt;LSP第一种定义是：如果对每一个类型的为S的对象O1，都有类型为T的对象O2，使得以T定义的所有程序P在所有对象O1都替换成O2时，程序P的行为不会发生变化，那
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程之开闭原则</title>
    <link href="http://liuguoquan727.github.io/2016/03/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    <id>http://liuguoquan727.github.io/2016/03/07/面向对象编程之开闭原则/</id>
    <published>2016-03-07T14:53:20.000Z</published>
    <updated>2016-04-17T07:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>开闭原则的英文全称是Open Close Principle，缩写是OCP，它是Java世界里最基础的设计原则，它指导我们如何建立一个稳定的、灵活的系统。开闭原则的定义是：软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是对于修改是封闭的。</p>
<p>勃兰特-梅耶在1988年出版的《面向对象软件构造》一书中提出这一原则—开闭原则。这一想法认为，程序一旦开发完成，程序中一个类的实现只应该因错误而被修改，新的或者改变的特性应该通过新建不同的类实现，新建的类可以通过继承的方式来重用原类的代码。显然梅耶的定义提倡实现继承，已存在的实现类对于修改时封闭的，但是新的类可以通过覆写父类的接口应对变化。</p>
<h2 id="引入其他缓存方式"><a href="#引入其他缓存方式" class="headerlink" title="引入其他缓存方式"></a><strong>引入其他缓存方式</strong></h2><p>说了这么多，下面还是以一个简单示例来说明开闭原则：</p>
<p>在对ImageLoader进行了一次重构之后的ImageLoader职责单一、结构清晰，算是个不错的开始。随着用户的增多，有些问题开始暴露出来：缓存系统是最让大家吐槽的地方，通过内存缓存解决了每次从网络加载图片的问题，但是，Android应用的内存很有限，且具有易失性，即当应用重新启动之后，原来已经加载过的图片将会丢失，这样重启之后及需要重新下载图片！而这又会导致加载缓慢、耗费用户流量的问题。针对以上问题考虑引入<strong>SD卡缓存</strong>，这样下载过的图片就会缓存到本地，即使重启应用也不需要重新下载了，接下来开始实现SD卡缓存。</p>
<p>DiskCache.java类，将图片缓存到SD卡中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.ocp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * SD卡图片缓存</div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_DIR = <span class="string">"/sdcard/cache/"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从缓存中获取图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeFile(CACHE_DIR + url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将图片存入SD卡中</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url,Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">        FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            out = <span class="keyword">new</span> FileOutputStream(CACHE_DIR + url);</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG,<span class="number">100</span>,out);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    out.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MemoryCache类，把图片缓存到内存中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.ocp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.util.LruCache;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理图片缓存</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemoryCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initImageCache</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//计算可使用的最大内存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">        <span class="comment">//取内存的四分之一作为缓存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">4</span>;</div><div class="line"></div><div class="line">        mImageCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将图片存入缓存</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key,Bitmap bitmap)</span> </span>&#123;</div><div class="line">        mImageCache.put(key,bitmap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 取出缓存图片</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mImageCache.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为需要将图片缓存到SD卡中，所有ImageLoader代码有所更新，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    MemoryCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SD卡缓存</div><div class="line">     */</div><div class="line">    DiskCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否使用SD卡缓存</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isUseDiskCache = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =  isUseDiskCache ? mDiskCache.get(url) :  mMemoryCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//没有缓存则提交线程池下载</span></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//将下载的图片存入内存</span></div><div class="line">                mMemoryCache.put(url,bitmap);</div><div class="line">                mDiskCache.put(url,bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置是否用SD卡缓存</div><div class="line">     * <span class="doctag">@param</span> isUseDiskCache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDiskCache</span><span class="params">(<span class="keyword">boolean</span> isUseDiskCache)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isUseDiskCache = isUseDiskCache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上述的代码中可以看到，仅仅新增了一个DiskCache类和往ImageLoader类中加入了少量代码就添加了SD卡缓存的功能，用户可以通过useDiskCache方法来对使用哪种缓存进行设置，例如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ImageLoader mImageLoader = <span class="keyword">new</span> ImageLoader();</div><div class="line"><span class="comment">//使用SD卡缓存</span></div><div class="line">mImageLoader.useDiskCache(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//使用内存缓存</span></div><div class="line">mImageLoader.useDisCache(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>通过useDiskCache方法来让用户设置不同的缓存这个思路是对的，但是会有些明显的问题，就是使用内存缓存时用户不能使用SD卡缓存。类似地，使用SD卡缓存时用户就不能使用内存缓存。</p>
<p>实际上，用户需要这两种缓存的综合，首先缓存优先使用内存缓存，如果内存缓存没有图片再使用SD卡缓存，如果SD卡中也没有图片最后才从网络上获取，这才是最好的缓存策略。</p>
<p>接下来，我们继续重构，新建一个双缓冲类DoubleCache，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.ocp;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 双缓冲。获取图片时先从内存中获取，如果内存中没有缓存该图片，再从SD卡中获取</div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCache</span> </span>&#123;</div><div class="line"></div><div class="line">    MemoryCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line">    DiskCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 先从内存获取图片，没有再从SD卡获取</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将图片缓存到内存和SD卡中</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">        mDiskCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们再来看看最新的ImageLoader类，代码更新也不多：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    MemoryCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SD卡缓存</div><div class="line">     */</div><div class="line">    DiskCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line">    <span class="comment">//双缓存</span></div><div class="line">    DoubleCache mDoubleCache = <span class="keyword">new</span> DoubleCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否使用SD卡缓存</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isUseDiskCache = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">//使用双缓存</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isUseDoubleCache = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =  <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (isUseDoubleCache) &#123;</div><div class="line">            bitmap = mDoubleCache.get(url);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUseDiskCache) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bitmap = mMemoryCache.get(url);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//没有缓存则提交线程池下载</span></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//将下载的图片存入内存</span></div><div class="line">                mMemoryCache.put(url,bitmap);</div><div class="line">                mDiskCache.put(url,bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置是否用SD卡缓存</div><div class="line">     * <span class="doctag">@param</span> isUseDiskCache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDiskCache</span><span class="params">(<span class="keyword">boolean</span> isUseDiskCache)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.isUseDiskCache = isUseDiskCache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置是否使用双缓存</div><div class="line">     * <span class="doctag">@param</span> isUseDoubleCache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDoubleCache</span><span class="params">(<span class="keyword">boolean</span> isUseDoubleCache)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.isUseDoubleCache = isUseDoubleCache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时程序越来越灵活了，通过增加短短几行代码就能够完成如此重要的功能。</p>
<p>人们总会把美好的事情讲在前面，最后给你来个“但是”，我们先来分析一下上面的程序：每次在程序中加入新的缓存实现都需要修改ImageLoader类，然后通过一个布尔类型的变量来让用户选择使用哪种缓存，因此，就使得ImageLoader中存在各种if-else判断语句，通过这些判断语句来确定使用哪种缓存。随着大量逻辑的引用，代码变得越来越复杂脆弱，如果一不小心写错某个if条件，势必会花费大量的时间去调试程序，整个ImageLoader类也会显得臃肿。最重要的是，用户不能自己实现缓存注入到ImageLoader类中，可扩展性较差，而可扩展性是框架的最重要的特性之一。</p>
<h2 id="注入方式设置缓存方式"><a href="#注入方式设置缓存方式" class="headerlink" title="注入方式设置缓存方式"></a><strong>注入方式设置缓存方式</strong></h2><p>“软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是对于修改则是封闭的，这就是开放-关闭原则。也就是说，我们应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现”。现在，我们来实现终极解决方案，遵循开闭原则。</p>
<p>首先，我们先画出UML图，如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-41b1c8e7ee643133.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="开闭原则UML图"></p>
<p>然后，实现UML图上的类和接口，先重构ImageLoader类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 缓存图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过重构后，少了if-else语句，没有了各种各样的缓存实现对象、布尔变量，代码确实清晰、简单了很多。需要注意的是，这次重构的ImageCache把它提取成一个图片缓存的接口，用来抽象图片缓存的功能，我们来看看该接口的声明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    ImageCache mImageCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注入缓存实现</div><div class="line">     * <span class="doctag">@param</span> cache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIamgeCache</span><span class="params">(ImageCache cache)</span> </span>&#123;</div><div class="line">        mImageCache = cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        Bitmap bitmap =  mImageCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//没有缓存则提交线程池下载</span></div><div class="line">        submitLoadRequest(url, imageView);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">submitLoadRequest</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line"></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//将下载的图片存入内存</span></div><div class="line">                mImageCache.put(url,bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ImageCache接口简单定义了获取、缓存图片两个方法，缓存的可以是图片的url,值是图片的本身。内存缓存、SD卡缓存、爽缓存都实现该接口，我们看看几个缓存的实现：</p>
<p>MemoryCache.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span> <span class="keyword">implements</span> <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemoryCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化LRU缓存</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initImageCache</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//计算可使用的最大内存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">        <span class="comment">//取内存的四分之一作为缓存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">4</span>;</div><div class="line"></div><div class="line">        mMemoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMemoryCache.get(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DiskCache.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskCache</span> <span class="keyword">implements</span>  <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_DIR = <span class="string">"/sdcard/cache/"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeFile(CACHE_DIR + url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">        FileOutputStream out = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            out = <span class="keyword">new</span> FileOutputStream(CACHE_DIR + url);</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG,<span class="number">100</span>,out);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    out.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Double.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCache</span> <span class="keyword">implements</span> <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    ImageCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line">    ImageCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">        mDiskCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述重构后的ImageLoader类中增加了一个setImageCache(ImageCache cache)方法，用户可以通过该函数设置缓存实现，也就是通常所说的<strong>依赖注入</strong>。</p>
<p>下面看看用户如何通过使用ImageLoader来设置缓存实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">ImageLoader mImageLoader = <span class="keyword">new</span> ImageLoader();</div><div class="line"></div><div class="line"><span class="comment">//使用内存缓存</span></div><div class="line">mImageLoader.setIamgeCache(<span class="keyword">new</span> MemoryCache());</div><div class="line"></div><div class="line"><span class="comment">//使用SD卡缓存</span></div><div class="line">mImageLoader.setIamgeCache(<span class="keyword">new</span> DiskCache());</div><div class="line"></div><div class="line"><span class="comment">//使用双缓存</span></div><div class="line">mImageLoader.setIamgeCache(<span class="keyword">new</span> DoubleCache());</div><div class="line"></div><div class="line"><span class="comment">//使用自定义的图片缓存实现</span></div><div class="line">mImageLoader.setIamgeCache(<span class="keyword">new</span> ImageCache() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在上述代码中，通过setImageCache(ImageCache cache)方法注入不同的缓存实现，这样不仅能够使ImageLoader更简单、健壮，也使得ImageLoader可课扩展性、灵活性更高。</p>
<p>MemeryCache、DiskCache、DoubleCache缓存图片的具体实现完全不一样，但是，它们有一个特点是，都实现了ImageCache接口。当用户需要自定义缓存实现时，只需要新建一个实现ImageCache接口的类，然后构造该类的对象，并且通过setImageCache(ImageCache cache)注入到ImageLoader中就可以了，这样ImageLoader就实现了千变万化的缓存策略，且扩展这些缓存策略并不会导致ImageLoader类的修改。经过这次重构，ImageLoader在设计模式上基本已经合格了。</p>
<blockquote>
<p>开闭原则指导我们，当软件需要变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。这里的“应该尽量”4个字说明OCP原则并不是说绝对不可以修改原始类的。当确定原来的代码已经“腐化”时，应该尽早的重构，以便让代码恢复带正常的状态，而不是通过继承等方式添加新的代码。因此，在开发过程中需要自己结合具体情况进行考量，是通过修改旧代码还是通过继承使得软件系统更稳当、更灵活，在保证去除“腐化代码”的同时，也保证原有模块的正确性。</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>增加稳定性</li>
<li>可扩展性提高</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开闭原则的英文全称是Open Close Principle，缩写是OCP，它是Java世界里最基础的设计原则，它指导我们如何建立一个稳定的、灵活的系统。开闭原则的定义是：软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是对于修改是封闭的。&lt;/p&gt;
&lt;p&gt;勃兰特-梅
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程之接口隔离原则</title>
    <link href="http://liuguoquan727.github.io/2016/03/05/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
    <id>http://liuguoquan727.github.io/2016/03/05/面向对象编程之接口隔离原则/</id>
    <published>2016-03-05T12:47:56.000Z</published>
    <updated>2016-04-17T07:51:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>接口隔离原则英文全称是Interface Segregation Principle，缩写是ISP。</p>
<p>ISP的定义是：客户端不应该依赖它不需要的接口。另一种定义是：类间的依赖关系应该建立在最小的接口上。接口隔离原则将非常庞大、臃肿的接口拆分成更小具体的接口，这样客户讲会只需要知道他们感兴趣的方法。接口隔离原则的目的是系统解开耦合，从而容易重构、更改和重新部署。</p>
<p>接口隔离原则说白了就是,让客户端依赖的接口尽可能的小，这样说可能还有点抽象，我们一一个示例来说明一下。在此之前我们来说一个场景，在Java6以及之前的JDK版本中，有一个非常讨厌的问题，那就是在使用了OutputStream或者其他可关闭的对象之后，我们必须保证它们最终被关闭了，我们的SD卡缓存类中就有这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将图片存入SD卡中</div><div class="line"> * <span class="doctag">@param</span> url</div><div class="line"> * <span class="doctag">@param</span> bitmap</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url,Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">	FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		out = <span class="keyword">new</span> FileOutputStream(CACHE_DIR + url);</div><div class="line">		bitmap.compress(Bitmap.CompressFormat.PNG,<span class="number">100</span>,out);</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				out.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的可读性非常差，各种try…catch嵌套的都是简单的代码，但是会严重影响代码的可读性，并且多层级的大括号很容易将代码写到错误的层级中。我们对这类代码也非常反感，下面来看看如何解决这类问题。</p>
<p>我们可能知道Java中有一个Closeable接口，该接口标识了一个可关闭的对象，它只有一个close方法，我们要讲的FileOutputStream类就实现类就实现了这个接口，实际上还有100多个类实现了这还接口，这意味着，在关闭着100多个类型的对象时，都需要写出像put方法中finally代码段那样的代码。这是非常让人痛苦的，所以我们要把这个问题变得简单，既然都是实现了Closeable接口，那只要我建一个方法统一来关闭这些对象不就可以了吗，于是我们开始写下如下的工具类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloseUtils</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	*关闭Closeable对象</div><div class="line">	**/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeQuietly</span><span class="params">(Closeable closeable)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (closeable != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				closeable.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看看把这段代码运用到上述的put方法中的效果如何：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url,Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">	FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		out = <span class="keyword">new</span> FileOutputStream(CACHE_DIR + url);</div><div class="line">		bitmap.compress(Bitmap.CompressFormat.PNG,<span class="number">100</span>,out);</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		CloseUtils.closeQuietly(out);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码简洁了很多，而且这个工具类可以运用到各类可关闭的对象中，保证了代码的重用性。</p>
<p>CloseUtils的closeQuitely方法的基本原理就是依赖于Closeable抽象而不是具体实现（这不是依赖倒置原则么？），并且建立在最小化依赖原则的基础上，它只需要知道这个对象是可关闭的，其他的一概不关心，也就是这里所介绍的接口隔离原则。</p>
<p>优点：</p>
<ul>
<li>降低耦合性</li>
<li>提高代码的可读性</li>
<li>隐藏实现细节</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接口隔离原则英文全称是Interface Segregation Principle，缩写是ISP。&lt;/p&gt;
&lt;p&gt;ISP的定义是：客户端不应该依赖它不需要的接口。另一种定义是：类间的依赖关系应该建立在最小的接口上。接口隔离原则将非常庞大、臃肿的接口拆分成更小具体的接口，这
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程之接口迪米特原则</title>
    <link href="http://liuguoquan727.github.io/2016/03/04/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%8E%A5%E5%8F%A3%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/"/>
    <id>http://liuguoquan727.github.io/2016/03/04/面向对象编程之接口迪米特原则/</id>
    <published>2016-03-04T12:49:10.000Z</published>
    <updated>2016-04-17T07:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>迪米特原则英文全称为Law of Demeter，缩写是LOD，也称为最少知识原则（Least of Principle）。虽然名字不同，但描述的是同一个原则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用者或者依赖者没有关系，调用者或者依赖者只需要知道它需要的方法即可，其他的可一概不管。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。</p>
<p>迪米特法则还有一个英文解释就是Only talk to your immediate friends，翻译就是：只与直接的朋友通信。什么是最直接的朋友呢？每个对象都必然会与其他对象有耦合关系，两个对象之间的耦合就成为朋友关系，这样关系的类型很多，如组合、聚合、依赖等。</p>
<p>下面我们就以租房为例描述迪米特原则的应用：</p>
<p>在外工作的朋友比较了解，我们经常通过中介找房。我们设定的情况为：我只要求房间的面积和租金，其他的一概不管，中介将符合我要求的房子提供给我就可以。下面我们来看看这个示例：</p>
<p>我先来看看示例的UML图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-a5849edd74e984dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LOD示例"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 房子</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">float</span> area;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">float</span> price;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Room</span><span class="params">(<span class="keyword">float</span> area, <span class="keyword">float</span> price)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.area = area;</div><div class="line">		<span class="keyword">this</span>.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Room [area="</span> + area + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line"></div><div class="line">	List&lt;Room&gt; mRooms = <span class="keyword">new</span> ArrayList&lt;Room&gt;();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Mediator</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			mRooms.add(<span class="keyword">new</span> Room(<span class="number">10</span> + i, (<span class="number">10</span> + <span class="number">1</span>) * <span class="number">200</span>));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Room&gt; <span class="title">getAllRooms</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> mRooms;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 租户</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tenant</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> roomArea;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> roomPrice;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DIFF_PRICE = <span class="number">100.01f</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DIFF_AREA = <span class="number">0.01f</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rentRomm</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">		List&lt;Room&gt; rooms = mediator.getAllRooms();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (Room room : rooms) &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (isSuitable(room)) &#123;</div><div class="line">				System.out.println(<span class="string">"租到合适的房间啦!"</span> + room.toString());</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuitable</span><span class="params">(Room room)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> Math.abs(room.price - roomPrice) &lt; DIFF_PRICE</div><div class="line">				&amp;&amp; Math.abs(room.area - roomArea) &lt; DIFF_AREA;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的代码可以看到，Tenant依赖了Mediator类，而且依赖了Room类，还需要频繁的与Room类打交道。租户类的要求只是通过中介找到一间适合自己的房子罢了，如果把这些检测条件都放在Tenant类中，那么Mediator类的功能就会被弱化，而且导致Tenant与Room的耦合较高，因为Tenant必须知道许多关于Room的细节。当Room变化时Tenant也必须跟着变化。Tenant又与Mediator耦合，这就出现了许多纠缠不清的关系。这个时候我们需要分析谁是真正的“直接朋友”，在我们所说的情况下，显然是Mediator。</p>
<p>既然耦合太严重，我们就需要解耦。首先要明确的是，我们只和我们的朋友通信，就是指Mediator对象。必须将Room相关的操作从Tenant中移除，而这些操作应在属于Mediator。为此，我们进行重构，重构后的UML图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-858c24a4e4552f82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LOD重构后的UML图"></p>
<p>重构后的Mediator、代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line"></div><div class="line">	List&lt;Room&gt; mRooms = <span class="keyword">new</span> ArrayList&lt;Room&gt;();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Mediator</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			mRooms.add(<span class="keyword">new</span> Room(<span class="number">10</span> + i, (<span class="number">10</span> + <span class="number">1</span>) * <span class="number">200</span>));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Room <span class="title">rentOut</span><span class="params">(<span class="keyword">float</span> area,<span class="keyword">float</span> price)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(Room room : mRooms) &#123;</div><div class="line">			<span class="keyword">if</span> (isSuitable(room, price, area)) &#123;</div><div class="line">				<span class="keyword">return</span> room;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">			</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuitable</span><span class="params">(Room room, <span class="keyword">float</span> roomPrice, <span class="keyword">float</span> roomArea)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> Math.abs(room.price - roomPrice) &lt; Tenant.DIFF_PRICE</div><div class="line">				&amp;&amp; Math.abs(room.area - roomArea) &lt; Tenant.DIFF_AREA;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 租户</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tenant</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> roomArea;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> roomPrice;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DIFF_PRICE = <span class="number">100.01f</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DIFF_AREA = <span class="number">0.01f</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rentRomm</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"租到合适的房子了： "</span> + mediator.rentOut(roomArea, roomPrice).toString());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，租户不再需要知道太对关于Room的细节，比如与房东签合同，房东的房产证是不是真的等。当我们通过我们的“朋友”–中介租房后，所有的事情我们都通过与中介沟通就好了。</p>
<p>有点：</p>
<ul>
<li>降低了复杂度</li>
<li>降低了耦合度</li>
<li>增加了稳定性</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迪米特原则英文全称为Law of Demeter，缩写是LOD，也称为最少知识原则（Least of Principle）。虽然名字不同，但描述的是同一个原则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程之单一职责原则</title>
    <link href="http://liuguoquan727.github.io/2016/03/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
    <id>http://liuguoquan727.github.io/2016/03/02/面向对象编程之单一职责原则/</id>
    <published>2016-03-02T14:02:18.000Z</published>
    <updated>2016-04-17T07:51:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>单一职责的英文名称是Single Responsibility Principle，缩写是SRP。</p>
<p>SRP的定义就是：就一个类而言，应该仅有一个引起它变化的原因。简单说来，一个类中应该是一组相关性很高的函数、数据的封装。单一职责的划分界限并不是总是那么清晰，很多时候需要靠个人经验来界定。当然，最大的问题就是堆职责的定义，什么是类的职责，以及怎么划分类的职责。</p>
<p>接下来以小明的工作过程为示例描述单一职责原则：</p>
<p>小明初入职场，在经历过一周的适应期以及熟悉公司的产品、开发规范后，小民的开发工作就正式开始了。小民的主管是个工作经验丰富的技术专家，对于小民的工作并不是很满意，尤其是小民最薄弱的面向对象设计，而Android开发又是使用Java语言，程序中的抽象、接口、六大原则、23种设计模式等名词把小民弄的晕头转向。于是，小民的主管决定先让小民做一个小项目来锻炼这方面的能力。</p>
<p>在经过一番思考后，主管挑选了使用范围广、难度也适中的图片加载器（ImageLoader）作为小民的训练项目。既然要训练小民的面向对象设计能力，那么久必须考虑到可扩展性、灵活性，而检测这一切是否符合需求的最好途径就是开源。</p>
<p>小民是不服输的，主管的要求很简单，要小民实现图片加载，并且要将图片缓存起来。在分析了需求之后，小民放下心来，胸有成竹，在经历了10分钟的编码之后，小民写下了如下代码：</p>
<p>ImageLoader.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.srp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.util.LruCache;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageLoader</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initImageCache</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//计算可使用的最大内存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">        <span class="comment">//取内存的四分之一作为缓存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">4</span>;</div><div class="line"></div><div class="line">        mImageCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line"></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>随后，小民将代码托管到GitHub上，伴随着git push命令的完成，小民的ImageLoader 0.1版本就发布了。小民开始幻想着待会儿被主管称赞。</p>
<p>在小民给主管报告了ImageLoader发布消息的几分钟后，主管把小民叫到了会议室，叼了小民一顿：“小民，你的ImageLoader耦合太严重啦！简直就没有设计可言，更不要说是扩展性、灵活性了。所有功能写在一个类里面怎么行呢，这样随着功能的增多，ImageLoader类会越来越大。代码也越来越复杂，图片的加载系统就会越来越弱…”，此时，小民默默吞下了泪水。</p>
<p>主管最后说：“你还是把ImageLoader拆分一下，把各个功能独立出来，让它们满足单一职责原则。”小民敏锐的捕捉到<strong>单一职责原则</strong>这个关键词，他用百度、Google搜索了资料之后，决定对ImageLoader进行一次重构。这次小民认真地先画了一幅UML类图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-cf656887e4f246a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML类图"></p>
<p>ImageLoader修改后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.srp.refactor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    ImageCache mImageCache = <span class="keyword">new</span> ImageCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//首先检查内存是否存在</span></div><div class="line">        Bitmap bitmap = mImageCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//将下载的图片存入内存</span></div><div class="line">                mImageCache.put(url,bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且添加类一个ImageCache类用于图片缓存，具体代码如下:</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.srp.refactor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.util.LruCache;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理图片缓存</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> class ImageCache &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    LruCache&lt;<span class="keyword">String</span>, Bitmap&gt; mImageCache;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> ImageCache() &#123;</div><div class="line">        </div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> initImageCache() &#123;</div><div class="line"></div><div class="line">        <span class="comment">//计算可使用的最大内存</span></div><div class="line">        <span class="keyword">final</span> <span class="built_in">int</span> maxMemory = (<span class="built_in">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">        <span class="comment">//取内存的四分之一作为缓存</span></div><div class="line">        <span class="keyword">final</span> <span class="built_in">int</span> cacheSize = maxMemory / <span class="number">4</span>;</div><div class="line"></div><div class="line">        mImageCache = <span class="keyword">new</span> LruCache&lt;<span class="keyword">String</span>, Bitmap&gt;(cacheSize) &#123;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            <span class="keyword">protected</span> <span class="built_in">int</span> sizeOf(<span class="keyword">String</span> <span class="built_in">key</span>, Bitmap value) &#123;</div><div class="line">                <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将图片存入缓存</div><div class="line">     * @param key</div><div class="line">     * @param bitmap</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>,Bitmap bitmap) &#123;</div><div class="line">        </div><div class="line">        mImageCache.put(<span class="built_in">key</span>,bitmap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 取出缓存图片</div><div class="line">     * @param key</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> Bitmap <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</div><div class="line">        <span class="keyword">return</span> mImageCache.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>综上所述，小民将ImageLoader一拆为二，ImageLoader只负责图片加载的逻辑，而ImageCache只负责处理图片缓存的逻辑，这样ImageLoader的代码量变少了，职责也清晰了；当与缓存相关的逻辑需要改变时，不需要修改ImageLoader类，而图片加载的逻辑需要修改时也不会影响到缓存处理逻辑。</p>
<blockquote>
<p>从上述例子我们知道，单一职责所表达出来的用意就是“单一”两个字。如何划分一个类、一个函数的职责，每个人都有自己的看法，这需要根据个人经验、具体的业务逻辑而定。但是，它也有一些基本的指导原则，例如，<strong>两个完全不一样的功能就不应该方法一个类中，一个类中应该是一组相关性很高的函数、数据的封装。</strong>工程师可以不断地审视自己的代码，根据具体的业务、功能对类进行相应的拆分，这是程序员优化代码迈出的第一步。</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h2><ul>
<li>类的复杂度降低，实现什么职责都有清晰的定义。</li>
<li>复杂性降低，所以可读性提高了。</li>
<li>可读性提高了，所以可维护性提高了</li>
<li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有很大的帮助。</li>
</ul>
<p>##参考资料</p>
<p>《Android源码设计模式》 何红辉、关爱民 著</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单一职责的英文名称是Single Responsibility Principle，缩写是SRP。&lt;/p&gt;
&lt;p&gt;SRP的定义就是：就一个类而言，应该仅有一个引起它变化的原因。简单说来，一个类中应该是一组相关性很高的函数、数据的封装。单一职责的划分界限并不是总是那么清晰，很
    
    </summary>
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://liuguoquan727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 5.x之Toolbar和Palette</title>
    <link href="http://liuguoquan727.github.io/2016/02/28/Android%205.x%E4%B9%8BToolbar%E5%92%8CPalette/"/>
    <id>http://liuguoquan727.github.io/2016/02/28/Android 5.x之Toolbar和Palette/</id>
    <published>2016-02-28T14:50:03.000Z</published>
    <updated>2017-02-19T03:37:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Toolbar是Android5.0后应用的内容的标准工具栏，可以说是ActionBar的升级版，两者不是独立的关系，要使用Toolbar还是得跟ActionBar有关系的。相比ActionBar，Toolbar最明显的一点就是变得很自由，可以随处放置，具体的使用方法和ActionBar很类似。</p>
<h1 id="Toolbar引入"><a href="#Toolbar引入" class="headerlink" title="Toolbar引入"></a>Toolbar引入</h1><p>首先还是得引入v7包，Android studio在build.gradle配置如下代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.0.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:palette-v7:23.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来为了显示Toolbar控件，先要将style里的ActionBar去掉:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>设置各个部分属性的图：</p>
<p><img src="http://img.blog.csdn.net/20151202204454385" alt="ALT TEXT"></p>
<p>接下来我们引入Toolbar：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.Toolbar</span></div><div class="line">    android:id=<span class="string">"@+id/toolbar"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"?attr/actionBarSize"</span></div><div class="line">    android:<span class="attribute">background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">    app:popupTheme=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div></pre></td></tr></table></figure>
<h1 id="主布局"><a href="#主布局" class="headerlink" title="主布局"></a>主布局</h1><p>在主布局中我们使用DrawerLayout来完成侧滑效果</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.deason.library.mytoobar.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_drawerlayout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">        <span class="comment">&lt;!--内容界面--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/ll_content"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/ic_launcher"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"内容界面"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span>/&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--侧或菜单界面--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/ll_tabs"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@android:color/darker_gray"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/tv_close"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:clickable</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"侧滑界面,点击收回侧滑"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_dialog_email"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Toolbar自定义Item布局"><a href="#Toolbar自定义Item布局" class="headerlink" title="Toolbar自定义Item布局"></a>Toolbar自定义Item布局</h1><p>我们在menu/main.xml中去声明将在Toobar的Menu item,MenuItem的设置与ActionBar类似</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;menu xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    tools:context=<span class="string">"com.deason.library.mytoobar.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/ab_search"</span></div><div class="line">        android:orderInCategory=<span class="string">"80"</span></div><div class="line">        android:title=<span class="string">"搜索"</span></div><div class="line">        app:actionViewClass=<span class="string">"android.support.v7.widget.SearchView"</span></div><div class="line">        app:showAsAction=<span class="string">"ifRoom"</span>/&gt;</div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/action_share"</span></div><div class="line">        android:orderInCategory=<span class="string">"90"</span></div><div class="line">        android:title=<span class="string">"分享"</span></div><div class="line">        app:actionProviderClass=<span class="string">"android.support.v7.widget.ShareActionProvider"</span></div><div class="line">        app:showAsAction=<span class="string">"ifRoom"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/action_settings"</span></div><div class="line">        android:orderInCategory=<span class="string">"100"</span></div><div class="line">        android:title=<span class="string">"设置"</span></div><div class="line">        app:showAsAction=<span class="string">"never"</span> /&gt;</div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure>
<h1 id="java代码实现"><a href="#java代码实现" class="headerlink" title="java代码实现"></a>java代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mytoobar;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.ColorDrawable;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.MenuItemCompat;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.DrawerLayout;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarDrawerToggle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.graphics.Palette;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.SearchView;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.ShareActionProvider;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</div><div class="line">    <span class="keyword">private</span> ActionBarDrawerToggle mDrawerToggle;</div><div class="line">    <span class="keyword">private</span> Toolbar toolbar;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//是否给左上角图标的左边加上一个返回的图标</span></div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//        getSupportActionBar().setLogo(R.mipmap.ic_launcher);</span></div><div class="line">        </div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Snackbar.make(view, <span class="string">"Replace with your own action"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        toolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line"></div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"searchView"</span>+item.getTitle(),Toast.LENGTH_SHORT).show();</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        initView();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">		<span class="comment">//实现侧滑栏的切换</span></div><div class="line">        mDrawerLayout = (DrawerLayout) findViewById(R.id.id_drawerlayout);</div><div class="line">        mDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>, mDrawerLayout, toolbar, R.string.open, R.string.close);</div><div class="line">        mDrawerToggle.syncState();</div><div class="line">        mDrawerLayout.setDrawerListener(mDrawerToggle);</div><div class="line">        </div><div class="line">        <span class="comment">//关闭抽屉栏</span></div><div class="line"><span class="comment">//        mDrawerLayout.closeDrawer(Gravity.LEFT);</span></div><div class="line">        </div><div class="line">        <span class="comment">//Palette取色器</span></div><div class="line">        Bitmap bitmap = BitmapFactory.decodeResource(getResources(),R.drawable.ic_launcher);</div><div class="line"></div><div class="line">        Palette.from(bitmap).generate(<span class="keyword">new</span> Palette.PaletteAsyncListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGenerated</span><span class="params">(Palette palette)</span> </span>&#123;</div><div class="line">                Palette.Swatch swatch = palette.getVibrantSwatch();</div><div class="line">                </div><div class="line">                <span class="comment">//设置Toolbar颜色</span></div><div class="line">                getSupportActionBar().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(swatch.getRgb()));</div><div class="line">                </div><div class="line">                <span class="comment">//设置系统状态栏颜色</span></div><div class="line">                getWindow().setStatusBarColor(swatch.getRgb());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line"></div><div class="line">        <span class="comment">//在菜单中找到对应控件的item</span></div><div class="line">        MenuItem menuItem = menu.findItem(R.id.ab_search);</div><div class="line">        </div><div class="line">        <span class="comment">//获取SearchView</span></div><div class="line">        SearchView searchView = (SearchView) menuItem.getActionView();</div><div class="line">        </div><div class="line">        searchView.setOnSearchClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"searchView"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        MenuItem shareItem = menu.findItem(R.id.action_share);</div><div class="line">        ShareActionProvider shareActionProvider = (ShareActionProvider)MenuItemCompat.getActionProvider(shareItem);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</div><div class="line">        intent.setType(<span class="string">"image/*"</span>);</div><div class="line">        shareActionProvider.setShareIntent(intent);</div><div class="line">        </div><div class="line">        shareActionProvider.setOnShareTargetSelectedListener(<span class="keyword">new</span> ShareActionProvider.OnShareTargetSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onShareTargetSelected</span><span class="params">(ShareActionProvider source, Intent intent)</span> </span>&#123;</div><div class="line"></div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"onShareTargetSelected:"</span>+ intent.getAction(),Toast.LENGTH_SHORT).show();</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line"></div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"action_settings"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">最后来看看效果:</div><div class="line"></div><div class="line"></div><div class="line">![Toolbar](http:<span class="comment">//img.blog.csdn.net/20160227234641589)</span></div></pre></td></tr></table></figure>
<h1 id="Paletta的应用"><a href="#Paletta的应用" class="headerlink" title="Paletta的应用"></a>Paletta的应用</h1><p>Android5.x的Paletta作用是提取图片的颜色，从而让主题能够动态适应当前界面的色调，做到整个App颜色的颜色基调和谐统一。</p>
<p>Android内置了几种提取色调的种类：</p>
<ul>
<li>Vibrant：充满活力的</li>
<li>Vibrant dark 活力黑</li>
<li>Vibrant    light 活力亮</li>
<li>Muted 柔和的</li>
<li>Muted dark 柔和的黑</li>
<li>Muted light 柔和的亮</li>
</ul>
<p>要使用Palette，我们需要引入com.android.support:palette-v7:23.0.1包。</p>
<p>实现提取颜色的步骤：</p>
<ol>
<li>获取一个Bitmap对象</li>
<li>将Bitmap对象传递给Palette，然后调用generate方法</li>
<li>在onGenerated回调中得到图片的色调，最后我们把Toolbar和系统状态栏的背景设置为该图片的色调</li>
</ol>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Palette取色器</span></div><div class="line"><span class="type">Bitmap</span> bitmap = <span class="type">BitmapFactory</span>.decodeResource(getResources(),<span class="type">R</span>.drawable.ic_launcher);</div><div class="line"></div><div class="line"><span class="type">Palette</span>.from(bitmap).generate(<span class="function"><span class="keyword">new</span> <span class="title">Palette</span>.<span class="title">PaletteAsyncListener</span>() &#123;</span></div><div class="line">    @<span class="title">Override</span></div><div class="line">    <span class="title">public</span> <span class="title">void</span> <span class="title">onGenerated</span>(<span class="type">Palette</span> palette) &#123;</div><div class="line"></div><div class="line">		<span class="comment">//这里我们获取的是图片充满活力的黑的色调</span></div><div class="line">        <span class="title">Palette</span>.<span class="title">Swatch</span> <span class="title">swatch</span> = <span class="title">palette</span>.<span class="title">getDarkVibrantSwatch</span>();</div><div class="line">        </div><div class="line">        <span class="comment">//设置Toolbar颜色</span></div><div class="line">        <span class="title">getSupportActionBar</span>().<span class="title">setBackgroundDrawable</span>(new <span class="type">ColorDrawable</span>(swatch.getRgb()));</div><div class="line">        </div><div class="line">        <span class="comment">//设置系统状态栏颜色</span></div><div class="line">        <span class="title">getWindow</span>().<span class="title">setStatusBarColor</span>(swatch.getRgb());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后来看看效果:</p>
<p><img src="http://img.blog.csdn.net/20160227234750966" alt="Toolbar_Paletta"></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.csdn.net/itachi85/article/details/50150747" target="_blank" rel="external"> Android5.x Toolbar和Palette应用解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Toolbar是Android5.0后应用的内容的标准工具栏，可以说是ActionBar的升级版，两者不是独立的关系，要使用Toolbar还是得跟ActionBar有关系的。相比ActionBar，Toolbar最明显的一点就是变得很自由，可以随处放置，具体的使用方法和Ac
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android5.X" scheme="http://liuguoquan727.github.io/tags/Android5-X/"/>
    
  </entry>
  
  <entry>
    <title>Android Design Support Library之CoordinatorLayout和CollapsingToolbarLayout</title>
    <link href="http://liuguoquan727.github.io/2016/02/26/Android%20Design%20Support%20Library%E4%B9%8BCoordinatorLayout%E5%92%8CCollapsingToolbarLayout/"/>
    <id>http://liuguoquan727.github.io/2016/02/26/Android Design Support Library之CoordinatorLayout和CollapsingToolbarLayout/</id>
    <published>2016-02-26T15:35:03.000Z</published>
    <updated>2017-02-19T03:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>CoordinatorLayout是Android Design Support Library中比较难的控件，它是用来组织它的子View之间协助的一个父View，它直接继承于ViewGroup。</p>
<p>CoordinatorLayout默认情况下可理解是一个FrameLayout，它的布局方式是一层一层叠加上去的，这里我们来介绍它常用的两种情况。</p>
<h1 id="CoordinatorLayout实现ToolBar的隐藏效果"><a href="#CoordinatorLayout实现ToolBar的隐藏效果" class="headerlink" title="CoordinatorLayout实现ToolBar的隐藏效果"></a>CoordinatorLayout实现ToolBar的隐藏效果</h1><p>首先看看效果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-7d3bd2e5b2a4f58e.gif?imageMogr2/auto-orient/strip" alt="CoordinatorLayout实现ToolBar的隐藏效果"></p>
<p>接下来开始实现，首先配置build.gradle</p>
<h2 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.2.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:23.2.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>com.android.support:design:23.2.0就是我们需要引入的兼容库</p>
<h2 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h2><p>主界面跟前面的Android Design Support Library之NavigationView一致，不同之处在于layout=”@layout/app_bar_main”引入的布局实现的不同</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:openDrawer</span>=<span class="string">"start"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span></span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/app_bar_main"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header_main"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/activity_main_drawer"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面我们来看看app_bar_main.xml这个布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> </span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/main_content"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span></div><div class="line">             /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tabs"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:tabIndicatorColor</span>=<span class="string">"#ffffffff"</span></div><div class="line">            <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span>&gt;</div><div class="line">            </div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div><div class="line">        </div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">		//必须设置，<span class="attr">AppBarLayout</span>才能接收到滚动事件</div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>/&gt;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_dialog_email"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>CoordinatorLayout中不应该再设置android:fitsSystemWindows=”true”这个配置，因为外层已经设置好，如果设置会出现不和谐的效果。</p>
<p>Toolbar能隐藏的关键在于app:layout_scrollFlags=”scroll|enterAlways”这个事件，设置滚动事件，属性里面至少启用scroll这个flag，这样view才会滚动出屏幕，否则它将一直固定在头部。</p>
<h2 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mycoordinatorlayout;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.NavigationView;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.TabLayout;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.GravityCompat;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.DrawerLayout;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarDrawerToggle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">NavigationView</span>.<span class="title">OnNavigationItemSelectedListener</span> &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> TabLayout mTabLayout;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line"></div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        ActionBarDrawerToggle toggle = <span class="keyword">new</span> ActionBarDrawerToggle(</div><div class="line">                <span class="keyword">this</span>, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);</div><div class="line">        drawer.setDrawerListener(toggle);</div><div class="line">        toggle.syncState();</div><div class="line"></div><div class="line">        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">        mViewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class="line">        </div><div class="line">        initViewPager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        mTabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class="line"></div><div class="line">        mTabLayout.setSelectedTabIndicatorHeight(<span class="number">10</span>);</div><div class="line"></div><div class="line">        List&lt;String&gt; titles = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        titles.add(<span class="string">"新闻"</span>);</div><div class="line">        titles.add(<span class="string">"财经"</span>);</div><div class="line">        titles.add(<span class="string">"娱乐"</span>);</div><div class="line">        titles.add(<span class="string">"体育"</span>);</div><div class="line">        titles.add(<span class="string">"军事"</span>);</div><div class="line">        titles.add(<span class="string">"科技"</span>);</div><div class="line">        titles.add(<span class="string">"教育"</span>);</div><div class="line">        titles.add(<span class="string">"历史"</span>);</div><div class="line">        titles.add(<span class="string">"文化"</span>);</div><div class="line">        titles.add(<span class="string">"深圳"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i &lt; titles.size();i++) &#123;</div><div class="line">            <span class="comment">//设置TabIndicator文字</span></div><div class="line">            mTabLayout.addTab(mTabLayout.newTab().setText(titles.get(i)));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        List&lt;Fragment&gt; fragments = <span class="keyword">new</span> ArrayList&lt;Fragment&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; titles.size(); i++) &#123;</div><div class="line"></div><div class="line">            fragments.add(<span class="keyword">new</span> TabFragment());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//实例化适配器</span></div><div class="line">        FragmentAdapter mAdapter = <span class="keyword">new</span> FragmentAdapter(getSupportFragmentManager(),fragments,titles);</div><div class="line"></div><div class="line">        <span class="comment">//给ViewPager设置适配器</span></div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line"></div><div class="line">        <span class="comment">//将TabLayout和ViewPager关联起来</span></div><div class="line">        mTabLayout.setupWithViewPager(mViewPager);</div><div class="line"></div><div class="line">        <span class="comment">//给TabLayout设置适配器</span></div><div class="line">       mTabLayout.setTabsFromPagerAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        <span class="keyword">if</span> (drawer.isDrawerOpen(GravityCompat.START)) &#123;</div><div class="line">            drawer.closeDrawer(GravityCompat.START);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.main, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line"></div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,CollapsingActivity.class);</div><div class="line">            startActivity(intent);</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"StatementWithEmptyBody"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle navigation view item clicks here.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (id == R.id.nav_camera) &#123;</div><div class="line">            <span class="comment">// Handle the camera action</span></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_gallery)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_slideshow)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_manage)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_share)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_send)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        drawer.closeDrawer(GravityCompat.START);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他代码如ViewPager、RecyclerView的实现请参考Android Design Support Library之TabLayout一文。</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://upload-images.jianshu.io/upload_images/1014339-7d3bd2e5b2a4f58e.gif?imageMogr2/auto-orient/strip" alt="CoordinatorLayout实现ToolBar的隐藏效果"></p>
<h1 id="CoordinatorLayout-CollapsingToolbarLayout实现Toolbar折叠效果"><a href="#CoordinatorLayout-CollapsingToolbarLayout实现Toolbar折叠效果" class="headerlink" title="CoordinatorLayout+CollapsingToolbarLayout实现Toolbar折叠效果"></a>CoordinatorLayout+CollapsingToolbarLayout实现Toolbar折叠效果</h1><p>首先看看效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-21388cdc3cacbd6d.gif?imageMogr2/auto-orient/strip" alt="CoordinatorLayout+CollapsingToolbarLayout实现Toolbar折叠效果"></p>
<p>要实现折叠效果我们需要引入一个新的布局CollapsingToolbarLayout，它作用是提供了一个可以折叠的Toolbar，它继承至FrameLayout，给它设置layout_scrollFlags，它可以控制包含在CollapsingToolbarLayout中的控件比如mageView、Toolbar在响应layout_behavior事件时作出相应的scrollFlags滚动事件。</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>布局文件用CollapsingToolbarLayout将ImageView和Toolbar包含起来作为一个可折叠的Toolbar，再用AppBarLayout包裹起来作为一个Appbar的整体，当然，AppBarLayout目前必须是第一个嵌套在CoordinatorLayout里面的子view。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/main_content"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:expandedTitleMarginEnd</span>=<span class="string">"64dp"</span></div><div class="line">            <span class="attr">app:expandedTitleMarginStart</span>=<span class="string">"48dp"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">android:src</span>=<span class="string">"@drawable/mao"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span></div><div class="line">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">        &lt;include layout="@layout/content_main" /&gt;</div><div class="line">        </div><div class="line">    --&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span></div><div class="line">		//必须设置，<span class="attr">AppBarLayout</span>才能接收到滚动事件</div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>CollapsingToolbarLayout的几个关键属性需要说明一下：</p>
<ul>
<li><p>app:contentScrim=”?attr/colorPrimary”，用来设置CollapsingToolbarLayout收缩后最顶部的颜色</p>
</li>
<li><p>app:expandedTitleGravity= “left|bottom”，表示将此CollapsingToolbarLayout完全展开后，title所处的位置，默认是left|bottom</p>
</li>
<li><p>app:collapsedTitleGravity= “left”，表示当头部的图片ImageView消失后，此title将回归到ToolBar的位置，默认是left</p>
</li>
<li><p>app:layout_scrollFlags=”scroll|exitUntilCollapsed”，这个属性我们上面讲过用来设置滚动事件，属性里面必须至少启用scroll这个flag，这样这个view才会滚动出屏幕，否则它将一直固定在顶部。这里我们设置的是app:layout_scrollFlags=”scroll|exitUntilCollapsed”这样能实现折叠效果，如果想要隐藏效果我们可以设置app:layout_scrollFlags=”scroll|enterAlways”</p>
</li>
</ul>
<p>我们需要定义AppBarLayout与滚动视图之间的联系，Design Support Library包含了一个特殊的字符串资源@string/appbar_scrolling_view_behavior，它和AppBarLayout.ScrollingViewBehavior相匹配，用来通知AppBarLayout何时发生了滚动事件，这个behavior需要设置在触发事件的view之上，所以我们应该在RecyclerView或者任意支持嵌套滚动的view比如NestedScrollView上添加app:layout_behavior=”@string/appbar_scrolling_view_behavior这个属性，当然AppBarLayout 中的子view需要设置app:layout_scrollFlags这个属性，否则接收到RecyclerView滚动事件，AppBarLayout 也不会有什么变化。</p>
<h2 id="Java代码实现-1"><a href="#Java代码实现-1" class="headerlink" title="Java代码实现"></a>Java代码实现</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mycoordinatorlayout;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.<span class="type">CollapsingToolbarLayout</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.<span class="type">AppCompatActivity</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">LinearLayoutManager</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">RecyclerView</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">Toolbar</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CollapsingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">RecyclerView</span> mRecyclerView;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.collapsing_main);</div><div class="line">        </div><div class="line">        <span class="type">Toolbar</span> toolbar = (<span class="type">Toolbar</span>) findViewById(<span class="type">R</span>.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        <span class="type">CollapsingToolbarLayout</span> collapsingToolbarLayout = (<span class="type">CollapsingToolbarLayout</span>) findViewById(<span class="type">R</span>.id.collapsing_toolbar);</div><div class="line">        collapsingToolbarLayout.setTitle(<span class="string">"哆啦A梦"</span>);</div><div class="line"></div><div class="line">        mRecyclerView = (<span class="type">RecyclerView</span>) findViewById(<span class="type">R</span>.id.recyclerView);</div><div class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="type">LinearLayoutManager</span>(<span class="keyword">this</span>, <span class="type">LinearLayoutManager</span>.<span class="type">VERTICAL</span>, <span class="literal">false</span>));</div><div class="line">        mRecyclerView.setAdapter(<span class="keyword">new</span> <span class="type">RecyclerViewAdapter</span>(<span class="keyword">this</span>));</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><img src="http://upload-images.jianshu.io/upload_images/1014339-21388cdc3cacbd6d.gif?imageMogr2/auto-orient/strip" alt="CoordinatorLayout+CollapsingToolbarLayout实现Toolbar折叠效果"></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.csdn.net/itachi85/article/details/50492695" target="_blank" rel="external"> Android Design Support Library（三）用CoordinatorLayout实现Toolbar隐藏和折叠</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CoordinatorLayout是Android Design Support Library中比较难的控件，它是用来组织它的子View之间协助的一个父View，它直接继承于ViewGroup。&lt;/p&gt;
&lt;p&gt;CoordinatorLayout默认情况下可理解是一个Fra
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android5.X" scheme="http://liuguoquan727.github.io/tags/Android5-X/"/>
    
  </entry>
  
  <entry>
    <title>TabLayout实现网易新闻滑动标签效果</title>
    <link href="http://liuguoquan727.github.io/2016/02/24/Android%20Design%20Support%20Library%E4%B9%8BTabLayout/"/>
    <id>http://liuguoquan727.github.io/2016/02/24/Android Design Support Library之TabLayout/</id>
    <published>2016-02-24T13:46:03.000Z</published>
    <updated>2017-02-19T03:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>TabLayout是Android Design Support Library库中的控件。Google在2015年的IO大会上，给我们带来了更加详细的Material Design设计规范，同时也给我们带来了全新的Android Design Support Library，在这个support库中,Google给我们提供了更加规范的MD设计风格的控件。最重要的是，Android Design Support Library可以向下兼容到Android 2.2。</p>
<p>接下来，我们开始熟悉TabLayout的使用，并完成一个类似网易新闻客户端滑动标签的效果，它的滑动标签由Toolbar+TabLayout实现，内容显示由ViewPager+Fragment实现。</p>
<h1 id="配置build-gradle"><a href="#配置build-gradle" class="headerlink" title="配置build.gradle"></a>配置build.gradle</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:support-v4:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:cardview-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:23.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>com.android.support:design:23.2.0就是我们需要引入的Android Design Support Library，其次我们还引入了RecyclerView和CardView两个Android 5.X的新控件。</p>
<h1 id="主界面的布局"><a href="#主界面的布局" class="headerlink" title="主界面的布局"></a>主界面的布局</h1><p>主界面的布局由AppBarLayout、Toolbar和TabLayout，以及ViewPager组成，主界面布局文件activity_main.xml如下:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span></div><div class="line">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tabs"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:tabIndicatorColor</span>=<span class="string">"#ADBE107E"</span></div><div class="line">            <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里用到AppBarLayout和Toolbar，AppBarLayout是Android Design Support Library新加的空间继承自LinearLayout，它用来将Toolbar和TabLayout组合起来成为一个整体。ViewPager用来实现Fragment页面的切换</p>
<p>布局文件中最关键的一点是android.support.design.widget.TabLayout的app:tabMode=”scrollable”，它表示tab标签的模式是可滑动的，如果不设置次模式的话，标签将不可滑动。</p>
<h1 id="主界面的实现"><a href="#主界面的实现" class="headerlink" title="主界面的实现"></a>主界面的实现</h1><ol>
<li>实例化TabLayout，给TabLayout标签设置文字</li>
<li>实例化FragmentAdapter，加载Fragment</li>
<li>实例化ViewPager，并设置ViewPager的适配器FragmentAdapter</li>
<li>TabLayout与ViewPager关联</li>
<li>TabLayout设置适配器FragmentAdapter</li>
</ol>
<p>MainActivity.java如下所示</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mytablayout;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.TabLayout;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class MainActivity extends AppCompatActivity &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> TabLayout mTabLayout;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        </div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        mViewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class="line">        initViewPager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> initViewPager() &#123;</div><div class="line"></div><div class="line">        mTabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class="line"></div><div class="line">        List&lt;<span class="keyword">String</span>&gt; titles = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"新闻"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"财经"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"娱乐"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"体育"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"军事"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"科技"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"教育"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"历史"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"文化"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"校园"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i= <span class="number">0</span>;i &lt; titles.<span class="built_in">size</span>();i++) &#123;</div><div class="line">            <span class="comment">//设置TabIndicator文字</span></div><div class="line">            mTabLayout.addTab(mTabLayout.newTab().setText(titles.<span class="built_in">get</span>(i)));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        List&lt;Fragment&gt; fragments = <span class="keyword">new</span> ArrayList&lt;Fragment&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; titles.<span class="built_in">size</span>(); i++) &#123;</div><div class="line">            </div><div class="line">            fragments.<span class="built_in">add</span>(<span class="keyword">new</span> TabFragment());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//实例化适配器</span></div><div class="line">        FragmentAdapter mAdapter = <span class="keyword">new</span> FragmentAdapter(getSupportFragmentManager(),fragments,titles);</div><div class="line"></div><div class="line">        <span class="comment">//给ViewPager设置适配器</span></div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line"></div><div class="line">        <span class="comment">//将TabLayout和ViewPager关联起来</span></div><div class="line">        mTabLayout.setupWithViewPager(mViewPager);</div><div class="line">        </div><div class="line">        <span class="comment">//给TabLayout设置适配器</span></div><div class="line">        mTabLayout.setTabsFromPagerAdapter(mAdapter);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实例化FragmentAdapter"><a href="#实例化FragmentAdapter" class="headerlink" title="实例化FragmentAdapter"></a>实例化FragmentAdapter</h2><p>FragmentAdapter.java</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mytablayout;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/2/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt;  mFragments;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt;    mTitles;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FragmentAdapter</span><span class="params">(FragmentManager fm,List&lt;Fragment&gt; fragments,List&lt;String&gt; titles)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        </div><div class="line">        <span class="keyword">this</span>.mFragments = fragments;</div><div class="line">        <span class="keyword">this</span>.mTitles = titles;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mFragments.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mFragments.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//Tabs标签名称</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mTitles.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TabFragment"><a href="#TabFragment" class="headerlink" title="TabFragment"></a>TabFragment</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mytablayout;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">Fragment</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">LinearLayoutManager</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">RecyclerView</span>;</div><div class="line"><span class="keyword">import</span> android.view.<span class="type">LayoutInflater</span>;</div><div class="line"><span class="keyword">import</span> android.view.<span class="type">View</span>;</div><div class="line"><span class="keyword">import</span> android.view.<span class="type">ViewGroup</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * A simple &#123;@link Fragment&#125; subclass.</div><div class="line"> */</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TabFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">RecyclerView</span> mRecyclerView;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">                             <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="comment">// Inflate the layout for this fragment</span></div><div class="line">        <span class="type">View</span> view = inflater.inflate(<span class="type">R</span>.layout.fragment_list,container,<span class="literal">false</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onActivityCreated(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line"></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><p><img src="http://upload-images.jianshu.io/upload_images/1014339-823ac9ef8636d01f.gif?imageMogr2/auto-orient/strip" alt="ALT TEXT"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TabLayout是Android Design Support Library库中的控件。Google在2015年的IO大会上，给我们带来了更加详细的Material Design设计规范，同时也给我们带来了全新的Android Design Support Librar
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android5.X" scheme="http://liuguoquan727.github.io/tags/Android5-X/"/>
    
  </entry>
  
  <entry>
    <title>Android Design Support Library之NavigationView</title>
    <link href="http://liuguoquan727.github.io/2016/02/22/Android%20Design%20Support%20Library%E4%B9%8BNavigationView/"/>
    <id>http://liuguoquan727.github.io/2016/02/22/Android Design Support Library之NavigationView/</id>
    <published>2016-02-22T14:46:03.000Z</published>
    <updated>2017-02-19T03:38:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>NavigationView在MD设计中非常重要，之前Google提出使用Drawlayout来实现导航抽屉。这次，在Android Design Support Library中Google官方提供了NavigationView来实现导航菜单界面。</p>
<p>下面，我们开始用NavigationView来实现抽屉菜单界面</p>
<h1 id="配置build-gradle"><a href="#配置build-gradle" class="headerlink" title="配置build.gradle:"></a>配置build.gradle:</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.2.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:23.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>com.android.support:design:23.2.0就是我们需要引入的Android Design Support Library。</p>
<h1 id="主界面布局"><a href="#主界面布局" class="headerlink" title="主界面布局"></a>主界面布局</h1><p>activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:openDrawer</span>=<span class="string">"start"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span></span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/app_bar_main"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header_main"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/activity_main_drawer"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>DrawerLayout标签包含了主界面的布局以及抽屉的布局NavigationView标签下的app:headerLayout用于引入抽屉的头部布局，app:menu用于引入抽屉的菜单布局<br>所以上面布局需要引入另外三个布局文件</p>
<h2 id="app-bar-main-xml"><a href="#app-bar-main-xml" class="headerlink" title="app_bar_main.xml"></a>app_bar_main.xml</h2><p>主界面展示的内容:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.deason.library.mynavigationview.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/content_main"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_dialog_email"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="nav-header-main-xml"><a href="#nav-header-main-xml" class="headerlink" title="nav_header_main.xml"></a>nav_header_main.xml</h2><p>抽屉的头布局文件:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"@dimen/nav_header_height"</span></div><div class="line">    android:background=<span class="string">"@drawable/side_nav_bar"</span></div><div class="line">    android:gravity=<span class="string">"bottom"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span></div><div class="line">    android:paddingBottom=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    android:paddingLeft=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    android:paddingRight=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    android:paddingTop=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    android:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=<span class="string">"@+id/imageView"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:paddingTop=<span class="string">"@dimen/nav_header_vertical_spacing"</span></div><div class="line">        android:src=<span class="string">"@android:drawable/sym_def_app_icon"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:paddingTop=<span class="string">"@dimen/nav_header_vertical_spacing"</span></div><div class="line">        android:text=<span class="string">"Android Studio"</span></div><div class="line">        android:textAppearance=<span class="string">"@style/TextAppearance.AppCompat.Body1"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/textView"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:text=<span class="string">"android.studio@android.com"</span> /&gt;</div><div class="line"></div><div class="line">&lt;<span class="regexp">/LinearLayout&gt;</span></div></pre></td></tr></table></figure>
<p>android:background=”@drawable/side_nav_bar”则是设置了头布局的背景颜色，这里使用的是自定义shape来实现</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line">        <span class="attr">android:angle</span>=<span class="string">"135"</span></div><div class="line">        <span class="attr">android:centerColor</span>=<span class="string">"#FFFF00"</span></div><div class="line">        <span class="attr">android:endColor</span>=<span class="string">"#2E7D32"</span></div><div class="line">        <span class="attr">android:startColor</span>=<span class="string">"#81C784"</span></div><div class="line">        <span class="attr">android:type</span>=<span class="string">"linear"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="activity-main-drawer-xml"><a href="#activity-main-drawer-xml" class="headerlink" title="activity_main_drawer.xml"></a>activity_main_drawer.xml</h2><p>抽屉的菜单布局文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_camera"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_camera"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Import"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_gallery"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_gallery"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Gallery"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_slideshow"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_slideshow"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Slideshow"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_manage"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_manage"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Tools"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:title</span>=<span class="string">"Communicate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/nav_share"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_share"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"Share"</span> /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/nav_send"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_send"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"Send"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mynavigationview;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.NavigationView;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.GravityCompat;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.DrawerLayout;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarDrawerToggle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">NavigationView</span>.<span class="title">OnNavigationItemSelectedListener</span> &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        </div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        </div><div class="line"></div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Snackbar.make(view, <span class="string">"Replace with your own action"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        ActionBarDrawerToggle toggle = <span class="keyword">new</span> ActionBarDrawerToggle(</div><div class="line">                <span class="keyword">this</span>, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);</div><div class="line">        drawer.addDrawerListener(toggle); <span class="comment">//'com.android.support:design:23.2.0'中新增的方法，之版本用drawer.setDrawerListener(toggle)这个方法</span></div><div class="line">        toggle.syncState();</div><div class="line"></div><div class="line">        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">        <span class="comment">//监听侧滑栏item选择事件</span></div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        <span class="keyword">if</span> (drawer.isDrawerOpen(GravityCompat.START)) &#123;</div><div class="line">            drawer.closeDrawer(GravityCompat.START);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 监听抽屉菜单栏的点击事件</div><div class="line">     * <span class="doctag">@param</span> item</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"StatementWithEmptyBody"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle navigation view item clicks here.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (id == R.id.nav_camera) &#123;</div><div class="line">            <span class="comment">// Handle the camera action</span></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_gallery)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_slideshow)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_manage)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_share)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_send)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//关闭侧滑栏</span></div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        drawer.closeDrawer(GravityCompat.START);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="http://upload-images.jianshu.io/upload_images/1014339-2c3d097af7b1ae4c.gif?imageMogr2/auto-orient/strip" alt="抽屉菜单"></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.csdn.net/itachi85/article/details/50434641" target="_blank" rel="external">Android Design Support Library（二）用NavigationView实现抽屉菜单界面</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NavigationView在MD设计中非常重要，之前Google提出使用Drawlayout来实现导航抽屉。这次，在Android Design Support Library中Google官方提供了NavigationView来实现导航菜单界面。&lt;/p&gt;
&lt;p&gt;下面，我
    
    </summary>
    
      <category term="Android" scheme="http://liuguoquan727.github.io/categories/Android/"/>
    
    
      <category term="Android5.X" scheme="http://liuguoquan727.github.io/tags/Android5-X/"/>
    
  </entry>
  
</feed>
