<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JNI之⑤C/C++处理Java对象引用]]></title>
      <url>http://liuguoquan727.github.io/2017/01/04/JNI%E4%B9%8B%E2%91%A4C:C++%E5%A4%84%E7%90%86Java%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="数组引用的处理"><a href="#数组引用的处理" class="headerlink" title="数组引用的处理"></a>数组引用的处理</h1><p>在Java中,使用new关键字创建对象,创建之后我们就可以随意使用这个对象,我们无需关心这个对象是什么时候被回收的 ,对象的回收已经托管到了JVM的GC,由GC来帮我们回收无引用的对象。将对象引用传递给C/C++时，C/C++层就会持有Java对象，如果不进行妥善处理，对象多了就会出现内存泄漏问题，所以在C/C++层使用Java对象后，需要释放这个引用 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.ndk.write;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * Created by liuguoquan on 2017/1/3.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteJava</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 对数组进行排序</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaArraySort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    System.loadLibrary(<span class="string">"native-lib"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="comment">//logcat日志</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_TAG    <span class="meta-string">"NDK"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//比较</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 对数组进行排序</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaArraySort</span><span class="params">(JNIEnv *env, jobject instance,</span></div><div class="line">                                                     jintArray array_) &#123;</div><div class="line">    jint *<span class="built_in">array</span> = env-&gt;GetIntArrayElements(array_, <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">// 数组长度</span></div><div class="line">    jsize array_size = env-&gt;GetArrayLength(array_);</div><div class="line">    <span class="comment">// 快速排序函数</span></div><div class="line">    qsort(<span class="built_in">array</span>, (<span class="keyword">size_t</span>) array_size, <span class="keyword">sizeof</span>(jint), compare);</div><div class="line">    <span class="comment">// 释放引用,因为数组和对象在java中都是引用,都会在堆内存中开辟一块空间,但我们使用完对象之后</span></div><div class="line">    <span class="comment">// 需要将引用释放掉,不然会很耗内存,在一定程度上可能会造成内存溢出 。</span></div><div class="line">    <span class="comment">// JNI_ABORT, Java数组不进行更新，但是释放C/C++数组</span></div><div class="line">    <span class="comment">// JNI_COMMIT，Java数组进行更新，不释放C/C++数组（函数执行完，数组还是会释放）</span></div><div class="line">    <span class="comment">//// 0，Java数组进行更新，释放C/C++数组</span></div><div class="line">    env-&gt;ReleaseIntArrayElements(array_, <span class="built_in">array</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span> </span>&#123;</div><div class="line">    LOGI(<span class="string">"a = %d,b = %d"</span>,*((<span class="keyword">int</span>*)a),*((<span class="keyword">int</span>*)b));</div><div class="line">    <span class="keyword">return</span> *((<span class="keyword">int</span>*)a) - *((<span class="keyword">int</span>*)b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h1 id="引用释放"><a href="#引用释放" class="headerlink" title="引用释放"></a>引用释放</h1><p>只要是Java对象,在C中都需要释放,如String类型引用：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String类型引用释放</span></div><div class="line"><span class="keyword">void</span> (JNICALL *ReleaseStringUTFChars)</div><div class="line">      (JNIEnv *env, jstring <span class="built_in">str</span>, <span class="keyword">const</span> <span class="built_in">char</span>* chars);</div></pre></td></tr></table></figure>
<p>在C中创建的对象引用也需要进行引用释放.</p>
<blockquote>
<p>创建一个数组对象,并将引用传递给了Java层,将引用交给了Java之后,C就需要释放这个引用,不然会一直持有,GC也不会回收这个对象 </p>
</blockquote>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*返回int类型的数组*/</span></div><div class="line">JNIEXPORT jintArray JNICALL Java_com_zeno_jni_HelloJNI_getIntArray</div><div class="line">(JNIEnv *<span class="keyword">env</span>, jobject jobj,jint len) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 创建一个jint类型的数组</span></div><div class="line">    jintArray jArray = (*<span class="keyword">env</span>)-&gt;NewIntArray(<span class="keyword">env</span>, len);</div><div class="line"></div><div class="line">    <span class="comment">// 得到数组首个元素指针</span></div><div class="line">    jint* arrayElements = (*<span class="keyword">env</span>)-&gt;GetIntArrayElements(<span class="keyword">env</span>, jArray, NULL);</div><div class="line"></div><div class="line">    <span class="comment">// 指针运算</span></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">        arrayElements[i] = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 同步</span></div><div class="line">    (*<span class="keyword">env</span>)-&gt;ReleaseIntArrayElements(<span class="keyword">env</span>, jArray, arrayElements, JNI_COMMIT);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> jArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line">java code</div><div class="line"><span class="comment">// 在C中生存数组 ， 返回到Java中</span></div><div class="line">private native <span class="keyword">int</span>[] getIntArray(<span class="keyword">int</span> len) ;</div><div class="line"></div><div class="line"><span class="keyword">int</span>[] intArray = jni.getIntArray(<span class="number">20</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intArray.length; i++) &#123;</div><div class="line">        System.out.println(<span class="string">"int array === "</span>+intArray[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="JNI引用分类"><a href="#JNI引用分类" class="headerlink" title="JNI引用分类"></a>JNI引用分类</h1><h2 id="局部引用"><a href="#局部引用" class="headerlink" title="局部引用"></a>局部引用</h2><p>局部引用在本地方法调用的时间内有效，本地方法调用结束后会自动释放，每个局部引用都消耗一定的JVM资源，所以我们必须确保本地方法中不能过多的分配局部引用，尽管局部引用能够在方法调用后自动释放，但是过多的局部引用仍然可能导致虚拟机内存溢出。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_zeno_jni_HelloJNI_localRef</span></span></div><div class="line"><span class="params">(JNIEnv *env, jobject jobj)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 找到类</span></div><div class="line">    jclass dateClass = (*env)-&gt;FindClass(env, <span class="string">"java/util/Date"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 得到构造方法ID</span></div><div class="line">    jmethodID dateConstructorId = (*env)-&gt;GetMethodID(env, dateClass, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 创建Date对象</span></div><div class="line">    jobject dateObject = (*env)-&gt;NewObject(env, dateClass, dateConstructorId);</div><div class="line"></div><div class="line">    <span class="comment">// 创建一个局部引用</span></div><div class="line">    jobject dateLocalRef = (*env)-&gt;NewLocalRef(env, dateObject);</div><div class="line"></div><div class="line">    <span class="comment">// 省略N行代码</span></div><div class="line"></div><div class="line">    <span class="comment">// 不再使用对象,则通知GC回收对象，手动释放对象</span></div><div class="line">    (*env)-&gt;DeleteLocalRef(env, dateLocalRef);</div><div class="line">    <span class="comment">// 因为dateObject也是局部对象，可以直接回收dateObject对象</span></div><div class="line">    <span class="comment">//(*env)-&gt;DeleteLocalRef(env, dateObject);</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">jstring globalStr;</div><div class="line"></div><div class="line"><span class="comment">/*创建全局引用*/</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_zeno_jni_HelloJNI_createGlobalRef</span></span></div><div class="line"><span class="params">(JNIEnv *env, jobject jobj)</span> &#123;</div><div class="line"></div><div class="line">    jstring jStr = (*env)-&gt;NewStringUTF(env, <span class="string">"I want your love !"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 创建一个全局引用</span></div><div class="line">    globalStr = (*env)-&gt;NewGlobalRef(env, jStr);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*使用全局引用*/</span></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_zeno_jni_HelloJNI_useGlobalRef</span></span></div><div class="line"><span class="params">(JNIEnv *env, jobject jobj)</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> globalStr;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*释放全局引用*/</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_zeno_jni_HelloJNI_deleteGlobalRef</span></span></div><div class="line"><span class="params">(JNIEnv *env, jobject jobj)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 释放全局引用</span></div><div class="line">    (*env)-&gt;DeleteGlobalRef(env, globalStr);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="弱全局引用"><a href="#弱全局引用" class="headerlink" title="弱全局引用"></a>弱全局引用</h2><p>节省内存，在内存不足时可以释放所引用的对象<br>可以引用一个不常用的对象，如果为NULL，临时创建</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建</span></div><div class="line"><span class="function">jweak <span class="title">NewWeakGlobalRef</span><span class="params">(JNIEnv *env, jobject obj)</span></span>;</div><div class="line"><span class="comment">//销毁</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteWeakGlobalRef</span><span class="params">(JNIEnv *env, jweak obj)</span></span>;</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/09469f692a4b" target="_blank" rel="external">JNI开发系列⑤对象引用的处理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JNI之④C/C++创建Java对象]]></title>
      <url>http://liuguoquan727.github.io/2017/01/04/JNI%E4%B9%8B%E2%91%A3C:C++%E5%88%9B%E5%BB%BAJava%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>获取Java对象的jclass</li>
<li>获取构造函数的id，方法名使用<init></init></li>
<li>NewObject创建Java对象jobject</li>
<li>获取并调用jobject中的方法</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.ndk.write;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C访问Java字段和方法</div><div class="line"> * Created by liuguoquan on 2017/1/3.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteJava</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * C/C++ 调用Java对象</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">c2JavaClass</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    System.loadLibrary(<span class="string">"native-lib"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++ 创建Java对象</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jlong JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaClass</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">//获取Date jclass</span></div><div class="line">    jclass clz = env-&gt;FindClass(<span class="string">"java/util/Date"</span>);</div><div class="line">    <span class="comment">//获取构造方法id</span></div><div class="line">    jmethodID methodId = env-&gt;GetMethodID(clz,<span class="string">"&lt;init&gt;"</span>,<span class="string">"()V"</span>);</div><div class="line">    <span class="comment">//创建Date对象</span></div><div class="line">    jobject obj = env-&gt;NewObject(clz,methodId);</div><div class="line">    <span class="comment">//获取getTime的方法ID</span></div><div class="line">    jmethodID getTimeId = env-&gt;GetMethodID(clz,<span class="string">"getTime"</span>,<span class="string">"()J"</span>);</div><div class="line">    <span class="comment">//调用getTime方法</span></div><div class="line">    jlong time = env-&gt;CallLongMethod(obj,getTimeId);</div><div class="line">    LOGI(<span class="string">"time = %ld\n"</span>,time);</div><div class="line">    <span class="keyword">return</span> time;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/b0403771944f" target="_blank" rel="external">JNI开发系列④C语言调用构造方法</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JNI之③C/C++调用Java字段与方法]]></title>
      <url>http://liuguoquan727.github.io/2017/01/04/JNI%E4%B9%8B%E2%91%A2C:C++%E8%B0%83%E7%94%A8Java%E5%AD%97%E6%AE%B5%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="native函数定义"><a href="#native函数定义" class="headerlink" title="native函数定义"></a>native函数定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.ndk.write;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C访问Java字段和方法</div><div class="line"> * Created by liuguoquan on 2017/1/3.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteJava</span> </span>&#123;</div><div class="line">  <span class="comment">//Java成员变量</span></div><div class="line">  <span class="keyword">public</span> String name = <span class="string">"liu"</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">20</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String sex = <span class="string">"男"</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"刘涤生"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * C/C++修改java String 类型字段本地方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStringField</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaIntField</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStringStaticField</span><span class="params">()</span></span>;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   *  C/C++ 访问Java方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaMethod</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStaticMethod</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 静态native方法访问字段</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">native2JavaStringField</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    System.loadLibrary(<span class="string">"native-lib"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="C-C-访问Java字段"><a href="#C-C-访问Java字段" class="headerlink" title="C/C++访问Java字段"></a>C/C++访问Java字段</h1><ol>
<li>获取jclass对象</li>
<li>获取字段ID</li>
<li>设置字段的值</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*C语言访问java String类型字段*/</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStringField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">// 1.获取jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 2.获取字段ID</span></div><div class="line">    jfieldID fieldId = env-&gt;GetFieldID(clz,<span class="string">"name"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//3.获取字段的值</span></div><div class="line">    jstring str = (jstring)env-&gt;GetObjectField(instance,fieldId);</div><div class="line">    <span class="comment">//4.将jstring类型转换成字符指针</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *cstr = env-&gt;GetStringUTFChars(str,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"%s"</span>,cstr);</div><div class="line">    <span class="comment">//释放内存</span></div><div class="line">    env-&gt;ReleaseStringUTFChars(str,cstr);</div><div class="line">    <span class="comment">//拼接字符</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *newstr = <span class="string">"lee"</span>;</div><div class="line">    <span class="comment">//5.创建新jstring</span></div><div class="line">    jstring new_str = env-&gt;NewStringUTF(newstr);</div><div class="line">    <span class="comment">//6.将jstring类型的变量值 设置到java字段中</span></div><div class="line">    env-&gt;SetObjectField(instance,fieldId,new_str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++访问修改java int字段</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaIntField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 字段id</span></div><div class="line">    jfieldID fieldId = env-&gt;GetFieldID(clz,<span class="string">"age"</span>,<span class="string">"I"</span>);</div><div class="line">    <span class="comment">//得到字段值</span></div><div class="line">    jint age = env-&gt;GetIntField(instance,fieldId);</div><div class="line">    LOGI(<span class="string">"age = %d"</span>,age);</div><div class="line">    env-&gt;SetIntField(instance,fieldId,age + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="C-C-访问Java方法"><a href="#C-C-访问Java方法" class="headerlink" title="C/C++访问Java方法"></a>C/C++访问Java方法</h1><ol>
<li>获取jclass对象</li>
<li>获取方法ID</li>
<li>调用方法</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++ 访问java方法</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 获取jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 获取methodId</span></div><div class="line">    <span class="comment">//函数签名 括号内表示参数 括号外表示返回值</span></div><div class="line">    jmethodID methodId = env-&gt;GetMethodID(clz,<span class="string">"setName"</span>,<span class="string">"(Ljava/lang/String;)V"</span>);</div><div class="line">    <span class="comment">// 调用方法</span></div><div class="line">    jstring str = env-&gt;NewStringUTF(<span class="string">"zhang"</span>);</div><div class="line">    env-&gt;CallVoidMethod(instance,methodId,str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="C-C-访问Java静态字段"><a href="#C-C-访问Java静态字段" class="headerlink" title="C/C++访问Java静态字段"></a>C/C++访问Java静态字段</h1><ol>
<li>获取jclass对象</li>
<li>获取静态字段ID</li>
<li>设置静态字段的值</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * c/c++ 访问java静态字段</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStringStaticField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">// 获取jclass对象</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    jfieldID fieldId = env-&gt;GetStaticFieldID(clz,<span class="string">"sex"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//获取字段的值</span></div><div class="line">    jstring jstr = (jstring)env-&gt;GetStaticObjectField(clz,fieldId);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *sex = env-&gt;GetStringUTFChars(jstr,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"sex = %s\n"</span>,sex);</div><div class="line">    jstring newStr = env-&gt;NewStringUTF(<span class="string">"女"</span>);</div><div class="line">    <span class="comment">//修改字段</span></div><div class="line">    env-&gt;SetStaticObjectField(clz,fieldId,newStr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="C-C-访问Java静态方法"><a href="#C-C-访问Java静态方法" class="headerlink" title="C/C++访问Java静态方法"></a>C/C++访问Java静态方法</h1><ol>
<li>获取jclass对象</li>
<li>获取静态方法ID</li>
<li>调用静态方法</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * c/c++访问静态方法</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStaticMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">//获取静态方法id</span></div><div class="line">    jmethodID methodId = env-&gt;GetStaticMethodID(clz,<span class="string">"getName"</span>,<span class="string">"()Ljava/lang/String;"</span>);</div><div class="line">    jstring obj = (jstring)env-&gt;CallStaticObjectMethod(clz,methodId);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* value = env-&gt;GetStringUTFChars(obj,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"name = %s\n"</span>,value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="静态native方法访问Java静态字段"><a href="#静态native方法访问Java静态字段" class="headerlink" title="静态native方法访问Java静态字段"></a>静态native方法访问Java静态字段</h1><ol>
<li>获取静态字段id</li>
<li>设置静态字段值</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 静态native方法 第二个参数是jclass而不是jobject类型</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_native2JavaStringField</span><span class="params">(JNIEnv *env, jclass clz)</span> &#123;</div><div class="line"></div><div class="line">    jfieldID fieldID = env-&gt;GetStaticFieldID(clz,<span class="string">"sex"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    jstring jstr = (jstring) env-&gt;GetStaticObjectField(clz, fieldID);</div><div class="line">    LOGI(<span class="string">"sex = %s\n"</span>,env-&gt;GetStringUTFChars(jstr,JNI_FALSE));</div><div class="line">    jstring newStr = env-&gt;NewStringUTF(<span class="string">"女"</span>);</div><div class="line">    <span class="comment">//修改静态常量字段</span></div><div class="line">    env-&gt;SetStaticObjectField(clz,fieldID,newStr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.ndk.write;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C访问Java字段和方法</div><div class="line"> * Created by liuguoquan on 2017/1/3.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteJava</span> </span>&#123;</div><div class="line">  <span class="comment">//Java成员变量</span></div><div class="line">  <span class="keyword">public</span> String name = <span class="string">"liu"</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">20</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String sex = <span class="string">"男"</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"刘涤生"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * C/C++修改java String 类型字段本地方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStringField</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaIntField</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStringStaticField</span><span class="params">()</span></span>;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   *  C/C++ 访问Java方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaMethod</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">c2JavaStaticMethod</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 静态native方法访问字段</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">native2JavaStringField</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    System.loadLibrary(<span class="string">"native-lib"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="C-C-代码"><a href="#C-C-代码" class="headerlink" title="C/C++代码"></a>C/C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="comment">//logcat日志</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_TAG    <span class="meta-string">"NDK"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)</span></div><div class="line"><span class="comment">/* Header for class com_example_demo_JniUtil */</span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/*C语言访问java String类型字段*/</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStringField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">// 1.获取jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 2.获取字段ID</span></div><div class="line">    jfieldID fieldId = env-&gt;GetFieldID(clz,<span class="string">"name"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//3.获取字段的值</span></div><div class="line">    jstring str = (jstring)env-&gt;GetObjectField(instance,fieldId);</div><div class="line">    <span class="comment">//4.将jstring类型转换成字符指针</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *cstr = env-&gt;GetStringUTFChars(str,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"%s"</span>,cstr);</div><div class="line">    <span class="comment">//拼接字符</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *newstr = <span class="string">"lee"</span>;</div><div class="line">    <span class="comment">//5.创建新jstring</span></div><div class="line">    jstring new_str = env-&gt;NewStringUTF(newstr);</div><div class="line">    <span class="comment">//6.将jstring类型的变量值 设置到java字段中</span></div><div class="line">    env-&gt;SetObjectField(instance,fieldId,new_str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++访问修改java int字段</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaIntField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 字段id</span></div><div class="line">    jfieldID fieldId = env-&gt;GetFieldID(clz,<span class="string">"age"</span>,<span class="string">"I"</span>);</div><div class="line">    <span class="comment">//得到字段值</span></div><div class="line">    jint age = env-&gt;GetIntField(instance,fieldId);</div><div class="line">    LOGI(<span class="string">"age = %d"</span>,age);</div><div class="line">    env-&gt;SetIntField(instance,fieldId,age + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * C/C++ 访问java方法</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 获取jclass</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">// 获取methodId</span></div><div class="line">    <span class="comment">//函数签名 括号内表示参数 括号外表示返回值</span></div><div class="line">    jmethodID methodId = env-&gt;GetMethodID(clz,<span class="string">"setName"</span>,<span class="string">"(Ljava/lang/String;)V"</span>);</div><div class="line">    <span class="comment">// 调用方法</span></div><div class="line">    jstring str = env-&gt;NewStringUTF(<span class="string">"zhang"</span>);</div><div class="line">    env-&gt;CallVoidMethod(instance,methodId,str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * c/c++ 访问java静态字段</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStringStaticField</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">// 获取jclass对象</span></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    jfieldID fieldId = env-&gt;GetStaticFieldID(clz,<span class="string">"sex"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//获取字段的值</span></div><div class="line">    jstring jstr = (jstring)env-&gt;GetStaticObjectField(clz,fieldId);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *sex = env-&gt;GetStringUTFChars(jstr,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"sex = %s\n"</span>,sex);</div><div class="line">    jstring newStr = env-&gt;NewStringUTF(<span class="string">"女"</span>);</div><div class="line">    <span class="comment">//修改字段</span></div><div class="line">    env-&gt;SetStaticObjectField(clz,fieldId,newStr);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * c/c++访问静态方法</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_c2JavaStaticMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    jclass clz = env-&gt;GetObjectClass(instance);</div><div class="line">    <span class="comment">//获取静态方法id</span></div><div class="line">    jmethodID methodId = env-&gt;GetStaticMethodID(clz,<span class="string">"getName"</span>,<span class="string">"()Ljava/lang/String;"</span>);</div><div class="line">    jstring obj = (jstring)env-&gt;CallStaticObjectMethod(clz,methodId);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* value = env-&gt;GetStringUTFChars(obj,JNI_FALSE);</div><div class="line">    LOGI(<span class="string">"name = %s\n"</span>,value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 静态native方法 第二个参数书jclass而不是jobject类型</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_michael_ndk_write_WriteJava_native2JavaStringField</span><span class="params">(JNIEnv *env, jclass clz)</span> &#123;</div><div class="line"></div><div class="line">    jfieldID fieldID = env-&gt;GetStaticFieldID(clz,<span class="string">"sex"</span>,<span class="string">"Ljava/lang/String;"</span>);</div><div class="line">    jstring jstr = (jstring) env-&gt;GetStaticObjectField(clz, fieldID);</div><div class="line">    LOGI(<span class="string">"sex = %s\n"</span>,env-&gt;GetStringUTFChars(jstr,JNI_FALSE));</div><div class="line">    jstring newStr = env-&gt;NewStringUTF(<span class="string">"女"</span>);</div><div class="line">    <span class="comment">//修改静态常量字段</span></div><div class="line">    env-&gt;SetStaticObjectField(clz,fieldID,newStr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h1 id="为什么要得到jclass呢-？"><a href="#为什么要得到jclass呢-？" class="headerlink" title="为什么要得到jclass呢 ？"></a>为什么要得到jclass呢 ？</h1><p>因为 ，我们要获取字段ID，在JNI中，获取java字段与方法都需要签名。而签名是在类加载的时候完成，所以在获取字段ID的时候需要传入jclass。</p>
<h1 id="为什么传入了字段名称，还需要签名呢-？"><a href="#为什么传入了字段名称，还需要签名呢-？" class="headerlink" title="为什么传入了字段名称，还需要签名呢 ？"></a>为什么传入了字段名称，还需要签名呢 ？</h1><p>因为java支持重载 ， 一个方法名称可以有多个不同实现 ， 根据传入的参数不同 ，所以C语言调用函数为了区分不同的方法， 而对每个方法做了签名 ， 而字段则可用来标识类型。</p>
<blockquote>
<p>在.class的文件目录下 ，使用<code>javap -s -p className</code>   就可以列举出 ， 所有的字段与方法签名</p>
</blockquote>
<p><a href="http://www.jianshu.com/p/9cc6e3f0ead7" target="_blank" rel="external">JNI开发系列③C语言调用Java字段与方法</a><br><a href="http://www.jianshu.com/p/cba836f6a08c" target="_blank" rel="external">JNI开发系列②.h头文件分析</a><br><a href="http://www.jianshu.com/p/68bca86a84ce" target="_blank" rel="external">JNI开发系列①JNI概念及开发流程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JNI之②头文件分析]]></title>
      <url>http://liuguoquan727.github.io/2017/01/02/JNI%E4%B9%8B%E2%91%A1%E5%A4%B4%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="编写Java文件"><a href="#编写Java文件" class="headerlink" title="编写Java文件"></a>编写Java文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderFile</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span>  <span class="title">doVoid</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doShort</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">void</span> <span class="title">doArray</span><span class="params">(Object[] o )</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">int</span> i)</span></span>;      <span class="comment">//byte ,short ,int,long,float,double ,boolean,char        </span></div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">double</span> d)</span></span>;    <span class="comment">//byte ,short ,int,long,float,double ,boolean,char  </span></div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(Object o)</span></span>;      </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">double</span> d1,<span class="keyword">double</span> d2)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">double</span> d1 ,<span class="keyword">double</span> d2,<span class="keyword">double</span> d3)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">double</span> d1 ,<span class="keyword">float</span> f,<span class="keyword">boolean</span> b ,<span class="keyword">char</span>[] c )</span></span>;    </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">int</span>[] i)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">int</span>[] i1,<span class="keyword">double</span>[] i2 )</span></span>;      </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">doInt</span><span class="params">(<span class="keyword">int</span>[] i1,<span class="keyword">double</span>[] i2 ,Object[] o )</span></span>;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">doString</span><span class="params">(String s)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title">doObject</span><span class="params">(Object o )</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Enumeration <span class="title">doInterface</span><span class="params">(Iterator it)</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Student <span class="title">doStudent</span><span class="params">(Student s)</span></span>;  </div><div class="line">     </div><div class="line"><span class="comment">//  native int[] doInt(int[] i);  //byte ,short ,int,long,float,double ,boolean,char  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String[] doString(String[] s);  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">native</span> Object[] doObjects(Object[] o );  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">native</span> Enumeration[] doInterface(Iterator[] it);  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">native</span> Student[] doStudent(Student[] s);  </div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> Object <span class="title">doAll</span><span class="params">(<span class="keyword">int</span>[] i , String[] s , Student[] student )</span></span>;               </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="生成头文件"><a href="#生成头文件" class="headerlink" title="生成头文件"></a>生成头文件</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span>  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span>  </span></div><div class="line"><span class="comment">/* Header for class com_nedu_jni_helloword_HeaderFile */</span>  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_nedu_jni_helloword_HeaderFile  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_nedu_jni_helloword_HeaderFile  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doVoid </div><div class="line"> * Signature: ()V </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doVoid</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doShort </div><div class="line"> * Signature: ()I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doShort</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doArray </div><div class="line"> * Signature: ([Ljava/lang/Object;)V </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doArray</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (I)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__I</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jint)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (D)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__D</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jdouble)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (Ljava/lang/Object;)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__Ljava_lang_Object_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DD)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__DD</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jdouble, jdouble)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DDD)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__DDD</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jclass, jdouble, jdouble, jdouble)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DFZ[C)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt__DFZ_3C</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jclass, jdouble, jfloat, jboolean, jcharArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: ([I)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt___3I</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jintArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: ([I[D)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt___3I_3D</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jintArray, jdoubleArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: ([I[D[Ljava/lang/Object;)I </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInt___3I_3D_3Ljava_lang_Object_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jclass, jintArray, jdoubleArray, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doString </div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doString__Ljava_lang_String_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jstring)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doObject </div><div class="line"> * Signature: (Ljava/lang/Object;)Ljava/lang/Object; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobject JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doObject</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInterface </div><div class="line"> * Signature: (Ljava/util/Iterator;)Ljava/util/Enumeration; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobject JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInterface__Ljava_util_Iterator_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doStudent </div><div class="line"> * Signature: (Lcom/nedu/jni/helloword/Student;)Lcom/nedu/jni/helloword/Student; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobject JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doStudent__Lcom_nedu_jni_helloword_Student_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobject)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doString </div><div class="line"> * Signature: ([Ljava/lang/String;)[Ljava/lang/String; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobjectArray JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doString___3Ljava_lang_String_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doObjects </div><div class="line"> * Signature: ([Ljava/lang/Object;)[Ljava/lang/Object; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobjectArray JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doObjects</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInterface </div><div class="line"> * Signature: ([Ljava/util/Iterator;)[Ljava/util/Enumeration; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobjectArray JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doInterface___3Ljava_util_Iterator_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doStudent </div><div class="line"> * Signature: ([Lcom/nedu/jni/helloword/Student;)[Lcom/nedu/jni/helloword/Student; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobjectArray JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doStudent___3Lcom_nedu_jni_helloword_Student_2</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/* </span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doAll </div><div class="line"> * Signature: ([I[Ljava/lang/String;[Lcom/nedu/jni/helloword/Student;)Ljava/lang/Object; </div><div class="line"> */  </div><div class="line"><span class="function">JNIEXPORT jobject JNICALL <span class="title">Java_com_nedu_jni_helloword_HeaderFile_doAll</span>  </span></div><div class="line">  <span class="params">(JNIEnv *, jclass, jintArray, jobjectArray, jobjectArray)</span>;  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line">&#125;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h1 id="头文件分析"><a href="#头文件分析" class="headerlink" title="头文件分析"></a>头文件分析</h1><h2 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h2><pre><code>/*  
 * Class:     com_nedu_jni_helloword_HeaderFile  
 * Method:    doVoid  
 * Signature: ()V  
 */  
</code></pre><p>Class：表示Native方法的类名称<br>Method：表示方法名称<br>Signature：是方法的标识，主要提供我们再JNI操作java对象中使用  </p>
<p>Signature一般 是两部分构成，一个方法的参数。另一个是返回类型。方法参数在括号里面，返回类型在后面，例如：</p>
<pre><code>()V 
</code></pre><p>返回值为void，没有参数。  </p>
<pre><code>(DFZ[C)I 
</code></pre><p>返回值为int，参数为double、float、char[]  </p>
<pre><code>(Ljava/lang/String;)Ljava/lang/String;
</code></pre><p>返回值String，参数为String</p>
<ul>
<li>基本类型的对应关系如下</li>
</ul>
<p><img src="http://hi.csdn.net/attachment/201111/11/0_132099442294XE.gif" alt="ALT TEXT"> </p>
<ul>
<li><p>方法参数或者返回值为java中的对象时，必须以“L”加上其路径，次路径必须以”/“分开，自定义的对象也使用本规则，不在包中时直接”L”，比如说java.lang.String为“java/lang/String”,com.nedu.jni.helloword.Student为”com/nedu/jni/helloword/Student”</p>
</li>
<li><p>方法)方法参数或者返回值为数组时类型前加上[,例如[I表示int[],[[[D表示 double[][][]，即几维数组就加几个[。例子如下：</p>
</li>
</ul>
<p><img src="http://hi.csdn.net/attachment/201111/11/0_1320994986OoPN.gif" alt="ALT TEXT"></p>
<h2 id="方法的声明"><a href="#方法的声明" class="headerlink" title="方法的声明"></a>方法的声明</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">JNIEXPORT </span>void <span class="keyword">JNICALL </span><span class="keyword">Java_com_nedu_jni_helloword_HeaderFile_doArray(JNIEnv </span>*,<span class="keyword">jobject,jobjectArray);</span></div></pre></td></tr></table></figure>
<p>从声明可以看出方法基本由7部分组成：</p>
<ol>
<li>JNIEXPORT是JNI的关键字，表示此函数时要被JNI调用的</li>
<li>void表示方法的返回值类型</li>
<li>JNICALL是JNI的关键字，表示此函数时要被JNI调用的</li>
<li>Java_为JNI中表示此方法来源于java的标志头</li>
<li>com_nedu_jni_helloword_HeaderFile表示方法所在的包名+类名</li>
<li>doArray表示方法名</li>
<li>参数：JNIEnv*是一个接口指针，用于定位函数表中的函数，后面的jobject是  一个指向该类的指针，类似与C语言中的this。这个第二个参数是变化的，当该方法为类的实例方法时该参数为jobject；当该方法为类方法（即静态方法）时该参数为jclass，指向该类的class。</li>
</ol>
<p>根据不同方法前缀生成的头文件比较如下：</p>
<ul>
<li><p>static与非static的比较</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 非static方法</span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DD)I </div><div class="line"> */  </div><div class="line"><span class="keyword">JNIEXPORT </span><span class="keyword">jint </span><span class="keyword">JNICALL </span><span class="keyword">Java_com_nedu_jni_helloword_HeaderFile_doInt__DD </span> </div><div class="line">  (<span class="keyword">JNIEnv </span>*, <span class="keyword">jobject, </span><span class="keyword">jdouble, </span><span class="keyword">jdouble); </span> </div><div class="line"> </div><div class="line"><span class="comment">/* static方法</span></div><div class="line"> * Class:     com_nedu_jni_helloword_HeaderFile </div><div class="line"> * Method:    doInt </div><div class="line"> * Signature: (DDD)I </div><div class="line"> */  </div><div class="line"><span class="keyword">JNIEXPORT </span><span class="keyword">jint </span><span class="keyword">JNICALL </span><span class="keyword">Java_com_nedu_jni_helloword_HeaderFile_doInt__DDD </span> </div><div class="line">  (<span class="keyword">JNIEnv </span>*, <span class="keyword">jclass, </span><span class="keyword">jdouble, </span><span class="keyword">jdouble, </span><span class="keyword">jdouble);</span></div></pre></td></tr></table></figure>
</li>
<li><p>private、friendly、protected以及public这些方法限制符不会在JNI的头文件中出现。这些访问修饰符只有在其它类使用这些方法时有效！JNI中不关心此修饰符！</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JNI之①参数类型与Java参数类型对比]]></title>
      <url>http://liuguoquan727.github.io/2017/01/02/JNI%E4%B9%8B%E2%91%A0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E4%B8%8EJava%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul>
<li><p>Java中的返回值void和JNI中的void完全对应（仅仅一个）</p>
</li>
<li><p>Java中的基本数据类型（byte ,short ,int,long,float,double ,boolean,char－8种）在JNI中对应的数据类型只要在前面加上j就可以了（jbyte ,jshort ,jint,jlong,jfloat,jdouble ,jboolean,jchar）</p>
</li>
<li><p>Java中的对象，包括类库中定义的类、接口以及自定义类接口，都对应于JNI中的jobject</p>
</li>
<li><p>Java中的基本数据类型对应的数组对应于JNI中的j<type>Array类型（type就是8中基本数据类型）</type></p>
</li>
<li><p>Java中对象的数组对应于JNI中的jobjectArray类型</p>
</li>
</ul>
<h1 id="基本数据类型映射图"><a href="#基本数据类型映射图" class="headerlink" title="基本数据类型映射图"></a>基本数据类型映射图</h1><p><img src="http://hi.csdn.net/attachment/201111/10/0_13209061602sLG.gif" alt="ALT TEXT"></p>
<h1 id="引用数据类型的映射图"><a href="#引用数据类型的映射图" class="headerlink" title="引用数据类型的映射图"></a>引用数据类型的映射图</h1><p><img src="http://hi.csdn.net/attachment/201111/10/0_1320906175mxw4.gif" alt="ALT TEXT"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NDK开发①开发流程]]></title>
      <url>http://liuguoquan727.github.io/2017/01/01/NDK%E5%BC%80%E5%8F%91%E2%91%A0%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Java编写native方法"><a href="#Java编写native方法" class="headerlink" title="Java编写native方法"></a>Java编写native方法</h1><p>新建JniUtil类如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniUtil</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 回调接口</div><div class="line">	 * <span class="doctag">@author</span> jimi098</div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRecFrameListener</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRecFrameListener</span><span class="params">(String result)</span></span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> IRecFrameListener mListener;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		</div><div class="line">		System.loadLibrary(<span class="string">"test"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnRecFrameListener</span><span class="params">(IRecFrameListener listener)</span> </span>&#123;</div><div class="line">		</div><div class="line">		mListener = listener;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 供jni调用的java方法</div><div class="line">	 * <span class="doctag">@param</span> result</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRecFrame</span><span class="params">(<span class="keyword">int</span> result)</span> </span>&#123;</div><div class="line">		mListener.onRecFrameListener(String.valueOf(result));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//java本地方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getString</span><span class="params">(String input)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="生成-h头文件"><a href="#生成-h头文件" class="headerlink" title="生成.h头文件"></a>生成.h头文件</h1><p>编译JniUtil类，生成JniUtil.class文件，然后在cmd中切换目录至android工程的src文件夹路径，运行<code>javah -jni com.example.demo.JniUtil</code>命令即可生成.h头文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#include &lt;jni.h&gt;</div><div class="line">#include &lt;android/log.h&gt;</div><div class="line"></div><div class="line">//logcat日志</div><div class="line">#define  LOG_TAG    "Test"</div><div class="line">#define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)</div><div class="line">#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)</div><div class="line">/* Header for class com_example_demo_JniUtil */</div><div class="line"></div><div class="line">#ifndef _Included_com_example_demo_JniUtil</div><div class="line">#define _Included_com_example_demo_JniUtil</div><div class="line">#ifdef __cplusplus</div><div class="line">extern "C" &#123;</div><div class="line">#endif</div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    init</div><div class="line"> * Signature: ()I</div><div class="line"> */</div><div class="line">JNIEXPORT jint JNICALL Java_com_example_demo_JniUtil_init</div><div class="line">  (JNIEnv *, jobject);</div><div class="line"></div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    add</div><div class="line"> * Signature: (II)I</div><div class="line"> */</div><div class="line">JNIEXPORT jint JNICALL Java_com_example_demo_JniUtil_add</div><div class="line">  (JNIEnv *, jobject, jint, jint);</div><div class="line"></div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    getString</div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</div><div class="line"> */</div><div class="line">JNIEXPORT jstring JNICALL Java_com_example_demo_JniUtil_getString</div><div class="line">  (JNIEnv *, jobject, jstring);</div><div class="line"></div><div class="line">#ifdef __cplusplus</div><div class="line">&#125;</div><div class="line">#endif</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h1 id="实现jni"><a href="#实现jni" class="headerlink" title="实现jni"></a>实现jni</h1><p>新建jni文件夹，实现本地java方法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#include&lt;jniutil.h&gt;</div><div class="line"></div><div class="line">jobject mObject;</div><div class="line"></div><div class="line"></div><div class="line">JNIEXPORT jint JNICALL Java_com_example_demo_JniUtil_init(JNIEnv *env,</div><div class="line">		jobject obj) &#123;</div><div class="line"></div><div class="line">	//获取全局对象</div><div class="line">	mObject = (*env)-&gt;NewGlobalRef(env, obj);</div><div class="line"></div><div class="line">	jmethodID methodID;</div><div class="line">	jclass mClass;</div><div class="line"></div><div class="line">	//查找指定名称类</div><div class="line">	mClass = (*env)-&gt;GetObjectClass(env, mObject);;</div><div class="line"></div><div class="line">	//获取方法ID</div><div class="line">	methodID = (*env)-&gt;GetMethodID(env,mClass,"onRecFrame","(I)V");</div><div class="line"></div><div class="line">	//调用上层java方法</div><div class="line">	(*env)-&gt;CallVoidMethod(env,obj,methodID,89);</div><div class="line"></div><div class="line">	return 5;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    add</div><div class="line"> * Signature: (II)I</div><div class="line"> */</div><div class="line">JNIEXPORT jint JNICALL Java_com_example_demo_JniUtil_add(JNIEnv *env,</div><div class="line">		jobject obj, jint x, jint y) &#123;</div><div class="line"></div><div class="line">	return x + y;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> * Class:     com_example_demo_JniUtil</div><div class="line"> * Method:    getString</div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</div><div class="line"> */</div><div class="line">JNIEXPORT jstring JNICALL Java_com_example_demo_JniUtil_getString(JNIEnv *env,</div><div class="line">		jobject obj, jstring result) &#123;</div><div class="line"></div><div class="line">	return result;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="编写mk文件"><a href="#编写mk文件" class="headerlink" title="编写mk文件"></a>编写mk文件</h1><h2 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h2><p>指定编译规则</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH <span class="symbol">:</span>= <span class="variable">$(</span>call my-dir)</div><div class="line"></div><div class="line"><span class="keyword">include</span> <span class="variable">$(</span>CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE    <span class="symbol">:</span>= test</div><div class="line">LOCAL_SRC_FILES <span class="symbol">:</span>= test.c</div><div class="line"></div><div class="line">LOCAL_LDLIBS    <span class="symbol">:</span>= -llog</div><div class="line"><span class="keyword">include</span> <span class="variable">$(</span>BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<h2 id="Application-mk"><a href="#Application-mk" class="headerlink" title="Application.mk"></a>Application.mk</h2><p>指定编译平台</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">APP_ABI := armeabi armeabi-v7a</div><div class="line">APP_PLATFORM := android<span class="number">-22</span></div><div class="line">APP_STL:=gnustl_static</div><div class="line">APP_CPPFLAGS:=-frtti -fexceptions</div></pre></td></tr></table></figure>
<h1 id="配置NDK执行编译"><a href="#配置NDK执行编译" class="headerlink" title="配置NDK执行编译"></a>配置NDK执行编译</h1><p>右击工程–》Properties–》Builders–》New–》选择Program–》Main–》Location：选择ndk-build.cmd命令路径–》Working Directory：选择工程路径–》Refresh–》Build Options，配置完成后即可自动编译，不需要安装cygwin linux模拟环境</p>
<h1 id="应用jni"><a href="#应用jni" class="headerlink" title="应用jni"></a>应用jni</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>, <span class="title">IRecFrameListener</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Button mButton;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> JniUtil mJniUtil;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        mButton = (Button) findViewById(R.id.btn_click);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mJniUtil = <span class="keyword">new</span> JniUtil();</div><div class="line">        mJniUtil.setOnRecFrameListener(<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"init: "</span> + mJniUtil.init());</div><div class="line">		System.out.println(<span class="string">"sum: "</span>+ mJniUtil.add(<span class="number">1</span>, <span class="number">2</span>));</div><div class="line">		System.out.println(<span class="string">"getString: "</span> + mJniUtil.getString(<span class="string">"wert"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 回调，由jni方法返回数据</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRecFrameListener</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(result);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Android-Studio-2-2-开发NDK"><a href="#Android-Studio-2-2-开发NDK" class="headerlink" title="Android Studio 2.2 开发NDK"></a>Android Studio 2.2 开发NDK</h1><p><a href="http://www.jianshu.com/p/f1b8b97d2ef8" target="_blank" rel="external">NDK开发基础①使用Android Studio编写NDK</a></p>
<h2 id="Gradle配置NDK"><a href="#Gradle配置NDK" class="headerlink" title="Gradle配置NDK"></a>Gradle配置NDK</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.1"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.michael.lplayer"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">        externalNativeBuild &#123;</div><div class="line">            cmake &#123;</div><div class="line">                cppFlags <span class="string">""</span></div><div class="line">                arguments <span class="string">'-DANDROID_TOOLCHAIN=clang'</span></div><div class="line">                abiFilters <span class="string">"armeabi-v7a"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    externalNativeBuild &#123;</div><div class="line">        cmake &#123;</div><div class="line">            path <span class="string">"CMakeLists.txt"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //加载外部so库</div><div class="line">    sourceSets.main &#123;</div><div class="line">        jniLibs.srcDirs = [<span class="string">'libs'</span>]</div><div class="line">        jni.srcDirs = []</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt-配置"><a href="#CMakeLists-txt-配置" class="headerlink" title="CMakeLists.txt 配置"></a>CMakeLists.txt 配置</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"># <span class="keyword">Sets</span> the <span class="comment">minimum version of CMake required to build the native</span></div><div class="line"># library. You <span class="comment">should either keep the default value or only pass a</span></div><div class="line"># value <span class="comment">of 3.4.0 or lower.</span></div><div class="line"></div><div class="line">cmake_minimum_required(VERSION <span class="comment">3.4.1)</span></div><div class="line"></div><div class="line">find_library( # <span class="keyword">Sets</span> <span class="comment">the name of the path variable.</span></div><div class="line">              log-lib</div><div class="line"></div><div class="line">              # Specifies <span class="comment">the name of the NDK library that</span></div><div class="line">              # you <span class="comment">want CMake to locate.</span></div><div class="line">              log <span class="comment">)</span></div><div class="line"></div><div class="line"><span class="keyword">set</span>(distribution_DIR <span class="comment">$&#123;CMAKE_SOURCE_DIR&#125;</span>/../<span class="comment">..</span>/../<span class="comment">..</span>/libs)</div><div class="line">include_directories(libs/<span class="comment">include)</span></div><div class="line"></div><div class="line">add_library( avutil-55</div><div class="line">             SHARED</div><div class="line">             IMPORTED <span class="comment">)</span></div><div class="line">set_target_properties( avutil-55</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libavutil-55.so <span class="comment">)</span></div><div class="line"></div><div class="line">add_library( swresample-2</div><div class="line">             SHARED</div><div class="line">             IMPORTED <span class="comment">)</span></div><div class="line">set_target_properties( swresample-2</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libswresample-2.so <span class="comment">)</span></div><div class="line">add_library( avcodec-57</div><div class="line">             SHARED</div><div class="line">             IMPORTED <span class="comment">)</span></div><div class="line">set_target_properties( avcodec-57</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libavcodec-57.so <span class="comment">)</span></div><div class="line">add_library( avfilter-6</div><div class="line">             SHARED</div><div class="line">             IMPORTED)</div><div class="line">set_target_properties( avfilter-6</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libavfilter-6.so <span class="comment">)</span></div><div class="line">add_library( swscale-4</div><div class="line">             SHARED</div><div class="line">             IMPORTED)</div><div class="line">set_target_properties( swscale-4</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libswscale-4.so <span class="comment">)</span></div><div class="line">add_library( avformat-57</div><div class="line">             SHARED</div><div class="line">             IMPORTED)</div><div class="line">set_target_properties( avformat-57</div><div class="line">                       PROPERTIES <span class="comment">IMPORTED_LOCATION</span></div><div class="line">                       ../../../../libs/armeabi-v7a/libavformat-57.so <span class="comment">)</span></div><div class="line"></div><div class="line">#<span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="comment">"$&#123;CMAKE_CXX_FLAGS&#125; -std=gnu++11"</span><span class="comment">)</span></div><div class="line"></div><div class="line">add_library( ffmpeg</div><div class="line">             SHARED</div><div class="line">             src/main/cpp/ffmpeg_decode.c )</div><div class="line"></div><div class="line">#target_include_directories(ffmpeg PRIVATE libs/include)</div><div class="line"></div><div class="line">target_link_libraries( ffmpeg <span class="comment">avutil-55 swresample-2  avcodec-57 avfilter-6 swscale-4 avformat-57</span></div><div class="line">                       $&#123;log-lib&#125; )</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之08PopoverView]]></title>
      <url>http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B08PopoverView/</url>
      <content type="html"><![CDATA[<p>PopoverView是一种临时的视图，以漂浮的形式出现在视图表面，称为浮动层。</p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="PopoverPresentationController"><a href="#PopoverPresentationController" class="headerlink" title="PopoverPresentationController"></a>PopoverPresentationController</h2><ul>
<li>barButtonItem：指定一个UIBarButtonItem类型按钮作为锚点</li>
<li>sourceView：指定一个普视图作为锚点</li>
<li>sourceRect:指定一个矩形区域作为锚点</li>
<li>permittedArrowDirection：指定锚点箭头的方向（up,down.lwft,right,any,unkown)</li>
</ul>
<h2 id="UIPopoverPresentationControllerDelegate"><a href="#UIPopoverPresentationControllerDelegate" class="headerlink" title="UIPopoverPresentationControllerDelegate"></a>UIPopoverPresentationControllerDelegate</h2><ul>
<li>popoverPresentationControllerShouldDismissPopover:返回true可以消失，false不可消失</li>
<li>popoverPresentationControllerDidDismissPopover：销毁时调用</li>
<li>func prepareForPopoverPresentation(_ popoverPresentationController: UIPopoverPresentationController)：显示时调用</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>创建iOS工程</li>
<li>拖入一个Button到界面中心，并设置点击事件，点击按钮室弹出popover view</li>
<li>代码实现</li>
</ol>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  PopoverViewSample</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/17.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIPopoverPresentationControllerDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mBtn: <span class="type">UIButton</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//作为popover View</span></div><div class="line">        <span class="keyword">let</span> controller = <span class="type">SelectViewController</span>();</div><div class="line">        <span class="comment">//设置为popover视图</span></div><div class="line">        controller.modalPresentationStyle = .popover</div><div class="line">        <span class="comment">//视图动画</span></div><div class="line">        controller.modalTransitionStyle = .crossDissolve</div><div class="line">        controller.preferredContentSize = <span class="type">CGSize</span>(width: <span class="number">300</span>, height: <span class="number">100</span>)</div><div class="line"></div><div class="line">        <span class="keyword">let</span> popController = controller.popoverPresentationController</div><div class="line">        popController?.sourceView = mBtn</div><div class="line">        popController?.sourceRect = mBtn.bounds</div><div class="line">        popController?.delegate = <span class="keyword">self</span></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.present(controller, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">adaptivePresentationStyle</span><span class="params">(<span class="keyword">for</span> controller: UIPresentationController)</span></span> -&gt; <span class="type">UIModalPresentationStyle</span> &#123;</div><div class="line">        <span class="comment">//popover样式</span></div><div class="line">        <span class="keyword">return</span> .<span class="keyword">none</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">prepareForPopoverPresentation</span><span class="params">(<span class="number">_</span> popoverPresentationController: UIPopoverPresentationController)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"show"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">popoverPresentationControllerDidDismissPopover</span><span class="params">(<span class="number">_</span> popoverPresentationController: UIPopoverPresentationController)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"hide"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">popoverPresentationControllerShouldDismissPopover</span><span class="params">(<span class="number">_</span> popoverPresentationController: UIPopoverPresentationController)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  SelectViewController.swift</span></div><div class="line"><span class="comment">//  PopoverViewSample</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/17.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> label1:<span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">var</span> label2:<span class="type">UILabel</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.view.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">200</span>, height: <span class="number">500</span>)</div><div class="line"><span class="comment">//        label1 = UILabel(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 200))</span></div><div class="line"><span class="comment">//        label2 = UILabel(frame: CGRect(x: 0, y: 300, width: self.view.frame.width, height: 200))</span></div><div class="line"><span class="comment">//        self.view.addSubview(label1)</span></div><div class="line"><span class="comment">//        self.view.addSubview(label2)</span></div><div class="line">        <span class="keyword">self</span>.view.backgroundColor = <span class="type">UIColor</span>.blue</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="http://oeqfywnzb.bkt.clouddn.com/popover-view.gif" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之07视图控制器与导航模式]]></title>
      <url>http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B07%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%8E%E5%AF%BC%E8%88%AA%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="模态视图"><a href="#模态视图" class="headerlink" title="模态视图"></a>模态视图</h1><p>在导航过程中，有时候需要放弃主要任务而做其他次要任务，然后在返回到次要任务，这个次要任务就是在模态视图中完成的，如注册中主要任务是登录后进入主界面，如果用户没有注册，就要先去注册，注册是次要任务，当用户注册完成后，它会关闭注册视图，回到登录界面继续进行主要任务。</p>
<p>默认情况下，模态视图是从屏幕下方滑出来的。</p>
<p>负责控制器模态视图的控制器称为模态视图控制器，它并不是一个专门的类，它可以是前面提到的控制器的子类。负责主要任务视图的控制器称为主视图控制器。在UICOntrollerView中，主要有如下两个方法：</p>
<ul>
<li>-present():呈现视图</li>
<li>-dismiss()：关闭视图</li>
</ul>
<p>在呈现模态视图时有两种方式：一是通过使用UIViewController的present方法实现；二是通过故事板的“过渡”（Segue）实现。</p>
<p>下面我们通过登录案例来介绍模态视图</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程，将当前控制器嵌入到一个导航控制器中，具体步骤是：在故事板中选择View Controller，然后点击Xcode菜单栏Editor-Embed In-Navigation Controller菜单就会自动创建一个导航视图</li>
<li>点击导航栏，将导航栏的标题设为登录，然后从对象库中拖入Lable、TextField、Button等控件</li>
<li>接下来设计第二个界面，先从对象库中拖入一个View Controller到设计界面中，然后参考步骤1将该视图控制器嵌入到导航控制器中，修改该导航栏标题为注册，然后从对象库中拖入两个Bar Button Item到导航栏两边，分别设置identifier属性为Cancel和Save</li>
<li>接下来需要在登录场景和注册场景创建一个过渡，按住control键，从登录界面的注册按钮拖鼠标到注册导航控制器，然后松开鼠标，在弹出的视图框中选择Present Modally菜单；它是模态类型的过渡</li>
<li>最后，添加注册控制器类，创建一个类RegisterViewController集成UIViewController，然后回到故事板中将注册视图的Class选择为RegisterViewController</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>ViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ModalViewSample</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/9.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mUserName: <span class="type">UITextField</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// 注册消息</span></div><div class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(<span class="keyword">self</span>, selector: #selector(<span class="keyword">self</span>.register(<span class="number">_</span> :)), name: <span class="type">NSNotification</span>.<span class="type">Name</span>(rawValue: <span class="string">"RegisterCompletion"</span>), object: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.removeObserver(<span class="keyword">self</span>, name: <span class="type">NSNotification</span>.<span class="type">Name</span>.<span class="keyword">init</span>(rawValue: <span class="string">"RegisterCompletion"</span>), object: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(<span class="number">_</span> notification : Notification)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> text = notification.userInfo?[<span class="string">"username"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        mUserName.text = text!</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"%@"</span>,text!)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RegisterViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  RegisterViewController.swift</span></div><div class="line"><span class="comment">//  ModalViewSample</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/9.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mName: <span class="type">UITextField</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> userInfo = [<span class="string">"username"</span>:<span class="keyword">self</span>.mName.text!]</div><div class="line">        <span class="comment">//发送消息</span></div><div class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(name: <span class="type">NSNotification</span>.<span class="type">Name</span>.<span class="keyword">init</span>(rawValue: <span class="string">"RegisterCompletion"</span>), object: <span class="literal">nil</span>, userInfo: userInfo)</div><div class="line">        <span class="keyword">self</span>.dismiss(animated: <span class="literal">true</span>, completion: &#123;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> save: <span class="type">UIBarButtonItem</span>!</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.dismiss(animated: <span class="literal">true</span>, completion: &#123;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/%E6%A8%A1%E6%80%81%E8%AF%95%E5%9B%BEstoryboard.jpg" alt=""></p>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E7%99%BB%E5%BD%95%E5%AF%BC%E8%88%AA.gif" alt=""></p>
<h1 id="分屏导航"><a href="#分屏导航" class="headerlink" title="分屏导航"></a>分屏导航</h1><p>基于分屏导航是平铺导航的主要实现方式，涉及的主要控件有分屏控件UIPageControll和屏幕滚动视图UIScrollView,一般不超过10屏</p>
<h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建iOS工程，从对象库中拖入UIPageControll和UIScrollView到故事板中，并将其放到合适的位置，UIPageControll放在靠底部，UIScrollView全屏显示，将视图的背景设为黑色</li>
<li>选中UIScrollView的属性检查器，设置不显示Scroll View的Indicator，同时选择滚动Scrolling Enable和分屏Paging Enable。分屏属性是Scroll View每次滑动时翻一屏</li>
<li>选择Page Controll的属性检查器，设置Pages中的of pages总屏数为3，Current当前位置为0，并修改其宽度为300，它的高度是不能修改的。</li>
<li>最后为这两个控件定义输出口并连接注册到ViewController类中，为Page Controll控件定义响应屏幕变化事件的方法。-changPage</li>
</ol>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  PageControlNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/10.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIScrollViewDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mScrollView: <span class="type">UIScrollView</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mPageControl: <span class="type">UIPageControl</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> mImage1: <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">var</span> mImage2: <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">var</span> mImage3: <span class="type">UIImageView</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">self</span>.mScrollView.delegate = <span class="keyword">self</span></div><div class="line">        <span class="keyword">self</span>.mScrollView.contentSize = <span class="type">CGSize</span>(width: <span class="keyword">self</span>.view.frame.size.width * <span class="number">3</span>, height: <span class="keyword">self</span>.mScrollView.frame.size.height)</div><div class="line">        <span class="keyword">self</span>.mScrollView.frame = <span class="keyword">self</span>.view.frame</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mImage1 = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="keyword">self</span>.view.frame.size.width, height: <span class="number">480</span>))</div><div class="line">        <span class="keyword">self</span>.mImage1.image = <span class="type">UIImage</span>(named: <span class="string">"达芬奇-蒙娜丽莎"</span>)</div><div class="line">        <span class="keyword">self</span>.mScrollView.addSubview(mImage1)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mImage2 = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="keyword">self</span>.view.frame.size.width, y: <span class="number">0</span>, width: <span class="keyword">self</span>.view.frame.size.width, height: <span class="number">480</span>))</div><div class="line">        <span class="keyword">self</span>.mImage2.image = <span class="type">UIImage</span>(named: <span class="string">"罗丹-思想者"</span>)</div><div class="line">        <span class="keyword">self</span>.mScrollView.addSubview(mImage2)</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mImage3 = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="keyword">self</span>.view.frame.size.width * <span class="number">2</span>, y: <span class="number">0</span>, width: <span class="keyword">self</span>.view.frame.size.width, height: <span class="number">480</span>))</div><div class="line">        <span class="keyword">self</span>.mImage3.image = <span class="type">UIImage</span>(named: <span class="string">"保罗克利-肖像"</span>)</div><div class="line">        <span class="keyword">self</span>.mScrollView.addSubview(mImage3)</div><div class="line"></div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//UIPageControll事件处理</span></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">changePage</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">0.3</span>, animations: &#123;</div><div class="line">            <span class="keyword">let</span> whichPage = <span class="keyword">self</span>.mPageControl.currentPage</div><div class="line">            <span class="comment">//设置内容视图坐标原点与屏幕滚动视图坐原点的偏移量</span></div><div class="line">            <span class="keyword">self</span>.mScrollView.contentOffset = <span class="type">CGPoint</span>(x: <span class="number">320</span> * whichPage, y: <span class="number">0</span>)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//屏幕滚动视图事件处理方法å</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> offset = scrollView.contentOffset</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mPageControl.currentPage = <span class="type">Int</span>(offset.x) / <span class="number">320</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E5%88%86%E5%B1%8F%E5%AF%BC%E8%88%AA.gif" alt=""></p>
<h1 id="分页控制器"><a href="#分页控制器" class="headerlink" title="分页控制器"></a>分页控制器</h1><p>在iOS5以后，我们可以使用分页控制器UIPageViewController构建类似于电子书效果的应用。</p>
<p>分页控制器需要放置在一个父视图控制器中，在分页控制器下面还要有子视图控制器，每个子视图控制器对应一个页面。</p>
<p>UIPageViewController没有对应的视图，我们需要使用代码来实现；需要在UIPageViewController所在的控制器实现UIPageViewControllerDelegate和UIPageViewControllerDataSource协议，UIPageViewControllerDataSource数据源协议必须要实现的方法有以下两个：</p>
<ul>
<li><code>func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController)</code></li>
<li><code>func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController)</code></li>
</ul>
<p>UIPageViewControllerDelegate委托协议中一般实现的方法是：</p>
<ul>
<li><code>func pageViewController(_ pageViewController: UIPageViewController, spineLocationFor orientation: UIInterfaceOrientation)</code> </li>
<li><code>func pageViewController(_ pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool)</code></li>
</ul>
<h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程</li>
<li>代码实现UIPageViewController</li>
</ol>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  PageNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/10.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DirectionFroward</span> : <span class="title">Int</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">case</span> <span class="type">Before</span> = <span class="number">1</span> <span class="comment">//向前</span></div><div class="line">    <span class="keyword">case</span> <span class="type">After</span> = <span class="number">2</span> <span class="comment">//向后</span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIPageViewControllerDelegate</span>,<span class="title">UIPageViewControllerDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//当前Page的索引</span></div><div class="line">    <span class="keyword">var</span> mPageIndex = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> direct = <span class="type">DirectionFroward</span>.<span class="type">After</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> mPageViewController : <span class="type">UIPageViewController</span>!</div><div class="line">    <span class="keyword">var</span> mViewControllers : [<span class="type">UIViewController</span>]!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> pageViewController1 = <span class="type">UIViewController</span>()</div><div class="line">        <span class="keyword">let</span> pageViewController2 = <span class="type">UIViewController</span>()</div><div class="line">        <span class="keyword">let</span> pageViewController3 = <span class="type">UIViewController</span>()</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.mViewControllers = [pageViewController1,pageViewController2,pageViewController3]</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> mImage1 = <span class="type">UIImageView</span>(frame: <span class="keyword">self</span>.view.frame)</div><div class="line">        mImage1.image = <span class="type">UIImage</span>(named: <span class="string">"达芬奇-蒙娜丽莎"</span>)</div><div class="line">        pageViewController1.view.addSubview(mImage1)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> mImage2 = <span class="type">UIImageView</span>(frame: <span class="keyword">self</span>.view.frame)</div><div class="line">        mImage2.image = <span class="type">UIImage</span>(named: <span class="string">"罗丹-思想者"</span>)</div><div class="line">        pageViewController2.view.addSubview(mImage2)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">let</span> mImage3 = <span class="type">UIImageView</span>(frame: <span class="keyword">self</span>.view.frame)</div><div class="line">        mImage3.image = <span class="type">UIImage</span>(named: <span class="string">"保罗克利-肖像"</span>)</div><div class="line">        pageViewController3.view.addSubview(mImage3)</div><div class="line">        </div><div class="line">        <span class="comment">//transitionStyle: pageCurl表示翻书效果样式 scroll 滑屏效果样式</span></div><div class="line">        <span class="comment">//navigationOrientation 水平和垂直方向</span></div><div class="line">        <span class="keyword">self</span>.mPageViewController = <span class="type">UIPageViewController</span>(transitionStyle: .pageCurl, navigationOrientation: .horizontal, options: <span class="literal">nil</span>)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.mPageViewController.delegate = <span class="keyword">self</span></div><div class="line">        <span class="keyword">self</span>.mPageViewController.dataSource = <span class="keyword">self</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置首页</span></div><div class="line">        <span class="comment">//direction forward向前 reverse向后</span></div><div class="line">        <span class="keyword">self</span>.mPageViewController.setViewControllers([pageViewController1], direction: .forward, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.mPageViewController.view)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//DataSource协议</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageViewController</span><span class="params">(<span class="number">_</span> pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"向前翻"</span>)</div><div class="line">        mPageIndex -= <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> mPageIndex &lt; <span class="number">0</span> &#123;</div><div class="line">            mPageIndex = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        direct = .<span class="type">Before</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.mViewControllers[mPageIndex]</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageViewController</span><span class="params">(<span class="number">_</span> pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"向后翻"</span>)</div><div class="line"></div><div class="line">        mPageIndex += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> mPageIndex &gt; <span class="number">2</span> &#123;</div><div class="line">            mPageIndex = <span class="number">2</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        direct = .<span class="type">After</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.mViewControllers[mPageIndex]</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//Delegate协议</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageViewController</span><span class="params">(<span class="number">_</span> pageViewController: UIPageViewController, spineLocationFor orientation: UIInterfaceOrientation)</span></span> -&gt; <span class="type">UIPageViewControllerSpineLocation</span> &#123;</div><div class="line">        <span class="keyword">self</span>.mPageViewController.isDoubleSided = <span class="literal">false</span></div><div class="line">        <span class="comment">//min和max 首页显示一个视图  mid首页显示两个视图</span></div><div class="line">        <span class="keyword">return</span> .<span class="built_in">min</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageViewController</span><span class="params">(<span class="number">_</span> pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//翻页未成功</span></div><div class="line">        <span class="keyword">if</span> completed == <span class="literal">false</span> &#123;</div><div class="line">            <span class="keyword">if</span> direct == .<span class="type">After</span> &#123;</div><div class="line">                mPageIndex -= <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> direct == .<span class="type">Before</span> &#123;</div><div class="line">                mPageIndex += <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E5%88%86%E9%A1%B5%E6%8E%A7%E5%88%B6%E5%99%A8.gif" alt=""></p>
<h1 id="标签导航"><a href="#标签导航" class="headerlink" title="标签导航"></a>标签导航</h1><p>使用标签栏时有一定的指导原则：标签栏位于屏幕下方，占有49个像素屏幕空间，有时可以隐藏起来；标签栏中的标签不能超过5个，如果超过5个则最后一个显示为更多，点击更多标签会出现更多的列表。</p>
<h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h2><p>在开发具体应用的时候，标签导航的各个标签分别代表一个功能模块，各功能模块之间相对独立。</p>
<ol>
<li>创建一个iOS工程模板Tabbed Application应用，默认创建两个标签</li>
<li>从对象库中拖入一个ViewController到故事板中</li>
<li>添加ViewController和Tab Controller Scene的连线，具体操作是：按住control键从Tab Controller Scene拖曳鼠标到ViewController，释放鼠标，从弹出窗口中选择view controllers项即可</li>
<li>设置三个场景的标题</li>
<li>分别为三个场景创建三个视图类</li>
</ol>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%88%AA%E6%95%85%E4%BA%8B%E7%89%88.jpg" alt=""></p>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  HeiViewController.swift</span></div><div class="line"><span class="comment">//  TabNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeiViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    // MARK: - Navigation</div><div class="line"></div><div class="line">    // In a storyboard-based application, you will often want to do a little preparation before navigation</div><div class="line">    override func prepare(for segue: UIStoryboardSegue, sender: Any?) &#123;</div><div class="line">        // Get the new view controller using segue.destinationViewController.</div><div class="line">        // Pass the selected object to the new view controller.</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  JiViewController.swift</span></div><div class="line"><span class="comment">//  TabNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JiViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    // MARK: - Navigation</div><div class="line"></div><div class="line">    // In a storyboard-based application, you will often want to do a little preparation before navigation</div><div class="line">    override func prepare(for segue: UIStoryboardSegue, sender: Any?) &#123;</div><div class="line">        // Get the new view controller using segue.destinationViewController.</div><div class="line">        // Pass the selected object to the new view controller.</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  LiaoViewController.swift</span></div><div class="line"><span class="comment">//  TabNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiaoViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    // MARK: - Navigation</div><div class="line"></div><div class="line">    // In a storyboard-based application, you will often want to do a little preparation before navigation</div><div class="line">    override func prepare(for segue: UIStoryboardSegue, sender: Any?) &#123;</div><div class="line">        // Get the new view controller using segue.destinationViewController.</div><div class="line">        // Pass the selected object to the new view controller.</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图-3"><a href="#效果图-3" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%88%AA.gif" alt=""></p>
<h1 id="树形导航"><a href="#树形导航" class="headerlink" title="树形导航"></a>树形导航</h1><p>树形导航模式是将导航控制器UINavigationController与表视图结使用，主要用于构建从属关系的导航。下面我们创建一个三级视图的树形导航示例。</p>
<h2 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建iOS工程，使用UINavigationController创建以及表视图</li>
<li>创建二级表视图CitiesViewController<ul>
<li>从对象库中拖入一个Table View Controller到对象库中作为二级视图控制器</li>
<li>按住control键，从上一个Root View Controller的单元格中拖动鼠标到当前添加的Table View Controller中，释放鼠标，在弹出窗口中选择Show选项</li>
<li>选择连接线中的过渡Segue，打开其属性检查器，然后在Indentifier属性中输入ShowCities</li>
</ul>
</li>
<li>创建三级视图DetailViewController<ul>
<li>从对象库中拖入一个View Controller到对象库中作为三级视图控制器</li>
<li>按住control键，从上一个Table View Controller的单元格中拖动鼠标到当前添加的View Controller中，释放鼠标，在弹出窗口中选择Show选项</li>
<li>选择连接线中的过渡Segue，打开其属性检查器，然后在Indentifier属性中输入ShowDetail</li>
</ul>
</li>
<li>设置各级视图的Table View Cell的属性</li>
</ol>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>一级视图</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  TreeNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> dictData:<span class="type">NSDictionary</span>!</div><div class="line">    <span class="keyword">var</span> listData:<span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">self</span>.tableView.delegate = <span class="keyword">self</span></div><div class="line">        <span class="keyword">self</span>.tableView.dataSource = <span class="keyword">self</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"provinces_cities"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.dictData = <span class="type">NSDictionary</span>(contentsOfFile: path!)</div><div class="line">        <span class="keyword">self</span>.listData = <span class="keyword">self</span>.dictData.allKeys <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line">        <span class="keyword">self</span>.title = <span class="string">"省份信息"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listData.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"Custom"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        cell.textLabel?.text = <span class="keyword">self</span>.listData[row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//场景过渡之前的处理 点击表视图的单元格触发</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: Any?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> segue.identifier == <span class="string">"ShowCities"</span> &#123;</div><div class="line">            <span class="keyword">let</span> indexPath = <span class="keyword">self</span>.tableView.indexPathForSelectedRow! <span class="keyword">as</span> <span class="type">IndexPath</span></div><div class="line">            <span class="keyword">let</span> selectedIndex = indexPath.row</div><div class="line">            <span class="comment">//获取要跳转到的视图控制器对象</span></div><div class="line">            <span class="keyword">let</span> controller = segue.destination <span class="keyword">as</span>! <span class="type">CitiesTableViewController</span></div><div class="line">            <span class="keyword">let</span> selectName = <span class="keyword">self</span>.listData[selectedIndex] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            controller.listData = <span class="keyword">self</span>.dictData[selectName] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">            controller.title = selectName</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>二级视图</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  CitiesTableViewController.swift</span></div><div class="line"><span class="comment">//  TreeNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CitiesTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listData:<span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="comment">// #warning Incomplete implementation, return the number of rows</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listData.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CityCell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        <span class="keyword">let</span> dict = <span class="keyword">self</span>.listData[row] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">        cell.textLabel?.text = dict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//场景过渡之前的与处理</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: Any?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> segue.identifier == <span class="string">"ShowDetail"</span> &#123;</div><div class="line">            <span class="keyword">let</span> indexPath = <span class="keyword">self</span>.tableView.indexPathForSelectedRow! <span class="keyword">as</span> <span class="type">IndexPath</span></div><div class="line">            <span class="keyword">let</span> selectIndex = indexPath.row</div><div class="line">            <span class="keyword">let</span> dict = <span class="keyword">self</span>.listData[selectIndex] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">            <span class="comment">//获取要跳转到的视图控制器对象</span></div><div class="line">            <span class="keyword">let</span> controller = segue.destination <span class="keyword">as</span>! <span class="type">DetailViewController</span></div><div class="line">            controller.url = dict[<span class="string">"url"</span>] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            controller.title = dict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>三级视图</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  DetailViewController.swift</span></div><div class="line"><span class="comment">//  TreeNavigation</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/15.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> WebKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailViewController</span>: <span class="title">UIViewController</span>,<span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> url:<span class="type">String</span>!</div><div class="line">    <span class="keyword">var</span> webView: <span class="type">WKWebView</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="type">NSLog</span>(url)</div><div class="line">        <span class="keyword">self</span>.webView = <span class="type">WKWebView</span>(frame: <span class="keyword">self</span>.view.frame)</div><div class="line">        view.addSubview(webView)</div><div class="line">        webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">        <span class="comment">//let nUrl = URL(string: "https://baike.baidu.com/view/2172.htm")</span></div><div class="line">        <span class="keyword">let</span> mUrl = <span class="type">URL</span>(string: url)</div><div class="line">        <span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: mUrl!)</div><div class="line">        webView.load(request)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"开始加载"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didCommit navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"内容开始返回时回调"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"加载完成"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"加载失败"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果图-4"><a href="#效果图-4" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/viewcontroller-%E6%A0%91%E5%BD%A2%E5%AF%BC%E8%88%AA.gif" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之06StackView]]></title>
      <url>http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B06StackView/</url>
      <content type="html"><![CDATA[<p>在iOS开发中可以利用StackView嵌套实现比较复杂的界面，比如我们实现三个按钮呈现三角形摆放，可以这样实现，整个界面是一个垂直StackView，它的子视图是Button1和水平StackView，水平StackView的子 视图是Button2和Button3。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>创建一个iOS工程，从对象库中拖入一个Vertical Stack View到设计界面中，然后再从对象库中拖入一个Horizontal Stack View到前一个垂直StackView中。</li>
<li>属性检查器：<ul>
<li>Axis：设置StackView是垂直还是水平的</li>
<li>Spacing：设置子视图之间的距离</li>
<li>Alignment：设置子视图之间的对齐方式</li>
<li>Distribution：设置子视图的尺寸与位置</li>
</ul>
</li>
<li>拖入Button1到Vertical Stack View中，注意要放在Horizontal Stack View的上方，当出现一条横线时松开鼠标；类似的方法拖入Button2和Button3到Horizontal Stack View中</li>
</ol>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="http://oeqfywnzb.bkt.clouddn.com/ios-stackview.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之05常见表视图]]></title>
      <url>http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B05%E5%B8%B8%E8%A7%81%E8%A1%A8%E8%A7%86%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h1 id="分节表视图"><a href="#分节表视图" class="headerlink" title="分节表视图"></a>分节表视图</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程</li>
<li>删除storyboard中View Controller Scene 中的View Controller，再从对象库拖入一个Table View Controller到设计界面</li>
<li>打开Table View Controller属性检查器，勾选Is Initial View Controller选项，否则应用启动后是黑屏</li>
<li>将ViewController类的父类由UIViewController改为UITableViewController</li>
<li>打开View Controller的属性选择器在Class列表中选择ViewController</li>
<li>UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  IndexTable</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/31.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> datas: <span class="type">NSDictionary</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> groupNames:<span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"team_dictionary"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.datas = <span class="type">NSDictionary</span>(contentsOfFile: path!)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> tempList = <span class="keyword">self</span>.datas.allKeys <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line">        </div><div class="line">        <span class="comment">//排序</span></div><div class="line">        <span class="keyword">let</span> sortedArray = tempList.sortedArray(comparator: &#123; (obj1, obj2) -&gt; <span class="type">ComparisonResult</span> <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> str1 = obj1 <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            <span class="keyword">let</span> str2 = obj2 <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            <span class="keyword">let</span> ret = str1.compare(str2)</div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">self</span>.groupNames = sortedArray <span class="keyword">as</span> <span class="type">NSArray</span>!</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//组中条目的数量</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">let</span> groupName = <span class="keyword">self</span>.groupNames[section] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> teams = <span class="keyword">self</span>.datas[groupName] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        <span class="keyword">return</span> teams.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"liu"</span>,<span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> section = indexPath.section</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> groupName = <span class="keyword">self</span>.groupNames[section] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> teams = <span class="keyword">self</span>.datas[groupName] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        cell.textLabel?.text = teams[row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//组的数量</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.groupNames.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//组的标题</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">let</span> name = <span class="keyword">self</span>.groupNames[section] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">return</span> name</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//索引的标题</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">sectionIndexTitles</span><span class="params">(<span class="keyword">for</span> tableView: UITableView)</span></span> -&gt; [<span class="type">String</span>]? &#123;</div><div class="line">        <span class="keyword">var</span> titles = [<span class="type">String</span>]()</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="keyword">self</span>.groupNames &#123;</div><div class="line">            <span class="keyword">let</span> title = item <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            titles.append(title.substring(to: title.index(title.startIndex, offsetBy: <span class="number">1</span>)))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> titles</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//点击事件</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> section = indexPath.section</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> groupName = <span class="keyword">self</span>.groupNames[section] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> teams = <span class="keyword">self</span>.datas[groupName] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        <span class="built_in">print</span>(groupName)</div><div class="line">        <span class="built_in">print</span>(teams[row])</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-group.jpg" alt=""></p>
<h1 id="静态表视图"><a href="#静态表视图" class="headerlink" title="静态表视图"></a>静态表视图</h1><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程，使用Table View Controller作为表视图控制器</li>
<li>选择Table View，打开属性检查器，从Content下拉列表中选择Static Cells，将Section的值为设为3.，从Style下拉列表中选择Grouped</li>
<li>选择第一个Table View Section，将Rows值设为2，即该节中包含两个单元格，分别拖入一个TextField到两个单元格中</li>
<li>选择第二个Table View Section，将Rows值设为1，拖入一个Button到单元格中</li>
<li>选择第二个Table View Section，将Rows值设为1，拖入一个Lable到单元格中</li>
</ol>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  StaticTable</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/2.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mUserName: <span class="type">UITextField</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mPwd: <span class="type">UITextField</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.mUserName.text == <span class="string">"liu"</span> &amp;&amp; <span class="keyword">self</span>.mPwd.text == <span class="string">"123"</span> &#123;</div><div class="line">            <span class="type">NSLog</span>(<span class="string">"login sucess"</span>);</div><div class="line">            mUserName.resignFirstResponder();</div><div class="line">            mPwd.resignFirstResponder();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"Section: %d,Row: %d"</span>,indexPath.section,indexPath.row);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-static.jpg" alt=""></p>
<h1 id="插入和删除单元格"><a href="#插入和删除单元格" class="headerlink" title="插入和删除单元格"></a>插入和删除单元格</h1><h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程</li>
<li>删除storyboard中View Controller Scene 中的View Controller，再从对象库拖入一个Navigation Controller到设计界面，同时也会添加一个Table View Controller到设计界面</li>
<li>打开Table View Controller属性检查器，勾选Is Initial View Controller选项，否则应用启动后是黑屏</li>
<li>将ViewController类的父类由UIViewController改为UITableViewController</li>
<li>打开View Controller的属性选择器在Class列表中选择ViewController</li>
<li>UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</li>
</ol>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  DeleteAddCell</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/2.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> txtField:<span class="type">UITextField</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listTeams: <span class="type">NSMutableArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//设置导航栏</span></div><div class="line">        <span class="keyword">self</span>.navigationItem.rightBarButtonItem = <span class="keyword">self</span>.editButtonItem</div><div class="line">        <span class="keyword">self</span>.navigationItem.title = <span class="string">"单元格插入和删除"</span></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.txtField = <span class="type">UITextField</span>()</div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams = <span class="type">NSMutableArray</span>(array: [<span class="string">"黑龙江"</span>,<span class="string">"吉林"</span>,<span class="string">"辽宁"</span>,<span class="string">"北京"</span>])</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//响应视图编辑状态</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setEditing</span><span class="params">(<span class="number">_</span> editing: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setEditing(editing, animated: animated)</div><div class="line">        <span class="keyword">self</span>.tableView.setEditing(editing, animated: <span class="literal">true</span>)</div><div class="line">        <span class="keyword">if</span> editing &#123;</div><div class="line">            <span class="keyword">self</span>.txtField.isHidden = <span class="literal">false</span></div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">self</span>.txtField.isHidden = <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listTeams.<span class="built_in">count</span> + <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> isAddCell = (indexPath.row == <span class="keyword">self</span>.listTeams.<span class="built_in">count</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CustomCell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> !isAddCell &#123;</div><div class="line">            cell.accessoryType = .disclosureIndicator</div><div class="line">            cell.textLabel?.text = <span class="keyword">self</span>.listTeams[indexPath.row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">self</span>.txtField.frame = <span class="type">CGRect</span>(x: <span class="number">40</span>, y: <span class="number">0</span>, width: <span class="number">300</span>, height: cell.frame.size.height)</div><div class="line">            <span class="keyword">self</span>.txtField.borderStyle = .<span class="keyword">none</span></div><div class="line">            <span class="keyword">self</span>.txtField.placeholder = <span class="string">"Add..."</span></div><div class="line">            <span class="keyword">self</span>.txtField.text = <span class="string">""</span></div><div class="line">            cell.addSubview(<span class="keyword">self</span>.txtField)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回编辑样式</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, editingStyleForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span> &#123;</div><div class="line">        <span class="keyword">if</span> indexPath.row == <span class="keyword">self</span>.listTeams.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">return</span> .insert</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> .delete</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//添加删除时调用</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> editingStyle == .delete &#123;</div><div class="line">            <span class="keyword">self</span>.listTeams.removeObject(at: indexPath.row)</div><div class="line">            <span class="keyword">self</span>.tableView.deleteRows(at: [indexPath], with: .fade)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle == .insert &#123;</div><div class="line">            <span class="keyword">self</span>.listTeams.insert(<span class="keyword">self</span>.txtField.text!, at: <span class="keyword">self</span>.listTeams.<span class="built_in">count</span>)</div><div class="line">            <span class="keyword">self</span>.tableView.insertRows(at: [indexPath], with: .fade)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.tableView.reloadData();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-add-delete.gif" alt=""></p>
<h1 id="移动单元格"><a href="#移动单元格" class="headerlink" title="移动单元格"></a>移动单元格</h1><h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1. 创建一个iOS工程</div><div class="line">2. 删除storyboard中<span class="keyword">View</span> Controller Scene 中的<span class="keyword">View</span> Controller，再从对象库拖入一个Navigation Controller到设计界面，同时也会添加一个<span class="keyword">Table</span> <span class="keyword">View</span> Controller到设计界面</div><div class="line">3. 打开<span class="keyword">Table</span> <span class="keyword">View</span> Controller属性检查器，勾选Is Initial <span class="keyword">View</span> Controller选项，否则应用启动后是黑屏</div><div class="line">4. 将ViewController类的父类由UIViewController改为UITableViewController</div><div class="line">5. 打开<span class="keyword">View</span> Controller的属性选择器在<span class="keyword">Class</span>列表中选择ViewController</div><div class="line">6. UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</div></pre></td></tr></table></figure>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  MoveCell</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/2.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listTeams: <span class="type">NSMutableArray</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//设置导航栏</span></div><div class="line">        <span class="keyword">self</span>.navigationItem.rightBarButtonItem = <span class="keyword">self</span>.editButtonItem</div><div class="line">        <span class="keyword">self</span>.navigationItem.title = <span class="string">"单元格移动"</span></div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams = <span class="type">NSMutableArray</span>(array: [<span class="string">"黑龙江"</span>,<span class="string">"吉林"</span>,<span class="string">"辽宁"</span>,<span class="string">"北京"</span>])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//响应视图编辑状态</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setEditing</span><span class="params">(<span class="number">_</span> editing: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setEditing(editing, animated: animated)</div><div class="line">        <span class="keyword">self</span>.tableView.setEditing(editing, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listTeams.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"MoveCell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">            cell.accessoryType = .disclosureIndicator</div><div class="line">            cell.textLabel?.text = <span class="keyword">self</span>.listTeams[indexPath.row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回true表示可以移动</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, canMoveRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//移动单元格时触发此方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> mode = <span class="keyword">self</span>.listTeams[sourceIndexPath.row] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams.removeObject(at: sourceIndexPath.row)</div><div class="line">        <span class="keyword">self</span>.listTeams.insert(mode, at: destinationIndexPath.row)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//编辑的样式</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, editingStyleForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span> &#123;</div><div class="line">            <span class="keyword">return</span> .delete</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> editingStyle == .delete &#123;</div><div class="line">            <span class="keyword">self</span>.listTeams.removeObject(at: indexPath.row)</div><div class="line">            <span class="keyword">self</span>.tableView.deleteRows(at: [indexPath], with: .fade)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle == .insert &#123;</div><div class="line">            <span class="keyword">self</span>.tableView.insertRows(at: [indexPath], with: .fade)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.tableView.reloadData();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-move.gif" alt=""></p>
<h1 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h1><h2 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个iOS工程</li>
<li>删除storyboard中View Controller Scene 中的View Controller，再从对象库拖入一个Table View Controller到设计界面</li>
<li>打开Table View Controller属性检查器，勾选Is Initial View Controller选项，否则应用启动后是黑屏</li>
<li>将ViewController类的父类由UIViewController改为UITableViewController</li>
<li>打开View Controller的属性选择器在Class列表中选择ViewController</li>
<li>UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</li>
</ol>
<h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  RefreshCell</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/11/7.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listTeams: <span class="type">NSMutableArray</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//设置导航栏</span></div><div class="line">        <span class="keyword">self</span>.navigationItem.rightBarButtonItem = <span class="keyword">self</span>.editButtonItem</div><div class="line">        <span class="keyword">self</span>.navigationItem.title = <span class="string">"单元格移动"</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rc = <span class="type">UIRefreshControl</span>()</div><div class="line">        rc.attributedTitle = <span class="type">NSAttributedString</span>(string: <span class="string">"下拉刷新"</span>)</div><div class="line">        rc.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">ViewController</span>.refresh), <span class="keyword">for</span>: .valueChanged)</div><div class="line">        <span class="keyword">self</span>.refreshControl = rc</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams = <span class="type">NSMutableArray</span>(array: [<span class="string">"黑龙江"</span>,<span class="string">"吉林"</span>,<span class="string">"辽宁"</span>,<span class="string">"北京"</span>])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">refresh</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"refresh"</span>)</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.refreshControl?.isRefreshing)! &#123;</div><div class="line">            <span class="keyword">self</span>.refreshControl?.attributedTitle = <span class="type">NSAttributedString</span>(string: <span class="string">"加载中"</span>)</div><div class="line">            listTeams.add(<span class="string">"上海"</span>)</div><div class="line">            listTeams.add(<span class="string">"天津"</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">self</span>.refreshControl?.endRefreshing()</div><div class="line">            <span class="keyword">self</span>.refreshControl?.attributedTitle = <span class="type">NSAttributedString</span>(string: <span class="string">"下拉刷新"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">self</span>.tableView.reloadData()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//响应视图编辑状态</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setEditing</span><span class="params">(<span class="number">_</span> editing: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setEditing(editing, animated: animated)</div><div class="line">        <span class="keyword">self</span>.tableView.setEditing(editing, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listTeams.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> cell:<span class="type">UITableViewCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"RefreshCell"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        </div><div class="line">        cell.accessoryType = .disclosureIndicator</div><div class="line">        cell.textLabel?.text = <span class="keyword">self</span>.listTeams[indexPath.row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回true表示可以移动</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, canMoveRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//移动单元格时触发此方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> mode = <span class="keyword">self</span>.listTeams[sourceIndexPath.row] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.listTeams.removeObject(at: sourceIndexPath.row)</div><div class="line">        <span class="keyword">self</span>.listTeams.insert(mode, at: destinationIndexPath.row)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//编辑的样式</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, editingStyleForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCellEditingStyle</span> &#123;</div><div class="line">        <span class="keyword">return</span> .delete</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> editingStyle == .delete &#123;</div><div class="line">            <span class="keyword">self</span>.listTeams.removeObject(at: indexPath.row)</div><div class="line">            <span class="keyword">self</span>.tableView.deleteRows(at: [indexPath], with: .fade)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle == .insert &#123;</div><div class="line">            <span class="keyword">self</span>.tableView.insertRows(at: [indexPath], with: .fade)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.tableView.reloadData();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-pullrefresh.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之04表视图]]></title>
      <url>http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B04%E8%A1%A8%E8%A7%86%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="表视图组成"><a href="#表视图组成" class="headerlink" title="表视图组成"></a>表视图组成</h2><p>表视图是iOS开发中最重要的视图，它以列表的形式展示数据。表视图又一下部分组成：</p>
<ul>
<li>表头视图：表视图最上边的视图</li>
<li>表脚视图：表视图最下边的视图</li>
<li>单元格（cell）：表视图中每一行的视图</li>
<li>节(section)：由多个单元格组成，应用于分组列表<ul>
<li>节头</li>
<li>节脚</li>
</ul>
</li>
</ul>
<h2 id="表视图的相关类"><a href="#表视图的相关类" class="headerlink" title="表视图的相关类"></a>表视图的相关类</h2><p>UITableView继承自UIScrollView，且有两个协议：UITableViewDelegate和UITableViewDataSource。此外UITableViewCell类时单元格类，UITableViewController类时UITableView的控制器，UITableViewHeaderFooterView用于为节头和节脚提供视图。</p>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/%E8%A1%A8%E8%A7%86%E5%9B%BE%E7%9B%B8%E5%85%B3%E7%B1%BB.jpg" alt=""></p>
<h2 id="表视图分类"><a href="#表视图分类" class="headerlink" title="表视图分类"></a>表视图分类</h2><ul>
<li>普通表视图：主要用于动态表，而动态表一般在单元格数目未知的情况下使用</li>
<li>分组表视图：一般用于静态表，用来进行界面布局</li>
</ul>
<h2 id="单元格的组成和样式"><a href="#单元格的组成和样式" class="headerlink" title="单元格的组成和样式"></a>单元格的组成和样式</h2><p>单元格由图标、主标题、副标题、扩展视图组成，可以根据需要进行选择，其中内置的扩展视图在枚举类型UITableViewCellAccessoryType中定义：</p>
<table>
<thead>
<tr>
<th>Swift枚举成员</th>
<th>Objective-C枚举成员</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>ITableViewCellAccessoryNone</td>
<td>没有扩展图标</td>
</tr>
<tr>
<td>disclosureIndicator</td>
<td>UITableViewCellAccessoryDisclosureIndicator</td>
<td>扩展指示器，为箭头+问号</td>
</tr>
<tr>
<td>detailDisclosureButton</td>
<td>UITableViewCellAccessoryDetailDisclosureButton</td>
<td>细节展示图，为问号</td>
</tr>
<tr>
<td>checkmark</td>
<td>UITableViewCellAccessoryCheckmark</td>
<td>选中标志，图标为勾</td>
</tr>
<tr>
<td>detailButton</td>
<td>UITableViewCellAccessoryDetailButton</td>
<td>细节详情展示，图标为问号</td>
</tr>
</tbody>
</table>
<p>内置的单元格样式在枚举类型UITableViewCellStyle中定义：</p>
<table>
<thead>
<tr>
<th>Swift枚举成员</th>
<th>Objective-C枚举成员</th>
<th>说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>UITableViewCellStyleDefault</td>
<td>默认样式</td>
</tr>
<tr>
<td>subtitle</td>
<td>UITableViewCellStyleSubtitle</td>
<td>有图标、主标题、副标题、副标题在主标题的下面</td>
</tr>
<tr>
<td>value1</td>
<td>UITableViewCellStyleValue1</td>
<td>有主标题、副标题，主标题左对齐、副标题右对齐，可以有图标</td>
</tr>
<tr>
<td>2alue3</td>
<td>UITableViewCellStyleValue2</td>
<td>有主标题、副标题，主标题和副标题居中对齐，无图标</td>
</tr>
</tbody>
</table>
<h2 id="数据源协议与委托协议"><a href="#数据源协议与委托协议" class="headerlink" title="数据源协议与委托协议"></a>数据源协议与委托协议</h2><h3 id="UITableViewDataSource"><a href="#UITableViewDataSource" class="headerlink" title="UITableViewDataSource"></a>UITableViewDataSource</h3><p>数据源协议主要为表视图提供数据，主要方法如下</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>func tableView(UITableView, cellForRowAt: IndexPath)</td>
<td>UITableViewCell</td>
<td>为表视图单元格提供数据，必须实现</td>
</tr>
<tr>
<td>tableView(UITableView, numberOfRowsInSection: Int)</td>
<td>Int</td>
<td>返回某个节中的行数，必须实现</td>
</tr>
<tr>
<td>tableView(UITableView, titleForHeaderInSection: Int)</td>
<td>String</td>
<td>返回节头的标题</td>
</tr>
<tr>
<td>tableView(UITableView, titleForFooterInSection: Int)</td>
<td>String</td>
<td>返回节脚的标题</td>
</tr>
<tr>
<td>numberOfSections(in: UITableView)</td>
<td>Int</td>
<td>返回节的个数</td>
</tr>
<tr>
<td>sectionIndexTitles(for: UITableView)</td>
<td>[String]?</td>
<td>返回表示图节索引标题</td>
</tr>
</tbody>
</table>
<h3 id="UITableViewDelegate"><a href="#UITableViewDelegate" class="headerlink" title="UITableViewDelegate"></a>UITableViewDelegate</h3><p>委托协议主要主要用来设定表视图中节头和节脚的标题，以及一些动作事件，主要方法如下</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回类型</th>
<th>说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td>tableView(UITableView, didSelectRowAt: IndexPath)</td>
<td></td>
<td>单元格响应事件</td>
</tr>
<tr>
<td>tableView(UITableView, accessoryButtonTappedForRowWith: IndexPath)</td>
<td></td>
<td>扩展视图响应事件</td>
</tr>
</tbody>
</table>
<h1 id="简单表视图"><a href="#简单表视图" class="headerlink" title="简单表视图"></a>简单表视图</h1><h2 id="UIViewController根视图控制器实现表视图"><a href="#UIViewController根视图控制器实现表视图" class="headerlink" title="UIViewController根视图控制器实现表视图"></a>UIViewController根视图控制器实现表视图</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>创建一个iOS工程</li>
<li>从对象库中拖入一个TableView到storyboard文件中，并将TableView覆盖整个View</li>
<li>打开Table View的属性检查器，将PrototypeCells的值设为1，注意不要添加多个，否则会发生错误；此时Table View会添加一个Table View Cell。</li>
<li>打开Table View Cell的属性检查器，设置Identifier属性。</li>
<li>注册UITableViewDataSource和UITableViewDelegate协议</li>
<li>编写代码实现功能</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  TableViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/26.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UITableViewDataSource</span>,<span class="title">UITableViewDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//全部数据</span></div><div class="line">    <span class="keyword">var</span> listItems: <span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//读取资源文件数据</span></div><div class="line">        <span class="keyword">let</span> listPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"team"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        <span class="keyword">self</span>.listItems = <span class="type">NSArray</span>(contentsOfFile: listPath!)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回列表每行的视图</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="comment">//根据Identifier找到Cell</span></div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CustomId"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rowDict = <span class="keyword">self</span>.listItems[row] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">        cell.textLabel?.text = rowDict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        cell.detailTextLabel?.text = <span class="string">"123"</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> imagePath = <span class="type">String</span>(format: <span class="string">"%@.png"</span>, rowDict[<span class="string">"image"</span>] <span class="keyword">as</span>! <span class="type">String</span>)</div><div class="line">        cell.imageView?.image = <span class="type">UIImage</span>(named: imagePath)</div><div class="line">        cell.accessoryType = <span class="type">UITableViewCellAccessoryType</span>.disclosureIndicator</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回条目数目</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listItems.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//响应条目点击事件</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"点击事件"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h3><ul>
<li>none模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-none.jpg" alt=""></p>
<ul>
<li>disclosureIndicator</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-disclosureIndicator.jpg" alt=""></p>
<h2 id="UITableViewController根视图控制器实现表视图"><a href="#UITableViewController根视图控制器实现表视图" class="headerlink" title="UITableViewController根视图控制器实现表视图"></a>UITableViewController根视图控制器实现表视图</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>创建一个iOS工程</li>
<li>删除storyboard中View Controller Scene 中的View Controller，再从对象库拖入一个Table View Controller到设计界面</li>
<li>打开Table View Controller属性检查器，勾选Is Initial View Controller选项，否则应用启动后是黑屏</li>
<li>将ViewController类的父类由UIViewController改为UITableViewController</li>
<li>打开View Controller的属性选择器在Class列表中选择ViewController</li>
<li>UITableViewController默认以注册UITableViewDataSource和UITableViewDelegate协议，不需要再注册</li>
</ol>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//全部数据</span></div><div class="line">    <span class="keyword">var</span> listItems: <span class="type">NSArray</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//读取资源文件数据</span></div><div class="line">        <span class="keyword">let</span> listPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"team"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        <span class="keyword">self</span>.listItems = <span class="type">NSArray</span>(contentsOfFile: listPath!)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回列表每行的视图</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CustomId"</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rowDict = <span class="keyword">self</span>.listItems[row] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">        cell.textLabel?.text = rowDict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        cell.detailTextLabel?.text = <span class="string">"123"</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> imagePath = <span class="type">String</span>(format: <span class="string">"%@.png"</span>, rowDict[<span class="string">"image"</span>] <span class="keyword">as</span>! <span class="type">String</span>)</div><div class="line">        cell.imageView?.image = <span class="type">UIImage</span>(named: imagePath)</div><div class="line">        cell.accessoryType = <span class="type">UITableViewCellAccessoryType</span>.disclosureIndicator</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回条目数目</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listItems.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//响应条目点击事件</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"点击事件"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例图-1"><a href="#示例图-1" class="headerlink" title="示例图"></a>示例图</h3><ul>
<li>detailButton模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-detail-button.jpg" alt=""></p>
<ul>
<li>checkmark模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-checkmark.jpg" alt=""></p>
<h1 id="自定义单元格"><a href="#自定义单元格" class="headerlink" title="自定义单元格"></a>自定义单元格</h1><h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个表视图工程</li>
<li>修改根视图控制器为表视图控制器UITableViewController，参照上节的步骤</li>
<li>从对象库中拖入控件到单元格内部，比如Lable和ImageView</li>
<li>创建自定义单元格类CustomCell文件，并继承UITableViewCell类</li>
<li>在设计界面中选择View Controller Scene中的Table View Cell，并打开属性检查器，将Class设为CustomCell类，并设置单元格的Identifier</li>
<li>为单元格中的控件Label和ImageView控件连接输出接口，将控件绑定到CustomCell类中</li>
<li>打开ViewController类，编写代码实现</li>
</ol>
<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><ul>
<li>CustomCell类</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  CustomCell.swift</span></div><div class="line"><span class="comment">//  CustomCell</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/25.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mImage: <span class="type">UIImageView</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mLabel: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.awakeFromNib()</div><div class="line">        <span class="comment">// Initialization code</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setSelected</span><span class="params">(<span class="number">_</span> selected: Bool, animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.setSelected(selected, animated: animated)</div><div class="line"></div><div class="line">        <span class="comment">// Configure the view for the selected state</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ViewController类</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  SimpleTableView</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/24.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> listItems: <span class="type">NSArray</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">let</span> listPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"team"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        <span class="keyword">self</span>.listItems = <span class="type">NSArray</span>(contentsOfFile: listPath!)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.listItems.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="comment">//找到自定义单元格</span></div><div class="line">        <span class="keyword">let</span> cell:<span class="type">CustomCell</span>! = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CustomCellId"</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>? <span class="type">CustomCell</span></div><div class="line">        <span class="comment">//let cell = UITableViewCell(style: .value1, reuseIdentifier: "CellIdentifier")</span></div><div class="line">        <span class="keyword">let</span> row = indexPath.row</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rowDict = <span class="keyword">self</span>.listItems[row] <span class="keyword">as</span>! <span class="type">NSDictionary</span></div><div class="line">        <span class="comment">//设置控件属性</span></div><div class="line">        cell.mLabel.text = rowDict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> imagePath = <span class="type">String</span>(format: <span class="string">"%@.png"</span>, rowDict[<span class="string">"image"</span>] <span class="keyword">as</span>! <span class="type">String</span>)</div><div class="line">        cell.mImage.image = <span class="type">UIImage</span>(named: imagePath)</div><div class="line">        cell.accessoryType = .disclosureIndicator</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-2"><a href="#示例图-2" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/tableview-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E5%85%83%E6%A0%BC.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之03UIView]]></title>
      <url>http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B03UIView/</url>
      <content type="html"><![CDATA[<h1 id="UILabel"><a href="#UILabel" class="headerlink" title="UILabel"></a>UILabel</h1><p>Lable的作用是显示不可编辑的文字。</p>
<h2 id="属性检查器"><a href="#属性检查器" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Text：Label显示的文字</li>
<li>Color：文字的颜色</li>
<li>Font：字体和字号</li>
<li>Alignment：文本的对齐方式</li>
<li>Lines：设置Label中文本的行数，默认为1</li>
<li>Line Breaks：设置文字的截断，当文本太长以至于Label不能显示全部的字体时，超长的部分会显示“…”，通常在以下三个选项中做选择。<ul>
<li>Truncate Tail：截断尾部</li>
<li>Truncate Head：截断头部</li>
<li>Truncate Middle：保留头尾，截断中间</li>
</ul>
</li>
<li>Highlighted：设置高亮是文本的颜色</li>
<li>Shadow：设置文本的阴影颜色</li>
<li>Shadow Offset：设置标签文本的阴影偏移量</li>
</ul>
<h2 id="代码创建Lable"><a href="#代码创建Lable" class="headerlink" title="代码创建Lable"></a>代码创建Lable</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代码创建Label</span></div><div class="line">let lable = UILabel(frame: CGRect(x: <span class="number">100</span>, y: <span class="number">100</span>, <span class="attribute">width</span>: <span class="number">200</span>, height: <span class="number">200</span>))</div><div class="line">lable<span class="selector-class">.text</span> = <span class="string">"代码创建的Lable"</span></div><div class="line">lable<span class="selector-class">.font</span> = UIFont.systemFont(ofSize: CGFloat(<span class="number">28</span>))</div><div class="line">lable<span class="selector-class">.textColor</span> = UIColor<span class="selector-class">.red</span></div><div class="line">view.addSubview(lable)</div></pre></td></tr></table></figure>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  LableDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/12.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line">import UIKit</div><div class="line"></div><div class="line">class ViewController: UIViewController &#123;</div><div class="line"></div><div class="line">    <span class="comment">//storyboard</span></div><div class="line">    @IBOutlet weak <span class="selector-tag">var</span> mLabel: UILabel!</div><div class="line">    override func viewDidLoad() &#123;</div><div class="line">        super.viewDidLoad()</div><div class="line">        <span class="comment">// 设置文本</span></div><div class="line">        mLabel<span class="selector-class">.text</span> = <span class="string">"Hello ShenZhen"</span></div><div class="line">        <span class="comment">//设置字体对齐方式</span></div><div class="line">        mLabel<span class="selector-class">.textAlignment</span> = <span class="selector-class">.left</span></div><div class="line">        mLabel<span class="selector-class">.textColor</span> = UIColor<span class="selector-class">.red</span></div><div class="line">        mLabel<span class="selector-class">.backgroundColor</span> = UIColor<span class="selector-class">.green</span></div><div class="line">        <span class="comment">//设置字体大小</span></div><div class="line">        mLabel<span class="selector-class">.font</span> = UIFont.boldSystemFont(ofSize: <span class="number">25</span>)</div><div class="line">        <span class="comment">//文本的行数</span></div><div class="line">        mLabel<span class="selector-class">.numberOfLines</span> = <span class="number">2</span></div><div class="line">        </div><div class="line">        <span class="comment">//代码创建Label</span></div><div class="line">        let lable = UILabel(frame: CGRect(x: <span class="number">100</span>, y: <span class="number">100</span>, <span class="attribute">width</span>: <span class="number">200</span>, height: <span class="number">200</span>))</div><div class="line">        lable<span class="selector-class">.text</span> = <span class="string">"代码创建的Lable"</span></div><div class="line">        lable<span class="selector-class">.font</span> = UIFont.systemFont(ofSize: CGFloat(<span class="number">28</span>))</div><div class="line">        lable<span class="selector-class">.textColor</span> = UIColor<span class="selector-class">.red</span></div><div class="line">        view.addSubview(lable)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override func didReceiveMemoryWarning() &#123;</div><div class="line">        super.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/UILable.png" alt=""></p>
<h1 id="UIButton"><a href="#UIButton" class="headerlink" title="UIButton"></a>UIButton</h1><p>UIButton是ios中最基本的按钮控件</p>
<h2 id="属性检查器-1"><a href="#属性检查器-1" class="headerlink" title="属性检查器"></a>属性检查器</h2><p>在StoryBoard中拖曳生成一个控件时，可以使用属性检查器来设置场景中控件的属性。如果使用的是代码生成的控件，则在代码中给控件的属性赋值来改变属性的属性。</p>
<p>属性检查器的内容如下：</p>
<ul>
<li>Type：按钮的样式，默认是System，也就是透明背景蓝色字体的按钮样式。</li>
<li>State Config：默认为default，此外还有HighLight（触摸高亮）、Selected（选中状态）和Disable（禁用状态）</li>
<li>Title：设置按钮显示的文字</li>
<li>Font：设置后按钮字体和字号</li>
<li>TextColor：设置字体颜色</li>
<li>Shadow Color：设置文字的阴影颜色</li>
<li>Image：设置按钮的图片格式，在这里设置图片会让按钮的文字消失</li>
<li>Backgroud：设置按钮的背景图片，保留文字</li>
</ul>
<h2 id="代码创建按钮"><a href="#代码创建按钮" class="headerlink" title="代码创建按钮"></a>代码创建按钮</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用代码添加一个Button到View中</span></div><div class="line">let btn1 = UIButton(frame: CGRectMake(100,50,200,200))</div><div class="line">btn1.setTitle(<span class="string">"word"</span>, forState: .Normal)</div><div class="line">btn1.backgroundColor = UIColor.blueColor()</div><div class="line">//添加点击事件</div><div class="line">btn1.addTarget(self, action: #selector(ViewController.show(_:)), forControlEvents: .TouchUpInside)</div><div class="line">view.addSubview(btn1)</div><div class="line"></div><div class="line">func show(button : UIButton) &#123;</div><div class="line">    print(button.currentTitle!)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ButtonDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 16/9/12.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//实例</span></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> myButton: <span class="type">UIButton</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="comment">//用代码添加一个Button到View中</span></div><div class="line">        <span class="keyword">let</span> btn1 = <span class="type">UIButton</span>(frame: <span class="type">CGRectMake</span>(<span class="number">100</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">200</span>))</div><div class="line">        btn1.setTitle(<span class="string">"word"</span>, forState: .<span class="type">Normal</span>)</div><div class="line">        btn1.backgroundColor = <span class="type">UIColor</span>.blueColor()</div><div class="line">        <span class="comment">//添加点击事件</span></div><div class="line">        btn1.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">ViewController</span>.show(<span class="number">_</span>:)), forControlEvents: .<span class="type">TouchUpInside</span>)</div><div class="line">        view.addSubview(btn1)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(button : UIButton)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(button.currentTitle!)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//StoryBoard点击事件</span></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">click</span><span class="params">(sender: UIButton)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(sender.currentTitle!)</div><div class="line">        <span class="comment">//设置文字</span></div><div class="line">        sender.setTitle(<span class="string">"hello"</span>, forState: .<span class="type">Normal</span>)</div><div class="line">        <span class="comment">//设置文字颜色</span></div><div class="line">        sender.setTitleColor(<span class="type">UIColor</span>.darkTextColor(), forState: .<span class="type">Normal</span>)</div><div class="line">        <span class="comment">//设置背景颜色</span></div><div class="line">        sender.backgroundColor = <span class="type">UIColor</span>.redColor()</div><div class="line">        <span class="comment">//设置圆角</span></div><div class="line">        sender.layer.cornerRadius = <span class="number">15</span></div><div class="line">        <span class="comment">//是否可见</span></div><div class="line">        sender.hidden = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/UIButton.png" alt=""></p>
<h1 id="UISwitch、UISilder、UISegmentedControl"><a href="#UISwitch、UISilder、UISegmentedControl" class="headerlink" title="UISwitch、UISilder、UISegmentedControl"></a>UISwitch、UISilder、UISegmentedControl</h1><h2 id="UISWitch"><a href="#UISWitch" class="headerlink" title="UISWitch"></a>UISWitch</h2><p>Switch控件状态分为开启和关闭状态。</p>
<p>UISwitch的属性检查器的主要内容有：</p>
<ul>
<li>State：有On和Off两种状态</li>
<li>On Tint：开关打开时的背景颜色</li>
<li>Thumb Tint：滑块的颜色</li>
</ul>
<h2 id="UISlider"><a href="#UISlider" class="headerlink" title="UISlider"></a>UISlider</h2><p>Slider控件通常用来指示进度，并且可以通过拖曳改变进度。</p>
<p>UISlider控件的属性检查器的主要内容有：</p>
<ul>
<li>Value：设置Value的最大值、最小值，以及通过设置Current的值来限定Slider初始化时滑块的位置</li>
<li>Min Image和Max Image：Slider最大值和最小值处的图片</li>
<li>Min Track Tint：滑块左侧轨道的颜色</li>
<li>Max Track Tint：滑块右侧轨道的颜色</li>
<li>Thumb Tint：滑块的颜色</li>
<li>Events：有一个可选项Continuous Updates，勾选后再拖动滑块的过程中会不断触发事件</li>
</ul>
<h2 id="UISegmentedControl（分段控件）"><a href="#UISegmentedControl（分段控件）" class="headerlink" title="UISegmentedControl（分段控件）"></a>UISegmentedControl（分段控件）</h2><p>UISegmentedControl的属性检查器的主要内容有：</p>
<ul>
<li>Style：样式</li>
<li>State：</li>
<li>Segments：设置分段的数量，默认的是2个，而且不能低于2个。</li>
<li>Segment：设置当前编辑的分段</li>
<li>Title：设置该分段所显示的文字，默认是First、Second等英文序数词</li>
<li>Image：设置该分段的图片</li>
<li>Behavior：Enabled表示该分段是否可用，Selected表示在初次加载时该分段是否被选中</li>
<li>Content OffSet：设置分段中的Title的位置，如果对默认的位置不满意，则可以设置X和Y方向的偏移量来调整，可正可负</li>
</ul>
<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  OtherButtonDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/13.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSwitchButton: <span class="type">UISwitch</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mBottomSwitch: <span class="type">UISwitch</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSegmentButton: <span class="type">UISegmentedControl</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mLabel: <span class="type">UILabel</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSlideButton: <span class="type">UISlider</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mSlideButton.minimumValue = <span class="number">0</span></div><div class="line">        mSlideButton.maximumValue = <span class="number">100</span></div><div class="line">        mSlideButton.setValue(<span class="number">60</span>, animated: <span class="literal">true</span>)</div><div class="line">        mLabel.text = <span class="type">String</span>(format: <span class="string">"SlideValue: %0.0f"</span>, mSlideButton.value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">        </div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * UISwitch点击事件</div><div class="line">    *</div><div class="line">    */</div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">switchValueChange</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//AnyObject转为UISwitch类型</span></div><div class="line">        <span class="keyword">let</span> witchSwitch = sender <span class="keyword">as</span>! <span class="type">UISwitch</span></div><div class="line">        <span class="built_in">print</span>(witchSwitch.isOn)</div><div class="line">        <span class="built_in">print</span>(mSwitchButton.isOn)</div><div class="line">        mBottomSwitch.setOn(mSwitchButton.isOn, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//UISegmentedControl点击事件</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">switchSegment</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//选择的段</span></div><div class="line">        <span class="type">NSLog</span>(<span class="string">"%ld"</span>, mSegmentButton.selectedSegmentIndex)</div><div class="line">        <span class="keyword">if</span> mSwitchButton.isHidden &#123;</div><div class="line">            <span class="keyword">self</span>.mSwitchButton.isHidden = <span class="literal">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">self</span>.mSwitchButton.isHidden = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//USlider滑动事件</span></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">slideValueChange</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> slider = sender <span class="keyword">as</span>! <span class="type">UISlider</span></div><div class="line">        <span class="type">NSLog</span>(<span class="string">"<span class="subst">\(slider.value)</span>"</span>)</div><div class="line">        mLabel.text = <span class="type">String</span>(format: <span class="string">"SlideValue: %0.3f"</span>, slider.value)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-1"><a href="#示例图-1" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/UISwitch.png" alt=""></p>
<h1 id="UITextField和UITextView"><a href="#UITextField和UITextView" class="headerlink" title="UITextField和UITextView"></a>UITextField和UITextView</h1><h2 id="UITextField"><a href="#UITextField" class="headerlink" title="UITextField"></a>UITextField</h2><p>UITextField文本框与UILabel的不同是文本框是可以编辑的。iOS用到的文本框的地方很多，比如搜索框、用户登录框等。</p>
<p>UITextField的属性检查器的主要内容有：</p>
<ul>
<li>Placeholder：默认显示在这里的文字，通常用来提示该文本框中需要输入的内容</li>
<li>Border Style：选择文本框的样式</li>
<li>Clear Button：设置清除输入的按钮</li>
<li>Min Font Size：文本框被挤压时，文本框中字体的最小尺寸</li>
<li>Capitalization：设置文本框是否自动转换大小写</li>
<li>Spell Checking：检查是否有拼写错误</li>
<li>KeyBoard Style：键盘的样式</li>
<li>Return key：选择返回键的样式</li>
</ul>
<h2 id="UITextView"><a href="#UITextView" class="headerlink" title="UITextView"></a>UITextView</h2><p>UITextView也是可以编辑文本内容的，适用于大段文本的编辑</p>
<h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  TextDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/12.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UITextFieldDelegate</span>,<span class="title">UITextViewDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mTextField: <span class="type">UITextField</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mTextView: <span class="type">UITextView</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mTextField.delegate = <span class="keyword">self</span></div><div class="line">        mTextView.delegate = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">onClick</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"TextFiled: %@"</span>, mTextField.text!)</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"TextView: %@"</span>, mTextView.text!)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="comment">//关闭键盘</span></div><div class="line">        mTextField.resignFirstResponder()</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"TextFiled 获得焦点"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldDidEndEditing</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"%@"</span>, textField.text!)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textView</span><span class="params">(<span class="number">_</span> textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> text == <span class="string">"\n"</span> &#123;</div><div class="line">            <span class="type">NSLog</span>(<span class="string">"TextView 获得焦点"</span>)</div><div class="line">            <span class="comment">//关闭键盘</span></div><div class="line">            mTextView.resignFirstResponder()</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-2"><a href="#示例图-2" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/TextField.png" alt=""></p>
<h1 id="UIProgressView"><a href="#UIProgressView" class="headerlink" title="UIProgressView"></a>UIProgressView</h1><p>ProgressView(进度条)可以用来显示式地表示某个操作处理的进度。</p>
<h2 id="属性检查器-2"><a href="#属性检查器-2" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Progress:当前进度条的进度值</li>
<li>Progress Tint:已完成进度部分的颜色</li>
<li>Track Tint：未完成部分的颜色</li>
<li>Progress Image：使用图片填充以完成的部分</li>
<li>Track Image“使用图片填充未完成的部分</li>
</ul>
<h2 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ProgressViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/18.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mProgressView: <span class="type">UIProgressView</span>!</div><div class="line">    <span class="keyword">var</span> timer:<span class="type">Timer</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="keyword">self</span>.mProgressView.progress = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//执行定时任务</span></div><div class="line">        <span class="keyword">self</span>.timer = <span class="type">Timer</span>.scheduledTimer(timeInterval: <span class="number">1.0</span>, target: <span class="keyword">self</span>, selector: #selector(<span class="type">ViewController</span>.download <span class="keyword">as</span> (<span class="type">ViewController</span>) -&gt; () -&gt; ()), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//更新进度值</span></div><div class="line">        <span class="keyword">self</span>.mProgressView.progress += <span class="number">0.05</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.mProgressView.progress == <span class="number">1.0</span> &#123;</div><div class="line">            <span class="comment">//结束定时器</span></div><div class="line">            <span class="keyword">self</span>.timer.invalidate()</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-3"><a href="#示例图-3" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/progress-view.png" alt=""></p>
<h1 id="UIActivityIndicatorView"><a href="#UIActivityIndicatorView" class="headerlink" title="UIActivityIndicatorView"></a>UIActivityIndicatorView</h1><p>与UIProgressView相比，UIActivityIndicatorView不会显示具体的进度，只是用做提示的作用</p>
<h2 id="属性检查器-3"><a href="#属性检查器-3" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Style：样式有三种：Gray、White、Large White</li>
<li>Color：ActivityIndicatorView的颜色</li>
<li>Behavior：有两个选项：Animating表示ActivityIndicatorView的齿轮是否在转动；Hides When Stopped 表示当齿轮停止转动时是否将ActivityIndicatorView隐藏。</li>
</ul>
<h2 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  IndicatorViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/18.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mIndicatorView: <span class="type">UIActivityIndicatorView</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//活动指示器出于非活动状态时则会隐藏</span></div><div class="line">        mIndicatorView.hidesWhenStopped = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">upLoad</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> mIndicatorView.isAnimating &#123;</div><div class="line">            <span class="comment">//停止旋转</span></div><div class="line">            mIndicatorView.stopAnimating()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//开始旋转</span></div><div class="line">            mIndicatorView.startAnimating()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-4"><a href="#示例图-4" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/activity-indicator-view.png" alt=""></p>
<h1 id="UIStepper"><a href="#UIStepper" class="headerlink" title="UIStepper"></a>UIStepper</h1><p>UIStepper(步进器)的作用是按照约定的步长进行增减操作。Stepper上的+和-按钮对应Stepper所控制的数值的增减操作</p>
<h2 id="属性检查器-4"><a href="#属性检查器-4" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Value:Stepper所控制的值。Mininum表示最小值，Maximun表示最大值，Current表示初始化时的值，Step表示步长。</li>
<li>Behavior：有三个复选框<ul>
<li>Autorepeat：表示按住+和-的时候会不断地触发Stepper。</li>
<li>Continuous：勾选后系统实时触发ValueChanged事件，未勾选时系统只有当用户停止与Stepper交互时才触发ValueChanged事件。</li>
<li>Wrap：选择后当前当前Value值达到最大最小值时会继续增加或减少，value值会被复位成一个循环，比如最大值为100，最小值为0，当达到100后继续增加时Value的值就会变为0；如未选中，则达到最大或最小值时，Value会保持最大或最小值。</li>
</ul>
</li>
</ul>
<h2 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  StepperDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/19.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mStepper: <span class="type">UIStepper</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mCount: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mStepper.stepValue = <span class="number">1.0</span> <span class="comment">//步长</span></div><div class="line">        mStepper.minimumValue = <span class="number">0.0</span></div><div class="line">        mStepper.maximumValue = <span class="number">10.0</span></div><div class="line">        mStepper.value = <span class="number">0.0</span> <span class="comment">//当前值</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">step</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> text = <span class="type">String</span>(format: <span class="string">"数量%d"</span>, <span class="type">Int</span>(mStepper.value))</div><div class="line">        mCount.text = text</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-5"><a href="#示例图-5" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/stepper.png" alt=""></p>
<h1 id="UIImageView"><a href="#UIImageView" class="headerlink" title="UIImageView"></a>UIImageView</h1><p>UIImageView是用于展示图片的控件。</p>
<h2 id="属性检查器-5"><a href="#属性检查器-5" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Image:从工程的图片资源文件夹中选择一张图片作为UIImageVIew的填充，在Storyboard中使用图片名称来索引图片</li>
<li>Highlighted：高亮状态下显示的图片</li>
<li>State：可以设置UIImageView的初始状态，默认是非高亮状态</li>
</ul>
<h2 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ImageView</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/19.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mImage: <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mImage.image = <span class="type">UIImage</span>(named: <span class="string">"ic_welcome"</span>)! <span class="comment">//代码添加图片</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-6"><a href="#示例图-6" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/uiimageview.png" alt=""></p>
<h1 id="UIPickerView"><a href="#UIPickerView" class="headerlink" title="UIPickerView"></a>UIPickerView</h1><p>UIPickerView是可以用来更灵活地显示滑轮要显示的内容，如选择省市区等。</p>
<h2 id="属性检查器-6"><a href="#属性检查器-6" class="headerlink" title="属性检查器"></a>属性检查器</h2><p>Behavior：默认勾选，勾选后会高亮显示选中的选项</p>
<h2 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  PickerViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/20.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UIPickerViewDelegate</span>,<span class="title">UIPickerViewDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mPickerView: <span class="type">UIPickerView</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mLable: <span class="type">UILabel</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> pickerData: <span class="type">NSDictionary</span>!</div><div class="line">    <span class="keyword">var</span> pickerProvinceData: <span class="type">NSArray</span>!</div><div class="line">    <span class="keyword">var</span> pickerCityData: <span class="type">NSArray</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//从资源文件夹获取plist文件内容</span></div><div class="line">        <span class="keyword">let</span> listPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"provinces_cities"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        <span class="keyword">let</span> dict = <span class="type">NSDictionary</span>(contentsOfFile: listPath!)</div><div class="line">        <span class="keyword">self</span>.pickerData = dict</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.pickerProvinceData = <span class="keyword">self</span>.pickerData.allKeys <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> provice = <span class="keyword">self</span>.pickerProvinceData[<span class="number">0</span>] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">self</span>.pickerCityData = <span class="keyword">self</span>.pickerData[provice] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置代理处理回调事件</span></div><div class="line">        mPickerView.dataSource = <span class="keyword">self</span></div><div class="line">        mPickerView.delegate = <span class="keyword">self</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//确定选择器的拨轮的数目</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numberOfComponents</span><span class="params">(<span class="keyword">in</span> pickerView: UIPickerView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//确定每个拨轮的条目数</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(<span class="number">_</span> pickerView: UIPickerView, numberOfRowsInComponent component: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">if</span> component == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.pickerProvinceData.<span class="built_in">count</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.pickerCityData.<span class="built_in">count</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//为选择器某个拨轮的条目提供显示数据</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(<span class="number">_</span> pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">if</span> component == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.pickerProvinceData[row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.pickerCityData[row] <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//选择选择器的某个拨轮的条目时调用</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pickerView</span><span class="params">(<span class="number">_</span> pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> component == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">let</span> provice = <span class="keyword">self</span>.pickerProvinceData[row] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            <span class="keyword">self</span>.pickerCityData = <span class="keyword">self</span>.pickerData[provice] <span class="keyword">as</span>! <span class="type">NSArray</span></div><div class="line">            <span class="keyword">self</span>.mPickerView.reloadComponent(<span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">onClick</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> row1 = <span class="keyword">self</span>.mPickerView.selectedRow(inComponent: <span class="number">0</span>)</div><div class="line">        <span class="keyword">let</span> row2 = <span class="keyword">self</span>.mPickerView.selectedRow(inComponent: <span class="number">1</span>)</div><div class="line">        <span class="keyword">let</span> province = <span class="keyword">self</span>.pickerProvinceData[row1] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> city = <span class="keyword">self</span>.pickerCityData[row2] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> title = <span class="type">String</span>(format: <span class="string">"%@,%@市"</span>, province,city)</div><div class="line">        mLable.text = title</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-7"><a href="#示例图-7" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/pickerview.png" alt=""></p>
<h1 id="UIDatePickerView"><a href="#UIDatePickerView" class="headerlink" title="UIDatePickerView"></a>UIDatePickerView</h1><h2 id="属性检查器-7"><a href="#属性检查器-7" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Model:设置UIDatePicker的样式，有以下四种模式：<ul>
<li>Date and Time：显示的是时间和日期</li>
<li>Date：只显示日期</li>
<li>Time：只显示时间</li>
<li>Count Down Timer：显示24小时制的倒计时模式</li>
</ul>
</li>
<li>Local：设置语言类型，默认是英文</li>
<li>Interval：设置时间间隔，以分钟为单位</li>
<li>Date：显示的日期，默认是当前的日期</li>
<li>Constraints：设置UIDatePickerView的最大值和最小值</li>
<li>Timer：设置Count Down Time模式下倒计时的秒数</li>
</ul>
<h2 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  DatePickerViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/19.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mDatePickerView: <span class="type">UIDatePicker</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mDesc: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mDesc.text =  mDatePickerView.date.description(with: <span class="type">Locale</span>.current)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">datePick</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> date = mDatePickerView.date</div><div class="line">        <span class="keyword">let</span> format = <span class="type">DateFormatter</span>()</div><div class="line">        format.dateFormat = <span class="string">"YYYY-MM-dd HH:mm:ss"</span></div><div class="line">        <span class="keyword">let</span> time = format.string(from: date)</div><div class="line">       mDesc.text =  time</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">timeMode</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//设置为Time模式</span></div><div class="line">        mDatePickerView.datePickerMode = <span class="type">UIDatePickerMode</span>.time</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">dateMode</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDatePickerView.datePickerMode = <span class="type">UIDatePickerMode</span>.date</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">dateAndTimeMode</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDatePickerView.datePickerMode = <span class="type">UIDatePickerMode</span>.dateAndTime</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">mCountDownTime</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDatePickerView.datePickerMode = <span class="type">UIDatePickerMode</span>.countDownTimer</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-8"><a href="#示例图-8" class="headerlink" title="示例图"></a>示例图</h2><ul>
<li>Date and Time模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/datepicker-date-time.png" alt=""></p>
<ul>
<li>Time模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/datepicker-time.png" alt=""></p>
<ul>
<li>Date模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/datepicker-date.png" alt=""></p>
<ul>
<li>Count Down Timer模式</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/datepicker-countdown.png" alt=""></p>
<h1 id="UIAlertView-amp-UIActionSheet"><a href="#UIAlertView-amp-UIActionSheet" class="headerlink" title="UIAlertView&amp;UIActionSheet"></a>UIAlertView&amp;UIActionSheet</h1><p>UIAlertView是用来显示的提示框的控件，只能在代码中创建.<br>UIActionSheet是用来显示操作表的控件，也只能在代码中创建。</p>
<p>使用步骤：</p>
<ol>
<li>创建一个UIAlertController的实例</li>
<li>创建UIAlertAction的实例，可以有多个</li>
<li>将UIAlertAction实例添加到UIAlertController中</li>
<li>使用UIViewController的present显示UIAlertController</li>
</ol>
<h2 id="实现-10"><a href="#实现-10" class="headerlink" title="实现"></a>实现</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  AlertViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/18.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line">import <span class="built_in">UIKit</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> ViewController: <span class="built_in">UIViewController</span> &#123;</div><div class="line"></div><div class="line">    @IBOutlet <span class="keyword">weak</span> var mAlertBtn: <span class="built_in">UIButton</span>!</div><div class="line">    @IBOutlet <span class="keyword">weak</span> var mActionBtn: <span class="built_in">UIButton</span>!</div><div class="line"></div><div class="line">    override func viewDidLoad() &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override func didReceiveMemoryWarning() &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//弹出警告栏</span></div><div class="line">    @IBAction func showAletView(_ sender: AnyObject) &#123;</div><div class="line">        </div><div class="line">        let alertController = <span class="built_in">UIAlertController</span>(title: <span class="string">"警告"</span>, message: <span class="string">"是否继续?"</span>, preferredStyle: <span class="built_in">UIAlertControllerStyle</span>.alert)</div><div class="line">        </div><div class="line">        <span class="comment">//取消</span></div><div class="line">        let noAction = <span class="built_in">UIAlertAction</span>(title: <span class="string">"否"</span>, style: <span class="built_in">UIAlertActionStyle</span>.cancel) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"No"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//确认</span></div><div class="line">        let yesAction = <span class="built_in">UIAlertAction</span>(title: <span class="string">"是"</span>, style: <span class="built_in">UIAlertActionStyle</span>.default) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"Yes"</span>)</div><div class="line">        &#125;</div><div class="line">        let confirmAction = <span class="built_in">UIAlertAction</span>(title: <span class="string">"是"</span>, style: <span class="built_in">UIAlertActionStyle</span>.destructive) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"Yes"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//添加文本框</span></div><div class="line">        alertController.addTextField &#123; (<span class="built_in">UITextField</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">UITextField</span>.placeholder = <span class="string">"请输入密码"</span></div><div class="line">        &#125;</div><div class="line">        alertController.addAction(noAction)</div><div class="line">        alertController.addAction(yesAction)</div><div class="line">        alertController.addAction(confirmAction)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.present(alertController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//弹出操作表</span></div><div class="line">    @IBAction func showActionSheet(_ sender: AnyObject) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//默认是ActionSheet</span></div><div class="line">        let actionSheet = <span class="built_in">UIAlertController</span>()</div><div class="line">        </div><div class="line">        let cancelAction = <span class="built_in">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: <span class="built_in">UIAlertActionStyle</span>.cancel) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"cancel"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        let sina = <span class="built_in">UIAlertAction</span>(title: <span class="string">"新浪微博"</span>, style: <span class="built_in">UIAlertActionStyle</span>.destructive) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"weibo"</span>)</div><div class="line">        &#125;</div><div class="line">        let wechat = <span class="built_in">UIAlertAction</span>(title: <span class="string">"微信"</span>, style: <span class="built_in">UIAlertActionStyle</span>.default) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"wechat"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        let tecent = <span class="built_in">UIAlertAction</span>(title: <span class="string">"QQ空间"</span>, style: <span class="built_in">UIAlertActionStyle</span>.default) &#123; (<span class="built_in">UIAlertAction</span>) <span class="keyword">in</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">"tecent"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        actionSheet.addAction(cancelAction)</div><div class="line">        actionSheet.addAction(sina)</div><div class="line">        actionSheet.addAction(wechat)</div><div class="line">        actionSheet.addAction(tecent)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.present(actionSheet, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-9"><a href="#示例图-9" class="headerlink" title="示例图"></a>示例图</h2><ul>
<li>UIAlertView</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/alertview-three.png" alt=""></p>
<ul>
<li>UIActionSheet</li>
</ul>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/action-sheet.png" alt=""></p>
<h1 id="UIToolbar"><a href="#UIToolbar" class="headerlink" title="UIToolbar"></a>UIToolbar</h1><h2 id="属性检查器-8"><a href="#属性检查器-8" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Style:工具栏的样式，浅色和深色</li>
<li>Translucent：是否半透明</li>
<li>Bar Tint：工具栏的颜色</li>
</ul>
<h2 id="实现-11"><a href="#实现-11" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  ToolBarDemoo2</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/18.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mDesc: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDesc.text = <span class="string">"存储"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">done</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDesc.text = <span class="string">"完成"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">edit</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        mDesc.text = <span class="string">"编辑"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-10"><a href="#示例图-10" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/toolbar.png" alt=""></p>
<h1 id="UISearchBar"><a href="#UISearchBar" class="headerlink" title="UISearchBar"></a>UISearchBar</h1><p>UISearchBar是用于显示搜索框的控件</p>
<h2 id="属性检查器-9"><a href="#属性检查器-9" class="headerlink" title="属性检查器"></a>属性检查器</h2><ul>
<li>Text：SearchBar中输入的文字</li>
<li>PlaceHolder：占位符，通常用来提示用户输入的内容</li>
<li>Prompt：SearchBar的标题，显示在输入框的上方</li>
<li>Search Style：SearchBar的样式，可以选择边框加深还是搜索框加深</li>
<li>Bar Style:整体的颜色，可选择深色和浅色</li>
<li>Bar Tint:边框的颜色</li>
<li>Background:设置背景图片</li>
<li>Scope Bar:设置Scope Bar的背景图片</li>
<li>Search Text：设置关键字的位置。默认是在左边</li>
<li>Options：SearchBar的右侧可以配备一个功能按钮，比如查找搜索记录、清除已输入的内容。</li>
</ul>
<h2 id="实现-12"><a href="#实现-12" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  SearchBar</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/21.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UISearchBarDelegate</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSearch: <span class="type">UISearchBar</span>!</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mInfo: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        mSearch.delegate = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBar</span><span class="params">(<span class="number">_</span> searchBar: UISearchBar, textDidChange searchText: String)</span></span> &#123;</div><div class="line">        mInfo.text = searchText</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBarCancelButtonClicked</span><span class="params">(<span class="number">_</span> searchBar: UISearchBar)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"searchBarCancelButtonClicked"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//按搜索键时调用</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBarSearchButtonClicked</span><span class="params">(<span class="number">_</span> searchBar: UISearchBar)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"searchBarSearchButtonClicked"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例图-11"><a href="#示例图-11" class="headerlink" title="示例图"></a>示例图</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/searchbar.png" alt=""></p>
<h1 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h1><h2 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h2><p>WKWebView不是UKit内容，它属于WebKit中的类，是在iOS8中引入的部分。WKWebView将浏览器的内存渲染进程从App转移到系统中进行，提高了性能；其次它拥有和Safari相同的JavaScript引擎；最后它拥有60fps的滚动刷新频率。</p>
<h3 id="实现-13"><a href="#实现-13" class="headerlink" title="实现"></a>实现</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  WebViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/17.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> WebKit <span class="comment">//引入库</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mButton: <span class="type">UIButton</span>!</div><div class="line">    <span class="keyword">var</span> mWebView: <span class="type">WKWebView</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSafari: <span class="type">UIButton</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        mButton.layer.borderColor = <span class="type">UIColor</span>.black.cgColor</div><div class="line">        mButton.layer.borderWidth = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置Button的边框颜色</span></div><div class="line">        mSafari.layer.borderColor = <span class="type">UIColor</span>.black.cgColor</div><div class="line">        mSafari.layer.borderWidth = <span class="number">1</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">openWeb</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//打开网页</span></div><div class="line">        mWebView = <span class="type">WKWebView</span>(frame: view.frame)</div><div class="line">        <span class="keyword">let</span> mUrl = <span class="type">URL</span>(string: <span class="string">"http://www.baidu.com"</span>)</div><div class="line">        <span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: mUrl!)</div><div class="line">        mWebView.load(request)</div><div class="line">        <span class="comment">//注册网页加载过程代理</span></div><div class="line">        mWebView.navigationDelegate = <span class="keyword">self</span></div><div class="line">        view.addSubview(mWebView)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"开始加载"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didCommit navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"内容开始返回时回调"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"加载完成"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error)</span></span> &#123;</div><div class="line">        <span class="type">NSLog</span>(<span class="string">"加载失败"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例图-12"><a href="#示例图-12" class="headerlink" title="示例图"></a>示例图</h3><p><img src="http://oeqfywnzb.bkt.clouddn.com/webview-wkwebview.png" alt=""></p>
<h2 id="SFSafariViewController"><a href="#SFSafariViewController" class="headerlink" title="SFSafariViewController"></a>SFSafariViewController</h2><p>SFSafariViewController是iOS9中加入的控制器，这样就可以直接使用Safari来打开网页，获得Safari的完整功能而不需要离开App。</p>
<h3 id="实现-14"><a href="#实现-14" class="headerlink" title="实现"></a>实现</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.swift</span></div><div class="line"><span class="comment">//  WebViewDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Michael on 2016/10/17.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 Michael. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> SafariServices <span class="comment">//引入库</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mSafari: <span class="type">UIButton</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//设置Button的边框颜色</span></div><div class="line">        mSafari.layer.borderColor = <span class="type">UIColor</span>.black.cgColor</div><div class="line">        mSafari.layer.borderWidth = <span class="number">1</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">openSafari</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="comment">//通过Safari打开网页</span></div><div class="line">        <span class="keyword">let</span> mUrl = <span class="type">URL</span>(string: <span class="string">"http://www.baidu.com"</span>)</div><div class="line">        <span class="keyword">let</span> safari = <span class="type">SFSafariViewController</span>(url: mUrl!)</div><div class="line">        <span class="comment">//展示视图</span></div><div class="line">        present(safari, animated: <span class="literal">true</span>,completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例图-13"><a href="#示例图-13" class="headerlink" title="示例图"></a>示例图</h3><p><img src="http://oeqfywnzb.bkt.clouddn.com/webview-safari.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之02应用界面]]></title>
      <url>http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B02%E5%BA%94%E7%94%A8%E7%95%8C%E9%9D%A2/</url>
      <content type="html"><![CDATA[<p>iOS界面应用界面主要是使用Cocoa Touch框架开发，它有一套自己的MVC模式，其中视图和控制器是UIKit中的UIVIew及其子类和UIVIewController及其子类。</p>
<h1 id="视图控制器"><a href="#视图控制器" class="headerlink" title="视图控制器"></a>视图控制器</h1><p>Cocoa Touch中UIVIewController是所有控制器的基类，视图控制器有很多种，下面先介绍一个iOS中的控制器种类和生命周期。</p>
<h2 id="视图控制器种类"><a href="#视图控制器种类" class="headerlink" title="视图控制器种类"></a>视图控制器种类</h2><p>与导航相关的视图控制器如下所示：</p>
<ul>
<li><p>UIViewController： 用于自定义视图控制器的导航。例如对于两个界面的跳转，可以用一个UIViewController来控制另两个UIViewController。</p>
</li>
<li><p>UINavigationController：导航控制器，它与UITableViewController结合使用，能够构建树形结构导航模式</p>
</li>
<li><p>UITabBarController： 标签栏控制器，用于构建树形标签导航模式</p>
</li>
<li><p>UIPageViewController：呈现电子书导航风格控制器</p>
</li>
<li><p>UISplitViewController：可以把屏幕分割成几块的视图控制器，主要为iPad屏幕设计</p>
</li>
<li><p>UIPopoverController：呈现气泡风格视图的控制器，主要为iPad屏幕设计。</p>
</li>
</ul>
<h2 id="视图的生命周期"><a href="#视图的生命周期" class="headerlink" title="视图的生命周期"></a>视图的生命周期</h2><p>在应用运行过程中视图会显示不同的状态，这就是应用的生命周期。视图生命周期的不同阶段会回调视图控制器的不同的方法，视图控制器的生命周期如下图所示：</p>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""></p>
<p>视图的生命周期主要有四种状态：</p>
<ul>
<li>视图创建</li>
</ul>
<p>视图创建不加载到内存中，会调用viewDidLoad方法，但是视图此时并不可见。该方法中通常会对所控制的视图进行初始化处理。viewDidLoad方法在应用运行的时候只调用一次。</p>
<ul>
<li>视图可见</li>
</ul>
<p>视图可见前后会调用viewWillAppear和viewDidAppear两个方法。</p>
<ul>
<li>视图不可见</li>
</ul>
<p>视图不可见前后会调用viewWillDisappear和viewDidDisappear两个方法。</p>
<ul>
<li>系统低内存</li>
</ul>
<p>在低内存情况下，iOS系统会调用didReceiveMemoryWarning方法，该方法的功能是释放内存，包括视图控制器中的一些成员变量和视图的释放。</p>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>Cocoa Touch中UIViewC是所有视图的基类。</p>
<h2 id="UIView继承层次结构"><a href="#UIView继承层次结构" class="headerlink" title="UIView继承层次结构"></a>UIView继承层次结构</h2><p><img src="http://oeqfywnzb.bkt.clouddn.com/UIView%E7%BB%A7%E6%89%BF%E5%B1%82%E6%AC%A1%E5%9B%BE.png" alt=""></p>
<h2 id="视图分类"><a href="#视图分类" class="headerlink" title="视图分类"></a>视图分类</h2><p>苹果将UIKit框架中的视图分为以下几个类别：</p>
<ul>
<li>控件</li>
</ul>
<p>继承自UIController类，能够响应用户高级事件。</p>
<ul>
<li>窗口</li>
</ul>
<p>它是UIWindow对象，一个iOS应用只有一个UIWindow对象，它是所有子视图的父容器。</p>
<ul>
<li>容器视图</li>
</ul>
<p>它是UIScrollView、UIToolbar及它们的子类。UIScrollView的子类有UITextView、UITabView和UICollectionView，在内容超出屏幕时，它们可以提供水平或垂直滚动条。UIToolbar是非常特殊的容器，它能够包含其他控件，一般置于屏幕底部，特殊情况下也可以置于屏幕顶部。</p>
<ul>
<li>显示视图</li>
</ul>
<p>用于显示信息，包括UIImageView，UILabel、UIProgressView和UIActivityIndicatorView等</p>
<ul>
<li>文本和Web视图</li>
</ul>
<p>提供了能够显示多行文本的视图，包含UITextView和UIWebView，其中UITextView也属于容器视图，UIWebView是能够加载和显示HTML代码的视图。</p>
<ul>
<li>导航视图</li>
</ul>
<p>为用户提供从一个屏幕到另一个屏幕的导航视图，它包括UITabBar和UINavigationBar。</p>
<ul>
<li>警告框和操作表</li>
</ul>
<p>用于给用户提供一种反馈或者与用户进行交互。警告框是可以以动画方式弹出来的视图，而操作表是给用户可选择操作的视图，在iphone中它会从屏幕底部弹出，在iPad中则会出现在屏幕中央。</p>
<h2 id="应用界面构建层次"><a href="#应用界面构建层次" class="headerlink" title="应用界面构建层次"></a>应用界面构建层次</h2><p>一般情况下，iOS用于中只包含一个UIWindow。从UI构建层次来讲，UIWindow包含了一个根视图UIView。根视图一般也只有一个，置于UIWindow中。根视图类型决定了应用程序的类型。应用界面的构建层次是一种树形结构，如下图所示：</p>
<p><img src="http://oeqfywnzb.bkt.clouddn.com/%E8%A7%86%E5%9B%BE%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt=""></p>
<p>简要介绍图中三个属性的含义：</p>
<ul>
<li>superview：获得父视图对象</li>
<li>subviews：获得子视图对象集合</li>
<li>window：获得视图所在的界面Window对象</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之01基础]]></title>
      <url>http://liuguoquan727.github.io/2016/11/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B01%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="Xcode中的iOS工程模板"><a href="#Xcode中的iOS工程模板" class="headerlink" title="Xcode中的iOS工程模板"></a>Xcode中的iOS工程模板</h1><p>iOS工程模板分为两类-Application和Framework &amp; Library。</p>
<h2 id="Application类型"><a href="#Application类型" class="headerlink" title="Application类型"></a>Application类型</h2><p>Application包含5个模板，具体如下所示：</p>
<ul>
<li>Master-Detail Application：可以构建树形结构导航模式应用，生成的代码中包含了导航控制器和表视图控制器等。</li>
<li>Page-Based Application：可以构建类似电子书效果的应用</li>
<li>Single View Application：可以构建简单的单个视图应用</li>
<li>Tabbed Application：可以构建标签导航模式的应用，生成的代码中包含了标签控制器和标签栏等。</li>
<li>Game： 可以构建基于iOS的游戏应用</li>
</ul>
<h2 id="Framework-amp-Library"><a href="#Framework-amp-Library" class="headerlink" title="Framework &amp; Library"></a>Framework &amp; Library</h2><ul>
<li>Cocoa Touch Framework 可以让开发者自定义应用于UIKit的框架</li>
<li>Cocoa Touch Static Library 可以让开发者创建基于Foundation框架的静态库。</li>
</ul>
<h1 id="Xcode中的iOS工程目录"><a href="#Xcode中的iOS工程目录" class="headerlink" title="Xcode中的iOS工程目录"></a>Xcode中的iOS工程目录</h1><p><img src="http://oeqfywnzb.bkt.clouddn.com/iOS%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84.png" alt="code中的iOS工程目录"></p>
<ul>
<li>AppDelegate.swift类文件:应用程序委托对象</li>
<li>ViewController.swift类文件：是视图控制器类，在工程中扮演着根视图和用户事件控制类的角色</li>
<li>Main.storyboard文件:故事板文件</li>
<li>LaunchScreen.storyboard：应用启动界面故事板文件</li>
<li>Assets.xcassets文件夹: 资源目录,可以用来管理图片</li>
<li>Info.plist:工程属性文件</li>
<li>Products组:工程将要生成的产品包</li>
</ul>
<blockquote>
<p>在访问资源文件时，文件夹和组是有区别的。访问文件夹中的资源时需要将文件夹作为路径。如果icon.png文件放在images文件夹下，则访问它的路径时images/icon.png，如果images是组，则访问它的路径是icon.png.</p>
</blockquote>
<h1 id="iOS应用生命周期"><a href="#iOS应用生命周期" class="headerlink" title="iOS应用生命周期"></a>iOS应用生命周期</h1><p>AppDelegate类在应用生命周期的不同阶段会回调不同的方法。首先介绍iOS应用的5中状态。</p>
<ul>
<li>Not Running（非运行状态）：应用没有运行或被系统终止</li>
<li>Inactive（前台非活动状态）：应用正在进入前台状态，但是还不能接受事件处理</li>
<li>Active（前台活动状态）：应用进入前台状态，能接受事件处理</li>
<li>Backgroud（后台状态）：应用进入后台状态，依然能够执行代码。如果有可执行的代码，就会执行代码；如果没有可执行的代码或者将可执行的代码执行完毕，应用会马上进入挂起状态</li>
<li>Suspend（挂起状态）：被挂起的应用不能执行代码。如果系统内存不够，应用会被终止。</li>
</ul>
<p>在应用状态切换的过程中，iOS系统会回调AppDelegate中的一些方法，并且发送一些通知。下面介绍几个主要的方法和通知。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>本地通知</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>application:didFinishLaunchingWithOptions</td>
<td>UIApllicationDidFinishedLaunchingNotification</td>
<td>应用启动并进行初始化时会调用该方法并发出通知。这个阶段会实例化根视图控制器</td>
</tr>
<tr>
<td>applicationDidBecomeActive</td>
<td>UIApplicationDidBecomeActiveNotification</td>
<td>应用进入前台并处于活动状态时调用该方法并发出通知。这个阶段可以恢复UI的状态</td>
</tr>
<tr>
<td>applicationWillResignActive</td>
<td>UIApplicationWillResignActiveNotification</td>
<td>应用从活动状态进入到非活动状态时调用该方法并发出通知。这个阶段可以保存UI状态</td>
</tr>
<tr>
<td>applicationDidEnterBackgroud</td>
<td>UIApplicationDidEnterBackgroudNotification</td>
<td>应用进入后台时调用该方法并发出通知。这个阶段可以保存用户数据，释放一些资源</td>
</tr>
<tr>
<td>applicationWillEnterForegroud</td>
<td>UIApplicationWillEnterForegroudNotification</td>
<td>应用进入到前台，但是还没有处于活动状态时调用该方法并发出通知。这个阶段可以恢复用户数据</td>
</tr>
<tr>
<td>applicationWillTerminate</td>
<td>UIApplicationWillTerminateNotification</td>
<td>应用被终止时调用该方法并发出通知，但内存清除时除外，这个阶段释放一些资源，也可以保存用户数据</td>
</tr>
</tbody>
</table>
<h2 id="非运行状态-应用启动场景"><a href="#非运行状态-应用启动场景" class="headerlink" title="非运行状态-应用启动场景"></a>非运行状态-应用启动场景</h2><p><strong>场景描述：</strong>用户点击应用图标时，可能是第一次启动这个应用，也可能是应用终止后再次启动。该场景的状态跃迁过程共经历两个阶段单个状态：Not running -&gt; Inactive -&gt; Active。</p>
<ul>
<li>Not running -&gt; Inactive阶段：调用application:didFinishLaunchingWithOptions方法，发出UIApllicationDidFinishedLaunchingNotification通知。</li>
<li>Inactive -&gt; Active阶段：调用applicationDidBecomeActive方法，发出UIApplicationDidBecomeActiveNotification通知。</li>
</ul>
<h2 id="点击Home键-应用退出场景"><a href="#点击Home键-应用退出场景" class="headerlink" title="点击Home键-应用退出场景"></a>点击Home键-应用退出场景</h2><p><strong>场景描述：</strong>应用出于运行状态（即Active状态）时点击Home键应用会退出。该场景的状态变迁过程分为两种情况：可以在后台运行或者挂起和不可以在后台运行或挂起，可以根据工程属性文件Info.plist中的属性Application does not run in background来控制这两种状态。</p>
<h3 id="应用可以在后台运行或者挂起"><a href="#应用可以在后台运行或者挂起" class="headerlink" title="应用可以在后台运行或者挂起"></a>应用可以在后台运行或者挂起</h3><p>该场景的状态变迁共经历3个阶段4个状态：Activie -&gt; Inactive -&gt; Backgroud -&gt; Suspend。</p>
<ul>
<li>Activie -&gt; Inactive阶段：调用applicationWillResignActive方法，发出UIApplicationWillResignActiveNotification通知。</li>
<li>Inactive -&gt; Backgroud阶段：应用从非活动状态进入到后台（不涉及重点的方法和通知）。</li>
<li>Backgroud -&gt; Suspend阶段：调用applicationDidEnterBackground方法，发出UIApplicationDidEnterBackgroudNotification通知。</li>
</ul>
<h3 id="应用不可以在后台运行或挂起"><a href="#应用不可以在后台运行或挂起" class="headerlink" title="应用不可以在后台运行或挂起"></a>应用不可以在后台运行或挂起</h3><p>该场景下的状态变迁共经历4个阶段5种状态：Activie -&gt; Inactive -&gt; Backgroud -&gt; Suspend -&gt; Not Running。</p>
<ul>
<li>Activie -&gt; Inactive阶段：调用applicationWillResignActive方法，发出UIApplicationWillResignActiveNotification通知。</li>
<li>Inactive -&gt; Backgroud阶段：应用从非活动状态进入到后台（不涉及重点的方法和通知）</li>
<li>Backgroud -&gt; Suspend阶段：调用applicationDidEnterBackground方法，发出UIApplicationDidEnterBackgroudNotification通知</li>
<li>Suspend -&gt; Not Running阶段：调用applicationWillTerminate方法，发出UIApplicationWillTerminateNotification通知。</li>
</ul>
<h2 id="挂起重新运行场景"><a href="#挂起重新运行场景" class="headerlink" title="挂起重新运行场景"></a>挂起重新运行场景</h2><p><strong>场景描述：</strong>挂起状态的应用重新运行。该场景的状态变迁过程共经历三个阶段4种状态：Suspend -&gt; Backgroud -&gt; Inactive -&gt; Active。</p>
<ul>
<li>Suspend -&gt; Backgroud阶段：应用从挂起状态进入到后台（不涉及重点的方法和通知）</li>
<li>Backgroud -&gt; Inactive：调用applicationWillEnterForeground方法，发出UIApplicationWillEnterForegroudNotification通知。</li>
<li>Inactive -&gt; Active：调用applicationDidBecomeActive方法，发出UIApplicationDidBecomeActiveNotification通知。</li>
</ul>
<h2 id="内存清楚-应用终止场景"><a href="#内存清楚-应用终止场景" class="headerlink" title="内存清楚-应用终止场景"></a>内存清楚-应用终止场景</h2><p><strong>场景描述：</strong>应用在后台处理完成时进入挂起状态（这是一种休眠状态），如果这时发出低内存警告，为了满足其他应用对内存的需要，该应用就会被清除内存从而终止运行。该场景的变迁过程为：Backgroud -&gt; Suspend -&gt; Not running。</p>
<p>内存清除的时候应用终止运行。内存清除有两种情况，可能是系统强制清楚内存，也可能是由使用者从任务栏中手动清除。内存清除后如果应用再次运行，上一次的运行状态不会被保存，相对于应用第一次运行。</p>
<blockquote>
<p>在内存清除的场景下，应用不会调用任何方法，也不会发出任何通知。</p>
</blockquote>
<h1 id="iOS-API-简介"><a href="#iOS-API-简介" class="headerlink" title="iOS API 简介"></a>iOS API 简介</h1><p>iOS的整体架构图参见图2-28，分为4层-Cocoa Touch层，Media层，Core Service层和Core OS层。</p>
<h2 id="Cocoa-Touch层"><a href="#Cocoa-Touch层" class="headerlink" title="Cocoa Touch层"></a>Cocoa Touch层</h2><p>Cocoa Touch层提供了构建iOS应用的一些基本系统服务（如多任务、触摸输入和推送通知等）和关键框架。</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ConatactsUI</td>
<td>CN</td>
<td>访问通讯录相关UI类</td>
</tr>
<tr>
<td>EventKitUI</td>
<td>EK</td>
<td>访问日历事件数据</td>
</tr>
<tr>
<td>GameKit</td>
<td>GK</td>
<td>提供能够进行点对点通信的网络通信API</td>
</tr>
<tr>
<td>iAd</td>
<td>AD</td>
<td>广告API</td>
</tr>
<tr>
<td>MapKit</td>
<td>MK</td>
<td>地图API</td>
</tr>
<tr>
<td>MessageUI</td>
<td>MF</td>
<td>电子邮件消息相关API</td>
</tr>
<tr>
<td>PhotosUi</td>
<td>PF</td>
<td>照片API</td>
</tr>
<tr>
<td>Twitter</td>
<td>TW</td>
<td>提供发送Twitter API</td>
</tr>
<tr>
<td>UIKit</td>
<td>UK</td>
<td>提供UI类</td>
</tr>
<tr>
<td>WatchKit</td>
<td>Wk</td>
<td>Apple Watch相关类</td>
</tr>
</tbody>
</table>
<h2 id="Media层"><a href="#Media层" class="headerlink" title="Media层"></a>Media层</h2><p>Media层提供了图形、音频、视频和AirPlay技术等。</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Assets Library</td>
<td>Al</td>
<td>访问图片和视频的API</td>
</tr>
<tr>
<td>AudioToolBox</td>
<td>Audio</td>
<td>录制或播放视频、音频流以及格式转换</td>
</tr>
<tr>
<td>AudioUnit</td>
<td>Audio、AU</td>
<td>使用内置音频单元服务以及音频处理模块</td>
</tr>
<tr>
<td>AV Foundation</td>
<td>AV</td>
<td>播放与录制音频和视频的OC API</td>
</tr>
<tr>
<td>Core Audio</td>
<td>Audio</td>
<td>录制、制作、播放音频的C语言接口</td>
</tr>
<tr>
<td>Core Graphics</td>
<td>CG</td>
<td>提供Quartz 2D接口</td>
</tr>
<tr>
<td>Core Image</td>
<td>CI</td>
<td>操作视频和静态图像的接口</td>
</tr>
<tr>
<td>Core MIDI</td>
<td>MIDI</td>
<td>处理MIDI数据的底层API</td>
</tr>
<tr>
<td>Core Text</td>
<td>CT</td>
<td>渲染文本和处理字体的简单、高效的C语言接口</td>
</tr>
<tr>
<td>Core Video</td>
<td>CV</td>
<td>处理音频和视频的API</td>
</tr>
<tr>
<td>Image I/O</td>
<td>CG</td>
<td>读写图像数据类</td>
</tr>
<tr>
<td>GLKit</td>
<td>GLK</td>
<td>构建复杂OpenGL ES应用的OC应用类</td>
</tr>
<tr>
<td>Media Player</td>
<td>MP</td>
<td>播放接口</td>
</tr>
<tr>
<td>OpenAl</td>
<td>AL</td>
<td>包含了OpenAL（跨平台）的C接口</td>
</tr>
<tr>
<td>OpenGL ES</td>
<td>GL</td>
<td>包含OpenGL ES（跨平台的2D/3D图形库）的C语言接口</td>
</tr>
<tr>
<td>Quartz Core</td>
<td>CA</td>
<td>提供动画接口类</td>
</tr>
<tr>
<td>Sprite Kit</td>
<td>SK</td>
<td>苹果提供的基于2D游戏的开发引擎</td>
</tr>
<tr>
<td>Scene Kit</td>
<td>SCK</td>
<td>一种高级别的3D图像框架，能创建3D动画场景和特效</td>
</tr>
</tbody>
</table>
<h2 id="Core-Services层"><a href="#Core-Services层" class="headerlink" title="Core Services层"></a>Core Services层</h2><p>Core Services层提供了CloudKit、HealthKit、HomeKit、SQLite和XML支持等技术</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accounts</td>
<td>AC</td>
<td>用于访问用户的Twitter账户</td>
</tr>
<tr>
<td>Contacts</td>
<td>CN</td>
<td>访问通讯录信息</td>
</tr>
<tr>
<td>AdSupport</td>
<td>AS</td>
<td>获得iAd广告标识</td>
</tr>
<tr>
<td>CFNetwork</td>
<td>CF</td>
<td>提供了访问Wi-Fi网络和蜂窝移动网络的API</td>
</tr>
<tr>
<td>Core Data</td>
<td>NS</td>
<td>提供管理应用数据的ORM接口</td>
</tr>
<tr>
<td>CoreFoundation</td>
<td>CF</td>
<td>最基本的框架包括数据集</td>
</tr>
<tr>
<td>Core Location</td>
<td>CL</td>
<td>定位服务的API</td>
</tr>
<tr>
<td>CoreMedia</td>
<td>CM</td>
<td>提供AV Foundation框架使用的底层媒体类型，可以精确控制音频或视频的创建及展示</td>
</tr>
<tr>
<td>CoreMotion</td>
<td>CM</td>
<td>接收和处理重力加速度以及其他的运动操作</td>
</tr>
<tr>
<td>CoreTelephony</td>
<td>CT</td>
<td>提供访问电话基本信息的API</td>
</tr>
<tr>
<td>Event Kit</td>
<td>EK</td>
<td>访问日历事件数据</td>
</tr>
<tr>
<td>Foundation</td>
<td>NS</td>
<td>是OC最基本的框架</td>
</tr>
<tr>
<td>JavaScriptCore.framework</td>
<td>JS</td>
<td>实现OC与JS的相互调用</td>
</tr>
<tr>
<td>MobileCoreServices</td>
<td>UT</td>
<td>定义统一标识符类型（UIT）使用的底层类型</td>
</tr>
<tr>
<td>Newsstand Kit</td>
<td>NK</td>
<td>提供在后台下载杂志和新闻的API接口</td>
</tr>
<tr>
<td>Pass Kit</td>
<td>PK</td>
<td>提供访问优惠券的API</td>
</tr>
<tr>
<td>QuickLock</td>
<td>QL</td>
<td>提供预览无法直接查看的文件内容</td>
</tr>
<tr>
<td>Social</td>
<td>SL</td>
<td>提供社交网络访问API，中国区提供新浪微博的API</td>
</tr>
<tr>
<td>Store Kit</td>
<td>SK</td>
<td>提供处理应用内置收费的资金交易</td>
</tr>
<tr>
<td>SystemConfiguration</td>
<td>SC</td>
<td>用于确定设备的网络配置，也可以用于判断某个主机服务是否可以使用</td>
</tr>
<tr>
<td>Cloud Kit</td>
<td>CK</td>
<td>开发iCloud应用的API</td>
</tr>
<tr>
<td>Health Kit</td>
<td>HK</td>
<td>开发健康和健身等服务的API</td>
</tr>
<tr>
<td>Home Kit</td>
<td>HM</td>
<td>能够与用户家中连接的设备通信并进行控制</td>
</tr>
</tbody>
</table>
<h2 id="Core-OS层"><a href="#Core-OS层" class="headerlink" title="Core OS层"></a>Core OS层</h2><p>Core OS层提供了一些低级功能，一般不直接使用它。</p>
<table>
<thead>
<tr>
<th>框架</th>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accelerate</td>
<td>AC</td>
<td>访问重力加速计API</td>
</tr>
<tr>
<td>Core Bluetooth</td>
<td>CB</td>
<td>访问低功耗蓝牙设备API</td>
</tr>
<tr>
<td>External Accessory</td>
<td>EA</td>
<td>访问外围配件API接口</td>
</tr>
<tr>
<td>Generic Security Services</td>
<td>GSS</td>
<td>提供一组安全相关的服务</td>
</tr>
<tr>
<td>Security</td>
<td>CSSM</td>
<td>管理证书、公钥、私钥和安全信任策略的API</td>
</tr>
<tr>
<td>LocalAuthentication</td>
<td>LA</td>
<td>提供用户指定的安全策略进行安全认证</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DiffUtil在RecyclerView中的使用]]></title>
      <url>http://liuguoquan727.github.io/2016/11/25/Android%20DiffUtil%E5%9C%A8RecyclerView%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>DiffUtil是recyclerview support library v7 24.2.0版本中新增的类，根据Google官方文档的介绍，DiffUtil的作用是比较两个数据列表并能计算出一系列将旧数据表转换成新数据表的操作。这个概念比较抽象，换一种方式理解，DiffUtil是一个工具类，当你的RecyclerView需要更新数据时，将新旧数据集传给它，它就能快速告知adapter有哪些数据需要更新。</p>
<p>那么相比直接调用adapter.notifyDataSetChange()方法，使用DiffUtil有什么优势呢？它能在收到数据集后，提高UI更新的效率，而且你也不需要自己对新老数据集进行比较了。</p>
<p>顾名思义，凡是数据集的比较DiffUtil都能做，所以用处并不止于更新RecyclerView。DiffUtil也提供了回调让你可以进行其他操作。本文只介绍使用DiffUtil更新RecyclerView。</p>
<h1 id="DiffUtil简介"><a href="#DiffUtil简介" class="headerlink" title="DiffUtil简介"></a>DiffUtil简介</h1><p>在使用DiffUtil前我们先简单看看DiffUtil的特性。DiffUtil使用Eugene W. Myers的Difference算法来计算出将一个数据集转换为另一个的最小更新量，也就是用最简单的方式将一个数据集转换为另一个。除此之外，DiffUtil还可以识别一项数据在数据集中的移动。Eugene的算法对控件进行了优化，在查找两个数据集间最少加减操作时的空间复杂度为O(N)，时间复杂度为<code>O(N+D^2)</code>。而如果添加了对数据条目移动的识别，复杂度就会提高到<code>O(N^2)</code>。<strong>所以如果数据集中数据不存在移位情况，你可以关闭移动识别功能来提高性能。当数据集较大时，你应该在后台线程计算数据集的更新。</strong></p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="DiffUtil类"><a href="#DiffUtil类" class="headerlink" title="DiffUtil类"></a>DiffUtil类</h2><ul>
<li>DiffUtil.Callback：这是最核心的类,你可以将它理解成比较新老数据集时的规则。</li>
<li>DiffUtil：通过静态方法<code>DiffUtil.calculateDiff(DiffUtil.Callback)</code>来计算数据集的更新。</li>
<li>DiffResult：是DiffUtil的计算结果对象，通过<code>DiffResult.dispatchUpdatesTo(RecyclerView.Adapter)</code>来进行更新。</li>
</ul>
<p>代码模式为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> DiffCallBack(mDatas, newDatas), <span class="keyword">true</span>);</div><div class="line">mAdapter.setDatas(newDatas);</div><div class="line">diffResult.dispatchUpdatesTo(mAdapter);</div></pre></td></tr></table></figure>
<p><code>dispatchUpdatesTo()</code>方法它会自动计算新老数据集的差异，并根据差异情况，自动调用以下四个方法</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">adapter.notifyItemRangeInserted(position, <span class="built_in">count</span>)<span class="comment">;</span></div><div class="line">adapter.notifyItemRangeRemoved(position, <span class="built_in">count</span>)<span class="comment">;</span></div><div class="line">adapter.notifyItemMoved(fromPosition, toPosition)<span class="comment">;</span></div><div class="line">adapter.notifyItemRangeChanged(position, <span class="built_in">count</span>, payload)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="DiffUtil-Callback抽象类"><a href="#DiffUtil-Callback抽象类" class="headerlink" title="DiffUtil.Callback抽象类"></a>DiffUtil.Callback抽象类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回旧数据集的大小</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> The size of the old list.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getOldListSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回新数据集的大小</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> The size of the new list.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getNewListSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 比较两个Item对象是否是同一个对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> oldItemPosition The position of the item in the old list</div><div class="line">     * <span class="doctag">@param</span> newItemPosition The position of the item in the new list</div><div class="line">     * <span class="doctag">@return</span> True if the two items represent the same object or false if they are different.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 比较两个Item对象的内容是否相同</div><div class="line">     * Called by the DiffUtil when it wants to check whether two items have the same data.</div><div class="line">     * DiffUtil uses this information to detect if the contents of an item has changed.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * DiffUtil uses this method to check equality instead of &#123;<span class="doctag">@link</span> Object#equals(Object)&#125;</div><div class="line">     * so that you can change its behavior depending on your UI.</div><div class="line">     * For example, if you are using DiffUtil with a</div><div class="line">     * &#123;<span class="doctag">@link</span> android.support.v7.widget.RecyclerView.Adapter RecyclerView.Adapter&#125;, you should</div><div class="line">     * return whether the items' visual representations are the same.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * This method is called only if &#123;<span class="doctag">@link</span> #areItemsTheSame(int, int)&#125; returns</div><div class="line">     * &#123;<span class="doctag">@code</span> true&#125; for these items.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> oldItemPosition The position of the item in the old list</div><div class="line">     * <span class="doctag">@param</span> newItemPosition The position of the item in the new list which replaces the</div><div class="line">     *                        oldItem</div><div class="line">     * <span class="doctag">@return</span> True if the contents of the items are the same or false if they are different.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * areItemsTheSame()返回true而areContentsTheSame()返回false时调用，也就是说两个对象代表的数据是一条，但是内容更新了。</div><div class="line">     * When &#123;<span class="doctag">@link</span> #areItemsTheSame(int, int)&#125; returns &#123;<span class="doctag">@code</span> true&#125; for two items and</div><div class="line">     * &#123;<span class="doctag">@link</span> #areContentsTheSame(int, int)&#125; returns false for them, DiffUtil</div><div class="line">     * calls this method to get a payload about the change.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * For example, if you are using DiffUtil with &#123;<span class="doctag">@link</span> RecyclerView&#125;, you can return the</div><div class="line">     * particular field that changed in the item and your</div><div class="line">     * &#123;<span class="doctag">@link</span> android.support.v7.widget.RecyclerView.ItemAnimator ItemAnimator&#125; can use that</div><div class="line">     * information to run the correct animation.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Default implementation returns &#123;<span class="doctag">@code</span> null&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> oldItemPosition The position of the item in the old list</div><div class="line">     * <span class="doctag">@param</span> newItemPosition The position of the item in the new list</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> A payload object that represents the change between the two items.</div><div class="line">     */</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getChangePayload</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="DiffUtil步骤"><a href="#DiffUtil步骤" class="headerlink" title="DiffUtil步骤"></a>DiffUtil步骤</h2><ol>
<li>自定义类继承DiffUtil.Callback，通过重写特定方法给出数据比较逻辑。</li>
<li>调用<code>DiffUtil.calculateDiff(DiffUtil.Callback callback,boolean detectMove)</code>来计算更新，得到DiffResult对象。第二个参数可省，意为是否探测数据的移动，是否关闭需要根据数据集情况来权衡。当数据集很大时，此操作可能耗时较长，需要异步计算。</li>
<li>在UI线程中调用DiffResult.dispatchUpdatesTo(RecyclerView.Adapter)，而后Adapter的onBindViewHolder(RecyclerView.ViewHolder holder, int position, Listpayloads)。注意这个方法比必须覆盖的onBindViewHolder(RecyclerView.ViewHolder holder, int position)方法多一个参数payloads，而里面存储了数据的更新。</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="初始化RecyclerView"><a href="#初始化RecyclerView" class="headerlink" title="初始化RecyclerView"></a>初始化RecyclerView</h2><ul>
<li>新建一个Bean为Item：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.materialdesign.bean;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/10/18.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> id = <span class="number">0</span>;</div><div class="line">  <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>新建Adapter</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffUtilAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">DiffUtilAdapter</span>.<span class="title">DiffItemHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Context mContext;</div><div class="line">  <span class="keyword">private</span> List&lt;Item&gt; mDatas;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DiffUtilAdapter</span><span class="params">(Context context, List&lt;Item&gt; datas)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mContext = context;</div><div class="line">    <span class="keyword">this</span>.mDatas = datas;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatas</span><span class="params">(List&lt;Item&gt; mDatas)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mDatas = mDatas;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> DiffItemHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">    View view = LayoutInflater.from(mContext).inflate(R.layout.item_diff_util, parent, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DiffItemHolder(view);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(DiffItemHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    Item info = mDatas.get(position);</div><div class="line">    holder.mInfo.setText(info.getName());</div><div class="line">    Log.d(<span class="string">"lgq"</span>,<span class="string">"onBindViewHolder"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    <span class="comment">//payloads就是DiffUtil.Callback中的getChangePayload方法返回的数据集</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(DiffItemHolder holder, <span class="keyword">int</span> position, List&lt;Object&gt; payloads)</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (payloads.isEmpty()) &#123;</div><div class="line">      onBindViewHolder(holder,position);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//更新item</span></div><div class="line">      Bundle bundle = (Bundle) payloads.get(<span class="number">0</span>);</div><div class="line">      <span class="keyword">for</span>(String key : bundle.keySet()) &#123;</div><div class="line">        <span class="keyword">switch</span> (key) &#123;</div><div class="line">          <span class="keyword">case</span> <span class="string">"name"</span>:</div><div class="line">            holder.mInfo.setText((CharSequence) bundle.get(key));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mDatas != <span class="keyword">null</span> ? mDatas.size() : <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffItemHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.info) TextView mInfo;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiffItemHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>(itemView);</div><div class="line">      ButterKnife.bind(<span class="keyword">this</span>, itemView);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>初始化ReyclerView</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>;i++) &#123;</div><div class="line">    Item item = <span class="keyword">new</span> Item(i,<span class="string">"liu"</span>+i);</div><div class="line">    mDatas.add(item);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  mAdapter = <span class="keyword">new</span> DiffUtilAdapter(<span class="keyword">this</span>,mDatas);</div><div class="line">  mList.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>,LinearLayoutManager.VERTICAL,<span class="keyword">false</span>));</div><div class="line">  mList.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</div><div class="line">  mList.setAdapter(mAdapter);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化RecyclerView后效果为：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/diff-normal.png" alt=""></p>
<h2 id="实现DiffUtil-Callback"><a href="#实现DiffUtil-Callback" class="headerlink" title="实现DiffUtil.Callback"></a>实现DiffUtil.Callback</h2><p>新建类继承DiffUtil.Callback</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffCallback</span> <span class="keyword">extends</span> <span class="title">DiffUtil</span>.<span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> List&lt;Item&gt; mOldDatas;</div><div class="line">  <span class="keyword">private</span> List&lt;Item&gt; mNewDatas;</div><div class="line"></div><div class="line">  <span class="comment">//传入旧数据和新数据的集合</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DiffCallback</span><span class="params">(List&lt;Item&gt; oldDatas,List&lt;Item&gt; newDatas)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mOldDatas = oldDatas;</div><div class="line">    <span class="keyword">this</span>.mNewDatas = newDatas;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOldListSize</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mOldDatas != <span class="keyword">null</span> ? mOldDatas.size() : <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNewListSize</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mNewDatas != <span class="keyword">null</span> ? mNewDatas.size() : <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 被DiffUtil调用，用来判断 两个对象是否是相同的Item。</div><div class="line">   * 例如，如果你的Item有唯一的id字段，这个方法就 判断id是否相等。</div><div class="line">   * 本例判断id字段是否一致</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> is = mOldDatas.get(oldItemPosition).id == mNewDatas.get(newItemPosition).id;</div><div class="line">    Log.d(<span class="string">"lgq"</span>,<span class="string">"areItemsTheSame "</span> +oldItemPosition + <span class="string">" "</span> + newItemPosition + <span class="string">" "</span> + is);</div><div class="line">    <span class="keyword">return</span> is;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/*</span></div><div class="line">   * 被DiffUtil调用，用来检查 两个item是否含有相同的数据</div><div class="line">   * 这个方法仅仅在areItemsTheSame()返回true时，才调用。</div><div class="line">   * @param oldItemPosition The position of the item in the old list</div><div class="line">   * @param newItemPosition The position of the item in the new list which replaces the</div><div class="line">   *                        oldItem</div><div class="line">   * @return True if the contents of the items are the same or false if they are different.</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">    String oldName = mOldDatas.get(oldItemPosition).getName();</div><div class="line">    String newName = mNewDatas.get(newItemPosition).getName();</div><div class="line">    Log.d(<span class="string">"lgq"</span>,<span class="string">"areContentsTheSame"</span></div><div class="line">        + <span class="string">" "</span> +oldName + <span class="string">" "</span> + newName);</div><div class="line">    <span class="keyword">if</span> (!oldName.equals(newName)) &#123;</div><div class="line">      Log.d(<span class="string">"lgq"</span>,<span class="string">"false"</span>);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * areItemsTheSame()返回true而areContentsTheSame()返回false，也就是说两个对象代表的数据是一条，但是内容更新了。</div><div class="line">   * <span class="doctag">@param</span> oldItemPosition</div><div class="line">   * <span class="doctag">@param</span> newItemPosition</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="meta">@Nullable</span> <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">getChangePayload</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</div><div class="line">    String oldItem = mOldDatas.get(oldItemPosition).getName();</div><div class="line">    String newItem = mNewDatas.get(newItemPosition).getName();</div><div class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">    <span class="keyword">if</span> (!oldItem.equals(newItem)) &#123;</div><div class="line">        bundle.putString(<span class="string">"name"</span>,newItem);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bundle.size() == <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    Log.d(<span class="string">"lgq"</span>,<span class="string">"getChangePayload"</span>);</div><div class="line">    <span class="keyword">return</span> bundle;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用DiffUtil"><a href="#使用DiffUtil" class="headerlink" title="使用DiffUtil"></a>使用DiffUtil</h2><p>下面通过两种不同的改变RecyclerView条目来介绍DiffUtil的使用。</p>
<ul>
<li>增加或删除条目</li>
</ul>
<p>这种情况下，数据集的大小改变，反映在RecyclerView的效果就是增加或者删除条目</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  mNewDatas.clear();</div><div class="line">  mNewDatas.addAll(mDatas);</div><div class="line">  mNewDatas.add(<span class="keyword">new</span> Item(<span class="number">89</span>,<span class="string">"xiao"</span>));</div><div class="line">  mNewDatas.add(<span class="keyword">new</span> Item(<span class="number">90</span>,<span class="string">"xia"</span>));</div><div class="line">  DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> DiffCallback(mDatas,mNewDatas),<span class="keyword">true</span>);</div><div class="line">  mAdapter.setDatas(mNewDatas);</div><div class="line">  diffResult.dispatchUpdatesTo(mAdapter);</div><div class="line">  mDatas.clear();</div><div class="line">  mDatas.addAll(mNewDatas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>增加条目后的RecyclerView的效果为：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/diff-after-add.png" alt=""></p>
<ul>
<li>更新具体的条目</li>
</ul>
<p>这种情况下数据集大小不改变，改变数据集中条目的内容，反映在RecyclerView的效果就是更新具体的条目，这回调用Callback中的getChangePayload方法，而Adapter必须要实现<code>public void onBindViewHolder(DiffItemHolder holder, int position, List&lt;Object&gt; payloads)</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</div><div class="line">  mNewDatas.clear();</div><div class="line">  mNewDatas.addAll(mDatas);</div><div class="line">  <span class="comment">//改变第三个位置的对象</span></div><div class="line">  Item item = <span class="keyword">new</span> Item(<span class="number">3</span>,<span class="string">"zhang"</span>);</div><div class="line">  mNewDatas.remove(<span class="number">3</span>);</div><div class="line">  mNewDatas.add(<span class="number">3</span>,item);</div><div class="line">  DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(<span class="keyword">new</span> DiffCallback(mDatas,mNewDatas),<span class="keyword">true</span>);</div><div class="line">  <span class="comment">//将新数据给Adapter</span></div><div class="line">  mAdapter.setDatas(mNewDatas);</div><div class="line">  diffResult.dispatchUpdatesTo(mAdapter);</div><div class="line">  mDatas.clear();</div><div class="line">  mDatas.addAll(mNewDatas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更新条目后的RecyclerView效果为：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/diff-after-refresh.png" alt=""></p>
<p>由图可知，第四个位置的条目显示变为zhang。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>DiffUtil可用于高效进行RecyclerView的数据更新，但DiffUtil本身的作用是计算数据集的最小更新。DiffUtil有强大的算法支撑，可以利用DiffUtil完成许多其他功能。</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p><a href="https://github.com/liuguoquan727/MaterialDesignDemo/blob/master/app/src/main/java/com/michael/materialdesign/recyclerview/DiffUtilActivity.java" target="_blank" rel="external">在RecyclerView目录下</a></p>
<p>参考文章:</p>
<p><a href="http://blog.chengdazhi.com/index.php/231?sukey=3997c0719f151520abc3703315e3fef6e18ec9dce4f81882490fce74f3aae8be1eb373fcd36a9b3faaddddcea988dbfa" target="_blank" rel="external">使用DiffUtil高效更新RecyclerView</a><br><a href="http://blog.csdn.net/zxt0601/article/details/52562770" target="_blank" rel="external">详解7.0带来的新工具类：DiffUtil</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android LoaderManager使用详解]]></title>
      <url>http://liuguoquan727.github.io/2016/09/12/Android_LoaderManager%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="LoaderManager是什么？"><a href="#LoaderManager是什么？" class="headerlink" title="LoaderManager是什么？"></a>LoaderManager是什么？</h1><p>LoaderManager用来负责管理与Activity或者Fragment联系起来的一个或多个Loaders对象。每个Activity或者Fragment都有唯一的一个LoaderManager实例，用来启动、停止、保持、重启、关闭它的Loaders。这些事件有时直接在客户端通过调用initLoader()/restartLoader()/destroyLoader()函数来实现。通常这些事件通过主要的Activity/Fragment声明周期事件来触发，而不是手动（当然也可以手动调用）。比如，当一个Activity关闭时（destroyed），改活动将指示它的LoaderManager来销毁并且关闭它的Loaders（当然也会销毁并关闭与这些Loaders关联的资源，比如Cursor）。  </p>
<p>LoaderManager并不知道数据如何装载以及何时需要装载。相反地，LoaderManager只需要控制它的Loaders们开始、停止、重置他们的Load行为，在配置变换（比如横竖屏切换）时保持loaders们的状态，并提供一个简单的接口来获取load结果到客户端中。</p>
<h1 id="实现LoaderManager-LoaderCallbacks接口"><a href="#实现LoaderManager-LoaderCallbacks接口" class="headerlink" title="实现LoaderManager.LoaderCallbacks接口"></a>实现LoaderManager.LoaderCallbacks<d>接口</d></h1><p>LoaderManager.LoaderCallbacks<d>接口LoaderManager用来向客户返回数据的方式。每个Loader都有自己的回调对象供与LoaderManager进行交互。该回调对象在实现LoaderManager中地位很高，告诉LoaderManager如何实例化Loader(onCreateLoader)，以及当载入行为结束或者重启（onLoadFinished或者onLoadReset）之后执行什么操作。大多数情况，你需要把该接口实现为组件的一部分，比如说让你的Activity或者Fragment实现LoadManager.LoaderCallbacks<d>接口。</d></d></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LoaderManager</span>.<span class="title">LoaderCallbacks</span>&lt;<span class="title">D</span>&gt; </span>&#123;  </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Loader&lt;D&gt; <span class="title">onCreateLoader</span><span class="params">(<span class="keyword">int</span> id, Bundle args)</span> </span>&#123; ... &#125;  </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(Loader&lt;D&gt; loader, D data)</span> </span>&#123; ... &#125;  </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoaderReset</span><span class="params">(Loader&lt;D&gt; loader)</span> </span>&#123; ... &#125;  </div><div class="line"></div><div class="line">  <span class="comment">/* ... */</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦实现该接口，客户端将回调对象（本例中为“this”）作为LoaderManager的initLoader函数的第三个参数传输。<br>总的来说，实现回调接口非常直接明了。每个回调方法都有各自明确的与LoaderManager进行交互的目的：</p>
<ul>
<li>onCreateLoader是一个工厂方法，用来返回一个新的Loader。LoaderManager将会在它第一次创建Loader的时候调用该方法。</li>
<li>onLoadFinished方法将在Loader创建完毕的时候自动调用。典型用法是，当载入数据完毕，客户端（译者注：调用它的Activity之类的）需要更新应用UI。客户端假设每次有新数据的时候，新数据都会返回到这个方法中。记住，检测数据源是Loader的工作，Loader也会执行实际的同步载入操作。一旦Loader载入数据完成，LoaderManager将会接受到这些载入数据，并且将将结果传给回调对象的onLoadFinished方法，这样客户端（比如Activity或者Fragment）就能使用该数据了。</li>
<li>最后，当Loader们的数据被重置的时候将会调用onLoadReset。该方法让你可以从就的数据中移除不再有用的数据。</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.loadermanagerdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.os.Looper;</div><div class="line"><span class="keyword">import</span> android.provider.MediaStore;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.LoaderManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.CursorLoader;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.FileProvider;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.Loader;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.PermissionChecker;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> com.orhanobut.logger.Logger;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">LoaderManager</span>.<span class="title">LoaderCallbacks</span>&lt;<span class="title">Cursor</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] PROJECTION = <span class="keyword">new</span> String[] &#123; MediaStore.Images.Media._ID, MediaStore.Images.Media.DATA &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">final</span> String[] DOC_PROJECTION = &#123;</div><div class="line">      MediaStore.Files.FileColumns.DATA,</div><div class="line">      MediaStore.Files.FileColumns.MIME_TYPE,</div><div class="line">      MediaStore.Files.FileColumns.TITLE</div><div class="line"></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOADER_ID = <span class="number">1</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOADER_FILE_ID = <span class="number">2</span>;</div><div class="line"></div><div class="line">  LoaderManager mLoaderManager;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    Logger.init(<span class="string">"loader"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//1.获取LoadManager实例</span></div><div class="line">    mLoaderManager = getSupportLoaderManager();</div><div class="line">    <span class="comment">//2.设置LoadManager传输的参数</span></div><div class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">    bundle.putString(<span class="string">"liu"</span>,<span class="string">"liuguoquan"</span>);</div><div class="line">    <span class="comment">//3.初始化LoadManager</span></div><div class="line">    mLoaderManager.initLoader(LOADER_FILE_ID,bundle,<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Loader&lt;Cursor&gt; <span class="title">onCreateLoader</span><span class="params">(<span class="keyword">int</span> id, Bundle bundle)</span> </span>&#123;</div><div class="line">    Logger.d(<span class="string">"bundle: "</span> + bundle.getString(<span class="string">"liu"</span>));</div><div class="line">    <span class="keyword">if</span> (id == LOADER_ID) &#123;</div><div class="line">      <span class="comment">//获取图片信息</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CursorLoader(MainActivity.<span class="keyword">this</span>, MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</div><div class="line">          PROJECTION, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == LOADER_FILE_ID) &#123;</div><div class="line">      <span class="comment">//获取文件名</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CursorLoader(MainActivity.<span class="keyword">this</span>,MediaStore.Files.getContentUri(<span class="string">"external"</span>),DOC_PROJECTION,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(Loader&lt;Cursor&gt; loader, Cursor cursor)</span> </span>&#123;</div><div class="line">    <span class="comment">//创建完毕后调用</span></div><div class="line">    <span class="keyword">switch</span> (loader.getId()) &#123;</div><div class="line">      <span class="keyword">case</span> LOADER_ID:</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">          Long id = cursor.getLong(<span class="number">0</span>);</div><div class="line">          String data = cursor.getString(<span class="number">1</span>);</div><div class="line">          Log.d(<span class="string">"loader"</span>,<span class="string">"id:"</span> + id + <span class="string">"; data: "</span> + data);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="keyword">case</span> LOADER_FILE_ID:</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">          String title =  cursor.getString(<span class="number">2</span>);</div><div class="line">          Log.d(<span class="string">"loader"</span>,<span class="string">"title: "</span> + title);</div><div class="line">        &#125;</div><div class="line">        cursor.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoaderReset</span><span class="params">(Loader&lt;Cursor&gt; loader)</span> </span>&#123;</div><div class="line">    <span class="comment">//数据重置时调用</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/murphykwu/article/details/35288477" target="_blank" rel="external">LoaderManager使用详解（三）—实现Loaders</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android设计模式(十一)观察者模式]]></title>
      <url>http://liuguoquan727.github.io/2016/06/09/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%8D%81%E4%B8%80)%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>观察者模式是一个使用率非常高的模式，它最常用的地方是GUI系统、订阅-发布系统，因为这个模式的一个重要作用就是解耦，将被观察者和观察者解耦，使得它们之间的依赖性更小，甚至做到毫无依赖。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>关联行为场景，需要注意的是，关联行为是可拆分的，而不是组合关系；</li>
<li>事件多级触发场景；</li>
<li>跨系统的消息交换场景，如消息队列、事件总线的处理机制；</li>
</ul>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8FUML.png" alt=""></p>
<p>角色介绍：</p>
<ul>
<li>Subject：抽象主题，也就是被观察者(Observable)角色，抽象主题角色把所有观察者对象的引用保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li>
<li>ConcreteSubject：具体主题，该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发出通知，具体主题角色又叫做具体被观察者(ConcreteObservable)角色。</li>
<li>Observer：抽象观察者，该角色是观察者的抽象类，它定义了一个更新接口，使得在得到主题的更改通知时更新自己。</li>
<li>ConcreteObserver：具体的观察者，该角色实现抽象观察者角色所定义的更新接口，以便在主题的主题发生改变时更新自身的状态。</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>发布-订阅模式也称为观察者模式。下面通过实例来了解观察者模式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 程序员是观察者</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> java.util.Observable;</div><div class="line"><span class="keyword">import</span> java.util.Observer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coder</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String mName;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Coder</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">		<span class="keyword">this</span>.mName = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Hi,"</span> + mName + <span class="string">"更新啦，内容是: "</span> + arg);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Coder [mName="</span> + mName + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 被观察者，发布者</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> java.util.Observable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevTechFrontier</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postNewPublication</span><span class="params">(String content)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//标识状态或内容改变</span></div><div class="line">		setChanged();</div><div class="line"></div><div class="line">		<span class="comment">//通知所有观察者</span></div><div class="line">		notifyObservers(content);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		DevTechFrontier devTechFrontier = <span class="keyword">new</span> DevTechFrontier();</div><div class="line"></div><div class="line">		Coder coder = <span class="keyword">new</span> Coder(<span class="string">"liu"</span>);</div><div class="line">		Coder coder2 = <span class="keyword">new</span> Coder(<span class="string">"lee"</span>);</div><div class="line">		Coder coder3 = <span class="keyword">new</span> Coder(<span class="string">"zhang"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//注册观察者到观察者列表中</span></div><div class="line">		devTechFrontier.addObserver(coder);</div><div class="line">		devTechFrontier.addObserver(coder2);</div><div class="line">		devTechFrontier.addObserver(coder3);</div><div class="line"></div><div class="line">		<span class="comment">//发布消息</span></div><div class="line">		devTechFrontier.postNewPublication(<span class="string">"新一期周报发布啦!"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">Hi,zhang更新啦，内容是: 新一期周报发布啦!</div><div class="line">Hi,lee更新啦，内容是: 新一期周报发布啦!</div><div class="line">Hi,liu更新啦，内容是: 新一期周报发布啦!</div></pre></td></tr></table></figure>
<p>Observer和Observable是JDK中的内置类型，可见观察者模式是非常重要的，这里Observer是抽象的观察者角色，Coder是具体观察者角色；Observable是抽象的主题角色，DevTechFrontier是具体的主题角色。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>观察者模式主要的作用就是对象解耦，经观察者与被观察者完全隔离，只依赖于Observer和Observable抽象。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>观察者和被观察者之间是抽象耦合，应对业务变化。</li>
<li>增强系统灵活性、可扩展性。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>在Java中消息的通知默认是顺序执行的，一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般考虑采用异步的方式。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android设计模式(五)抽象工厂模式]]></title>
      <url>http://liuguoquan727.github.io/2016/06/07/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>抽象工厂模式也是创建型设计模式之一。抽象工厂模式起源于以前对不同操作系统的图形化解决方案，如果不同操作系统中的按钮和文本控件其实现不同、展示效果也不一样，对于每一种操作系统其本身就构成一个产品类，而按钮与文本控件也构成一个产品类，两种产品类两种变化，各自有各自的特性。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>为创建一组相关或是相互依赖的对象提供一个接口，而不需要指定它们的具体类。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>一个对象族有相同约束时可以使用抽象工厂模式？比如Android、iOS、Window Phone下都有短信软件和拨号软件，两者都属于SoftWare软件范畴，但是它们所在的平台不一样，即便是同一家公司出品的软件，其代码实现逻辑也是不同的，这时就可以考虑使用抽象工厂方法模式来产生Android、iOS、Window Phone下的短信和拨号软件。</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8FUML%E7%B1%BB%E5%9B%BE.png" alt=""></p>
<p>主要有四类角色：</p>
<ul>
<li><p>AbstractFactory：抽象工厂类，它声明了一组用于创建一种产品的方法，每一种方法对应一中产品，类图中分别创建产品A和产品B。</p>
</li>
<li><p>ConcreteFactory：具体工厂类，它实现类在抽象工厂中定义的创建产品的方法，生成一组具体产品，这些产品构成一个产品种类。如类图中的ConcreteFactory1和ConcreteFactory2.</p>
</li>
<li><p>AbstractProduct：抽象产品类，它为每种产品声明接口，如类图中的AbstractProductA和AbstractProductB。</p>
</li>
<li><p>ConcreteProduct：具体产品类，它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的方法，如类图中的ConcreteProductA1、ConcreteProductB1、ConcreteProductA2、ConcreteProductB2。</p>
</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>在工厂模式中，以小明的车厂为例讲述了工厂方法模式，但是小明后来发现一个问题，虽然Q3、Q5都是一个车系，但是三者之间的零部件差别却是很大，使用了不同的发动机、轮胎、制动系统等零部件。Q3、Q7对应的是一系列车，而发动机、轮胎、制动系统则对应的是一系列零部件，两者是不同的产品类型，这是就可以将抽象工厂模式应用其中，首先，汽车工厂需要生产轮胎、发动机、制动系统这3种部件，然后再根据车型组装这些零部件。</p>
<ul>
<li>抽象车厂类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *生产轮胎</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ITire <span class="title">createTire</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 生产发动机</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IEngine <span class="title">createEngine</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 生产制动系统</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IBrake <span class="title">createBrake</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是零部件产品类：</p>
<ul>
<li>轮胎相关类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITire</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tire</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalTire</span> <span class="keyword">implements</span> <span class="title">ITire</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tire</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"普通轮胎"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SUVTire</span> <span class="keyword">implements</span> <span class="title">ITire</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tire</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"SUV 轮胎"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>发动机相关类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEngine</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">engine</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomesticEngine</span> <span class="keyword">implements</span> <span class="title">IEngine</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">engine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"国产发动机"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeignEngine</span> <span class="keyword">implements</span> <span class="title">IEngine</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">engine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"进口发动机"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>制动系统相关类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBrake</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brake</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalBrake</span> <span class="keyword">implements</span> <span class="title">IBrake</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brake</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"普通刹车"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeniorBrake</span> <span class="keyword">implements</span> <span class="title">IBrake</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brake</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"高级刹车"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是具体车型的生产工厂类:</p>
<ul>
<li>生产工厂类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Q3工厂类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Q3Factory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ITire <span class="title">createTire</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> NormalTire();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IEngine <span class="title">createEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DomesticEngine();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBrake <span class="title">createBrake</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> NormalBrake();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Q7工厂类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Q7Factory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ITire <span class="title">createTire</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SUVTire();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IEngine <span class="title">createEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ForeignEngine();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBrake <span class="title">createBrake</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SeniorBrake();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>客户类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//构造Q3的工厂</span></div><div class="line">		CarFactory factoryQ3 = <span class="keyword">new</span> Q3Factory();</div><div class="line">		factoryQ3.createTire().tire();;</div><div class="line">		factoryQ3.createEngine().engine();;</div><div class="line">		factoryQ3.createBrake().brake();</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"--------------------"</span>);</div><div class="line">		<span class="comment">//构造Q7的工厂</span></div><div class="line">		CarFactory factoryQ7 = <span class="keyword">new</span> Q7Factory();</div><div class="line">		factoryQ7.createTire().tire();;</div><div class="line">		factoryQ7.createEngine().engine();;</div><div class="line">		factoryQ7.createBrake().brake();;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">普通轮胎</div><div class="line">国产发动机</div><div class="line">普通刹车</div><div class="line">--------------------</div><div class="line">SUV 轮胎</div><div class="line">进口发动机</div><div class="line">高级刹车</div></pre></td></tr></table></figure>
<p>上面只是模拟了Q3和Q7的工厂，如果需要增加Q5的工厂，那么对于的轮胎、制动系统、发动机类又要增加，这里看出抽象工厂类的一个弊端就是类大量增加，如果工厂类过多，势必导致类文件非常多。因此开发中一定要权衡利弊。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>一个显著的优点是分离接口与实现，客户端使用抽象工厂来创建需要的对象，而客户端根本就不知道具体的实现是谁，客户端只是面向产品的接口编程而已，使其从具体的产品实现中解耦，同时基于接口与实现的分离，使抽象该工厂方法模式在切换产品类时更加灵活简单。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>一是类文件的爆炸性增加，二是不太容易扩展新的产品类，因为每当我们增加一个产品类就需要修改抽象工厂，那么所有的具体工厂类均会修改。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android设计模式(四)工厂方法模式]]></title>
      <url>http://liuguoquan727.github.io/2016/06/07/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>工厂方法模式是创建型设计模式之一。工厂方法模式是一种结构简单的模式。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>定义一个用于创建对象的接口，让子类决定实例化哪个类。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>在任何需要生成复杂对象的地方，都可以使用工厂方法模式。复杂对象适合使用工厂模式，用new就可以完成创建的对象无需使用工厂对象。</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95UML%E7%B1%BB%E5%9B%BE.png" alt=""></p>
<p>这里的角色主要分为四个模块：</p>
<ol>
<li>抽象工厂Factory，其为工厂方法的核心；</li>
<li>具体工厂ConcreteFactory，实现了具体的业务逻辑；</li>
<li>抽象产品Product，是工厂方法模式所创建的产品的父类；</li>
<li>具体产品ConcreteFactory，实现抽象产品的某个具体产品的对象；</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>小明是一家汽车厂的厂长，对他来说，组装汽车就是讲一些进口的核心部件，比如发动机和一些零部件组装起来，小明的汽车厂主要组装某款SUV车型，比如Q3、Q5，对于这类车型来说内部结构差异并不是很大，因此小明只需要一条生产线就足以应付这2种车型，对于该类生产线小明提供一个抽象类定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象生产线类</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 某车型的工厂方法</div><div class="line">	 * <span class="doctag">@param</span> clz 具体的车型类</div><div class="line">	 * <span class="doctag">@return</span> 具体型号的车对象</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends AudiCar&gt; <span class="function">T <span class="title">createAudiCar</span><span class="params">(Class&lt;T&gt; clz)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生产线的具体实现类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 生产线具体类</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiCarFactory</span> <span class="keyword">extends</span> <span class="title">AudiFactory</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> &lt;T extends AudiCar&gt; <span class="function">T <span class="title">createAudiCar</span><span class="params">(Class&lt;T&gt; clz)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		AudiCar car = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			car = (AudiCar) Class.forName(clz.getName()).newInstance();</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> (T) car;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于这两种车型，除了一些车的基本共性之外，还提供了自动导航功能，这些都使用一个抽象的基本类来声明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 汽车的抽象产品类</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiCar</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 行为方法，车可以驾驶</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 行为方法，车可以自动导航</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">selfNavigation</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是具体的车型了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiQ3</span> <span class="keyword">extends</span> <span class="title">AudiCar</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Q3 run"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfNavigation</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Q3 navi"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiQ5</span> <span class="keyword">extends</span> <span class="title">AudiCar</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Q5 run"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfNavigation</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"Q5 navi"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们将各个类组装起来形成一条完整的流水线：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		AudiFactory factory = <span class="keyword">new</span> AudiCarFactory();</div><div class="line"></div><div class="line">		AudiQ3 audiQ3 = factory.createAudiCar(AudiQ3.class);</div><div class="line">		audiQ3.drive();</div><div class="line">		audiQ3.selfNavigation();</div><div class="line"></div><div class="line">		AudiQ5 audiQ5 = factory.createAudiCar(AudiQ5.class);</div><div class="line">		audiQ5.drive();</div><div class="line">		audiQ5.selfNavigation();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">Q3 run</div><div class="line">Q3 navi</div><div class="line">Q5 run</div><div class="line">Q5 navi</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，工厂方法模式是一个很好的设计模式，但是也存在缺点，就是每次我们为工厂方法模式添加新的产品时就要编写一个新的产品类，同时还要引入抽象层，这必然导致类结构的复杂化，所以工作中需要权衡。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android设计模式之(三)原型模式]]></title>
      <url>http://liuguoquan727.github.io/2016/06/04/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B(%E4%B8%89)%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>原型模式是一种创建型的模式。原型表示该模式有一个样板实例，用户从这个样板对象中复制出一个内部属性一致的对象，被复制的实例就称为原型。原型模式多用于创复杂的或者构造耗时的实例，因为这种情况下，复制一个已经存在的实例可以使程序运行更高效。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol>
<li>类初始化需要消耗非常多的资源，包括数据、硬件资源等，通过原型拷贝避免这些消耗。</li>
<li>通过new产生一个对象需要非常繁琐的数据准备或访问权限，这时可以使用原型模式。</li>
<li>一个对象需要提供给其他对象访问，而且各个调用者可能需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。</li>
</ol>
<p>需要注意的是，通过实现Cloneable接口的原型模式在调用clone函数构造实例时并不一定比通过new操作速度快，只有当通过new构造对象较为耗时或者资源消耗比较大时，通过clone方法才能获得效率上的提升。因此，使用Cloneable时需要考虑构建对象的成本以及做一些效率上的测试。当然，实现原型模式也并不一定非要实现Cloneable接口，也有其他的实现方式。</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>原型模式的UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8FUML%E7%B1%BB%E5%9B%BE.png" alt="原型模式的UML类图"></p>
<p>角色介绍：</p>
<ul>
<li>Client：客户端用户</li>
<li>Prototype：抽象类或者接口，声明具clone的能力</li>
<li>ConcretePrototype：具体的原型类</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>下面以简单的文档拷贝为例来演示一下简单的原型模式，例子中首先创建一个文档对象，即WordDocument，这个文档包括文字和图片。用户经过产时间的内容编辑后，打开该文档做进一步的编辑，但是这个文档编辑后是否被采用还不确定，因此为了安全起见，用户需要将当前文档拷贝一份，然后再在这个文档副本上进行修改。如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.prototype;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 文档类型，扮演的是ConcretePrototype角色，而Cloneable是代表Prototype角色</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordDocument</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//文本</span></div><div class="line">	<span class="keyword">private</span> String text;</div><div class="line"></div><div class="line">	<span class="comment">//图片名列表</span></div><div class="line">	<span class="keyword">private</span> ArrayList&lt;String&gt; images = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WordDocument</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">		System.out.println(<span class="string">"---WordDocument构造函数---"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> text;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.text = text;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getImages</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> images;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		images.add(image);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> WordDocument <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			WordDocument document = (WordDocument) <span class="keyword">super</span>.clone();</div><div class="line">			document.text = <span class="keyword">this</span>.text;</div><div class="line">			<span class="comment">//浅拷贝</span></div><div class="line">			document.images = <span class="keyword">this</span>.images;</div><div class="line">			<span class="comment">//深拷贝</span></div><div class="line"><span class="comment">//			document.images = (ArrayList&lt;String&gt;) this.images.clone();</span></div><div class="line">			<span class="keyword">return</span> document;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"WordDocument [text="</span> + text + <span class="string">", images="</span> + images + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> com.lgq.pattern.prototype;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		WordDocument document = <span class="keyword">new</span> WordDocument();</div><div class="line">		document.setText(<span class="string">"这是一篇文档"</span>);</div><div class="line">		document.addImage(<span class="string">"image1"</span>);</div><div class="line">		document.addImage(<span class="string">"image2"</span>);</div><div class="line">		System.out.println(document.toString());</div><div class="line"></div><div class="line">		<span class="comment">//拷贝一份副本</span></div><div class="line">		WordDocument document2 = document.clone();</div><div class="line">		System.out.println(document2.toString());</div><div class="line">		<span class="comment">//修改文档副本，不会影响原始文档</span></div><div class="line">		document2.setText(<span class="string">"这是修改过的document2文档"</span>);</div><div class="line">		System.out.println(document2.toString());</div><div class="line"></div><div class="line">		System.out.println(document.toString());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">---WordDocument构造函数---</div><div class="line">WordDocument [text=这是一篇文档, images=[image1, image2]]</div><div class="line">WordDocument [text=这是一篇文档, images=[image1, image2]]</div><div class="line">WordDocument [text=这是修改过的document2文档, images=[image1, image2]]</div><div class="line">WordDocument [text=这是一篇文档, images=[image1, image2]]</div></pre></td></tr></table></figure>
<p>需要注意的是，<strong>上述的例子中WordDocument的构造函数只运行了一次，通过clone拷贝对象时并不会执行构造函数！</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原型模式本质上是对象拷贝，容易出现的问题是深拷贝、浅拷贝。使用原型模式可以解决构建复杂对象的资源消耗问题，能够在某些场景下提升创建对象的效率。还有一个重要用途就是保护性拷贝，也就是某个对象对外可能是只读的，为了防止外部对这个只读对象修改，通过可以通过返回一个对象拷贝的形式实现只读的限制。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>原型模式是在内存中二进制流的拷贝，要比直接new一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>直接在内存中拷贝时，构造函数是不会执行的，在实际开发中应该注意这个潜在的问题。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android设计模式之(二)Builder模式]]></title>
      <url>http://liuguoquan727.github.io/2016/06/03/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B(%E4%BA%8C)Builder%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Builder模式是一步一步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，更精细地控制对象的构造流程。该模式是为了将构建复杂对象的过程和它的部件解耦，使得构建过程和部件的表示隔离开来。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol>
<li>相同的方法，不同的执行顺序，产生不同的事件结果时；</li>
<li>多个部件或零件都可以装配到一个对象中，但是产生的运行结果又不相同时；</li>
<li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的作用，这个时候使用建造者模式非常适合；</li>
<li>当初始化一个对象特别复杂，如参数多，且很多参数都具有默认值的情况下；</li>
</ol>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>UML类图角色介绍：</p>
<ul>
<li>Product产品类-产品的抽象类；</li>
<li>Builder-抽象Builder类，规范产品的组建，一般由子类实现具体的组件过程；</li>
<li>ConcreteBuilder-具体的Builder类,组装对象；</li>
</ul>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-Builder%E6%A8%A1%E5%BC%8FUML%E7%B1%BB%E5%9B%BE.png" alt="Builder模式UML"></p>
<h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.builder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Computer抽象类 即 Product角色</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">protected</span> String mBoard;</div><div class="line">	<span class="keyword">protected</span> String mDisplay;</div><div class="line">	<span class="keyword">protected</span> String mOS;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//设置主板</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoard</span><span class="params">(String mBoard)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.mBoard = mBoard;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//设置显示器</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">(String mDisplay)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.mDisplay = mDisplay;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//设置操作系统</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setOs</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Computer [mBoard="</span> + mBoard + <span class="string">", mDisplay="</span> + mDisplay + <span class="string">", mOS="</span> + mOS + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.builder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 具体的Computer类</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBookPro</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MacBookPro</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOs</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mOS = <span class="string">"Mac OS X 10.11"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.builder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象Builder</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder <span class="title">setBoard</span><span class="params">(String board)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder <span class="title">setDisplay</span><span class="params">(String display)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Builder <span class="title">setOs</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">create</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lgq.pattern.builder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Builder具体实现类</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBookBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Computer mComputer = <span class="keyword">new</span> MacBookPro();</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Builder <span class="title">setBoard</span><span class="params">(String board)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mComputer.setBoard(board);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Builder <span class="title">setDisplay</span><span class="params">(String display)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mComputer.setDisplay(display);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Builder <span class="title">setOs</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mComputer.setOs();</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Computer <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> mComputer;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		Computer computer = <span class="keyword">new</span> MacBookBuilder().setBoard(<span class="string">"APPLE"</span>).setDisplay(<span class="string">"Retina"</span>).setOs().create();</div><div class="line"></div><div class="line">		System.out.println(computer.toString());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">Computer [mBoard=APPLE, mDisplay=Retina, mOS=Mac OS X <span class="number">10.11</span>]</div></pre></td></tr></table></figure>
<p>上述示例中，通过具体的MacBookBuilder来构建MacBookPro对象，Builder将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的对象。</p>
<h1 id="Android中应用"><a href="#Android中应用" class="headerlink" title="Android中应用"></a>Android中应用</h1><ul>
<li>AlertDialog</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>良好的封装性，使用建造者模式可以使得客户端不必知道产品内部组成的细节。</li>
<li>建造者独立，容易扩展</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>会产生多余的Builder对象，消耗内存。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android设计模式之(一)单例模式]]></title>
      <url>http://liuguoquan727.github.io/2016/06/03/Android%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B(%E4%B8%80)%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>单例模式是应用最广的模式之一，在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个全局对象，这样有利于我们协调系统整体的行为。如在一个应用中，应该只有一个ImageLoader实例，这个ImageLoader中又含有线程池、缓存系统、网络请求等，很消耗资源。因此不应该让它构造多个实例。这样不能自由构造对象的情况，就是单例模式的使用场景。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>确保某个类有且只要一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象只应该有且只有一个。例如，创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源，这时就要考虑使用单例模式。</p>
<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>单例模式的UML类图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uml-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.png" alt=""></p>
<p>角色介绍：</p>
<ul>
<li>Client：高层客户端</li>
<li>Singleton：单例类</li>
</ul>
<p>实现单例模式主要有以下几个关键点：</p>
<ul>
<li>构造函数不对外开放，一般为private；</li>
<li>通过一个静态方法或者枚举返回单例类对象；</li>
<li>确保单例类的对象有且只有一个，尤其是在多线程环境下；</li>
<li>确保单例类对象在反序列化时不会重新构建对象；</li>
</ul>
<p>单例模式中实现比较困难的是在多线程环境下构造单例类的对象有且只有一个。</p>
<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>单例模式在设计模式中是结构比较简单的，只有一个单例类，没有其他层次结构和抽象。该模式需要确保该类只能生成一个对象，通常是该类需要消耗较多的资源或者没有对个实例的情况。例如一个公司只有一个CEO、一个应用只有一个Application对象等。</p>
<p>下面以公司里的CEO为例来简单演示一下，一个公司可以有多个VP、无数个员工，但只有一个CEO，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 普通员工</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//干活</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//副总裁</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VP</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 管理下面的经理</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//CEO，饿汉式单例</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CEO mCEO = <span class="keyword">new</span> CEO();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//公有的静态函数，对外暴露获取单例对象的接口</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">getCeo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> mCEO;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 管理VP</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//公司类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> List&lt;Staff&gt; mStaffs = <span class="keyword">new</span> ArrayList&lt;Staff&gt;();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStaff</span><span class="params">(Staff staff)</span> </span>&#123;</div><div class="line">		mStaffs.add(staff);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showStaffs</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(Staff staff : mStaffs) &#123;</div><div class="line">			System.out.println(<span class="string">"Obj: "</span> + staff.toString());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		Company company = <span class="keyword">new</span> Company();</div><div class="line">		</div><div class="line">		<span class="comment">//CEO对象只能通过getCeo获取</span></div><div class="line">		Staff ceo1 = CEO.getCeo();</div><div class="line">		Staff ceo2 = CEO.getCeo();</div><div class="line">		company.addStaff(ceo1);</div><div class="line">		company.addStaff(ceo2);</div><div class="line">		</div><div class="line">		Staff vp1 = <span class="keyword">new</span> VP();</div><div class="line">		Staff vp2 = <span class="keyword">new</span> VP();</div><div class="line">		company.addStaff(vp1);</div><div class="line">		company.addStaff(vp2);</div><div class="line">		</div><div class="line">		Staff staff1 = <span class="keyword">new</span> Staff();</div><div class="line">		Staff staff2 = <span class="keyword">new</span> Staff();</div><div class="line">		</div><div class="line">		company.addStaff(staff1);</div><div class="line">		company.addStaff(staff2);</div><div class="line"></div><div class="line">		company.showStaffs();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>运行输出结果如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.CEO<span class="variable">@15db9742</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.CEO<span class="variable">@15db9742</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.VP<span class="variable">@6d06d69c</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.VP<span class="variable">@7852e922</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.Staff<span class="variable">@4e25154f</span></div><div class="line"><span class="attribute">Obj</span>: com.liuguoquan.design.single.Staff<span class="variable">@70dea4e</span></div></pre></td></tr></table></figure>
<p>从上面代码可以看出，CEO类不能通过new的形式构造函数，只能通过CEO.getCeo()方法来获取，而这个CEO对象是静态对象，并且在声明的时候就已经初始化，这就保证类CEO对象的唯一性。</p>
<p>从输出结果中可以看出，CEO两次输出的CEO对象的地址都一样，说明是同一个CEO对象；而VP、Staff等类型的对象都是不同的。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>饿汉式模式是在声明静态对象时就已经初始化，这种方式简单粗暴，如果单例对象初始化非常快，而且占用内存小的时候这种方式是比较适合的，可以直接在应用启动时加载初始化。实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>懒汉模式是声明一个静态对象，并且在用户第一次调用getInstance时进行初始化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span>(Singleton.class) &#123;</div><div class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">                instance = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getInstance方法中添加了Synchronized关键字，也就是同步类synchronized关键字包含的代码块，这就是上面所说的在多线程中保证单例对象唯一性的手段。但是仍存在一个问题，<strong>即使instance已经初始化，每次调用getInstance方法都会进行同步，这样会消耗不必要的资源，这也是懒汉式存在的最大问题</strong>。</p>
<p>懒汉单例模式的优点是只有在使用时才会被实例化，在一定程度上节约了资源，缺点是第一次加载时需要及时进行实例化，反应稍慢，最大问题是每次调用geInstance都进行同步，造成不必要的同步开销，这样模式一般不建议使用。</p>
<h3 id="Double-CheckLock-双重校验锁"><a href="#Double-CheckLock-双重校验锁" class="headerlink" title="Double CheckLock(双重校验锁)"></a>Double CheckLock(双重校验锁)</h3><p>DCL方式的优点是既能够在需要时才初始化单例，又能够保证线程的安全，且单例对象初始化后调用getInstance不获取同步锁。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//private static volatile Singleton instance = null;</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//如果已经初始化，不需要每次获取同步锁</span></div><div class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">                    instance = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到getInstance方法对instance进行了两次判空：第一层判断主要是为了避免不必要的同步，第二层判断主要则是为了在null的情况下创建实例。下面，我们来分析一下：</p>
<p>假设线程A执行到instance=new Singleton()语句，这里看起来是一句代码，但实际上它并不是一个原子操作，这局代码最终会被编译成多条汇编指令，它大致做了3件事情：</p>
<ol>
<li>给Singleton的实例分配内存</li>
<li>调用Singleton()的 构造函数，初始化字段成员</li>
<li>将instance对象执行分配的内存空间（此时instance就不是null了）</li>
</ol>
<p>但是，由于Java编译器运行处理器乱序执行，以及jdk1.5之前Java内存模型中Cache、寄存器到主内存会写顺序的规定，上面的第二和第三的顺序是无法保证的。也就是说，执行顺序可能是1-2-3也可能是1-3-2.如果是后者，并且在3执行完毕、2未执行之前，被切换到线程B上，这时候instance因为已经在线程A内执行3了，instance已经是非null，所有线程B直接取走instance，再使用时就会出错，这就是DCL失效问题，而且这种难以跟踪难以重现的问题很可能会隐藏很久。</p>
<p>在jdk1.5之后，官方已经注意到这种问题，调整了JMM、具体化了volatile关键字，因此，如果是1.5或之后的版本，只需要将instance的定义改成<code>private static volatile Singleton instance = null;</code>就可以保证instance对象每次都是从主内存中读取，就可以使用DCL的写法来完成单例模式。当然，volatile多少会影响到性能，但考虑到程序的正确性，牺牲这点性能还是值得的。</p>
<p>DCL的优点：资源利用率高，第一次执行getInstance时单例对象才会被实例化，效率高。</p>
<p>缺点：第一次加载稍慢，也由于Java内存模型的原因偶尔会失败。在高并发的环境下也有一定的缺陷，虽然概率发生很小。</p>
<blockquote>
<p>DCL模式是使用最多的单例实现模式，它能够在需要时才实例化单例对象，并且能够在绝大多数场景下保证单例对象的唯一性，除非你的代码在并发场景比较复杂或者低于jdk1.6版本下使用，否则这种方式一般能够满足需求。</p>
</blockquote>
<h3 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h3><p>在《Java并发编程实战》中谈到不赞成使用DCL的优化方式，而建议使用如下代码替代：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//静态内部类</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当第一次加载Singleton类时并不会初始化instance，只有第一次调用Singleton的getInstance方法时才会导致instance被初始化。因此，第一次调用getInstance方法会导致虚拟机加载SingletonHolder类，这种方式不仅能够确保线程安全，也能够保证单例对象的唯一性，同时也延迟了单例的实例化，所以这是推荐使用的单例模式实现方式。</p>
<h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</div><div class="line"></div><div class="line">    <span class="comment">//定义一个枚举的元素，它就是Singleton的一个实例</span></div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">   Singleton singleton = Singleton.instance;</div><div class="line">   singleton.doSomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写法简单是枚举单例最大的优点，枚举在Java中与普通的类是一样的，不仅能够有字段，还能够有自己的方法。最重要的是默认枚举实例的创建时线程安全的，并且在任何情况下它都是一个单例。</p>
<p>为什么这么说呢？在上述的几种单例模式实现中，在一个情况下它们会出现重新创建对象的情况，那就是反序列化。</p>
<p>通过序列化可以将一个单例的实例对象写到磁盘，然后再读回来，从而有效地获得一个实例。即使构造函数时私有的，反序列化时依然可以通过特殊的途径去创建类的一个新的实例，相当于调用该类的构造函数。反序列化操作提供一个很特别的钩子函数，类中具有一个私有的、被实例化的方法readResolve()，这个方法可以让开发人员控制对象的反序列化。例如，上述几个实例中如果要杜绝单例对象在被反序列化时重新生成对象，那么必须加入如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</div><div class="line">	<span class="keyword">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是在readResolve方法中将instance对象返回，而不是默认的重新生成一个新的对象。而对于枚举并不存在这样的问题，因为即使反序列化它也不会重新生成新的实例。</p>
<h3 id="容器管理单例"><a href="#容器管理单例" class="headerlink" title="容器管理单例"></a>容器管理单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; objMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key,Object instance)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!objMap.containsKey(key)) &#123;</div><div class="line">            objMap.put(key);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getInstance</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> objMap.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在程序的初始，将多种单例类注入到一个统一的管理类中，在使用根据key获取对应类型的对象，这种方式使得我们可以管理很多类型的单例，并且在使用它们的时候可以通过统一的接口进行获取操作操作，降低用户的使用成本，也对用户隐藏了具体实现，降低了耦合度。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式是运用频率很高的模式，但是，由于在客户端通常没有高并发的情况，因此，选择哪种实现方式并不会有太大的影响。即便如此，出于效率考虑，推荐使用双重校验锁和静态内部类单例模式。</p>
<p><strong>优点</strong></p>
<ul>
<li><p>由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁创建、销毁时，而且创建或者销毁时性能又无法优化，单例模式的优势就非常明显。</p>
</li>
<li><p>由于单例模式只生成一个实例，所以，减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永驻内存的方式解决。</p>
</li>
<li><p>单例模式可以避免对资源的多重占用，例如一个写文件操作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。</p>
</li>
<li><p>单例模式可以在系统设置全局访问点，优化和共享资源访问，例如，可以设计一个单例类，负责所有数据表的映射处理。</p>
</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><p>单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本没有第二种途径可以实现。</p>
</li>
<li><p>在Android中，单例对象如果持有Context，那么很容易引发内存泄露，此时需要注意传给单例对象的Context最好是Application Context。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Context详解]]></title>
      <url>http://liuguoquan727.github.io/2016/06/02/Android%20Context%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Activity可以new吗？Android的应用程序开发采用Java语言，Activity本质上也是一个对象，那Activity activity = new Activity()这种写法有什么问题吗？Android应用模型是基于组件的设计模式，组件的运行需要有一个完整的Android工程环境，在这个环境下，Activity、Service等系统组件才能够正常工作，而这些组件并不能采用普通的Java对象创建方式，new一下就能创建实例，而是要有它们各自的上下文环境，也就是我们要介绍的Context。可以这样讲，Context是维持Android程序中各组件能够正常工作的一个核心功能类。</p>
<h1 id="源码中的Context"><a href="#源码中的Context" class="headerlink" title="源码中的Context"></a>源码中的Context</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interface to global information about an application environment.  This is</div><div class="line"> * an abstract class whose implementation is provided by</div><div class="line"> * the Android system.  It</div><div class="line"> * allows access to application-specific resources and classes, as well as</div><div class="line"> * up-calls for application-level operations such as launching activities,</div><div class="line"> * broadcasting and receiving intents, etc.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * File creation mode: the default mode, where the created file can only</div><div class="line">     * be accessed by the calling application (or all applications sharing the</div><div class="line">     * same user ID).</div><div class="line">     * <span class="doctag">@see</span> #MODE_WORLD_READABLE</div><div class="line">     * <span class="doctag">@see</span> #MODE_WORLD_WRITEABLE</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_PRIVATE = <span class="number">0x0000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_WORLD_WRITEABLE = <span class="number">0x0002</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_APPEND = <span class="number">0x8000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MULTI_PROCESS = <span class="number">0x0004</span>;</div><div class="line"></div><div class="line">    .</div><div class="line">    .</div><div class="line">    .</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>源码中的注释是这么来解释Context的：Context提供了关于应用环境全局信息的接口。它是一个抽象类，它的执行被Android系统所提供，它允许获取以应用为特征的资源和类型，是一个统领一些资源的上下文。就是说，它描述一个应用程序环境的信息（即上下文），是一个抽象类，Android提供了该抽象类的具体实现类；通过它我们可以获取应用程序的资源和类（包括应用级别操作，如启动Activity，发广播，接受Intent等）。既然上面Context是一个抽象类，那么肯定有他的实现类，Context抽象类的继承关系如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1187237-1b4c0cd31fd0193f.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt=""></p>
<p>Context类本身是一个纯abstract类，它有两个具体的实现子类：ContextImpl和ContextWrapper。其中ContextWrapper类，如其名所言，这只是一个包装而已，ContextWrapper构造函数中必须包含一个真正的Context引用，同时ContextWrapper中提供了attachBaseContext（）用于给ContextWrapper对象中指定真正的Context对象，调用ContextWrapper的方法都会被转向其所包含的真正的Context对象。ContextThemeWrapper类，如其名所言，其内部包含了与主题（Theme）相关的接口，这里所说的主题就是指在AndroidManifest.xml中通过android：theme为Application元素或者Activity元素指定的主题。当然，只有Activity才需要主题，Service是不需要主题的，因为Service是没有界面的后台场景，所以Service直接继承于ContextWrapper，Application同理。而ContextImpl类则真正实现了Context中的所以函数，应用程序中所调用的各种Context类的方法，其实现均来自于该类。一句话总结：Context的两个子类分工明确，其中ContextImpl是Context的具体实现类，ContextWrapper是Context的包装类。Activity，Application，Service虽都继承自ContextWrapper（Activity继承自ContextWrapper的子类ContextThemeWrapper），但它们初始化的过程中都会创建ContextImpl对象，由ContextImpl实现Context中的方法。</p>
<h1 id="一个应用程序有几个Context"><a href="#一个应用程序有几个Context" class="headerlink" title="一个应用程序有几个Context"></a>一个应用程序有几个Context</h1><p>从上面的关系图可知，在应用程序中Context的具体实现子类就是：Activity、Service、Application。那么context数量 = Activity数量 + Service数量 + 1；而四大组件中BroadcastReceiver和ContentProvider并不是Context的子类，他们所持有的Context都是其他地方传过去的，所以并不计入Context总数。</p>
<h1 id="Context作用"><a href="#Context作用" class="headerlink" title="Context作用"></a>Context作用</h1><p>弹出Toast、启动Activity、启动Service、发送广播、操作数据库等都需要用到Context。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例化控件</span></div><div class="line">TextView tv = <span class="keyword">new</span> TextView(getContext());</div><div class="line"></div><div class="line">ListAdapter adapter = <span class="keyword">new</span> SimpleCursorAdapter(getApplicationContext(), ...);</div><div class="line"></div><div class="line">AudioManager am = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);getApplicationContext().getSharedPreferences(name, mode);</div><div class="line"></div><div class="line">getApplicationContext().getContentResolver().query(uri, ...);</div><div class="line"></div><div class="line">getContext().getResources().getDisplayMetrics().widthPixels * <span class="number">5</span> / <span class="number">8</span>;</div><div class="line"></div><div class="line">getContext().startActivity(intent);</div><div class="line"></div><div class="line">getContext().startService(intent);</div><div class="line"></div><div class="line">getContext().sendBroadcast(intent);</div></pre></td></tr></table></figure>
<h1 id="Context作用域"><a href="#Context作用域" class="headerlink" title="Context作用域"></a>Context作用域</h1><p>由于Context的具体实例是由ContextImpl类去实现的，因此自绝大多数场景下，Activity、Service和Application这三种类型的Context都是可以通用的。不过有几种场景比较特殊，比如启动Activity、还有弹出Dialog，出于安全的考虑，Android是不允许Activity或Dialog凭空出现的，一个Activity的启动必须要建立在另一个Activity的基础之上，形成返回栈，而Dialog则必须在一个Activity上面弹出（除非是System Alert类型的Dialog），因此在这种场景下，我们只能用Activity类型的Context，否则将会出错。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1187237-fb32b0f992da4781.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt=""></p>
<p>这里说一下上图中Application和Service所不推荐的两种使用情况。</p>
<ul>
<li><p>如果我们用ApplicationContext去启动一个LaunchMode为standard的Activity的时候会报错<code>android.util.AndroidRuntimeException: Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</code>这是因为非Activity类型的Context并没有所谓的任务栈，所以待启动的Activity就找不到栈了。解决这个问题的方法就是为待启动的Activity指定FLAG_ACTIVITY_NEW_TASK标记位，这样启动的时候就为它创建一个新的任务栈，而此时Activity是以singleTask模式启动的。所有这种用Application启动Activity的方式不推荐使用，Service同Application。</p>
</li>
<li><p>在Application和Service中去layout inflate也是合法的，但是会使用系统默认的主题样式，如果你自定义了某些样式可能不会被使用。所以这种方式也不推荐使用。</p>
</li>
</ul>
<p>一句话总结：凡是跟UI相关的，都应该使用Activity做为Context来处理；其他的一些操作，Service,Activity,Application等实例都可以，当然了，注意Context引用的持有，防止内存泄漏。</p>
<h1 id="获取Context"><a href="#获取Context" class="headerlink" title="获取Context"></a>获取Context</h1><p>通常我们想要获取Context对象，主要有一下四种方法。</p>
<ol>
<li>View.getContext，返回当前View对象的Context对象，通常是正在显示的Activity对象。</li>
<li>Activity.getApplicationContext，获取当前Activity所在的应用进程的Context对象，通常我们使用Context对象时要优先考虑这个全局的进程Context。<br>3.ContextWrapper.getBaseContext()，用来获取一个ContextWrapper进行装饰之前的Context，可以使用这个方法，一般不建议使用</li>
<li>Activity.this，返回当前的Activity实例，如果是UI控件需要使用Activity作为Context对象，但是默认的Toast实际上使用ApplicationContext也可以。</li>
</ol>
<h1 id="getApplication-和getApplicationContext"><a href="#getApplication-和getApplicationContext" class="headerlink" title="getApplication()和getApplicationContext()"></a>getApplication()和getApplicationContext()</h1><p>获取当前Application对象用getApplicationContext，不知道你有没有联想到getApplication()，这两个方法有什么区别？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1187237-593b912ecd199046.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>程序是不会骗人的，我们通过上面的代码，打印得出两者的内存地址都是相同的，看来它们是同一个对象。其实这个结果也很好理解，因为前面已经说过了，Application本身就是一个Context，所以这里获取getApplicationContext()得到的结果就是Application本身的实例。那么问题来了，既然这两个方法得到的结果都是相同的，那么Android为什么要提供两个功能重复的方法呢？实际上这两个方法在作用域上有比较大的区别。<strong>getApplication()方法的语义性非常强，一看就知道是用来获取Application实例的，但是这个方法只有在Activity和Service中才能调用的到。</strong>那么也许在绝大多数情况下我们都是在Activity或者Service中使用Application的，但是如果在一些其它的场景，比如BroadcastReceiver中也想获得Application的实例，这时就可以借助getApplicationContext()方法了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    publicvoidonReceive(Contextcontext,Intentintent)&#123;</div><div class="line">    ApplicationmyApp=(Application)context.getApplicationContext();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Context引起的内存泄露"><a href="#Context引起的内存泄露" class="headerlink" title="Context引起的内存泄露"></a>Context引起的内存泄露</h1><p>Context并不能随便乱用，用的不好有可能会引起内存泄露的问题，下面就示例两种错误的引用方式。</p>
<ul>
<li>错误的单例模式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton(context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个非线程安全的单例模式，instance作为静态对象，其生命周期要长于普通的对象，其中也包含Activity，假如Activity A去getInstance获得instance对象，传入this，常驻内存的Singleton保存了你传入的Activity A对象，并一直持有，即使Activity被销毁掉，但因为它的引用还存在于一个Singleton中，就不可能被GC掉，这样就导致了内存泄漏。</p>
<ul>
<li>View持有Activity的引用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Drawable mDrawable;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(saveInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ImageView iv = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">        mDrawable = getResources().getDrawable(R.drawable.ic_launcher);</div><div class="line">        iv.setImageDrawable(mDrawable);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有一个静态的Drawable对象当ImageView设置这个Drawable时，ImageView保存了mDrawable的引用，而ImageView传入的this是MainActivity的mContext，因为被static修饰的mDrawable是常驻内存的，MainActivity是它的间接引用，MainActivity被销毁时，也不能被GC掉，所以造成内存泄漏。</p>
<h1 id="正确使用Context"><a href="#正确使用Context" class="headerlink" title="正确使用Context"></a>正确使用Context</h1><p>一般Context造成的内存泄漏，几乎都是当Context销毁的时候，却因为被引用导致销毁失败，而Application的Context对象可以理解为随着进程存在的，所以我们总结出使用Context的正确姿势：</p>
<ol>
<li>当Application的Context能搞定的情况下，并且生命周期长的对象，优先使用Application的Context。</li>
<li>不要让生命周期长于Activity的对象持有到Activity的引用。</li>
<li>尽量不要在Activity中使用非静态内部类，因为非静态内部类会隐式持有外部类实例的引用，如果使用静态内部类，将外部实例引用作为弱引用持有。</li>
</ol>
<h1 id="获取全局Application"><a href="#获取全局Application" class="headerlink" title="获取全局Application"></a>获取全局Application</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyApplication app;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyApplication <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> app;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate();  </div><div class="line">        app = <span class="keyword">this</span>;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Application全局只有一个，它本身就已经是单例了，无需再用单例模式去为它做多重实例保护了,getInstance()方法里面不要做任何逻辑判断，直接返回app对象就可以了，而app对象又是什么呢？在onCreate()方法中我们将app对象赋值成this，this就是当前Application的实例，那么app也就是当前Application的实例了。</p>
<p>参考文章：</p>
<p><a href="http://www.jianshu.com/p/94e0f9ab3f1d" target="_blank" rel="external">Context都没弄明白，还怎么做Android开发？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[View的事件分发机制]]></title>
      <url>http://liuguoquan727.github.io/2016/04/26/Android-View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="点击事件的传递规则"><a href="#点击事件的传递规则" class="headerlink" title="点击事件的传递规则"></a>点击事件的传递规则</h1><p>首先明确我们这里要分析的对象就是MotionEvent，及点击事件。所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个MotionEvent事件产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent。</p>
<ul>
<li><strong>public boolean dispatchTouchEvent(MotionEvent event)</strong></li>
</ul>
<p>用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级的dispatchTouchEvent方法的影响，表示是否消耗此事件</p>
<ul>
<li><strong>public boolean onInterceptTouchEvent(MotionEvent event)</strong> //view无此方法，存在于ViewGroup中</li>
</ul>
<p>用来判断是否拦截某个事件，如果当前View拦截某个事件，那么在同一个事件序列中，次方法将不会被再次调用，返回结果表示是否拦截某个事件。</p>
<ul>
<li><strong>public boolean onTouchEvent(MotionEvent event)</strong></li>
</ul>
<p>在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件</p>
<p>上述三个方法到底有什么区别呢？它们是什么关系呢？下面通过一段伪代码来表示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> consume = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(onInterceptTouchEvent(ev)) &#123;</div><div class="line"></div><div class="line">		consume = onTouchEvent(ev);</div><div class="line"></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">		consume = chiled.dispatchTouchEvent(ev);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> consume;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的伪代码，我们可以大致了解点击事件的传递规则：对已一个跟ViewGroup来说，点击事件产生以后，首先会传递给它，这是它的dispatchTouchEvent就会被调用，如果这个ViewGroup的onInterceptTouchEvent方法返回true就表示它要拦截当前事件，接着事件就会交给这个ViewGroup的onTouchEvent方法就会被调用；如果这个ViewGroup的onInterceptTouchEvent方法返回false就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的dispatchTouchEvent方法就会被调用，如此反复直到事件被最终处理。</p>
<p>当一个View需要处理事件时，如果它设置了OnTouchListener，那么OnTouchListener中的OnTouch方法就会被回调，事件如何处理还要看onTouch的返回值，如果返回值为false，则当前View的OnTouchEvent方法会被调用；如果返回为true，则当前View的OnTouchEvent方法不会被调用。由此可见，给View设置的OnTouchListener，其优先级比onTouchEvent要高。在OnTouchEvent方法中，如果当前设置的有OnClickListener，那么它的onClick方法会被调用。可以看出，平时使用的OnClickListener其优先级最低，即处于事件的尾端。</p>
<p>当一个点击事件产生后，它的传递过程遵循如下顺序：Activity &gt; Window &gt; View，即事件总是先传递到Activity。Activity再传递给Window，最后Window再传递给顶级View，顶级View接收到事件后，就会按照事件分发机制去分发事件。</p>
<p>考虑一种情况，如果一个View的OnTouchEvent都返回false，那么它的父容器的OnTouchEvent将会被调用，依次类推，如果所有的子元素都不处理这个事件，那么这个事件将会最终传递给Activity处理，即Activity的OnTouchEvent将会被调用。我们可以用实际生活的例子来描述：假如点击事件是一个难题，这个难题最终被上级领导分给了一个程序员去处理（这是事件分发过程），结果这个程序员搞不定（OnTouchEvent返回false），现在该怎么办呢？程序员只能交给水平更高的程序员去解决（上级的OnTouchEvent被调用），如果上级再搞不定，那只能交给上级的上级去解决，这样就将难题一层层的向上抛，这是公司内部一种很常见的处理问题的过程。</p>
<p>关于事件传递的机制，这里给出一些结论，根据这些揭露可以更好地理解整个传递机制：</p>
<ul>
<li><p>（1）同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束。在这个过程中产生了一系列事件，这个时间序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</p>
</li>
<li><p>（2）正常情况下，一个事件序列只能被一个View拦截并且消耗。这一条的原因可以参考（3），因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过OnTouchEvent强行传递给其他View处理。</p>
</li>
<li><p>（3）某个View一旦决定拦截，那么这个事件的序列的搜只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent方法不会再被调用。就是说当一个View决定拦截一个事件后，那么系统会把同一个事件序列的其他方法都直接交给它来处理，因此就不用再调用这个View的OnInterceptTouchEvent其询问它是否要拦截了。</p>
</li>
<li><p>（4）某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一个事件序列中的其他事件都不会再交给它来处理。并且事件将重新交由它的父元素去处理，即父元素的OnTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。</p>
</li>
<li><p>（5）如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件将会消失，此时父元素的OnTouchEvent并不会被调用，并且当前View可以持续受到后续的事件，最终这些消失的点击事件会传递给Activity处理。</p>
</li>
<li><p>（6）ViewGroup默认不拦截任何事件。Android源码中ViewGroup的OnInterceptTouchEvent方法默认返回false</p>
</li>
<li><p>（7）View没有OnInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的OnTouchEvent方法就会被调用</p>
</li>
<li><p>（8）View的OnTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable默认为true，而TextView的clickable属性默认为false。</p>
</li>
<li><p>（9）View的enable属性不影响OnTouchEvent的默认返回值，哪怕一个View是disable状态的，只要它的clickable和longClickable有一个为true，那么它的OnTouchEvent就返回true。</p>
</li>
<li><p>（10）onClick会发生的前提是当前View是可点击的，并且收到了down和up事件</p>
</li>
<li><p>（11）事件传递过程是由外向内的，即事件总是先传递给父元素，然后再有父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。</p>
</li>
</ul>
<h1 id="事件分发的源码解析"><a href="#事件分发的源码解析" class="headerlink" title="事件分发的源码解析"></a>事件分发的源码解析</h1><h2 id="Activity对点击事件的分发过程"><a href="#Activity对点击事件的分发过程" class="headerlink" title="Activity对点击事件的分发过程"></a>Activity对点击事件的分发过程</h2><p>点击事件用MotionEvent来表示，当一个点击操作发生时，事件最先传递给当前Activity，由Activity的dispatchTouchEvent来进行事件分发，具体的工作是由Activity内部的Window来完成的。Window会将事件传递给decor view，decor view一般就是当前界面的底层容器（即setContentView所设置的View的父容器），通过Activity.getWindow。getDecorView()可以获得。先从Activity的dispatchTouchEvent开始分析。</p>
<p>源码：Activity#dispatchTouchEvent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">		onUserInteraction();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> onTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析上面的代码。首先事件交给Activity所附属的Window进行分发，如果返回true，整个事件就循环结束了，返回false以为着事件没人处理，所有View的onTouchEvent都返回了false，那么Activity的onTouchEvent就会被调用</p>
<p>接下里看Window是如何将事件传递给ViewGroup的。Window是是个抽象类，而Window的superDispatchTouchEvent方法也是个抽象方法，因此我们必须找到Window的实现类才行</p>
<p>源码：Window#superDispatchTouchEvent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</div></pre></td></tr></table></figure>
<p>到底Window的实现类是什么呢？其实是PhoneWindow，Window的唯一实现是android.policy.Window，接下来看一下PhoneWindow是如何处理点击事件的，</p>
<p>源码：PhoneWindow#superDispatchTouchEvent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> DecorView mDecor;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PhoneWindow将事件直接传递给了DecorView，这个DecorView是什么呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DecorView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">RootViewSurfaceTaker</span></span></div><div class="line"></div><div class="line">@<span class="title">Override</span></div><div class="line"><span class="title">public</span> <span class="title">final</span> <span class="title">View</span> <span class="title">getDecorView</span>() &#123;</div><div class="line">	<span class="keyword">if</span> (mDecor == <span class="keyword">null</span>) &#123;</div><div class="line">		installDecor();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> mDecor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，这个mDecor就是通过getWindow().getDecor()返回的View，而我们通过setContentView设置的View是它的一个子View。目前事件传递到了DecorView这里，由于DecorView继承自FrameLayout且是父View，所有最终事件会传递到View。换句话说，事件肯定会传递到View，不然应用如何响应点击事件呢？重点是事件到了View以后该如何传递。从这里开始，事件已经传递到顶级View了，即在Activity中通过setContentView所设置的View，另外顶级View也叫根View，顶级View一般来说都是ViewGroup。</p>
<h2 id="顶级View对点击事件的分发过程"><a href="#顶级View对点击事件的分发过程" class="headerlink" title="顶级View对点击事件的分发过程"></a>顶级View对点击事件的分发过程</h2><p>点击事件达到顶级View以后，会调用ViewGroup的dispatchTouchEvent方法，然后逻辑是这样的：如果顶级ViewGroup拦截事件即OnInterceptTouchEvent返回true，则事件由ViewGroup处理，这时如果ViewGroup的OnTouchListener被设置，则onTouch被调用，否则onTouchEvent被调用，也就是说两者都设置的话，onTouch会屏蔽掉OnTouchEvent。在OnTouchEvent中如果设置了OnClickListener，则OnClick会被调用。如果顶级ViewGroup不拦截事件，则事件会传递给它所在的点击事件链上的子View，这时子View的dispatchTouchEvent会被调用。到此，事件已经从顶级View传递给下一层View，接下来的传递过程和顶级View是一致的，如此循环完成整个事件的分发。</p>
<p>首先看ViewGroup对点击事件的分发过程，其主要实现在ViewGroup的dispatchTouchEvent方法中，这个方法较长。先看下面一段，它描述的是View是否拦截点击事件这个逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Check for interception.</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</div><div class="line"><span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">		|| mFirstTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (!disallowIntercept) &#123;</div><div class="line">		intercepted = onInterceptTouchEvent(ev);</div><div class="line">		ev.setAction(action); <span class="comment">// restore action in case it was changed</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		intercepted = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// There are no touch targets and this action is not an initial down</span></div><div class="line">	<span class="comment">// so this view group continues to intercept touches.</span></div><div class="line">	intercepted = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，ViewGroup在如下两种情况下会判断是否要拦截当前事件：事件类为ACTION_DOWN或者mFirstTouchTarget ！= null，mFirstTouchTarget ！= null是什么意思了？当ViewGroup不拦截事件并将事件交由子元素处理时mFirstTouchTarget ！= null 。反过来，一旦事件由当前ViewGroup拦截时，mFirstTouchTarget ！= null就不成立，那么当ACTION_DWON和ACTION_UP事件到来时，由于(actionMasked == MotionEvent.ACTION_DOWN|| mFirstTouchTarget != null)为false，将导致ViewGroup的OnInterceptTouchEvent不会再调用，并且同一序列中的其他事件都会默认交由给它处理。</p>
<p>这里有一种特使情况，那就是FLAG_DISALLOW_INTERCEPT标记位，这个标记位是通过requestDisallowInterceptTouchEvent设置的，一般用于子View中。FLAG_DISALLOW_INTERCEPT一旦设置后，ViewGroup将无法拦截除了ACTION_DOWN以外的其他事件。为什么说是除了ACTION_DOWN意外的其他事件了？这是因为ViewGroup在分发事件时，如果是ACTION_DOWN就会重置FLAG_DISALLOW_INTERCEPT这个标记位，将导致子View中设置的这个标记位无效。因此，当面对ACTION_DOWN事件时，ViewGroup总是会调用自己的OnInterceptTouchEvent方法来询问自己是否要拦截事件。在下面的代码中，ViewGroup会在ACTION_DOWN事件到来时做重置状态的操作，而在resetTouchState方法中会对FLAG_DISALLOW_INTERCEPT进行重置，因此子View调用requestDisallowInterceptTouchEvent方法并不能影响ViewGroup对ACTION_DOWN的处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">	<span class="comment">// Throw away all previous state when starting a new touch gesture.</span></div><div class="line">	<span class="comment">// The framework may have dropped the up or cancel event for the previous gesture</span></div><div class="line">	<span class="comment">// due to an app switch, ANR, or some other state change.</span></div><div class="line">	cancelAndClearTouchTargets(ev);</div><div class="line">	resetTouchState();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的源码分析，我们可以得出结论：当ViewGroup决定拦截事件后，那么后续的点击事件将会默认交给它处理，并且不再调用它的OnInterceptTouchEvent方法。FLAG_DISALLOW_INTERCEPT这个标志的作用是ViewGroup不再拦截事件，当前前提是ViewGroup不拦截ACTION_DOWN事件。那么这段分析有什么价值呢？总结起来有两点：第一，OnInterceptTouchEvent不是每次事件都会被调用的，如果我们想提前处理所有的点击事件，要选择dispatchTouchEvent方法，只有这个方法能确保每次都会调用，当然前提是事件能够传递到当前的ViewGroup；第二点：FLAG_DISALLOW_INTERCEPT标记位的作用给我们提供了一个思路，当面对滑动冲突时，我们可以是不是考虑用这种方法去解决问题？</p>
<p>接着再看当ViewGroup不拦截事件的时候，事件会向下分发交由它的子View进行处理，这段源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</div><div class="line"><span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</div><div class="line">	<span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</div><div class="line">	<span class="comment">// Find a child that can receive the event.</span></div><div class="line">	<span class="comment">// Scan children from front to back.</span></div><div class="line">	<span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildOrderedChildList();</div><div class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></div><div class="line">			&amp;&amp; isChildrenDrawingOrderEnabled();</div><div class="line">	<span class="keyword">final</span> View[] children = mChildren;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> childIndex = customOrder</div><div class="line">				? getChildDrawingOrder(childrenCount, i) : i;</div><div class="line">		<span class="keyword">final</span> View child = (preorderedList == <span class="keyword">null</span>)</div><div class="line">				? children[childIndex] : preorderedList.get(childIndex);</div><div class="line"></div><div class="line">		<span class="comment">// If there is a view that has accessibility focus we want it</span></div><div class="line">		<span class="comment">// to get the event first and if not handled we will perform a</span></div><div class="line">		<span class="comment">// normal dispatch. We may do a double iteration but this is</span></div><div class="line">		<span class="comment">// safer given the timeframe.</span></div><div class="line">		<span class="keyword">if</span> (childWithAccessibilityFocus != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (childWithAccessibilityFocus != child) &#123;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			childWithAccessibilityFocus = <span class="keyword">null</span>;</div><div class="line">			i = childrenCount - <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!canViewReceivePointerEvents(child)</div><div class="line">				|| !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</div><div class="line">			ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		newTouchTarget = getTouchTarget(child);</div><div class="line">		<span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// Child is already receiving touch within its bounds.</span></div><div class="line">			<span class="comment">// Give it the new pointer in addition to the ones it is handling.</span></div><div class="line">			newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		resetCancelNextUpFlag(child);</div><div class="line">		<span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</div><div class="line">			<span class="comment">// Child wants to receive touch within its bounds.</span></div><div class="line">			mLastTouchDownTime = ev.getDownTime();</div><div class="line">			<span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="comment">// childIndex points into presorted list, find original index</span></div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childrenCount; j++) &#123;</div><div class="line">					<span class="keyword">if</span> (children[childIndex] == mChildren[j]) &#123;</div><div class="line">						mLastTouchDownIndex = j;</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				mLastTouchDownIndex = childIndex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		mLastTouchDownX = ev.getX();</div><div class="line">		mLastTouchDownY = ev.getY();</div><div class="line">		newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">		alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先遍历ViewGroup的所有子元素，然后判断子元素是否能够接收到点击事件。是否能够接收到点击事件主要由两点来衡量：子元素是否在播动画和点击事件的坐标是否落在子元素的区域内。如果某个子元素满足这两个条件，那么事件就会传递给它来处理。可以看到dispatchTransformedTouchEvent实际上调用的就是子元素的dispatchTouchEvent方法，在它的内部有一段内容：而在上面的代码中child传递的不是null，因此它会直接调用子元素的dispatchTouchEvent，这样事件就交由子元素处理，从而完成了一轮事件分发。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">	handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	handled = child.dispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果子元素的dispatchTouchEvent返回true，那么，FirstTouchTarget就会被赋值同时跳出for循环，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</div><div class="line"><span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>这几行代码就完成了mFirstTouchTarget的赋值并终止对子元素的遍历。如果子元素的dispatchTouchEvent返回false，ViewGroup就会把事件分发给下一个子元素。</p>
<p>其实mFirstTouchTarget真正的赋值过程是在addTouchTarget内部完成的，从下面的addTouchTarget方法的内部结构可以看出，mFirstTouchTarget其实是一种单链表结构。mFirstTouchTarget是否被赋值，将直接影响到ViewGroup对事件的拦截策略，如果mFirstTouchTarget为null，那么ViewGroup就默认拦截接下来同一序列中所有的点击事件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> TouchTarget <span class="title">addTouchTarget</span><span class="params">(View child, <span class="keyword">int</span> pointerIdBits)</span> </span>&#123;</div><div class="line">	TouchTarget target = TouchTarget.obtain(child, pointerIdBits);</div><div class="line">	target.next = mFirstTouchTarget;</div><div class="line">	mFirstTouchTarget = target;</div><div class="line">	<span class="keyword">return</span> target;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果遍历所有的子元素后事件都没有合适地处理，这包含两种情况：第一种是ViewGroup没有子元素；第二种是子元素处理了点击事件，但是再dispatchTouchEvent中返回了false，这一般式因为子元素在OnTouchEvent中返回了false。在这两种情况下ViewGroup会自己处理点击事件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Dispatch to touch targets.</span></div><div class="line"><span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="comment">// No touch targets so treat this as an ordinary view.</span></div><div class="line">	handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</div><div class="line">			TouchTarget.ALL_POINTER_IDS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三个参数child为null，它会调用super.dispatchTouchEvent(event)，很显然，这里就转到了View（不包括ViewGroup）的dispatchTouchEvent方法，即点击事件开始交由View来处理。</p>
<h2 id="View对点击事件的处理过程"><a href="#View对点击事件的处理过程" class="headerlink" title="View对点击事件的处理过程"></a>View对点击事件的处理过程</h2><p>View点击事件的处理过程简单一些，这里的View不包含ViewGroup。先看它的dispatchTouchEvent方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">	<span class="comment">// If the event should be handled by accessibility focus first.</span></div><div class="line">	...</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">		<span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">		ListenerInfo li = mListenerInfo;</div><div class="line">		<span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">				&amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">				&amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">			result = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">			result = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>View对点击事件的处理就比较简单了因为View是一个单独的元素，它没有子元素因此无法向下传递事件，所以它只能自己处理事件。从上面的源码可以看出View对点击事件的处理过程，首先会判断有没有设置OnTouchListener，如果OnTouchListener中的OnTouch方法返回true，那么OnTouchEvent就不会被调用，可见OnTouchListener的优先级高于OnTouchEvent。</p>
<p>接着再分析OnTouchEvent的实现。先看当View出于不可用状态下的点击事件的处理过程，如下所示，不可用状态下的View照样会消耗点击事件，尽管它看起来不可用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">	<span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">		setPressed(<span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// A disabled view that is clickable still consumes the touch</span></div><div class="line">	<span class="comment">// events, it just doesn't respond to them.</span></div><div class="line">	<span class="keyword">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">			(viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着，如果View设置有代理，那么还会执行TouchDelegate的onTouchEvent方法，这个OnTouchEvent的工作机制看起来和OnTouchListener类似</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面再看一下OnTouchEvent中堆点击事件的具体处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">          (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;</div><div class="line">      <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">              <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</div><div class="line">              <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</div><div class="line">                  <span class="comment">// take focus if we don't have it already and we should in</span></div><div class="line">                  <span class="comment">// touch mode.</span></div><div class="line">                  <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</div><div class="line">                  <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                      focusTaken = requestFocus();</div><div class="line">                  &#125;</div><div class="line">	</div><div class="line">                  <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                      <span class="comment">// The button is being released before we actually</span></div><div class="line">                      <span class="comment">// showed it as pressed.  Make it show the pressed</span></div><div class="line">                      <span class="comment">// state now (before scheduling the click) to ensure</span></div><div class="line">                      <span class="comment">// the user sees it.</span></div><div class="line">                      setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                 &#125;</div><div class="line">	</div><div class="line">                  <span class="keyword">if</span> (!mHasPerformedLongPress) &#123;</div><div class="line">                      <span class="comment">// This is a tap, so remove the longpress check</span></div><div class="line">                      removeLongPressCallback();</div><div class="line">	</div><div class="line">                      <span class="comment">// Only perform take click actions if we were in the pressed state</span></div><div class="line">                      <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                          <span class="comment">// Use a Runnable and post this rather than calling</span></div><div class="line">                          <span class="comment">// performClick directly. This lets other visual state</span></div><div class="line">                          <span class="comment">// of the view update before click actions start.</span></div><div class="line">                          <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</div><div class="line">                              mPerformClick = <span class="keyword">new</span> PerformClick();</div><div class="line">                          &#125;</div><div class="line">                          <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                              performClick();</div><div class="line">                          &#125;</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">	</div><div class="line">                  <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</div><div class="line">                      mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</div><div class="line">                  &#125;</div><div class="line">	</div><div class="line">                  <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                      postDelayed(mUnsetPressedState,</div><div class="line">                              ViewConfiguration.getPressedStateDuration());</div><div class="line">                  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</div><div class="line">                      <span class="comment">// If the post failed, unpress right now</span></div><div class="line">                      mUnsetPressedState.run();</div><div class="line">                  &#125;</div><div class="line">	</div><div class="line">                  removeTapCallback();</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">	</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">              mHasPerformedLongPress = <span class="keyword">false</span>;</div><div class="line">	</div><div class="line">              <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">              &#125;</div><div class="line">	</div><div class="line">              <span class="comment">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class="line">              <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class="line">	</div><div class="line">              <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class="line">              <span class="comment">// a short period in case this is a scroll.</span></div><div class="line">              <span class="keyword">if</span> (isInScrollingContainer) &#123;</div><div class="line">                  mPrivateFlags |= PFLAG_PREPRESSED;</div><div class="line">                  <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</div><div class="line">                      mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</div><div class="line">                  &#125;</div><div class="line">                  mPendingCheckForTap.x = event.getX();</div><div class="line">                  mPendingCheckForTap.y = event.getY();</div><div class="line">                  postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></div><div class="line">                  setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                  checkForLongClick(<span class="number">0</span>);</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">	</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">              setPressed(<span class="keyword">false</span>);</div><div class="line">              removeTapCallback();</div><div class="line">              removeLongPressCallback();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">	</div><div class="line">          <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">              drawableHotspotChanged(x, y);</div><div class="line">	</div><div class="line">              <span class="comment">// Be lenient about moving outside of buttons</span></div><div class="line">              <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</div><div class="line">                  <span class="comment">// Outside button</span></div><div class="line">                  removeTapCallback();</div><div class="line">                  <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">                      <span class="comment">// Remove any future long press/tap checks</span></div><div class="line">                      removeLongPressCallback();</div><div class="line">	</div><div class="line">                      setPressed(<span class="keyword">false</span>);</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">	</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>只要View的Clickable和longClickable有一个为true，那么就会消耗这个事件，即OnTouchEvent返回true，不管它是不是disable状态。然后就是当ACTION_UP事件发生时会触发performClick方法，如果View设置了OnClickListener，那么performClick方法内部会调用它的onClick方法，如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> result;</div><div class="line">	<span class="keyword">final</span> ListenerInfo li = mListenerInfo;</div><div class="line">	<span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">		playSoundEffect(SoundEffectConstants.CLICK);</div><div class="line">		li.mOnClickListener.onClick(<span class="keyword">this</span>);</div><div class="line">		result = <span class="keyword">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		result = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>View的LONG_CLICKABLE属性默认为false，而CLICKABLE属性是否为false和具体的View有关，确切来说是可点击的View其CLICKABLE为true，不可点击的View其CLICKABLE为false。通过setClickable和setLongClickable可以改变View的LONG_CLICKABLE、CLICKABLE属性。另外，setOnClickListener和setOnLongClickListener会自动将View的LONG_CLICKABLE、CLICKABLE属性设置为true。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener l)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!isClickable()) &#123;</div><div class="line">		setClickable(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	getListenerInfo().mOnClickListener = l;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnLongClickListener</span><span class="params">(OnLongClickListener l)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!isLongClickable()) &#123;</div><div class="line">		setLongClickable(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	getListenerInfo().mOnLongClickListener = l;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[View的工作流程]]></title>
      <url>http://liuguoquan727.github.io/2016/04/26/Android-View%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>View的工作流程主要指measure、layout、draw这三大流程，即测量、布局和绘制，其中measure确定View的测量宽/高，layout确定View的最终宽/高和四个顶点的位置（即View在父容器中的放置位置），draw则将View绘制到屏幕上。</p>
<h1 id="measure过程"><a href="#measure过程" class="headerlink" title="measure过程"></a>measure过程</h1><p>measure过程要分情况来看，如果只是一个原始的View，那么通过measure方法就完成了其测量的过程，如果是一个ViewGroup，除了完成自己的测量过程外，还会遍历去调用所有子元素的measure方法，各个子元素再递归去执行这个流程。</p>
<h2 id="View的测量过程"><a href="#View的测量过程" class="headerlink" title="View的测量过程"></a>View的测量过程</h2><p>View的measure过程是由其measure方法来完成，measure方法是一个final类型的方法，这意味着子类不能重写此方法，在View的measure方法中会去调用View的onMeasure方法，因此只需要看onMeasure的实现即可，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">	setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class="line">			getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，setMeasuredDimension方法会设置View宽/高的测量值，因此我们只需要看getDefaultSize这个方法即可：</p>
<h2 id="测量的三种模式"><a href="#测量的三种模式" class="headerlink" title="测量的三种模式"></a>测量的三种模式</h2><ol>
<li><p>EXACTLY：精确值模式<br>当我们将控件的layout_width或layout_height属性指定为具体的数值时，或指定为match_parent属性时，系统使用的是EXACTLY模式。</p>
</li>
<li><p>AT_MOST：最大值模式<br>当我们将控件的layout_width或layout_height属性指定为wrap_content时,系统使用的是AT_MOST模式  </p>
</li>
<li><p>UNSPECIFIED：<br>此模式不指定其大小测量模式，View想多大就多大，通常情况系统绘制自定义View时才会使用  </p>
</li>
</ol>
<p><strong>Note:: View类默认的onMeasure()方法只支持EXACTLY模式，而如果要让自定义View支持wrap_content属性时，那么必须重写onMeasure()方法来指定wrap_content的大小</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> result = size;</div><div class="line">	<span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec); <span class="comment">//测量模式</span></div><div class="line">	<span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec); <span class="comment">//绘制的大小</span></div><div class="line"></div><div class="line">	<span class="keyword">switch</span> (specMode) &#123;</div><div class="line">	<span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">		result = size;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> MeasureSpec.AT_MOST: <span class="comment">//重写指定AT_MOST模式的值</span></div><div class="line">	<span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">		result = specSize;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，其实getDefaultSize返回的大小就是measureSpec中的specSize，而这个specSize就是View测量后的大小，这里多次提到测量后的大小是因为View的最终大小是在layout阶段确定的，所以必须加以区分，但是几乎所有情况下View的测量大小和最终大小是相等的。</p>
<p>在上述情况下，View的大小为getDefaultSize的第一个参数size，及宽高分别为getSuggestedMinimumWidth和getSuggestedMinimumHeight的返回值，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="layout过程"><a href="#layout过程" class="headerlink" title="layout过程"></a>layout过程</h1><p>Layout的作用是ViewGroup用来确定子元素的位置，当ViewGroup的位置被确定后，它在onLayout中会遍历所有子元素并调用其layout方法，View的layout方法中onLayout方法又会被调用。layout方法确定View本身的位置，而onLayout方法则会确定所有子元素的位置，View的layout方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</div><div class="line">		onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class="line">		mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> oldL = mLeft;</div><div class="line">	<span class="keyword">int</span> oldT = mTop;</div><div class="line">	<span class="keyword">int</span> oldB = mBottom;</div><div class="line">	<span class="keyword">int</span> oldR = mRight;</div><div class="line"></div><div class="line">	<span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class="line">			setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class="line">		onLayout(changed, l, t, r, b);</div><div class="line">		mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</div><div class="line"></div><div class="line">		ListenerInfo li = mListenerInfo;</div><div class="line">		<span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class="keyword">null</span>) &#123;</div><div class="line">			ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class="line">					(ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class="line">			<span class="keyword">int</span> numListeners = listenersCopy.size();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</div><div class="line">				listenersCopy.get(i).onLayoutChange(<span class="keyword">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class="line">	mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>layout方法大致流程如下：首先通过setFrame方法设定View的四个顶点的位置，即初始化mLeft、mTop、mBottom、mRight这四个值，View的四个顶点一旦确定，那么View在父容器的位置也就确定了；接着会调用onLayout方法，用途是父容器确定子元素的位置，和onMeasure方法类似，onLayout的具体实现同样和具体的布局有关，所以View和ViewGroup均没有真正的实现。我们可以看一下TextView的onLayout方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</div><div class="line">	<span class="keyword">if</span> (mDeferScroll &gt;= <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">int</span> curs = mDeferScroll;</div><div class="line">		mDeferScroll = -<span class="number">1</span>;</div><div class="line">		bringPointIntoView(Math.min(curs, mText.length()));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="draw过程"><a href="#draw过程" class="headerlink" title="draw过程"></a>draw过程</h1><p>Draw过程较简单，作用是将View绘制到屏幕上面。</p>
<p>当测量好一个View之后，我们就可以重写onDraw方法，并在Canvas对象上绘制所需要的图形，最终显示在屏幕上。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android的消息机制]]></title>
      <url>http://liuguoquan727.github.io/2016/04/26/Android%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="Android的消息机制概述"><a href="#Android的消息机制概述" class="headerlink" title="Android的消息机制概述"></a>Android的消息机制概述</h1><p>Android的消息机制主要是指Handler的运行机制，Handler的运行机制需要底层的MessageQueue和Looper的支撑。</p>
<p>MessageQueue的中文为消息队列，顾名思义，它的内部存储了一组消息，以队列的形式对外提供插入和删除的方法。虽然称为消息队列，但是它的<strong>内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息列表</strong>。</p>
<p>Looper的中文翻译是循环，这里可以理解为消息循环。由于MessageQueue只是一个消息的存储单元，它不能去处理消息，而Looper会以无限循环的形式其查询是否有新的消息，如果有的话就处理消息，否则就一直等待。</p>
<p>Looper中还有一个特殊的概念，那就是ThreadLocal，ThreadLocal并不是线程，它的作用是可以在每个线程中存储数据。我们知道，Handler创建的时候会采用当前线程的Looper来构造消息循环系统，那么Handler内部如何获取到当前线程的Looper呢？这就要使用ThreadLocal了，ThreadLocal可以在不同的线程中互不干扰地存储并提供数据，通过ThreadLocal就可以轻松地获取每个线程的Looper。</p>
<p>需要注意的是，线程是默认没有Looper的，如果需要使用Handler就必须为线程创建Looper。而主线程，即UI线程，它就是ActivityThread，ActivityThread被创建时就会初始化Looper，这也是在主线程中默认可以使用Handler的原因。</p>
<h1 id="Android消息机制分析"><a href="#Android消息机制分析" class="headerlink" title="Android消息机制分析"></a>Android消息机制分析</h1><p>Android消息机制主要是指Handler的运行机制以及Handler所附带的MessageQueue和Looper的工作过程，这三者实际上是一个整体。<strong>Handler的作用</strong>主要是将一个任务切换到某个指定的线程中去执行，那么Android为什么要提供这个功能呢？<strong>这是因为Android规定UI只能在主线程中进行，如果在子线程中访问UI，那么程序就会抛出运行时异常。</strong>ViewRootImp对UI操作做了验证，这个验证工作是由ViewRootImpl的checkThread方法来完成的，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkThread</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(mThread != Thread.currentThread()) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> CalledFromWrongThreadException(<span class="string">"Only the original thread that created a view hiearachy can touch its view"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Android建议我们不要在主线程中进行耗时的操作，否则会导致程序无法响应ANR。考虑一种情况，假如我们需要从服务器拉取一些信息并将其显示在UI上，这个时候必须在子线程中进行拉取工作，拉取完毕之后又不能在子线程中直接访问UI，如果没有Handler，那么我们确实没有办法将访问UI的工作切换到主线程中执行，因此，系统提供Handler的主要原因及时为了解决在子线程中无法访问UI的矛盾。</p>
<p><strong>系统为什么不允许在子线程中访问UI呢？</strong>这是 因为Android的UI控件不是线程安全的，如果在多线程中并发访问可能会导致UI控件处于不可预期的状态，而为什么系统不对UI控件的访问加上锁机制呢？缺点有两个：首先加上锁机制会让UI访问的逻辑变得复杂，其次锁机制会降低UI访问的效率，因为锁机制会阻塞某些线程的执行。因此最简单最高效的方法就是采用单线程模型来处理UI操作，对于开发者来说也不是很麻烦，只是需要通过Handler切换到UI访问的执行线程即可。</p>
<p>Handler的工作过程：Handler创建时会采用当前线程的Looper来构建内部的消息循环系统，如果当前线程没有Looper，那么就会报错；Handler创建完毕后，这个时候其内部的MessageQueue和Looper就可以协同工作了，然后通过Handler的post方法将一个Runnable传递到Handler内部的Looper中去处理，也可以通过Handler的send方法来发送一个消息，这个消息同样会在Looper中去处理。其实post方法最终也是在send方法中完成的。当Handler的send方法被调用时，它会调用MessageQueue的enqueueMessage方法将这个消息放入消息队列中，然后Looper发现有新消息到来时，就会处理这个消息，最终消息中的Runnable或者Handler的handleMessage方法就会被调用。</p>
<p>注意：Looper是运行在创建Handler所在的线程中的，这样一来Handler中的业务逻辑就被切换到创建Handler所在的线程中去执行了。</p>
<h2 id="ThreadLocal的工作原理"><a href="#ThreadLocal的工作原理" class="headerlink" title="ThreadLocal的工作原理"></a>ThreadLocal的工作原理</h2><p>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。</p>
<p>下面通过实际的例子来演示ThreadLocal的作用。首先定义一个ThreadLocal对象，这里选择Boolean类型的，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ThreadLocal&lt;Boolean&gt; mThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Boolean&gt;();</div></pre></td></tr></table></figure></p>
<p>然后在主线程、子线程1和子线程2中设置和访问它的值，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">   mThreadLocal.set(<span class="keyword">true</span>);</div><div class="line">   System.out.println(<span class="string">"main thread: "</span> + mThreadLocal.get()); <span class="comment">//true</span></div><div class="line">   </div><div class="line">   <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mThreadLocal.set(<span class="keyword">false</span>);</div><div class="line">		System.out.println(<span class="string">"thread 1: "</span> + mThreadLocal.get()); <span class="comment">//false</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;).start();</div><div class="line">   </div><div class="line">   <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"thread 2: "</span> + mThreadLocal.get()); <span class="comment">//null，没有设置值</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>上述代码中，根据对ThreadLocal的描述，主线中mThreadLocal.get()为true，子线程1中mThreadLocal.get()为false，子线程2中mThreadLocal.get()为null。代码运行打印如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">15</span>:54:55.478: I/System.out(11711): main thread: <span class="keyword">true</span></div><div class="line">01-09 15:54:55.479: I/System.out(11711): thread 1: <span class="keyword">false</span></div><div class="line">01-09 15:54:55.480: I/System.out(11711): thread 2: <span class="keyword">null</span></div></pre></td></tr></table></figure>
<p><strong>从上面的打印可以看出</strong>，虽然不同的线程访问的是同一个ThreadLocal对象，但是它们通过ThreadLocal获取的值却是不一样的，这就是ThreadLocal的特点。ThreadLocal之所以有如此特点，是因为不同线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前的ThreadLocal索引去查找对应的value值。很显然，不同线程中的数组是不同的，这就是为什么通过ThreadLocal可以在不同的线程中维护一套数据的副本并且互不干扰。</p>
<p>上面描述的ThreadLocal的使用方法和工作过程，下面分析ThreadLocal的内部实现，ThreadLocal是一个泛型类，它的定义为<code>public class ThreadLocal&lt;T&gt;</code>，只要弄清楚ThreadLocal的get和set方法就可以明白它的工作原理。</p>
<p>首先看get和set方法，如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    Thread currentThread = Thread.currentThread();</div><div class="line">    Values values = values(currentThread);</div><div class="line">    <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</div><div class="line">        values = initializeValues(currentThread);</div><div class="line">    &#125;</div><div class="line">    values.put(<span class="keyword">this</span>, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Values <span class="title">initializeValues</span><span class="params">(Thread current)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> current.localValues = <span class="keyword">new</span> Values();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Gets Values instance for this thread and variable type.</div><div class="line"> */</div><div class="line"><span class="function">Values <span class="title">values</span><span class="params">(Thread current)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> current.localValues;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的set方法中，首先会通过values方法来获取当前线程中的ThreadLocal数据，<strong>如何获取呢？</strong>在Thread内部有一个成员变量专门用于存储线程的ThreadLocal数据：ThreadLocal.Values localValues;因此获取当前线程的ThreadLocal数据就变得异常简单。如果localValues的值为null，那么久需要对其进行初始化化，初始化后再将ThreadLocal的值进行存储。</p>
<p>下面看一下ThreadLocal的值到底是如何在localValues中进行存储的。在localValues内部有一个数组：private Object[] table;ThreadLocal的值就存储在这个table数组中。下面看一下localValues是如何使用put方法将ThreadLocal的值存储到table数组中的，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sets entry for given ThreadLocal to given value, creating an</div><div class="line"> * entry if necessary.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</div><div class="line">    cleanUp();</div><div class="line"></div><div class="line">    <span class="comment">// Keep track of first tombstone. That's where we want to go back</span></div><div class="line">    <span class="comment">// and add an entry if necessary.</span></div><div class="line">    <span class="keyword">int</span> firstTombstone = -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = key.hash &amp; mask;; index = next(index)) &#123;</div><div class="line">        Object k = table[index];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (k == key.reference) &#123;</div><div class="line">            <span class="comment">// Replace existing entry.</span></div><div class="line">            table[index + <span class="number">1</span>] = value;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (firstTombstone == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">// Fill in null slot.</span></div><div class="line">                table[index] = key.reference;</div><div class="line">                table[index + <span class="number">1</span>] = value;</div><div class="line">                size++;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Go back and replace first tombstone.</span></div><div class="line">            table[firstTombstone] = key.reference;</div><div class="line">            table[firstTombstone + <span class="number">1</span>] = value;</div><div class="line">            tombstones--;</div><div class="line">            size++;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Remember first tombstone.</span></div><div class="line">        <span class="keyword">if</span> (firstTombstone == -<span class="number">1</span> &amp;&amp; k == TOMBSTONE) &#123;</div><div class="line">            firstTombstone = index;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码实现了数据的存储过程，我们可以由上可以得出一个存储规则，那就是ThreadLocal的值在table数组中的存储位置总是为ThreadLocal的reference字段所标识的对象的下一个位置，比如ThreadLocal的reference对在table数组中的索引为index，那么ThreadLocal的值在table数组中的索引就是index+1.最终ThreadLocal的值会被存储在table数组中：table[index + 1] = value;</p>
<p>接下来，分析get方法，如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Optimized for the fast path.</span></div><div class="line">    Thread currentThread = Thread.currentThread();</div><div class="line">    Values values = values(currentThread);</div><div class="line">    <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</div><div class="line">        Object[] table = values.table;</div><div class="line">        <span class="keyword">int</span> index = hash &amp; values.mask;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.reference == table[index]) &#123;</div><div class="line">            <span class="keyword">return</span> (T) table[index + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        values = initializeValues(currentThread);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (T) values.getAfterMiss(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，ThreadLocal的get方法同样是取出当前线程的localValues对象，如果这个对象不为null，那就取出它的table数组并找出ThreadLocal的reference对象在table数组中的位置，然后table数组中下一个位置所存储的数据就是ThreadLocal的值。如果这个对象为null，则返回初始值，初始值由ThreadLocal的initialValue方法来描述，默认情况下为null，当然也可以重写这个方法，它的默认实现如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function">Object <span class="title">getAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class="line">    Object[] table = <span class="keyword">this</span>.table;</div><div class="line">    <span class="keyword">int</span> index = key.hash &amp; mask;</div><div class="line"></div><div class="line">    <span class="comment">// If the first slot is empty, the search is over.</span></div><div class="line">    <span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</div><div class="line">        Object value = key.initialValue();</div><div class="line"></div><div class="line">        <span class="comment">// If the table is still the same and the slot is still empty...</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.table == table &amp;&amp; table[index] == <span class="keyword">null</span>) &#123;</div><div class="line">            table[index] = key.reference;</div><div class="line">            table[index + <span class="number">1</span>] = value;</div><div class="line">            size++;</div><div class="line"></div><div class="line">            cleanUp();</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// The table changed during initialValue().</span></div><div class="line">        put(key, value);</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>从ThreadLocal的set和get方法可以看出，它们所操作的对象都是当前线程的Values对象的table数组，因此在不同的线程中访问同一个ThreadLocal的set和get方法，它们对ThreadLocal所在的读/写权限仅限各自线程的内部，这就是ThreadLocal可以在不同线程中互不干扰的储存和修改数据的原因，理解ThreadLocal的工作方式有助于理解Looper的工作原理。</p>
</blockquote>
<h2 id="MessageQueue的工作原理"><a href="#MessageQueue的工作原理" class="headerlink" title="MessageQueue的工作原理"></a>MessageQueue的工作原理</h2><p>消息队列在Android中指的是MessageQueue，MessageQueue主要包括两个操作：插入和读取，读取操作会伴随着删除操作，插入和读取的方法分别是enqueueMessage和next，其中enqueueMessage的作用往往是往消息队列中插入一条消息，而next的作用是往消息队列中取出一条消息并将其从消息队列中移除。尽管MessageQueue叫消息队列，但是它的内部实现不是用的队列，而是通过一个单链表的数据结构来维护消息列表，单链表在插入和删除上效率较高。enqueueMessage的源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (msg.isInUse()) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">			IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</div><div class="line">					msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</div><div class="line">			Log.w(<span class="string">"MessageQueue"</span>, e.getMessage(), e);</div><div class="line">			msg.recycle();</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		msg.markInUse();</div><div class="line">		msg.when = when;</div><div class="line">		Message p = mMessages;</div><div class="line">		<span class="keyword">boolean</span> needWake;</div><div class="line">		<span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">			<span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">			msg.next = p;</div><div class="line">			mMessages = msg;</div><div class="line">			needWake = mBlocked;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Inserted within the middle of the queue.  Usually we don not have to wake</span></div><div class="line">			<span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">			<span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line"></div><div class="line">			needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">			Message prev;</div><div class="line">			<span class="keyword">for</span> (;;) &#123;</div><div class="line">				prev = p;</div><div class="line">				p = p.next;</div><div class="line">				<span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">					needWake = <span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">			prev.next = msg;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">		<span class="keyword">if</span> (needWake) &#123;</div><div class="line">			nativeWake(mPtr);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从enqueueMessage的实现来看，它的主要操作就是单链表的插入和删除，下面看一下next方法的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"> <span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// Return here if the message loop has already quit and been disposed.</span></div><div class="line">      <span class="comment">// This can happen if the application tries to restart a looper after quit</span></div><div class="line">      <span class="comment">// which is not supported.</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</div><div class="line">      <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></div><div class="line">      <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line"><span class="comment">//死循环</span></div><div class="line">      <span class="keyword">for</span> (;;) &#123;</div><div class="line">          <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</div><div class="line">              Binder.flushPendingCommands();</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line"></div><div class="line">          <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">              <span class="comment">// Try to retrieve the next message.  Return if found.</span></div><div class="line">              <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">              Message prevMsg = <span class="keyword">null</span>;</div><div class="line">              Message msg = mMessages;</div><div class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">                  <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class="line">                  <span class="keyword">do</span> &#123;</div><div class="line">                      prevMsg = msg;</div><div class="line">                      msg = msg.next;</div><div class="line">                  &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                  <span class="keyword">if</span> (now &lt; msg.when) &#123;</div><div class="line">                      <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class="line">                      nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                      <span class="comment">// Got a message.</span></div><div class="line">                      mBlocked = <span class="keyword">false</span>;</div><div class="line">                      <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</div><div class="line">                          prevMsg.next = msg.next;</div><div class="line">                      &#125; <span class="keyword">else</span> &#123;</div><div class="line">                          mMessages = msg.next;</div><div class="line">                      &#125;</div><div class="line">                      msg.next = <span class="keyword">null</span>;</div><div class="line">                      <span class="keyword">if</span> (<span class="keyword">false</span>) Log.v(<span class="string">"MessageQueue"</span>, <span class="string">"Returning message: "</span> + msg);</div><div class="line">                      <span class="keyword">return</span> msg;</div><div class="line">                  &#125;</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">// No more messages.</span></div><div class="line">                  nextPollTimeoutMillis = -<span class="number">1</span>;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="comment">// Process the quit message now that all pending messages have been handled.</span></div><div class="line">              <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">                  dispose();</div><div class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="comment">// If first time idle, then get the number of idlers to run.</span></div><div class="line">              <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></div><div class="line">              <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></div><div class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></div><div class="line">                      &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</div><div class="line">                  pendingIdleHandlerCount = mIdleHandlers.size();</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">                  <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></div><div class="line">                  mBlocked = <span class="keyword">true</span>;</div><div class="line">                  <span class="keyword">continue</span>;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</div><div class="line">                  mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</div><div class="line">              &#125;</div><div class="line">              mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// Run the idle handlers.</span></div><div class="line">          <span class="comment">// We only ever reach this code block during the first iteration.</span></div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class="line">              <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</div><div class="line">              mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></div><div class="line"></div><div class="line">              <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  keep = idler.queueIdle();</div><div class="line">              &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">                  Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"IdleHandler threw exception"</span>, t);</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="keyword">if</span> (!keep) &#123;</div><div class="line">                  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                      mIdleHandlers.remove(idler);</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></div><div class="line">          pendingIdleHandlerCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">          <span class="comment">// While calling an idle handler, a new message could have been delivered</span></div><div class="line">          <span class="comment">// so go back and look again for a pending message without waiting.</span></div><div class="line">          nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>可以发现next方法是一个无限循环的过程，如果消息队列中没有消息，那么next方法会一直阻塞在这里。当有新的消息到来时，next方法会返回这条消息并将其从单链表中移除。</p>
<h2 id="Looper的工作原理"><a href="#Looper的工作原理" class="headerlink" title="Looper的工作原理"></a>Looper的工作原理</h2><p>Looper在Android消息机制里面扮演着消息循环的角色，具体来说它会不停地从MessageQueue中查看是否有新消息，如有有新消息就会立刻处理，否则就会一直阻塞在那里。<br>首先看一下Looper的构造函数，在构造方法中它会创建一个MessageQueue即消息队列，然后将当前线程的对象存储起来，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">	&#125;</div><div class="line">	sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">	mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">	mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Handler的工作需要Looper，没有Looper的线程就会报错，那么如何为一个线程创建Looper呢？通过Looper.prepare()即可为当前线程创建一个Looper，接着通过Looper.loop()来开启消息循环，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Looper.prepare(); <span class="comment">//创建Looper</span></div><div class="line">		mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">super</span>.handleMessage(msg);</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (msg.what == <span class="number">0</span>) &#123;</div><div class="line">					</div><div class="line">					System.out.println(<span class="string">"msg: "</span> + <span class="string">"123456"</span>); </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		Looper.loop(); <span class="comment">//开启Looper循环</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 发送消息</div><div class="line">    * <span class="doctag">@param</span> view</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">   	</div><div class="line">   	mHandler.sendEmptyMessage(<span class="number">0</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 退出Looper循环</div><div class="line">    * <span class="doctag">@param</span> view</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">   	mHandler.getLooper().quit();</div><div class="line">	mHandler.getLooper().quitSafely(); <span class="comment">//API18</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Looper除了prepare方法外，还提供了prepareMainLooper()方法，这个方法主要是给主线程也就是ActivityThread创建Looper使用的，其本质也是通过prepare方法创建的。由于主线程的Looper比较特殊，所以Looper提供了一个getMainLooper方法，通过它可以在任何位置获取主线程Looper。</p>
<p>Looper也是可以退出的，Looper提供了quit和quitSafely来退出一个Looper，二者的区别在于：quit会直接退出Looper，而quitSafely只是设定一个退出标志，然后把消息队列中的已有消息处理完毕后才安全地退出。Looper退出后，提供Handler发送的消息会失败，这时Handler的send方法返回false。在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来终止消息循环，否则这个子线程会一直处于等待状态，而如果推出Looper以后，这个线程就会立刻终止，因此建议不需要的时候终止Looper。</p>
<p>Looper最重要的一个方法是loop方法，只有调用了loop后，消息循环系统才会真正的运行，实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Run the message queue in this thread. Be sure to call</div><div class="line">  * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">     <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">     <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">     <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">     Binder.clearCallingIdentity();</div><div class="line">     <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">     <span class="keyword">for</span> (;;) &#123;</div><div class="line">         Message msg = queue.next(); <span class="comment">// might bloc  退出时返回null</span></div><div class="line">         <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="comment">// No message indicates that the message queue is quitting. </span></div><div class="line">             <span class="keyword">return</span>; <span class="comment">//位移跳出循环的方式</span></div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">         Printer logging = me.mLogging;</div><div class="line">         <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">             logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                     msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         msg.target.dispatchMessage(msg); <span class="comment">//分发消息 msg.target = Handler</span></div><div class="line"></div><div class="line">         <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">             logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">         <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">         <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">         <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">             Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                     + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                     + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                     + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                     + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         msg.recycleUnchecked();</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Looper的loop方法工作过程，loop方法是一个死循环，位移跳出循环的方式是MessageQueue的next方法返回null。当Looper的quit方法被调用时，Looper就会调用MessageQueue的quit或者quitSafely方法来通知消息队列退出，当消息队列表计为退出状态时，它的next方法就返回null。</p>
<p>Looper必须退出，否则loop方法会无线循环下去。loop方法会调用MessageQueue的next方法来获取新的消息，而next是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里。如果MessageQueue的next方法返回了新的消息，Looper就会处理这条消息：msg.target.dispatchMessage(msg);这里的msg.target是发送这条消息的Handler对象，这样Handler的发送的消息最终在它的dispatchMessage中处理了。</p>
<h2 id="Handler的工作原理"><a href="#Handler的工作原理" class="headerlink" title="Handler的工作原理"></a>Handler的工作原理</h2><p>Handler的主要工作包含消息的发送和接收过程。消息的发送可以通过post的一系列方法以及send的一系列方法实现，post的一系列方法最终是通过send的一系列方法来实现的。发送一条消息典型过程如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</div><div class="line">			delayMillis = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">	MessageQueue queue = mQueue;</div><div class="line">	<span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">		RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">				<span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">		Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//送入消息队列</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">	msg.target = <span class="keyword">this</span>;</div><div class="line">	<span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">		msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，Handler发送消息的过程仅仅是向消息队列插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这是Handler就进入了消息处理阶段。dispatchMessage实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">		handleCallback(msg);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		handleMessage(msg);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Handler处理消息的过程如下：</p>
<p>首先，检查Message的Callback是否为null，不为null则通过handleCallback来处理消息，Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">	message.callback.run();  <span class="comment">//messge.callback = Runnable对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次，若Message的Callback是为null，则检查mCallback是否为null，不为null就调用mCallback的handleMessage方法来处理消息，Callback是个接口，定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Callback框图用如下方式创建Handler对象：Handler mHandler = new Handler(mCallback)。那么Callback的意义是什么了？可以用来创建一个Handler的实例但并不需要派生Handler的子类。</p>
<p>最后，若都为null，则直接调用Handler中的handlerMessage方法来处理消息。</p>
<p>Handler还有一种特使的构造函数，那就是通过一个特定的Looper来构造Handler，通过这个构造方法可以实现一些特殊的功能如IntentService，它的实现如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(looper, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Handler的一个默认构造方法public Handler()，这个构造方法会调用下面的的构造方法。很明显，如果当前线程没有Looper的话，就会抛出异常，这也解释了在没有Looper的子线程创建Handler会引发程序异常的原因。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">	mLooper = Looper.myLooper();</div><div class="line">	<span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">			<span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">	&#125;</div><div class="line">	mQueue = mLooper.mQueue;</div><div class="line">	mCallback = callback;</div><div class="line">	mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="主线程的消息循环"><a href="#主线程的消息循环" class="headerlink" title="主线程的消息循环"></a>主线程的消息循环</h1><p>Android的主线程就是ActivityThread，主线程的入口方法为main，在main方法中系统会通过Looper.prepareMainLooper()来创建主线程的Looper以及MessageQueue，并通过Looper.loop()开启主线程的消息循环，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	SamplingProfilerIntegration.start();</div><div class="line"></div><div class="line">	<span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class="line">	<span class="comment">// disable it here, but selectively enable it later (via</span></div><div class="line">	<span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class="line">	CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">	Environment.initForCurrentUser();</div><div class="line"></div><div class="line">	<span class="comment">// Set the reporter for event logging in libcore</span></div><div class="line">	EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line"></div><div class="line">	Security.addProvider(<span class="keyword">new</span> AndroidKeyStoreProvider());</div><div class="line"></div><div class="line">	Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line"></div><div class="line">	Looper.prepareMainLooper(); <span class="comment">//</span></div><div class="line"></div><div class="line">	ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">	thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">		sMainThreadHandler = thread.getHandler();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	AsyncTask.init();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">		Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">				LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Looper.loop(); <span class="comment">//无限循环</span></div><div class="line"></div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主线程的消息循环开始以后，ActivityThread需要一个Handler来和消息队列进行交互，这个Handler就是ActivityThread.H，它内部定义了一组消息类型，主要包含了四大组件的启动和停止等过程，如下所示</p>
<p>ActivityThread通过ApplicationThread和AMS进行进程间通信，AMS以进程间通信的方式完成ActivityThread的请求后回调ApplicationThread中的Binder方法，然后ApplicationThread会向H发送消息，H收到消息后会将ApplicationThread中的逻辑切换到ActivityThread中去执行，即切换到主线程中执行，这个过程就是主线程的消息循环模型。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android的线程和线程池]]></title>
      <url>http://liuguoquan727.github.io/2016/04/25/Android%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>线程在Android中是一个很重要的概念，从用途上来说，线程分为主线程和子线程，主线程主要处理和界面相关的事情，而子线程则往往用于执行耗时操作。由于Android的特性，如果在主线程中执行耗时操作那么就会导致程序无法及时地响应，因此耗时操作必须放在子线程中去执行。</p>
<p>在操作系统中，线程是操作系统调度的最小单元，同时线程又是一种受限的系统资源，即线程不可能无限制的产生，并且线程的创建和销毁都会有相应的开销。档系统中存在大量的线程时，系统会通过时间片轮转的方式调度每个线程，因此线程不可能做到绝对的并行，除非线程数量小于等于CPU核心数，一般来说这是不可能的。正确的做法是采用线程池，一个线程池会缓存一定数量的线程，通过线程池就可以避免因为频繁创建和销毁线程所带来的系统开销。</p>
<h1 id="主线程和子线程"><a href="#主线程和子线程" class="headerlink" title="主线程和子线程"></a>主线程和子线程</h1><p>Android沿用了Java的线程模型，其中的线程也分为主线程和子线程，其中主线程也叫UI线程。主线程的作用是运行四大组件以及处理它们和用户的交互，而子线程的作用则是执行耗时任务，比如网络请求、I/O操作等。从Android3.0开始系统要求网络访问必须在子线程中进行，否则网络访问将会失败并抛出NetworkOnMainThreadException这个异常，这样做事为了避免主线程由于耗时操作所阻塞而出现ANR异常。</p>
<h1 id="Android中的线程形态"><a href="#Android中的线程形态" class="headerlink" title="Android中的线程形态"></a>Android中的线程形态</h1><p>除了传统的Thread线程外，Android还提供了AsyncTask、HandlerTask以及IntentService，这三者的底层实现也是线程，但它们具有特殊的表现形式，同时在使用上也各有优缺点。</p>
<h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><p>AsyncTask是一种轻量级的异步任务类，它可以在线程池中执行后台任务，然后把执行的进度和最终结果传递给主线程并在主线程上更新UI。是实现上来说，<strong>AsyncTask封装了Thread和Handler</strong>，通过AsyncTask可以更加方便地执行后台任务以及在主线程中访问UI，但是AsyncTask并不适合进行特别耗时的任务，对应特别耗时的任务来说，建议使用线程池。</p>
<h3 id="AsyncTask使用"><a href="#AsyncTask使用" class="headerlink" title="AsyncTask使用"></a>AsyncTask使用</h3><p>AsyncTask是一个抽象的泛型类，它提供了Params、Progress和Result这三个泛型参数，其中Params表示输入参数的类型，Progress表示后台任务的执行进度的类型，而Result则表示后台任务返回结果的类型，如果AsyncTask确实不需要传递具体的参数，那么这三个泛型可以用Void来代替。声明如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>,<span class="title">Progress</span>,<span class="title">Result</span>&gt;</span></div></pre></td></tr></table></figure>
<p>AsyncTask提供了4个核心方法，它们的含义如下图所示</p>
<ol>
<li><p>onPreExecute()，在主线程中执行，在异步任务执行之前会调用此方法，一般可以用于做一些准备工作。</p>
</li>
<li><p>doInBackground(Params…params)，在线程池中执行，用于执行异步任务，params表示异步任务的输入参数。在该方法中可以通过调用publishProgress方法来更新任务的进度，因为publishProgress会调用onProgressUpdate方法。</p>
</li>
<li><p>onProgressUpdate(Progress…values)，在主线程中执行，当后台任务的执行进度发生改变时此方法会被调用。</p>
</li>
<li><p>onPostExecute(Result result)，在主线程中执行，在异步任务执行之后，次方法会被调用，其中result参数是后台任务的返回值，即doInBackground的返回值。  </p>
</li>
</ol>
<p>上述方法中，onPreExecute先执行，然后是doInBackground，最后才是onPostExecute。此外AsyncTask还提供了onCancelled()方法，它同样在主线程中执行，当异步任务被取消时，onCancelled()方法会被调用，这个时候onPostExecute则不会被调用。</p>
<p>下面代码为AsyncTask的一个应用实例： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadRecordTask</span> <span class="keyword">extends</span></span></div><div class="line">		<span class="title">AsyncTask</span>&lt;<span class="title">Object</span>, <span class="title">VideoInfo</span>, <span class="title">List</span>&lt;<span class="title">VideoInfo</span>&gt;&gt; &#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onPreExecute();</div><div class="line">		mDescLoad.setVisibility(View.VISIBLE);</div><div class="line">		mDescLoad.setText(R.string.refreshing);</div><div class="line">		mVideoRecords.setEnabled(<span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> List&lt;VideoInfo&gt; <span class="title">doInBackground</span><span class="params">(Object... params)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		videoInfos = (ArrayList&lt;VideoInfo&gt;) MediaContentResolverUtils</div><div class="line">				.getVideoInfoList(RecordVideoActivity.<span class="keyword">this</span>);</div><div class="line"></div><div class="line">		mVideoThumbnailMap = (HashMap&lt;String, String&gt;) mVideoThumbnailDao</div><div class="line">				.findAllToMap();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (videoInfos == <span class="keyword">null</span> || videoInfos.size() == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> videoInfos;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 没有缩略图 获取缩略图</span></div><div class="line">		<span class="keyword">for</span> (VideoInfo info : videoInfos) &#123;</div><div class="line"></div><div class="line">			String md5Name = Md5Utils.encode(info.getFileTitle());</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (!mVideoThumbnailMap.containsKey(md5Name)) &#123;</div><div class="line">				<span class="comment">//数据处理</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			publishProgress(info);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (isCancelled()) &#123; <span class="comment">//异步任务取消时会调用</span></div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> videoInfos;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(VideoInfo... values)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onProgressUpdate(values);</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (VideoInfo info : values) &#123;</div><div class="line">			<span class="comment">//UI更新进度</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(List&lt;VideoInfo&gt; result)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//取得后台任务的结果，更新UI</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 运行在UI线程，调用cancel()方法后触发，在doInBackground()方法结束后执行</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(List&lt;VideoInfo&gt; result)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCancelled(result);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行和取消该任务的代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mLoadRecordTask = <span class="keyword">new</span> LoadRecordTask();</div><div class="line">mLoadRecordTask.execute();</div><div class="line">mLoadRecordTask.cancel(<span class="keyword">true</span>); <span class="comment">//结束任务</span></div></pre></td></tr></table></figure>
<h3 id="AsyncTask条件限制"><a href="#AsyncTask条件限制" class="headerlink" title="AsyncTask条件限制"></a>AsyncTask条件限制</h3><ul>
<li>AsyncTask的类必须在主线程中加载</li>
<li>AsyncTask的对象必须在主线程中创建</li>
<li>execute方法必须在UI线程调用</li>
<li>不要在程序中直接调用onPreExecute()、onPostExecute()、doInBackgroud()和onProgressUpdate()</li>
<li>一个AsyncTask对象只能执行一次，即只能调用一次execute方法，否则会报运行时异常</li>
<li>在Android1.6之前，AsyncTask是串行执行任务的，Android1.6的时候AsyncTask开始采用线程池里处理并行任务，但从Android3.0开始，为了避免AsyncTask所带来的并发错误，AsyncTask又采用一个线程来串行执行任务。<strong>尽管如此，在Android3.0及以后版本中，我们仍然可以通过AsyncTask的executeOnExecutor方法（不能向下兼容）来并行的执行任务</strong></li>
</ul>
<h3 id="AsyncTask工作原理"><a href="#AsyncTask工作原理" class="headerlink" title="AsyncTask工作原理"></a>AsyncTask工作原理</h3><p>我们从AsyncTask的execute方法开始分析，execute方法又会调用ecuteOnExecutor方法，它们的实现如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></div><div class="line">        Params... params) &#123;</div><div class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</div><div class="line">        <span class="keyword">switch</span> (mStatus) &#123;</div><div class="line">            <span class="keyword">case</span> RUNNING:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span> <span class="comment">//异步任务执行一次</span></div><div class="line">                        + <span class="string">" the task is already running."</span>); </div><div class="line">            <span class="keyword">case</span> FINISHED:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span> <span class="comment">//异步任务执行一次</span></div><div class="line">                        + <span class="string">" the task has already been executed "</span></div><div class="line">                        + <span class="string">"(a task can be executed only once)"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mStatus = Status.RUNNING;</div><div class="line"></div><div class="line">    onPreExecute(); <span class="comment">//最先执行</span></div><div class="line"></div><div class="line">    mWorker.mParams = params;</div><div class="line">    exec.execute(mFuture); <span class="comment">//线程池开始执行</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码中，sDefaultExecutor实际上是一个串行的线程池，<strong>一个进程中所有的AsyncTask全部在这个串行的线程池中排队执行</strong>。在executeOnExecutor方法中，AsyncTask的onPreExecute()最先执行，然后线程池开始执行。下面分析线程池的执行过程，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line">       mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">           <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">               Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">               <span class="comment">//noinspection unchecked</span></div><div class="line">               <span class="keyword">return</span> postResult(doInBackground(mParams));</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//将AsyncTask的Params参数封装到FutureTask对象中，FutureTask的run方法会调用mWorker的call方法</span></div><div class="line">       mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   postResultIfNotInvoked(get());</div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                   android.util.Log.w(LOG_TAG, e);</div><div class="line">               &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occured while executing doInBackground()"</span>,</div><div class="line">                           e.getCause());</div><div class="line">               &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</div><div class="line">                   postResultIfNotInvoked(<span class="keyword">null</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors(); <span class="comment">//CPU核心数</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="number">1</span>; <span class="comment">//核心工作线程</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">//最多工作线程</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>; <span class="comment">//空闲线程的超时时间为1秒</span></div><div class="line"></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</div><div class="line">           = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</div><div class="line">                   TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div><div class="line"></div><div class="line"><span class="comment">//实现一个线程池</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class="line">       Runnable mActive;</div><div class="line"></div><div class="line">	<span class="comment">//线程同步</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">		<span class="comment">//将任务r插入mTasks任务队列中</span></div><div class="line">           mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                   <span class="keyword">try</span> &#123;</div><div class="line">                       r.run(); <span class="comment">//执行任务</span></div><div class="line">                   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                       scheduleNext(); <span class="comment">//继续执行下一个任务</span></div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">		</div><div class="line">		<span class="comment">//没有真正活动的AsyncTask时调用</span></div><div class="line">           <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">               scheduleNext(); </div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">               THREAD_POOL_EXECUTOR.execute(mActive); <span class="comment">//真正执行任务</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>从SerialExecutor的实现可以分析AsyncTask的排队执行情况。首先系统会将AsyncTask的Params参数封装到FutureTask对象中，FutureTask是一个并发类，在这里它充当了Runnable的作用(FutureTask实现了Runnable方法)。接着这个FutureTask即mFuture会交给SerialExecutor的execute方法去处理。SerialExecutor的execute方法首先会把FutureTask对象添加到任务队列mTasks中，如果当前没有正在活动的AsyncTask任务，那么就会调用SerialExecutor的scheduleNext方法来执行下一个AsyncTask任务，否则等待当前AsyncTask任务完成再继续执行新的AsyncTask任务，直到所有的AsyncTask任务执行完毕。<strong>从这可以看出，AsyncTask是串行执行任务的</strong></p>
<p>AsyncTask中有两个线程池（SerialExecutor和THREAD_POOL_EXECUTOR）和一个Handler（InternalHandler），其中线程池SerialExecutor用于执行任务的排队，线程池THREAD_POOL_EXECUTOR用于真正地执行AsyncTask任务，InternalHandler用于将执行环境从线程池切换到主线程。在AsyncTask的构造方法中有如下这么一段代码，由于FutureTask的run方法调用mWorker的call方法，因此mWorker的call方法最终会在线程池中执行。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            mTaskInvoked.set(<span class="keyword">true</span>); <span class="comment">//表示当前任务以及调用过了</span></div><div class="line"></div><div class="line">            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">            <span class="comment">//noinspection unchecked</span></div><div class="line">            <span class="keyword">return</span> postResult(doInBackground(mParams)); <span class="comment">//执行doInBackground方法</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//将AsyncTask的Params参数封装到FutureTask对象中，FutureTask的run方法会调用mWorker的call方法</span></div><div class="line">    mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                postResultIfNotInvoked(get());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                android.util.Log.w(LOG_TAG, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occured while executing doInBackground()"</span>,</div><div class="line">                        e.getCause());</div><div class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</div><div class="line">                postResultIfNotInvoked(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在mWorker的call方法中，首先将mTaskInvoked设为true，表示当前任务以及被调用了，然后执行AsyncTask的doInBackground方法，接着将其返回值传递给postResult方法，它的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">    message.sendToTarget();</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，postResult方法会通过sHandler发送一个MESSAGE_POST_RESULT的消息，这个sHandler的定义如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</div><div class="line">           <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</div><div class="line">               sHandler = <span class="keyword">new</span> InternalHandler();</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> sHandler;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                <span class="comment">// There is only one result</span></div><div class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                result.mTask.onProgressUpdate(result.mData);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，sHandler是一个静态的Handler类对象，为了能够将执行环境切换到主线程，这就sHandler这个对象必须在主线程中创建。<strong>由于静态成员会在加载类的时候进行初始化，因此这就变相要求AsyncTask的类必须在主线程中加载，否则同一进程中的AsyncTask都将无法正常工作</strong>。sHandler收到sHandlerMESSAGE_POST_PROGRESS会调用onProgressUpdate方法更新进度，收到MESSAGE_POST_RESULT这个消息后会调用AsyncTask的finish方法，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">        onCancelled(result);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        onPostExecute(result);</div><div class="line">    &#125;</div><div class="line">    mStatus = Status.FINISHED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AsyncTask的finish方法会判断AsyncTask是否取消执行了，是则调用onCancelled方法，否则调用onPostExecute(result)，此时doInBackground的返回结果会传递给onPostExecute方法，最后将任务状态mStatus置为完成。至此AsyncTask的整个过程就分析完成了。</p>
<p><strong>通过分析AsyncTask的源码，可以进一步确定，从Android3.0开始，默认情况下AsyncTask的确是串行执行。</strong>我们仍然可以通过AsyncTask的executeOnExecutor方法（不能向下兼容）来并行的执行任务。</p>
<h2 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h2><p>HandlerThread继承了Thread，它是一种可以使用Handler的Thread，它的实现也很简单，就是在run方法中通过Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许HandlerThread中创建Handler。HandlerThread的run方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	mTid = Process.myTid();</div><div class="line">	Looper.prepare();</div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		mLooper = Looper.myLooper();</div><div class="line">		notifyAll();</div><div class="line">	&#125;</div><div class="line">	Process.setThreadPriority(mPriority);</div><div class="line">	onLooperPrepared();</div><div class="line">	Looper.loop();</div><div class="line">	mTid = -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从HandlerThread的实现来看，它和普通的Thread有显著的不同之处。普通Thread主要同于run方法中执行一个耗时任务，而HandlerThread在内部创建了消息队列，外界需要通过Handler的消息方式来通知HandlerThread执行一个具体任务。HandlerThread是个很有用的类，它在Android中的一个具体的使用场景是IntentService。由于HandlerThread的run方法是一个无限循环，因此当明确不需要再使用HandlerThread时，可以通过它的quit或者quitSafely方法来终止线程的执行，这是一个好的编程习惯。示例代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThreadDemo</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Looper mLooper;</div><div class="line">	<span class="keyword">private</span> MyHandlerThread mHandlerThread;</div><div class="line">	<span class="keyword">private</span> TextView mInfoTxt;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Handler mHandler;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_thread);</div><div class="line">		</div><div class="line">		mInfoTxt  = (TextView) findViewById(R.id.tv_info);</div><div class="line">		</div><div class="line">		mHandlerThread = <span class="keyword">new</span> MyHandlerThread(<span class="string">"mHandlerThread"</span>);</div><div class="line">		mHandlerThread.start(); <span class="comment">//先start</span></div><div class="line">		mLooper = mHandlerThread.getLooper();</div><div class="line">		</div><div class="line">		<span class="comment">//注册到Handler，通过Handler发送消息</span></div><div class="line">		mHandler = <span class="keyword">new</span> Handler(mLooper,mHandlerThread);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">		</div><div class="line">		mHandler.sendEmptyMessage(<span class="number">1</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerThread</span> <span class="keyword">extends</span> <span class="title">HandlerThread</span> <span class="keyword">implements</span> <span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">MyHandlerThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>(name);</div><div class="line">			<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (msg.what == <span class="number">1</span>) &#123;</div><div class="line">				System.out.println(<span class="string">"mHandlerThread"</span>);</div><div class="line">				mInfoTxt.setText(<span class="string">"mHandlerThread"</span>);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h2><p>IntentService是一种特殊的Service，它继承了Service并且它是一个抽象类，因此必须创建它的子类才能使用IntentService。IntentService可用于执行后台耗时的后台，当任务执行后它会自动停止，同时由于IntentService是服务的原因，这导致它的优先级比单纯的线程要高很多，所以IntentService比较适合执行一些高优先级的后台任务，因为它的优先级高不容易被系统杀死。在实现上，IntentService封装了HandlerThread和Handler，这一点可以在它的onCreate方法中看出来，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> It would be nice to have an option to hold a partial wakelock</span></div><div class="line">    <span class="comment">// during processing, and to have a static startService(Context, Intent)</span></div><div class="line">    <span class="comment">// method that would launch the service &amp; hand off a wakelock.</span></div><div class="line"></div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</div><div class="line">    thread.start();</div><div class="line"></div><div class="line">    mServiceLooper = thread.getLooper();</div><div class="line">    mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当IntentService被第一次启动时，它的onCreate方法会被调用，onCreate方法会创建一个HandlerThread，然后使用它的Looper来构造一个Handler对象mServiceHandler，这样通过mServiceHandler发送的消息最终都会在HandlerThread中执行，从这个角度来看，IntentService也可以用于执行后台任务。<strong>每次启动IntentService，它的onStartCommand方法就会调用一次</strong>，IntentService在onStartCommand中处理每个后台任务的Intent。下面看一下onStartCommand方法是如何处理外界Intent的，onStartCommand调用了onStart，onStart方法的实现如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">	Message msg = mServiceHandler.obtainMessage();</div><div class="line">	msg.arg1 = startId;</div><div class="line">	msg.obj = intent;</div><div class="line">	mServiceHandler.sendMessage(msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，IntentService仅仅是通过mServiceHandler发送了一个消息，这个消息会在HandlerThread中去处理。mServiceHandler收到消息后，会将Intent对象对象传递给onHandleIntent方法去处理。注意这个Intent对象的内容和外界的startService(intent)中的intent的内容是完全一致的，通过这个Intent对象即可解析出外界启动IntentService时所传递的参数，通过这些参数就可以区分具体的后台任务，这样在onHandleIntent方法中就可以对不同的后台任务做处理了。当onHandleIntent方法执行结束后，IntentService会通过stopSelf（int startId）来尝试停止服务。<strong>这里之所以采用stopSelf（int startId）而不是stopSelf（）来停止服务，是因为stopSelf（）会立刻停止服务，而这个时候还可能有其他消息未处理，stopSelf（int startId）则会等待所有的消息都处理完毕后才终止服务</strong>。一般来说，stopSelf（int startId）在尝试停止服务之前会判断最近启动服务的次数是否和startId相等，如果相等就立刻停止服务，不相等则不停止服务，这个策略可以从AMS的stopServiceToken方法的实现中找到依据。ServiceHandler的实现如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(looper);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">		onHandleIntent((Intent)msg.obj);</div><div class="line">		stopSelf(msg.arg1);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>IntentService的onHandleIntent方法是一个抽象方法，它需要我们在子类中实现，它的作用是从Intent参数中区分具体的任务并执行这些任务。如果目前只存在一个后台任务，那么onHandleIntent(Intent)方法执行完这个任务后，stopSelf（int startId）就会直接停止服务；如果目前存在多个后台任务，那么当onHandleIntent方法执行完最后一个任务时，stopSelf（int startId）才会直接停止服务。另外，由于没执行一个后台任务就必须启动一次IntentService，而IntentService内部则通过消息的方式向HandlerThread请求执行任务，Handler中的Looper是顺序处理消息的，这就意味着IntentService也是顺序执行后台任务，当有多个后台任务同时存在时，这些后台任务会按照外界发起的顺序排队执行。</p>
<p>下面通过一个示例来说明IntentService的工作方式，首先派生一个IntentService的子类，它的实现如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalIntentService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LocalIntentService</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(<span class="string">"LocalIntentService"</span>);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"onStartCommand"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		String action = intent.getStringExtra(<span class="string">"task"</span>);</div><div class="line">		System.out.println(<span class="string">"action: "</span> + action);</div><div class="line">		SystemClock.sleep(<span class="number">3000</span>); <span class="comment">//休眠模拟耗时的后台任务</span></div><div class="line">		<span class="keyword">if</span> (action.equals(<span class="string">"task1"</span>)) &#123;</div><div class="line">			System.out.println(<span class="string">"handle action: "</span> + action);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (action.equals(<span class="string">"task2"</span>)) &#123;</div><div class="line">			System.out.println(<span class="string">"handle action: "</span> + action);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (action.equals(<span class="string">"task3"</span>)) &#123;</div><div class="line">			System.out.println(<span class="string">"handle action: "</span> + action);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"onDestroy"</span>);</div><div class="line">		<span class="keyword">super</span>.onDestroy();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LocalIntentService实现完成以后，就可以在外界请求执行后台任务了，下面在Activity中发起3个后台任务的请求，如下所示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Intent service = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, LocalIntentService.class);</div><div class="line">service.putExtra(<span class="string">"task"</span>, <span class="string">"task1"</span>);</div><div class="line">startService(service);</div><div class="line">service.putExtra(<span class="string">"task"</span>, <span class="string">"task2"</span>);</div><div class="line">startService(service);</div><div class="line">service.putExtra(<span class="string">"task"</span>, <span class="string">"task3"</span>);</div><div class="line">startService(service);</div></pre></td></tr></table></figure>
<p>运行程序，观察日记如下</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">22</span>:<span class="number">14</span>:<span class="number">19.407</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): onStartCommand</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">19.407</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): action: task1</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">19.407</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): onStartCommand</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">19.408</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): onStartCommand</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">22.407</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): handle action: task1</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">22.409</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): action: task2</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">25.410</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): handle action: task2</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">25.418</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): action: task3</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">28.418</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): handle action: task3</div><div class="line"><span class="number">01</span>-<span class="number">08</span> <span class="number">22</span>:<span class="number">14</span>:<span class="number">28.429</span>: I/<span class="keyword">System</span>.<span class="keyword">out</span>(<span class="number">16384</span>): onDestroy</div></pre></td></tr></table></figure>
<p>从日志可以看出，三个后台任务是排队执行的，它们的执行顺序就是它们发起请求对的顺序。当task3执行完毕后，LocalIntentService才真正地停止，执行了onDestroy方法。</p>
<h1 id="Android中的线程池"><a href="#Android中的线程池" class="headerlink" title="Android中的线程池"></a>Android中的线程池</h1><p>线程池的有点主要有三点：</p>
<ul>
<li><p>重用线程池中的线程，避免因为线程的创建和销毁所带来的性能开销</p>
</li>
<li><p>能有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞现象。</p>
</li>
<li><p>能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。</p>
</li>
</ul>
<p>Android中的线程池概念来源于Java中的Executor，Executor是一个接口，真正的线程池的实现为ThreadPoolExecutor。ThreadPoolExecutor提供了一系列参数来配置线程池，通过不同的参数可以创建不同的线程池。由于Android中的线程池都是直接或者间接通过配置ThreadPoolExecutor来实现的，因此需要先介绍ThreadPoolExecutor。</p>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>ThreadPoolExecutor是线程池的真正实现，它的构造方法提供了一系列参数来配置线程池，下面介绍ThreadPoolExecutor的构造方法中各个参数的含义，这些参数将会直接影响到线程池的功能特性，下面是ThreadPoolExecutor的一个比较常用的构造方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                          <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                          <span class="keyword">long</span> keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                          ThreadFactory threadFactory) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>corePoolSize</strong>  </li>
</ul>
<p>线程池的核心线程数，默认情况下，核心线程会在线程池中一直存活，即使他们处于闲置状态。如果将ThreadPoolExecutor的allowCoreThreadTimeout属性设置为true，那么闲置的核心线程在等待新任务到来会有超时策略，这个时间间隔由keepAliveTime所指定，当等待时间超时keepAliveTime所指定的时长后，核心线程会被终止。</p>
<ul>
<li><strong>maximumPoolSize</strong></li>
</ul>
<p>线程池所能容纳的最大线程数，当活动线程达到这个数值后，后续的新任务将会被阻塞。</p>
<ul>
<li><strong>keepAliveTime</strong></li>
</ul>
<p>非核心线程闲置时的超时时长，超过这个时间，非核心线程就会被收回。当ThreadPoolExecutor的allowCoreThreadTimeout属性设置为true时，keepAliveTime同样会作用于核心线程。</p>
<ul>
<li><strong>unit</strong></li>
</ul>
<p>用于指定keepAliveTime参数的时间单位，这是一个枚举，常用的有TimeUnit.MILLISECONDS;TimeUnit.SECONDS;TimeUnit.MINUTES等</p>
<ul>
<li><strong>workQueue</strong></li>
</ul>
<p>线程池的任务队列，通过线程池的execute方法提交的Runnable对象会存储在这个参数中。</p>
<ul>
<li><strong>ThreadFactory</strong></li>
</ul>
<p>线程工厂，为线程池提供创建新线程的功能。ThreadFactory是一个接口，它只有一个方法：Thread newThread(Runnable r);</p>
<p>除上面的这些主要的参数外，ThreadPoolExecutor还有一个不常用的参数RejectedExecutionHandler。当线程池无法执行新的任务时，这可能是由于任务队列已满或者是无法成功执行任务，这个时候ThreadPoolExecutor回调用RejectedExecutionHandler的rejectedExecution(Runnable r, ThreadPoolExecutor executor)方法来通知调用者，默认情况下rejectedExecution会直接抛出一个RejectedExecutionException的运行时异常。ThreadPoolExecutor为RejectedExectutionHandler提供了几个可选值：CallerRunsPolicy、AbortPolicy、DiscardPolicy、DiscardOldestPolicy，其中AbortPolicy是默认值，但是RejectedExecutionHandler这个参数不常用。</p>
<p>ThreadPoolExecutor执行任务时大致遵循如下规则：</p>
<ul>
<li><p>如果线程池中的线程数量未达到核心线程的数量，那么会直接启动一个核心线程来执行任务</p>
</li>
<li><p>如果线程池中的线程数量已经达到或超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。</p>
</li>
<li><p>如果在步骤2中无法将任务插入到任务队列中，这往往是由于任务队列已满，这个时候如果线程数量未达到线程池规定的最大值，那么会立刻启动一个非核心线程来执行任务。</p>
</li>
<li><p>如果步骤3中线程数量已经达到线程池中规定的最大值，那么就拒绝执行此任务，ThreadPoolExecutor会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者。</p>
</li>
</ul>
<p>ThreadPoolExecutor的参数配置在AsyncTask中有明显的体现，下面是AsyncTask中的线程池配置情况</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</div><div class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * An &#123;<span class="doctag">@link</span> Executor&#125; that can be used to execute tasks in parallel.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</div><div class="line">        = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</div><div class="line">                TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</div></pre></td></tr></table></figure>
<p>AsyncTask线程池配置后的规格如下：</p>
<ul>
<li>核心线程数等于CPU核心数+1</li>
<li>线程池的最大线程数为CPU的核心数的2倍 + 1</li>
<li>核心线程无超时机制，非核心线程在闲置时的超时时间为1秒</li>
<li>任务队列的容量为128</li>
</ul>
<h2 id="线程池的分类"><a href="#线程池的分类" class="headerlink" title="线程池的分类"></a>线程池的分类</h2><ul>
<li><strong>FixedThreadPool</strong></li>
</ul>
<p>通过Executors的newFixedThreadPool方法来创建。它是一种线程数量固定的线程池，当线程处于空闲状态时，它们并不会被收回，除非线程池关闭了。当所有的线程都处于活动状态时，新任务都会处于等待状态，直到有线程空闲出来。由于FixedThreadPool只有核心线程并且这些核心线程都不会被回收，<strong>这意味着它能够更加快速的响应外界的请求</strong>。实现如下，可以发现FixedThreadPool中只有核心线程并且这些核心线程没有超时机制，另外任务队列也是没有大小限制的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">    * @param nThreads the number of threads in the pool</div><div class="line">    * @return the newly created thread pool</div><div class="line">    * </div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                     <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                     <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>CachedThreadPool</strong></li>
</ul>
<p>通过Executors的newCachedThreadPool方法来创建。它是一种线程数量不定的线程池，它只有非核心线程，并且最大线程数为Integer.MAX_VALUE。由于Integer.MAX_VALUE是一个很大的数，实际上就相当于最大线程数可以任意大。当线程池中的线程都处于活动状态时，线程池会创建新的线程来处理新任务，否则就会利用空闲的线程来处理新的任务。线程池中的空闲线程都有超时机制，这个超时时长为60秒，超过60秒闲置线程就会被回收。和FixedThreadPool不同的是，CachedThreadPool的任务队列其实相当于一个空集合，这将导致任何任务都会立即被执行，因为这种情况下SynchronousQueue是无法插入任务的。SynchronousQueue是一个非常特殊的队列，很多情况下可以理解为一个无法存储元素的队列（实际中很少使用）。从CachedThreadPool的特性来看<strong>这类线程池比较适合执行大量的耗时较少的任务</strong>。当整个线程池都处于闲置状态时，线程池中的线程都会超时而被停止，这个时候CachedThreadPool之中是没有任何线程的，它几乎不占用任何系统资源的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>ScheduledThreadPoll</strong></li>
</ul>
<p>通过Executors的newScheduledThreadPool方法来创建。它的核心线程数量是固定的，而非核心线程数量是没有限制的，并且当核心线程闲置时会被立即收回。ScheduledThreadPoll这类线程<strong>主要用于执行定时任务和具有固定周期的重复任务</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">								   ThreadFactory threadFactory) &#123;</div><div class="line">	<span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</div><div class="line">		  <span class="keyword">new</span> DelayedWorkQueue(), threadFactory);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>SingleThreadExecutor</strong></li>
</ul>
<p>通过Executors的newSingleThreadExecutor方法来创建。这类线程池内部只有一个核心线程，它确保所有的任务都在同一个线程中顺序执行。SingleThreadExecutor的意义在于统一所有的外界任务到一个线程中，这使得在这些任务之间不需要处理线程同步的问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</div><div class="line">		(<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">								<span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">								<span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android的IPC方式]]></title>
      <url>http://liuguoquan727.github.io/2016/04/19/Android%E7%9A%84IPC%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h1><p>四大组件中的三大组件（Activity、Service、BroadcastReceiver）都是支持在Intent中传递Bundle数据的，由于Bundle实现了Parcelable接口，所以它可以方便地在不同的进程间传输，基于这一点，当我们在一个进程中启动了另一个进程的Activity、Service和BroadcastReceiver，我们就可以在Bundle中附加我们需要传输给远程进程的信息并通过Intent发送出去。当然，我们传输的数据必须能够被序列化，比如基本类型、实现了Parcelable接口的对象、实现了Serializable接口的对象以及一些Android所支持的特殊对象（如Bundle、Size、SizeF、IBinder）。</p>
<h1 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h1><p>共享文件也是一种不错的进程间通信方式，两个进程提供读/写同一个文件来交换数据，比如A进程把数据写入文件，B进程提供读取这个文件来获取数据。通过文件交换数据很好使用，除了可以交换一些文本信息外，我们还可以序列化一个对象到文件中，从另一进程中恢复这个对象。</p>
<p>通过文件共享方式来共享数据对文件格式是没有具体要求的，比如可以是文本文件，也可以是XML文件，只要读写双方约定数据格式即可。通过文件共享的方式是有局限性的，比如并发读/写的问题，因此我们要尽量避免并发写这种情况的发生或者考虑使用线程同步来限制多个线程的写操作。通过上面的分析可以知道，<strong>文件共享方式适合在对数据同步要求不高的进程之间进行通信</strong>，并且要妥善处理并发读/写的问题。</p>
<p>SharedPreference是个特例，SharedPreference是Android中提供的轻量级存储方案，它通过键值对的方式来存储数据，在底层实现上采用XML文件来存储键值对，每个应用的SharedPreference文件都可以在当前包所在的data目录下查到，一般来说，它的目录位于/data/data/package name/shared_prefs目录下。<strong>从本质上来说，</strong>SharedPreference属于文件的一种，但是由于系统对它的读/写有一定的缓存策略2，即在内存中会有一份SharedPreference文件的缓存。因此在多进程模式下，系统对它的读/写变得不可靠，当面对搞并发的读/写访问时，SharedPreference有很大几率会丢失数据，因此不建议在进程间通信中使用SharedPreference。</p>
<h1 id="Messenger"><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h1><p>Messenger可以翻译为信使，通过它可以在不同进程中传递Message对象，在Message中放入我们需要传递的数据，就可以轻松实现数据的进程间传递,也可以在同一个进程中使用。Messenger是一种轻量级的IPC方案，它的底层实现是AIDL。Messenger类的构造方法如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(Handler target)</span> </span>&#123;</div><div class="line">	mTarget = target.getIMessenger();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(IBinder target)</span> </span>&#123;</div><div class="line">	mTarget = IMessenger.Stub.asInterface(target);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Messenger使用简单，它对AIDL做了封装。同时，由于它一次处理一个请求，因此在服务端我们不用考虑线程同步的问题，这是因为服务端不存在并发执行的情形。实现一个Messenger由如下几个步骤，分为服务端和客户端。</p>
<ul>
<li><strong>1. 服务端进程</strong></li>
</ul>
<p>首先，我们需要在服务端创建一个Service来处理客户端的连接请求，同时创建一个Handler，并通过它来创建一个Messenger对象，然后在Service的onBind中返回这个Messenger对象底层的Binder即可。</p>
<ul>
<li><strong>2. 客户端进程</strong></li>
</ul>
<p>客户端进程中，首先要绑定服务端的Servcie，绑定成功后用服务端返回的IBinder对象创建一个Messenger，通过这个Messenger就可以向服务器发送消息了，发送消息类型为Message对象。如果需要服务端回应客户端蛮久和服务端一样，我们还需要创建一个Handler并创建一个新的Messenger，并把这个Messenger对象通过Messge的replyTo参数传递给服务端，服务端通过这个replyTo参数就可以回应客户端。</p>
<p>首先是服务端的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//1.创建Handler对象处理Message</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">case</span> Constants.MSG_FROM_CLIENT:</div><div class="line">				</div><div class="line">				System.out.println(<span class="string">"receiver msg from client: "</span> + msg.getData().get(<span class="string">"msg"</span>));</div><div class="line">				</div><div class="line">				<span class="comment">//返回信息到服务端</span></div><div class="line">				<span class="comment">//获取客户端接收消息的Messenger</span></div><div class="line">				Messenger client = msg.replyTo;</div><div class="line">				Message replyMessage = Message.obtain();</div><div class="line">				replyMessage.what = Constants.MSG_FROM_SERVER;</div><div class="line">				Bundle data = <span class="keyword">new</span> Bundle();</div><div class="line">				data.putString(<span class="string">"reply"</span>, <span class="string">"嗯，你的消息我已经收到!"</span>);</div><div class="line">				replyMessage.setData(data);</div><div class="line">				</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					client.send(replyMessage);</div><div class="line">				&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">					<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				<span class="keyword">break</span>;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			</div><div class="line">			<span class="keyword">super</span>.handleMessage(msg);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//2.创建一个Messenger,将客户端发送的消息传递给MessengerHandler处理</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line"></div><div class="line">	<span class="comment">//3.返回Messenger对象底层Binder</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> mMessenger.getBinder();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，注册Service</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;service</div><div class="line">    android:name="com.ryg.chapter_2.messenger.MessengerService"</div><div class="line">    android:process=":remote" &gt;</div><div class="line">&lt;/service&gt;</div></pre></td></tr></table></figure>
<p>最后是客户端代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Messenger mService;</div><div class="line">	</div><div class="line">	<span class="comment">//将服务端返回的消息传递MessengerHandler处理</span></div><div class="line">	<span class="keyword">private</span> Messenger mGetReplyMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			</div><div class="line">			<span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">case</span> Constants.MSG_FROM_SERVER:</div><div class="line">				</div><div class="line">				System.out.println(<span class="string">"receiv msg from server: "</span> + msg.getData().getString(<span class="string">"reply"</span>));</div><div class="line">				</div><div class="line">				<span class="keyword">break</span>;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">super</span>.handleMessage(msg);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="comment">//2.创建一个Messenger</span></div><div class="line">			mService = <span class="keyword">new</span> Messenger(service);</div><div class="line">			</div><div class="line">	    	<span class="comment">//3.通过Messenger发送Message消息到服务端</span></div><div class="line">	    	<span class="keyword">if</span> (mService != <span class="keyword">null</span>) &#123;</div><div class="line">				Message msg = Message.obtain();</div><div class="line">				msg.what = Constants.MSG_FROM_CLIENT;</div><div class="line">				Bundle data = <span class="keyword">new</span> Bundle();</div><div class="line">				data.putString(<span class="string">"msg"</span>, <span class="string">"hello,this is client"</span>);</div><div class="line">				msg.setData(data);</div><div class="line">				</div><div class="line">				<span class="comment">//将接收服务端回复的Messenger传递给服务端，必须要传递过去，否则收不到回复</span></div><div class="line">				msg.replyTo = mGetReplyMessenger;</div><div class="line">				</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					mService.send(msg);</div><div class="line">				&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">					<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="comment">//1.绑定服务</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MessengerService.class);</div><div class="line">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    	<span class="keyword">if</span> (mConnection != <span class="keyword">null</span>) &#123;</div><div class="line">			</div><div class="line">    		unbindService(mConnection);</div><div class="line">		&#125;</div><div class="line">    	<span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="number">13</span>:<span class="number">20</span>:<span class="number">43.218</span>: I/System.<span class="keyword">out</span>(<span class="number">3280</span>): receiver msg <span class="keyword">from</span> client: hello,<span class="keyword">this</span> <span class="keyword">is</span> client</div><div class="line"><span class="number">01</span><span class="number">-11</span> <span class="number">13</span>:<span class="number">20</span>:<span class="number">43.234</span>: I/System.<span class="keyword">out</span>(<span class="number">3222</span>): receiv msg <span class="keyword">from</span> server: 嗯，你的消息我已经收到!</div></pre></td></tr></table></figure>
<p>通过上面的例子可以看出，在Messenger中进行数据传递必须将数据放入Message中，而Messenger和Message都实现了Parcelable接口，因此可以跨进程传输。简单来说，Message中所支持的数据类型就是Messenger中所支持的传输类型。实际上，通过Messenger来传输Message，Message中能使用的载体只有what、arg1、arg2、Bundle以及reply。Message中的另一个字段object在同一进程中的很实用的，但是再进程间通信的时候，在Android2.2以前object字段不支持跨进程传输，即便是android2.2以后，也仅仅是系统提供的实现了Parcelable接口的对象才能通过它来传输，这就意味着我们自定义的Parcelable对象无法通过object字段来传输。因此使用Bundle可以支持大量的数据类型。</p>
<h1 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h1><p>Messenger是以串行的方式处理客户端发来的消息，如果大量的消息同时发送到服务器，服务端仍然只能一个一个处理,（1）如果有大量的并发请求，那么用Messenger就不太合适了。同时，Messenger的作用仅仅是为了传递消息，（2）很多时候我们可能需要跨进程调用服务端的方法，这种情形用Messenger就无法做到了，但是我们可以使用AIDL来实现跨进程的方法调用。</p>
<p>下面介绍使用AIDL来进行进程间通信的流畅，分为服务端和客户端两个方面</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>服务端要首先创建一个Service用来监听客户端的连接，然后创建一个AIDL文件，将暴露给客户端的接口再这个AIDL文件中声明，最后在Service中实现这个AIDL接口。</p>
<p>（1）AIDL接口的创建<br>创建一个后缀为aidl的文件，在里面声明了一个接口和两个接口方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//IBookManager.aidl</span></div><div class="line"></div><div class="line"><span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.ryg.chapter_2.aidl.Book;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在AIDL文件中，并不是所有的数据类型都是可以使用的，AIDL到底支持哪些数据类型呢？如下所示</p>
<ul>
<li>基本数据类型</li>
<li>String和CharSequence</li>
<li>List：只支持ArrayList，并且里面的每个元素必须能够被AIDL支持</li>
<li>Map： 只支持HashMap，并且里面的每个元素都必须能够被AIDL文件支持，包括key和value</li>
<li>Parcelable：所有实现了Parcelable接口的对象</li>
<li>AIDL：所有的AIDL接口本身也可以在AIDL文件中使用</li>
</ul>
<p>以上6中就是AIDL支持的数据类型，其中自定义的Parcelable对象和AIDL对象必须要显示的import进来，不管它们是否和当前的AIDL文件位于同一个文件夹内。</p>
<p>IBookManager.aidl文件中引用了Book这个类，Book类是一个自定义的Parcelable对象，所以必须新建一个与它同名的AIDL文件，并在其中声明它为Parcelable，如下所示：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//Book.aidl</div><div class="line"></div><div class="line">package com.ryg.chapter_2.aidl<span class="comment">;</span></div><div class="line"></div><div class="line">parcelable Book<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>除此之外，AIDL中除了基本数据类型，其他类型的参数必须标上方向：in、out或者inout，in表示输入型参数，out表示输出型参数，inout表示输入输出型参数。</p>
<p>AIDL的包结构在客户端工程和服务端工程中要保持一致，否则会运行出错，这是因为客户端需要反序列化服务端中和AIDL接口相关的所有类，如果类的完整路径不一致，就无法成功反序列化，程序也就无法正常运行。</p>
<p>（2）远程服务端service的实现  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;Book&gt;();</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> mBookList;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">if</span> (!mBookList.contains(book)) &#123;</div><div class="line">				mBookList.add(book);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCreate();</div><div class="line">		</div><div class="line">		mBookList.add(<span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"Android"</span>));</div><div class="line">		mBookList.add(<span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">"IOS"</span>));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> mBinder;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面是一个服务端Service的典型实现，首先在onCreate中初始化添加两本书的信息，然后创建一个Binder对象并在Binder中返回次对象，这个对象继承自IBookManager.Stub并实现了内部的AIDL方法。这里采用了CopyOnWriteArrayList，这个CopyOnWriteArrayList支持并发读/写。AIDL方法是在服务端的Binder线程池中执行的，因此当多个客户端同时连接的时候，会存在多个线程同时访问的情形，所以我们要在AISL方法中处理线程的同步，这里使用CopyOnWriteArrayList来进行自动的线程同步。</p>
<p>AIDL中能够使用的List只有ArrayList，但是我们这里使用的CopyOnWriteArrayList不是继承自ArrayList，为什么能够正常工作呢？这是因为AIDL所支持的是抽象的List，而List只是一个接口，因此虽然服务端返回的是CopyOnWriteArrayList，但在Binder中会按照List的规范去访问数据并最终形成一个ArrayList传递给客户端。所以，在服务端采用CopyOnWriteArrayList是完全可行的，与此类似的类还有ConCureentHashMap。</p>
<p>注册Service</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.ryg.chapter_2.aidl.BookManagerService"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":remote1"</span> &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端首先要绑定远程服务，绑定成功后将服务端返回的Binder对象转换成AIDL接口，然后就可以通过这个接口去调用服务端的远程方法了，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		IBookManager bookManager = IBookManager.Stub.asInterface(service);</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			List&lt;Book&gt; list = bookManager.getBookList();</div><div class="line">			System.out.println(<span class="string">"query book list type: "</span> + list.getClass().getCanonicalName());</div><div class="line">			System.out.println(<span class="string">"query book list: "</span> + list.toString());</div><div class="line">			</div><div class="line">			bookManager.addBook(<span class="keyword">new</span> Book(<span class="number">3</span>, <span class="string">"Windows Phone"</span>));</div><div class="line">			list = bookManager.getBookList();</div><div class="line">			System.out.println(<span class="string">"query book list: "</span> + list.toString());</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	setContentView(R.layout.activity_main);</div><div class="line">	Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">	bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="number">14</span>:<span class="number">51</span>:<span class="number">36</span>.<span class="number">937</span>: I/System.out(<span class="number">24841</span>): query <span class="keyword">book </span>list type: java.util.ArrayList  //CopyOnWriteArrayList转为Arraylist</div><div class="line"><span class="number">01</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">36</span>.<span class="number">937</span>: I/System.out(<span class="number">24841</span>): query <span class="keyword">book </span>list: [<span class="keyword">Book </span>[<span class="keyword">bookId=1, </span><span class="keyword">bookName=Android], </span><span class="keyword">Book </span>[<span class="keyword">bookId=2, </span><span class="keyword">bookName=IOS]]</span></div><div class="line"><span class="number">01</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">36</span>.<span class="number">939</span>: I/System.out(<span class="number">24841</span>): query <span class="keyword">book </span>list: [<span class="keyword">Book </span>[<span class="keyword">bookId=1, </span><span class="keyword">bookName=Android], </span><span class="keyword">Book </span>[<span class="keyword">bookId=2, </span><span class="keyword">bookName=IOS], </span><span class="keyword">Book </span>[<span class="keyword">bookId=3, </span><span class="keyword">bookName=Windows </span>Phone]]</div></pre></td></tr></table></figure>
<h2 id="Binder意外死亡的处理办法"><a href="#Binder意外死亡的处理办法" class="headerlink" title="Binder意外死亡的处理办法"></a>Binder意外死亡的处理办法</h2><p>（1）给Binder设置DeathRecipinent监听，当Binder死亡时，会收到binderDied的回调，在此回调中重新连接远程服务，次方法在客户端的Binder线程池中调用，不能直接访问UI  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> IBinder.DeathRecipient mDeathRecipient = <span class="keyword">new</span> IBinder.DeathRecipient() &#123;</div><div class="line">	</div><div class="line">	<span class="comment">//Binder死亡时的回调方法</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binderDied</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">if</span> (bookManager == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		bookManager.asBinder().unlinkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">		bookManager = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		<span class="comment">//重新绑定远程服务</span></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent(BookManagerActivity.<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">		bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		bookManager = IBookManager.Stub.asInterface(service);</div><div class="line">		<span class="comment">//给binder设置死亡代理</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			service.linkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (RemoteException e1) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>（2）在onServiceDisconnected中重连远程服务，此方法在客户端的UI线程中调用  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="comment">//重新绑定远程服务</span></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent(BookManagerActivity.<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">		bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		bookManager = IBookManager.Stub.asInterface(service);</div><div class="line">		<span class="comment">//给binder设置死亡代理</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			service.linkToDeath(mDeathRecipient, <span class="number">0</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (RemoteException e1) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AIDL中使用权限验证功能"><a href="#AIDL中使用权限验证功能" class="headerlink" title="AIDL中使用权限验证功能"></a>AIDL中使用权限验证功能</h2><p>默认情况下，我们的远程服务任何人都可以连接，所以我们必须给服务加入权限验证功能，权限验证失败则无法调用服务的方法，这里介绍两种常用的方法。</p>
<ul>
<li><strong>onBind中验证</strong></li>
</ul>
<p>早onBind中进行验证，验证不通过就直接返回null，这样验证失败的客户端无法绑定服务，比如使用permission验证。首先，在Manifest.xml中声明所需要的权限，比如：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;permission </div><div class="line">    android:<span class="built_in">name</span>=<span class="string">"com.ryg.chapter_2.permission.ACCESS_BOOK_SERVICE"</span></div><div class="line">    android:protectionLevel=<span class="string">"normal"</span>&gt;</div></pre></td></tr></table></figure>
<p>然后在BookManagerService的onBind做权限验证，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	<span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"com.ryg.chapter_2.permission.ACCESS_BOOK_SERVICE"</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (check == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//客户端就无法绑定到此服务</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> mBinder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方法同样适用于Messenger中。如果我们自己内部的应用想绑定到我们的服务中，只需要在它的AndroidManifest文件中使用permission即可</p>
<uses-permission android:name="com.ryg.chapter_2.permission.ACCESS_BOOK_SERVICE">

<ul>
<li><strong>服务端的onTransact方法中验证</strong></li>
</ul>
<p>在服务端的onTransact方法中进行权限验证，验证失败就返回false，这样服务端就不会终止执行AIDL中的方法从而达到保护服务端的效果。至于验证的方式有很多，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> mBookList;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">if</span> (!mBookList.contains(book)) &#123;</div><div class="line">			mBookList.add(book);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span></div><div class="line">			<span class="keyword">throws</span> RemoteException &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		<span class="comment">//1.通过permission验证</span></div><div class="line">		<span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"com.ryg.chapter_2.permission.ACCESS_BOOK_SERVICE"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (check == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//2.验证包名</span></div><div class="line">		String packageName = <span class="keyword">null</span>;</div><div class="line">		String[] packages = getPackageManager().getPackagesForUid(getCallingUid());</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (packages != <span class="keyword">null</span> &amp;&amp; packages.length &gt; <span class="number">0</span>) &#123;</div><div class="line">			packageName = packages[<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (!packageName.startsWith(<span class="string">"com.ryg"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面介绍了常用的两种权限验证方式，但是还有其他方式做权限验证，比如为Service指定android:permission属性等。</p>
<h1 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h1><p>ContentProvider是Android中专门用于不同应用间进行数据共享的方式，从这一点来看，它天生适合进程间通信。和Messenger一样，ContentProvider的底层实现同样是Binder。</p>
<p>系统预置了许多ContentProvider，比如通讯录信息<br>日程表信息等，要跨进程访问这些信息，只需要通过ContentResolver的query、update、insert和delete方法。下面我们演示实现一个自定义的ContentProvider，并演示如何在其他应用中获取ContentProvider中的数据从而实现进行间通信的目的。首先，创建一个ContentProvider的类，叫BookProvider，并实现6个抽象方法即可onCreate、query、delete、update、insert和getType。onCreate代表ContentProvider的创建，需要做一些初始化的工作；getType用来返回一个Uri请求所对应的MIME类型，比如视频、图片、等，如果应用不关心这个选项，可以直接在方法中返回null或者“*/*”剩下的四个方法对应于CRUD操作，对数据表的增删改查功能。</p>
<p>根据Binder的工作原理，这留个方法均运行在ContentProvider的进程中，除了onCreate有系统回调运行在主线程里，其他无非方法由外界回调并运行在Binder线程池中。</p>
<p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BookProvider.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"onCreate current thread:"</span> + Thread.currentThread().getName());</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection,</span></span></div><div class="line">			String[] selectionArgs, String sortOrder) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"query current thread:"</span> + Thread.currentThread().getName());</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection,</span></span></div><div class="line">			String[] selectionArgs) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们需要注册这个BookProvider，如下所示。其中android:anthorities是ContentProvider的唯一标识，通过这个属性外部应用就可以访问我们的BookProvide。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;provider</div><div class="line">    android:name=<span class="string">"com.ryg.chapter_2.provider.BookProvider"</span></div><div class="line">    android:authorities=<span class="string">"com.ryg.chapter_2.provider.book.provider"</span> <span class="regexp">//</span>标识</div><div class="line">    android:permission=<span class="string">"com.ryg.PROVIDER"</span> <span class="regexp">//</span>权限</div><div class="line">    android:process=<span class="string">":provider"</span></div><div class="line">    <span class="regexp">//</span>ndroid:readPermission=<span class="string">"com.ryg.PROVIDER.READ"</span> <span class="regexp">//</span>读权限</div><div class="line">    <span class="regexp">//</span>android:writePermission=<span class="string">"com.ryg.PROVIDER.WRITE"</span> &gt;  <span class="regexp">//</span>写权限</div><div class="line">&lt;<span class="regexp">/provider&gt;</span></div></pre></td></tr></table></figure>
<p>然后声明权限和加入权限</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"com.ryg.PROVIDER"</span> /&gt;</div><div class="line"></div><div class="line">  &lt;permission</div><div class="line">      android:<span class="built_in">name</span>=<span class="string">"com.ryg.PROVIDER"</span></div><div class="line">      android:protectionLevel=<span class="string">"normal"</span> /&gt;</div></pre></td></tr></table></figure>
<p>创建BookActivity.java访问这个ContentProvider，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		Uri uri = Uri.parse(<span class="string">"content://com.ryg.chapter_2.provider.book.provider"</span>);</div><div class="line">		getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码中，我们提供ContentResolver对象的query方法查询BookProvider中的数据，其中”content://com.ryg.chapter_2.provider.book.provider”位移标识了BookProvider，这个标识正式为BookProvider的android:authorities属性所指定的值。</p>
<p>运行结果如下</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> 16:50:31.678: I/System.<span class="keyword">out</span>(22482): onCreate current thread:main        <span class="comment">//主线程</span></div><div class="line">01-11 16:50:31.680: I/System.<span class="keyword">out</span>(22482): <span class="keyword">query</span> current thread:Binder_2  <span class="comment">//Binder线程池中</span></div><div class="line">01-11 16:50:31.681: I/System.<span class="keyword">out</span>(22482): <span class="keyword">query</span> current thread:Binder_1</div><div class="line">01-11 16:50:31.682: I/System.<span class="keyword">out</span>(22482): <span class="keyword">query</span> current thread:Binder_2</div><div class="line">01-11 16:50:31.682: I/System.<span class="keyword">out</span>(22482): <span class="keyword">query</span> current thread:Binder_1</div></pre></td></tr></table></figure>
<p>从结果可以看出，onCreate运行于主线程中，所以不能在onCreate中做耗时操作，query方法的四次调用不在同一个线程中，但是在同一个Binder线程池中。</p>
<p>接下来，我们继续完善BookProvider，从而使其对外界的应用提供数据。为了完成上述功能，我们需要一个数据库来管理图示和用户信息，如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"book_provider.db"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BOOK_TABLE_NAME = <span class="string">"book"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_TABLE_NAME = <span class="string">"user"</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="comment">//图书列表</span></div><div class="line">	<span class="keyword">private</span> String CREATE_BOOK_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + BOOK_TABLE_NAME +<span class="string">"(_id INTEGER PRIMARY KEY, name TEXT)"</span>;</div><div class="line">	<span class="comment">//用户列表</span></div><div class="line">	<span class="keyword">private</span> String CREATE_USER_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + USER_TABLE_NAME +<span class="string">"(_id INTEGER PRIMARY KEY, name TEXT, sex INT)"</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BookOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		db.execSQL(CREATE_BOOK_TABLE);</div><div class="line">		db.execSQL(CREATE_USER_TABLE);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，分别为book表和user表指定Uri，并关联对应的uri——code</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"book_provider.db"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BOOK_TABLE_NAME = <span class="string">"book"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_TABLE_NAME = <span class="string">"user"</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="comment">//图书列表</span></div><div class="line">	<span class="keyword">private</span> String CREATE_BOOK_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + BOOK_TABLE_NAME +<span class="string">"(_id INTEGER PRIMARY KEY, name TEXT)"</span>;</div><div class="line">	<span class="comment">//用户列表</span></div><div class="line">	<span class="keyword">private</span> String CREATE_USER_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + USER_TABLE_NAME +<span class="string">"(_id INTEGER PRIMARY KEY, name TEXT, sex INT)"</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BookOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	.......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们就可以通过如下方式获取外界要访问点饿数据源，根据Uri取出Uri_code，根据Uri_code得到数据表的名称</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getTableName</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line"></div><div class="line">	String tableName = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">switch</span> (sUriMatcher.match(uri)) &#123;</div><div class="line"></div><div class="line">	<span class="keyword">case</span> BOOK_URI_CODE:</div><div class="line"></div><div class="line">		tableName = BookOpenHelper.BOOK_TABLE_NAME;</div><div class="line">		</div><div class="line">		<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	<span class="keyword">case</span> USER_URI_CODE:</div><div class="line">		</div><div class="line">		tableName = BookOpenHelper.USER_TABLE_NAME;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> tableName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们就实现query、update、insert、delete方法了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY = <span class="string">"com.ryg.chapter_2.provider.book.provider"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri BOOK_CONTENT_URI = Uri.parse(<span class="string">"content://"</span></div><div class="line">			+ AUTHORITY + <span class="string">"/book"</span>);</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOK_URI_CODE = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri USER_CONTENT_URI = Uri.parse(<span class="string">"content://"</span></div><div class="line">			+ AUTHORITY + <span class="string">"/user"</span>);</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> USER_URI_CODE = <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMatcher sUriMatcher = <span class="keyword">new</span> UriMatcher(</div><div class="line">			UriMatcher.NO_MATCH);</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">// 将Uri和Uri_Code关联起来</span></div><div class="line">		sUriMatcher.addURI(AUTHORITY, <span class="string">"book"</span>, <span class="number">0</span>);</div><div class="line">		sUriMatcher.addURI(AUTHORITY, <span class="string">"book"</span>, <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Context mContext;</div><div class="line">	<span class="keyword">private</span> SQLiteDatabase db;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		mContext = getContext();</div><div class="line">		initData();</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		db = <span class="keyword">new</span> BookOpenHelper(mContext).getWritableDatabase();</div><div class="line">		db.execSQL(<span class="string">"delete from "</span> + BookOpenHelper.BOOK_TABLE_NAME);</div><div class="line">		db.execSQL(<span class="string">"delete from "</span> + BookOpenHelper.USER_TABLE_NAME);</div><div class="line">		db.execSQL(<span class="string">"insert into book values(2,'Android');"</span>);</div><div class="line">		db.execSQL(<span class="string">"insert into book values(3,'IOS');"</span>);</div><div class="line">		db.execSQL(<span class="string">"insert into book values(4,'Window Phone');"</span>);</div><div class="line">		db.execSQL(<span class="string">"insert into user values(6,'lee',1);"</span>);</div><div class="line">		db.execSQL(<span class="string">"insert into book values(7,'lau',0);"</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection,</span></span></div><div class="line">			String[] selectionArgs, String sortOrder) &#123;</div><div class="line">		</div><div class="line">		String table = getTableName(uri);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> db.query(table, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		String table = getTableName(uri);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		db.insert(table, <span class="keyword">null</span>, values);</div><div class="line">		mContext.getContentResolver().notifyChange(uri, <span class="keyword">null</span>); <span class="comment">//通过数据源变化</span></div><div class="line">		</div><div class="line">		<span class="keyword">return</span> uri;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		String table = getTableName(uri);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> count = db.delete(table, selection, selectionArgs);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (count &gt;<span class="number">0</span>) &#123;</div><div class="line">			mContext.getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection,</span></span></div><div class="line">			String[] selectionArgs) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		String table = getTableName(uri);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI: "</span> + uri);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> row = db.update(table, values, selection, selectionArgs);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (row &gt; <span class="number">0</span>) &#123;</div><div class="line">			mContext.getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> row;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">getTableName</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line"></div><div class="line">		String tableName = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">switch</span> (sUriMatcher.match(uri)) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> BOOK_URI_CODE:</div><div class="line"></div><div class="line">			tableName = BookOpenHelper.BOOK_TABLE_NAME;</div><div class="line">			</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> USER_URI_CODE:</div><div class="line">			</div><div class="line">			tableName = BookOpenHelper.USER_TABLE_NAME;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> tableName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问BookProvider</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> ContentObserver mObserver = <span class="keyword">new</span> ContentObserver(<span class="keyword">new</span> Handler()) &#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange, Uri uri)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			System.out.println(uri);</div><div class="line">			<span class="keyword">super</span>.onChange(selfChange, uri);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		</div><div class="line">		Uri uri = Uri.parse(<span class="string">"content://com.ryg.chapter_2.provider.book.provider/book"</span>);</div><div class="line">		getContentResolver().registerContentObserver(uri, <span class="keyword">false</span>, mObserver);</div><div class="line">		ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">		values.put(<span class="string">"_id"</span>, <span class="number">7</span>);</div><div class="line">		values.put(<span class="string">"name"</span>, <span class="string">"Html"</span>);</div><div class="line">		getContentResolver().insert(uri, values);</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，query、update、insert、delete四大方法是存在多线程并发访问的，因此方法内部要做好线程同步本例中，由于采用的是SQLite并且只有一个SQLiteDataBase的连接，所以可以正确应对多线程的情况。具体原因是SQLiteDatabase内部对数据库的操作是有同步处理的，但是如果通过多个SQLiteDatabase对象来操作数据库就无法保证线程同步，因为SQLiteDatabase对象之间无法进行线程同步。如果ContentProvider的底层数据是一块内存的话，比如List，在这种情况下同List的遍历、插入、删除操作就需要进行线程同步，否则就会引起并发错误。</p>
<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>Socket又称为套接字，是网络通信的概念，它分为流式套接字和用户数据报套接字，分别对应于网络传输层的TCP和UDP协议。TCP是面向连接的协议，提供稳定的双向通信功能，TCP连接的建立需要经过“三次握手”才能完成，为了提供稳定的数据传输功能，其本身提供了超时重传机制，因此具有很高的稳定性；而UDP是面向无连接的协议，提供不稳定的单向通信功能，当然UDP也可以实现双向通信功能。在性能上，UDP具有更高的效率，其缺点是不能保证数据一定能够正确传输，尤其是在网络拥塞的情况下。</p>
<p>下面示例一个聊天室程序，首先是服务端的设计，当Service启动时，会在线程中建立TCP服务，这里监听的是8688端口，然后就可以等待客户端的连接请求。当有客户端连接时，就会生成一个新的Socket，通过每次新创建的Socket就可以分别和不同的客户端通信了。当客户端断开连接时，服务端这边也会关闭对应Socket并结束通话线程。这点是如何做到的呢？这里是通过判断服务端输入流的返回值来确定的，当客户端断开连接后，服务端这边的输入流会返回null，这个时候我们就知道客户端退出了。服务端代码如下：</p>
<h1 id="选用合适的IPC方式"><a href="#选用合适的IPC方式" class="headerlink" title="选用合适的IPC方式"></a>选用合适的IPC方式</h1><table>
<thead>
<tr>
<th>名称</th>
<th>优点</th>
<th>缺点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bundle</td>
<td>简单易用</td>
<td>只能传输Bundle支持的数据类型</td>
<td>四大组件间的进程间通信</td>
</tr>
<tr>
<td>文件共享</td>
<td>简单易用</td>
<td>不适合高并发场景，并且无法做到进程间的即时通信</td>
<td>无并发访问情形，交换简单的数据实时性不高的场景</td>
</tr>
<tr>
<td>AIDL</td>
<td>功能强大，支持一对多并发通信，支持实时通信</td>
<td>使用稍复杂，需要处理好现场同步</td>
<td>一对多通信且有RPC需求</td>
</tr>
<tr>
<td>Messenger</td>
<td>功能一般，支持一对多串行通信，支持实时通信</td>
<td>不能很好地处理搞并发情形，不支持RPC，数据通过Messenger进行传输，因此只能传输Bundle支持的数据类型</td>
<td>低并发的一对多即时通信，无RPC需求，或者无需要返回结果的RPC需求</td>
</tr>
<tr>
<td>ContentProvider</td>
<td>在数据源访问方面功能强大，支持一对多并发数据共享，可通过Call方法扩展其他操作</td>
<td>可以理解为受约束的AIDL，主要提供数据源的CRUD操作</td>
<td>一对多的进程间的数据共享</td>
</tr>
<tr>
<td>Socket</td>
<td>功能强大，可通过网络传输字节流，支持一对多并发实时通信</td>
<td>实现细节稍微有些烦琐，不支持直接的RPC</td>
<td>网络数据交换</td>
</tr>
</tbody>
</table>
</uses-permission>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android的IPC机制]]></title>
      <url>http://liuguoquan727.github.io/2016/04/19/Android%E7%9A%84IPC%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="Android-IPC简介"><a href="#Android-IPC简介" class="headerlink" title="Android IPC简介"></a>Android IPC简介</h2><p>IPC是Inter-Process Communication的缩写，含义为进程间通信，是指两个进程之间进行数据交换的过程。</p>
<p>Android中IPC的使用情况分为两种：</p>
<ul>
<li><p>第一种情况是一个应用因为某些原因自身需要采用多进程模式来实现，至于原因，可能有很多，比如有些模块由于特殊的原因需要运行在单独的进程中，又或者为了加大一个应用可使用的内存所以需要通过多进行来获取多分内存空间。</p>
</li>
<li><p>第二种情况是当前应用需要向其他应用获取数据，由于是两个应用，所以必须采用跨进程的方式来获取所需要的数据，甚至我们系统提供的ContentProvider去查询数据的时候，其实也是一种进程间通信，只不过通信细节被系统内部屏蔽了。</p>
</li>
</ul>
<h2 id="Android中的多进程模式"><a href="#Android中的多进程模式" class="headerlink" title="Android中的多进程模式"></a>Android中的多进程模式</h2><h3 id="开启多进行模式"><a href="#开启多进行模式" class="headerlink" title="开启多进行模式"></a>开启多进行模式</h3><p>正常情况下，在Android中多进程是指一个应用中存在多个进程的情况，因此这里不讨论两个应用之间的多进程情况。首先，在Android中使用多进程只有一种方法，就是给四大组件在AndroidManifest中指定android:process属性，除此之外没有其他办法。其实还有另一种非常规的多进程方法，那就是通过JNI在native层其fork一个新的进程，这种方法属于特殊情况，也不是常用的创建多进程的方式。下面示例，描述如何在Android中创建多进程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">"com.example.demo.AActivity"</span></div><div class="line">    android:process=<span class="string">":remote"</span> /&gt;</div><div class="line"></div><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">"com.example.demo.BActivity"</span></div><div class="line">    android:process=<span class="string">"com.example.demo.BaseActivity.remote"</span> /&gt;</div></pre></td></tr></table></figure>
<p>上面示例分为为AActivity和BActivity指定了process属性，并且他们的属性值不同，意味着当前应用又增加了两个进程。当AActivity启动时，系统会为它创建一个单独的进程，进程名为”com.example.demo.BaseActivity:remote”；当BActivity启动时，系统也会为它创建一个单独的进程，进程名为”com.example.demo.BaseActivity.remote”。</p>
<p>“:remote”和”com.example.demo.BaseActivity.remote”这两种命名方式的区别？</p>
<ul>
<li><p>首先“:”的含义是指要在当前的进程名前面附加当前的包名，而”com.example.demo.BaseActivity.remote”是完整的命名方式不会附加包名信息</p>
</li>
<li><p>其次，进程名以“:”开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，而进程名不易“：”开头的进程属于全局进程，其他应用通过ShareUID方式可以和它跑在同一个进程中。</p>
</li>
</ul>
<h3 id="多进程模式的运行机制"><a href="#多进程模式的运行机制" class="headerlink" title="多进程模式的运行机制"></a>多进程模式的运行机制</h3><p>Android为你每个应用分配了一个独立的虚拟机，或者说为每个进程都分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这就会导致在不同的虚拟机中访问同一个类对象会产生多份副本。</p>
<p>所有运行在不同进程中的四大组件，只要它们之间需要通过内存来共享数据，都会共享失败，这也是多线程所带来的主要影响。</p>
<p>一般来说，使用多线程会造成如下四个方面的问题：</p>
<ul>
<li>（1）静态成员和单例模式完全失效</li>
</ul>
<p>Android为你每个应用分配了一个独立的虚拟机，或者说为每个进程都分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这就会导致在不同的虚拟机中访问同一个类对象会产生多份副本。</p>
<ul>
<li>（2）线程同步机制完全失效</li>
</ul>
<p>本质上和第一个问题是类似的，既然都不是一块内存了，那么不管锁对象还是锁全局类都无法保证线程同步，因为不同进程锁的不是同一个对象。</p>
<ul>
<li>（3）SharedPreference的可靠性下降</li>
</ul>
<p>是因为SharedPreference不支持两个进程同步去执行写操作，否则会导致一定几率的丢失，这是因为SharedPreference底层是通过读/写XML文件实现的，并发写文件显然是可能出问题的，甚至并发读/写都有可能出问题。</p>
<ul>
<li>（4）Application会多次创建</li>
</ul>
<p>当一个组件跑在一个新的进程中的时候，<strong>由于系统要在创建新的进程同时分配独立的虚拟机，所以这个过程其实就是启动一个新应用的过程</strong>。因此，相当于系统又把这个应用重新启动了一遍，既然重新启动了，那么自然会创建新的Application。</p>
<p>在多进程模式中，不同进程的组件的确会拥有独立的虚拟机、Application和内存空间。</p>
<p>为了解决这个问题，Android系统提供了很多跨进程通信方法实现数据交互。如Intent来传递数据，共享文件和SharedPreference，基于Binder的Messenger和AIDL，Socket等。</p>
<h2 id="IPC基础概念介绍"><a href="#IPC基础概念介绍" class="headerlink" title="IPC基础概念介绍"></a>IPC基础概念介绍</h2><h3 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h3><p>Serializable是Java所提供的一个序列化接口，它是一个空接口，为对象提供标准的序列化和反序列化操作。使用Serializable来实现序列化相当简单只需要在类的声明中指定一个类似下面的标志即可自动实现默认的序列化过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5123020951483359287L</span>; <span class="comment">//系统生成的hash值</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>; <span class="comment">//指定为1L</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5123020951483359287L</span>; <span class="comment">//系统生成的hash值</span></div><div class="line">	</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> 		userId;</div><div class="line">	<span class="keyword">public</span> String 	userName;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> 	isMale;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [userId="</span> + userId + <span class="string">", userName="</span> + userName</div><div class="line">				+ <span class="string">", isMale="</span> + isMale + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Serializable接口来实现对象的序列化过程非常简单，几乎所有的工作都被系统自动完成了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//序列化存储</span></div><div class="line">User user = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"liuguoquan"</span>, <span class="keyword">true</span>);</div><div class="line">	ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(Environment.getExternalStorageDirectory()+<span class="string">"/cache.txt"</span>));</div><div class="line">	out.writeObject(user);</div><div class="line">	out.close();</div><div class="line"></div><div class="line"><span class="comment">//反序列化</span></div><div class="line">	ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(Environment.getExternalStorageDirectory()+<span class="string">"/cache.txt"</span>));</div><div class="line">	User newUser = (User) in.readObject();</div><div class="line">	in.close();</div></pre></td></tr></table></figure>
<p>上述代码描述了采用Serializable方式序列化对象的典型过程，很简单，只需要把实现了Serializable接口的User对象写到文件中就可以快速恢复了，恢复后的对象newUser和user的内容完全一样，但是两者并不是同一个对象。</p>
<p>其实，不指定serialVersionUID也可以实现序列化，那到底要不要指定呢？系统既然提供了这个serialVersionUID，那么它必须是有用的，原则上序列化的数据中的serialVersionUID只有和当前类的serialVersionUID相同时才能够正常地被反序列化。</p>
<p>serialVersionUID的详细工作机制是这样的：序列化的时候系统会把当前类的serialVersionUID写入序列化的文件中，当反序列化的时候系统会去检查文件中的serialVersionUID，看它是否和当前类的serialVersionUID一致，如果一致说明序列化的类版本与当前类的版本是相同的则可以成功反序列化；否则就说明当前类和序列化的类相比发生了某些变化，比如成员变量的数量、类型可能发生了改变，这个时候是无法正常反序列化的。</p>
<p>给serialVersionUID指定为1L或者采用系统当前类结构去生成的hash值，这两者并没有什么区别，效果完全一样。以下两点需要注意：</p>
<ul>
<li>静态成员变量属于类不属于对象，所以不会参与序列化过程</li>
<li>用transient关键字标记的成员变量不参与序列化过程</li>
</ul>
<h3 id="Parcalable接口"><a href="#Parcalable接口" class="headerlink" title="Parcalable接口"></a>Parcalable接口</h3><p>Parcelable也是一个也是一个接口，只要实现这个接口，一个类的对象就要就可以实现序列化并可以通过Intent和Binder传递。下面的示例是一个典型的用法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> sex;</div><div class="line">	<span class="keyword">private</span> User user;</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//序列化</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		dest.writeInt(id);</div><div class="line">		dest.writeString(name);</div><div class="line">		dest.writeInt(sex);</div><div class="line">		dest.writeSerializable(user);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//反序列化</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Person&gt;() &#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			</div><div class="line">			Person person = <span class="keyword">new</span> Person();</div><div class="line">			<span class="comment">//必须要按照成员变量的初始化顺序</span></div><div class="line">			person.id = source.readInt();</div><div class="line">			person.name = source.readString();</div><div class="line">			person.sex = source.readInt();</div><div class="line">			person.user = (User) source.readSerializable();</div><div class="line">			<span class="keyword">return</span> person;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Person[size];</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>系统已经为我们提供了许多实现了Parcelable接口的类，它们逗死可以直接序列化的，比如Intent、Bundle、Bitmap等，同时List和Map也可以序列化，前提是他们里面的每个元素都可以序列化。</p>
<p>既然Parcelable和Serializable都能实现序列化并且都可用于Intent间的数据传递，那么二者该如何选取呢？Serializable是Java中的序列化接口，其使用起来非常简单但是开销很大，序列化和反序列化过程需要大量的I/O操作。而Parcelable是Android中的序列化方式，因此更适合在Android平台上，它的缺点就是使用起来稍微麻烦点，但是它的效率很高，这是Android推荐的序列化方式。因此首选Parcelable。Parcelable主要用在内存序列化上，通过Parcelable将对象序列化到存储设备中或者将对象序列化后通过网络传输也都是可以的，但这个过程显得复杂，因此这两种情况下建议使用Serializable。</p>
<p>Binder是Android中的一个类，它实现了IBinder接口。从IPC角度来说，Binder是Android中的一种跨进程通信方式，Binder还可以理解为一种虚拟的物理设备，它的设备驱动是/dev/binder，该通信方式在Linux中没有；从Android Framework角度来说，Binder是ServiceManager连接各种Manager（ActivityManager、WindowManager，等待）和相应的ManagerService的桥梁；从Android应用层来说，Binder是客户端和服务端进行通信的媒介，当bindservice时候，服务端会返回一个包含了服务端业务调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或数据，这里的服务包括普通的服务和基于AIDL的服务。</p>
<p>Android开发中，Binder主要用在service中，包括AIDL和Messenger，其中普通Service中的Binder不涉及进程间通信，而Messenger的底层其实是AIDL，所以这里选用AIDL来分析Binder的工作机制。</p>
<p>下面新建一个AIDL示例，新建三个文件Book.java、Book.aidl、IBookManager.aidl，代码如下所示：</p>
<p>Book.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">import</span> android.os.Parcel;</div><div class="line">	<span class="keyword">import</span> android.os.Parcelable;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">int</span> bookId;</div><div class="line">		<span class="keyword">public</span> String bookName;</div><div class="line">	</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> bookId, String bookName)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.bookId = bookId;</div><div class="line">			<span class="keyword">this</span>.bookName = bookName;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			dest.writeInt(bookId);</div><div class="line">			dest.writeString(bookName);</div><div class="line">	</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Book&gt;() &#123;</div><div class="line">	</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> Book(source);</div><div class="line">			&#125;</div><div class="line">	</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> Book[size];</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="title">Book</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">			</div><div class="line">			bookId = in.readInt();</div><div class="line">			bookName = in.readString();</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">Book.aidl</div><div class="line"></div><div class="line">	<span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line">	</div><div class="line">	parcelable Book;</div><div class="line"></div><div class="line">IBookManager.aidl</div><div class="line"></div><div class="line">	<span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line">	</div><div class="line">	<span class="keyword">import</span> com.ryg.chapter_2.aidl.Book;</div><div class="line">	</div><div class="line">	<span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">	</div><div class="line">		<span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>Book.java是一个图书信息的类，它实现了Parcelable接口。Book.aidl是Book类在AIDL的声明。IBookManager.aidl是我们定义的一个接口，里面有两个方法，其中getBookList用于从远程服务端获取图书列表，而addBook用于向图书列表中添加一本书。尽管Book类已经和IBookManager位于相同的包中，但是IBookManager中仍然要导入Book类，接下来系统会在gen目录自动生成一个IBookManager的类。如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * This file is auto-generated.  DO NOT MODIFY.</div><div class="line"> * Original file: D:\\liuguoquan\\workspace\\chapter_2\\src\\com\\ryg\\chapter_2\\aidl\\IBookManager.aidl</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> com.ryg.chapter_2.aidl;</div><div class="line"></div><div class="line"><span class="comment">//在Binder传输的接口都要实现IInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</div><div class="line">	<span class="comment">/** Local-side IPC implementation stub class. */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span></span></div><div class="line">			<span class="title">com</span>.<span class="title">ryg</span>.<span class="title">chapter_2</span>.<span class="title">aidl</span>.<span class="title">IBookManager</span> &#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"com.ryg.chapter_2.aidl.IBookManager"</span>;</div><div class="line"></div><div class="line">		<span class="comment">//内部类，这个Stub就是一个Binder类</span></div><div class="line">		<span class="comment">/** Construct the stub at attach it to the interface. */</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * Cast an IBinder object into an com.ryg.chapter_2.aidl.IBookManager</div><div class="line">		 * interface, generating a proxy if needed.</div><div class="line">		 */</div><div class="line">		<span class="keyword">public</span> <span class="keyword">static</span> com.ryg.chapter_2.aidl.<span class="function">IBookManager <span class="title">asInterface</span><span class="params">(</span></span></div><div class="line">				android.os.IBinder obj) &#123;</div><div class="line">			<span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">			<span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.ryg.chapter_2.aidl.IBookManager))) &#123;</div><div class="line">				<span class="keyword">return</span> ((com.ryg.chapter_2.aidl.IBookManager) iin);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> com.ryg.chapter_2.aidl.IBookManager.Stub.Proxy(obj);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data,</span></span></div><div class="line">				android.os.Parcel reply, <span class="keyword">int</span> flags)</div><div class="line">				<span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">			<span class="keyword">switch</span> (code) &#123;</div><div class="line">			<span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">				reply.writeString(DESCRIPTOR);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">case</span> TRANSACTION_getBookList: &#123;  <span class="comment">//用于标识方法</span></div><div class="line">				data.enforceInterface(DESCRIPTOR);</div><div class="line">				java.util.List&lt;com.ryg.chapter_2.aidl.Book&gt; _result = <span class="keyword">this</span></div><div class="line">						.getBookList();</div><div class="line">				reply.writeNoException();</div><div class="line">				reply.writeTypedList(_result);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">case</span> TRANSACTION_addBook: &#123;</div><div class="line">				data.enforceInterface(DESCRIPTOR);</div><div class="line">				com.ryg.chapter_2.aidl.Book _arg0;</div><div class="line">				<span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">					_arg0 = com.ryg.chapter_2.aidl.Book.CREATOR</div><div class="line">							.createFromParcel(data);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					_arg0 = <span class="keyword">null</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">this</span>.addBook(_arg0);</div><div class="line">				reply.writeNoException();</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span></span></div><div class="line">				<span class="title">com</span>.<span class="title">ryg</span>.<span class="title">chapter_2</span>.<span class="title">aidl</span>.<span class="title">IBookManager</span> &#123;</div><div class="line">			<span class="keyword">private</span> android.os.IBinder mRemote;</div><div class="line"></div><div class="line">			Proxy(android.os.IBinder remote) &#123;</div><div class="line">				mRemote = remote;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">return</span> mRemote;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">return</span> DESCRIPTOR;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="keyword">public</span> java.util.List&lt;com.ryg.chapter_2.aidl.Book&gt; getBookList()</div><div class="line">					<span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">				android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">				android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">				java.util.List&lt;com.ryg.chapter_2.aidl.Book&gt; _result;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					_data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">					mRemote.transact(Stub.TRANSACTION_getBookList, _data,</div><div class="line">							_reply, <span class="number">0</span>);</div><div class="line">					_reply.readException();</div><div class="line">					_result = _reply</div><div class="line">							.createTypedArrayList(com.ryg.chapter_2.aidl.Book.CREATOR);</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					_reply.recycle();</div><div class="line">					_data.recycle();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> _result;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.ryg.chapter_2.aidl.Book book)</span></span></div><div class="line">					<span class="keyword">throws</span> android.os.RemoteException &#123;</div><div class="line">				android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">				android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					_data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">					<span class="keyword">if</span> ((book != <span class="keyword">null</span>)) &#123;</div><div class="line">						_data.writeInt(<span class="number">1</span>);</div><div class="line">						book.writeToParcel(_data, <span class="number">0</span>);</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						_data.writeInt(<span class="number">0</span>);</div><div class="line">					&#125;</div><div class="line">					mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</div><div class="line">					_reply.readException();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					_reply.recycle();</div><div class="line">					_data.recycle();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getBookList = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>); <span class="comment">//标识方法的id</span></div><div class="line">		<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> java.util.List&lt;com.ryg.chapter_2.aidl.Book&gt; getBookList()</div><div class="line">			<span class="keyword">throws</span> android.os.RemoteException;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.ryg.chapter_2.aidl.Book book)</span></span></div><div class="line">			<span class="keyword">throws</span> android.os.RemoteException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码实现的功能：<br>（1）IBookManager类继承IInterface接口，同时它自己也是个接口，所有可以在Binder中传输的接口都需要继承IInterface接口<br>（2）首先，它声明了两个方法getBookList和addBook，就是我们自IBookManager.aidl中定义的方法，同时还声明了两个整形id分别用于标识这两个方法，这两个id用于标识在transact中客户端所请求的到底是哪个方法<br>（3）接着，它声明了一个内部类Stub，这个Stub就是一个Binder类，当客户端和服务端都位于一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由Stub的内部代理类Proxy来完成。这个接口的核心实现就是<strong>内部了Stub和Stub的内部代理类Proxy</strong></p>
<p><strong>说明：</strong>首先，当客户端发起远程请求时，由于当前线程会被挂起直至服务器进程返回数据，所以如果一个远程方法是很耗时的，那么不能在UI线程中发起次远程请求；其次，由于服务器的Binder方法运行在Binder线程池中，所以Binder方法不管是否耗时都应该采用同步的方式去实现，因为它已经运行在一个线程中了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android EventBus3.0源码解析]]></title>
      <url>http://liuguoquan727.github.io/2016/04/18/Android%20EventBus3.0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>前面已经介绍了EventBus3.0开源库的详细使用，下面我们开始进入其源代码的学习，先看看EventBus3.0与2.x版本之间的区别。</p>
<blockquote>
<p>项目地址<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a><br>EventBus版本是3.0</p>
</blockquote>
<h1 id="EventBus-3-0与2-x的区别"><a href="#EventBus-3-0与2-x的区别" class="headerlink" title="EventBus 3.0与2.x的区别"></a>EventBus 3.0与2.x的区别</h1><h2 id="注册订阅者"><a href="#注册订阅者" class="headerlink" title="注册订阅者"></a>注册订阅者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3.0版本的注册</span></div><div class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">//2.x版本的注册</span></div><div class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line">EventBus.getDefault().register(<span class="keyword">this</span>, <span class="number">100</span>);</div><div class="line">EventBus.getDefault().registerSticky(<span class="keyword">this</span>, <span class="number">100</span>);</div><div class="line">EventBus.getDefault().registerSticky(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p>2.x版本中有四种注册方法，区分了普通注册和粘性事件注册，并且在注册时可以选择接受事件的优先级；</p>
<p>3.0版本中将粘性事件以及订阅事件的优先级用注解的方式实现，所以3.0版本中的注册就变得只有一个register()方法注册。</p>
<h2 id="事件订阅方法"><a href="#事件订阅方法" class="headerlink" title="事件订阅方法"></a>事件订阅方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3.0版本</span></div><div class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND, sticky = <span class="keyword">true</span>, priority = <span class="number">100</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//2.x版本</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventBackgroundThread</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.x版本中只有通过onEvent开头的方法会被注册，而且响应事件方法触发的线程通过onEventMainThread或onEventBackgroundThread这些方法名区分；</p>
<p>3.0版本中，通过@Subscribe注解来确定运行的线程threadMode，是否接收粘性事件sticky以及事件优先级priority，而且方法名不再需要使用onEvent开头，所以3.0提高了简单性和灵活性。</p>
<h2 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h2><p>发送事件和发送粘性事件在2.x和3.0版本中是相同的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(<span class="string">"str"</span>);</div><div class="line">EventBus.getDefault().postSticky(<span class="string">"str"</span>);</div></pre></td></tr></table></figure>
<h2 id="解除注册"><a href="#解除注册" class="headerlink" title="解除注册"></a>解除注册</h2><p>2.x和3.0版本的解除注册的方法也是相同的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<h1 id="类关系图"><a href="#类关系图" class="headerlink" title="类关系图"></a>类关系图</h1><p>类图引用自<a href="http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">CodeKK的EventBus源代码分析</a></p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/eventbus-%E7%B1%BB%E5%9B%BE.png" alt="类图"></p>
<p>从类图可以看出，上部分主要是订阅相关信息，中间是EventBus，下面部分是发布者发布事件后的调用。下面开始进入源码分析:</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>通过EventBus的使用流程来分析它的调用流程及实现原理。</p>
<h2 id="创建EventBus"><a href="#创建EventBus" class="headerlink" title="创建EventBus"></a>创建EventBus</h2><p>一般都是通过<code>EventBus.getDefault()</code>静态方法获取到EventBus对象，先来看看getDefault()方法的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">synchronized</span> (EventBus.class) &#123;</div><div class="line">			<span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</div><div class="line">				defaultInstance = <span class="keyword">new</span> EventBus();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> defaultInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用<strong>单例模式</strong>获取EventBus对象，目的是保证getDefault方法得到的是同一个EventBus对象。第一次创建实例，会调用EventBus的构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventBus</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(DEFAULT_BUILDER);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//key:订阅的事件 value：订阅这个事件的所有订阅者集合</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</div><div class="line"></div><div class="line"><span class="comment">//key:订阅者对象， value：这个订阅者订阅的事件集合</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</div><div class="line"></div><div class="line"><span class="comment">//粘性事件 key：粘性事件的class对象， value：事件对象</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; stickyEvents;</div><div class="line"></div><div class="line">EventBus(EventBusBuilder builder) &#123;</div><div class="line">	subscriptionsByEventType = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	typesBySubscriber = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	stickyEvents = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line">	</div><div class="line">	<span class="comment">//事件主线程处理</span></div><div class="line">	mainThreadPoster = <span class="keyword">new</span> HandlerPoster(<span class="keyword">this</span>, Looper.getMainLooper(), <span class="number">10</span>);</div><div class="line">	<span class="comment">//事件Background处理</span></div><div class="line">	backgroundPoster = <span class="keyword">new</span> BackgroundPoster(<span class="keyword">this</span>);</div><div class="line">	<span class="comment">//事件异步线程处理</span></div><div class="line">	asyncPoster = <span class="keyword">new</span> AsyncPoster(<span class="keyword">this</span>);</div><div class="line">	indexCount = builder.subscriberInfoIndexes != <span class="keyword">null</span> ? builder.subscriberInfoIndexes.size() : <span class="number">0</span>;</div><div class="line">	<span class="comment">//订阅者想要方法信息存储和查找</span></div><div class="line">	subscriberMethodFinder = <span class="keyword">new</span> SubscriberMethodFinder(builder.subscriberInfoIndexes,</div><div class="line">			builder.strictMethodVerification, builder.ignoreGeneratedIndex);</div><div class="line">	logSubscriberExceptions = builder.logSubscriberExceptions;</div><div class="line">	logNoSubscriberMessages = builder.logNoSubscriberMessages;</div><div class="line">	sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;</div><div class="line">	sendNoSubscriberEvent = builder.sendNoSubscriberEvent;</div><div class="line">	throwSubscriberException = builder.throwSubscriberException;</div><div class="line">	<span class="comment">//是否支持事件继承</span></div><div class="line">	eventInheritance = builder.eventInheritance;</div><div class="line">	executorService = builder.executorService;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注册事件过程"><a href="#注册事件过程" class="headerlink" title="注册事件过程"></a>注册事件过程</h2><h3 id="register-方法的实现"><a href="#register-方法的实现" class="headerlink" title="register()方法的实现"></a>register()方法的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber)</span> </span>&#123;</div><div class="line">	<span class="comment">//首先获取订阅者的class对象</span></div><div class="line">	Class&lt;`?&gt; subscriberClass = subscriber.getClass();</div><div class="line">	<span class="comment">//1 获取订阅者订阅的事件集合</span></div><div class="line">	List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</div><div class="line">			<span class="comment">//2 订阅</span></div><div class="line">			subscribe(subscriber, subscriberMethod);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubscriberMethod</span><span class="params">(Method method, Class&lt;?&gt; eventType, ThreadMode threadMode, <span class="keyword">int</span> priority, <span class="keyword">boolean</span> sticky)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.method = method; <span class="comment">//事件处理方法的Method对象</span></div><div class="line">	<span class="keyword">this</span>.threadMode = threadMode; <span class="comment">//线程的ThreadMode</span></div><div class="line">	<span class="keyword">this</span>.eventType = eventType; <span class="comment">//订阅的事件类型</span></div><div class="line">	<span class="keyword">this</span>.priority = priority; <span class="comment">//事件优先级</span></div><div class="line">	<span class="keyword">this</span>.sticky = sticky; <span class="comment">//是否接收粘性事件</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过subscriberMethodFinder.findSubscriberMethods(subscriberClass)方法可以返回一个SubscriberMethod对象的集合，下面来看看findSubscriberMethods()方法的实现</p>
<h3 id="SubscriberMethodFinder的实现"><a href="#SubscriberMethodFinder的实现" class="headerlink" title="SubscriberMethodFinder的实现"></a>SubscriberMethodFinder的实现</h3><p>SubscriberMethodFinder类就是用来查找和缓存订阅者响应方法的信息的类。那么怎么能获得订阅者响应函数的相关信息呢？在3.0版本中,EventBus提供了一个EventBusAnnotationProcessor注解处理器来在编译期通过读取@Subscribe注解并解析，然后生成java类来保存所有订阅者关于订阅的信息，这样就比在运行时使用反射来获得这些订阅者的信息速度要快。我们可以参考EventBus项目里的EventBusPerformance这个例子，编译后我们可以在build文件夹里找到这个类，MyEventBusIndex类，当然类名是可以自定义的，下面看一下生成的MyEventBusIndex类的组成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This class is generated by EventBus, do not edit.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventBusIndex</span> <span class="keyword">implements</span> <span class="title">SubscriberInfoIndex</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        SUBSCRIBER_INDEX = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();</div><div class="line"></div><div class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(org.greenrobot.eventbusperf.testsubject.PerfTestEventBus.SubscriberClassEventBusAsync.class,</div><div class="line">                <span class="keyword">true</span>, <span class="keyword">new</span> SubscriberMethodInfo[]&#123;</div><div class="line">                <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventAsync"</span>, TestEvent.class, ThreadMode.ASYNC),</div><div class="line">        &#125;));</div><div class="line"></div><div class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(TestRunnerActivity.class, <span class="keyword">true</span>, <span class="keyword">new</span> SubscriberMethodInfo[]&#123;</div><div class="line">                <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread"</span>, TestFinishedEvent.class, ThreadMode.MAIN),</div><div class="line">        &#125;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putIndex</span><span class="params">(SubscriberInfo info)</span> </span>&#123;</div><div class="line">        SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SubscriberInfo <span class="title">getSubscriberInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class="line">        SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);</div><div class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> info;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出是使用一个静态HashMap即：SUBSCRIBER_INDEX来保存订阅类的信息，其中包括了订阅类的Class对象，是否需要检查父类，以及订阅方法的信息SubscriberMethodInfo的数组，SubscriberMethodInfo中又保存了订阅方法的方法名、订阅的事件类型、触发线程，是否接收sticky事件以及优先级priority。这其中就保存了register()的所有需要的信息，如果再配置EventBus的时候通过EventBuilder配置：<code>eventBus=EventBus.builder().addIndex(new MyEventBusIndex()).build()</code>；来将编译生成的MyEventBusIndex配置进去，这样能在SubscriberMethodFinder类中直接查找出订阅类的信息，就不需要再利用注解判断了，这种方法是作为EventBus的可选配置存在的。</p>
<p>SubscriberMethodFinder同样提供了通过注解来获得订阅类信息的方法，下面来看看findSubscriberMethods()到底是如何实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;SubscriberMethod&gt; <span class="title">findSubscriberMethods</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//先从Method_CACHE取看是否有缓存，key：保存订阅类的类名，value:保存类中订阅的方法名</span></div><div class="line">	List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</div><div class="line">	<span class="keyword">if</span> (subscriberMethods != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> subscriberMethods;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//是否忽略注解器生成的MyEventIndex类，默认false</span></div><div class="line">	<span class="keyword">if</span> (ignoreGeneratedIndex) &#123;</div><div class="line">		<span class="comment">//利用反射来读取订阅类中的订阅方法</span></div><div class="line">		subscriberMethods = findUsingReflection(subscriberClass);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">//从注解器生成的MyEventBusIndex类中获得订阅类的订阅方法</span></div><div class="line">		subscriberMethods = findUsingInfo(subscriberClass);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (subscriberMethods.isEmpty()) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriberClass</div><div class="line">				+ <span class="string">" and its super classes have no public methods with the @Subscribe annotation"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">//保存到缓存中</span></div><div class="line">		METHOD_CACHE.put(subscriberClass, subscriberMethods);</div><div class="line">		<span class="keyword">return</span> subscriberMethods;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>findUsingInfo()方法就是通过查找MyEventBusIndex类中的信息来转换成List<subscribermethod>从而获得订阅类的相关订阅方法的信息集合。</subscribermethod></p>
<p>下面来看看findUsingReflection()的实现过程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingReflection</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class="line">	<span class="comment">//FindState用来做订阅方法的校验和保存</span></div><div class="line">	FindState findState = prepareFindState();</div><div class="line">	findState.initForSubscriber(subscriberClass);</div><div class="line">	<span class="keyword">while</span> (findState.clazz != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">//通过反射获得订阅方法信息</span></div><div class="line">		findUsingReflectionInSingleClass(findState);</div><div class="line">		<span class="comment">//查找父类的订阅方法</span></div><div class="line">		findState.moveToSuperclass();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//获取findState中的SubscriberMethod(也就是订阅方法List)并返回</span></div><div class="line">	<span class="keyword">return</span> getMethodsAndRelease(findState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过FindState类来做订阅方法的校验和保存，并通过FIND_STATE_POOL静态数组来保存FindState对象，可以使FindState复用，避免重复创建过多的对象，最终是通过findUsingReflectionSingleClass()来具体获得相关订阅方法的信息的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findUsingReflectionInSingleClass</span><span class="params">(FindState findState)</span> </span>&#123;</div><div class="line">	Method[] methods;</div><div class="line">	<span class="comment">//通过反射得到方法数组</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// This is faster than getMethods, especially when subscribers are fat classes like Activities</span></div><div class="line">		methods = findState.clazz.getDeclaredMethods();</div><div class="line">	&#125; <span class="keyword">catch</span> (Throwable th) &#123;</div><div class="line">		<span class="comment">// Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149</span></div><div class="line">		methods = findState.clazz.getMethods();</div><div class="line">		findState.skipSuperClasses = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//遍历Method</span></div><div class="line">	<span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">		<span class="keyword">int</span> modifiers = method.getModifiers();</div><div class="line">		<span class="keyword">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class="number">0</span>) &#123;</div><div class="line">			Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class="line">			<span class="comment">//保证必须只有一个事件参数</span></div><div class="line">			<span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>) &#123;</div><div class="line">				<span class="comment">//得到注解</span></div><div class="line">				Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</div><div class="line">				<span class="keyword">if</span> (subscribeAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">					Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</div><div class="line">					<span class="comment">//校验是否添加该方法</span></div><div class="line">					<span class="keyword">if</span> (findState.checkAdd(method, eventType)) &#123;</div><div class="line">						ThreadMode threadMode = subscribeAnnotation.threadMode();</div><div class="line">						<span class="comment">//实例化SubscriberMethod对象并添加</span></div><div class="line">						findState.subscriberMethods.add(<span class="keyword">new</span> SubscriberMethod(method, eventType, threadMode,</div><div class="line">								subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class="line">				String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"@Subscribe method "</span> + methodName +</div><div class="line">						<span class="string">"must have exactly 1 parameter but has "</span> + parameterTypes.length);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class="line">			String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(methodName +</div><div class="line">					<span class="string">" is a illegal @Subscribe method: must be public, non-static, and non-abstract"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码运行后，订阅类的所有SubscriberMethod都已经被保存了，最后在通过getMethodsAndRelease方法返回List<subscribermethod>集合。</subscribermethod></p>
<p>下面接着来看subscribe()是如何实现的</p>
<h3 id="subsribe-方法的实现"><a href="#subsribe-方法的实现" class="headerlink" title="subsribe()方法的实现"></a>subsribe()方法的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 必须在同步代码块中调用</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Object subscriber, SubscriberMethod subscriberMethod)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//获取订阅事件的事件类型</span></div><div class="line">	Class&lt;?&gt; eventType = subscriberMethod.eventType;</div><div class="line">	<span class="comment">//创建SubScription对象</span></div><div class="line">	Subscription newSubscription = <span class="keyword">new</span> Subscription(subscriber, subscriberMethod);</div><div class="line">	<span class="comment">//检查是否已经添加过该SubScription对象，添加过则抛出异常</span></div><div class="line">	CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</div><div class="line">	<span class="keyword">if</span> (subscriptions == <span class="keyword">null</span>) &#123;</div><div class="line">		subscriptions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line">		subscriptionsByEventType.put(eventType, subscriptions);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (subscriptions.contains(newSubscription)) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriber.getClass() + <span class="string">" already registered to event "</span></div><div class="line">					+ eventType);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//根据优先级来添加SubScription对象</span></div><div class="line">	<span class="keyword">int</span> size = subscriptions.size();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</div><div class="line">			subscriptions.add(i, newSubscription);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//将订阅者对象以及订阅的事件保存到typesBySubscriber中</span></div><div class="line">	List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</div><div class="line">	<span class="keyword">if</span> (subscribedEvents == <span class="keyword">null</span>) &#123;</div><div class="line">		subscribedEvents = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		typesBySubscriber.put(subscriber, subscribedEvents);</div><div class="line">	&#125;</div><div class="line">	subscribedEvents.add(eventType);</div><div class="line">	<span class="comment">//如果接受sticky事件则立即分发sticky事件</span></div><div class="line">	<span class="keyword">if</span> (subscriberMethod.sticky) &#123;</div><div class="line">		<span class="comment">//eventInheritance表示是否分发订阅了响应事件类及父类事件的方法</span></div><div class="line">		<span class="keyword">if</span> (eventInheritance) &#123;</div><div class="line">			<span class="comment">// Existing sticky events of all subclasses of eventType have to be considered.</span></div><div class="line">			<span class="comment">// <span class="doctag">Note:</span> Iterating over all events may be inefficient with lots of sticky events,</span></div><div class="line">			<span class="comment">// thus data structure should be changed to allow a more efficient lookup</span></div><div class="line">			<span class="comment">// (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;).</span></div><div class="line">			Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</div><div class="line">			<span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</div><div class="line">				Class&lt;?&gt; candidateEventType = entry.getKey();</div><div class="line">				<span class="keyword">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</div><div class="line">					Object stickyEvent = entry.getValue();</div><div class="line">					checkPostStickyEventToSubscription(newSubscription, stickyEvent);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			Object stickyEvent = stickyEvents.get(eventType);</div><div class="line">			checkPostStickyEventToSubscription(newSubscription, stickyEvent);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一下结合一张图来理解整个注册过程：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/eventbus-%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B.png" alt="注册过程"></p>
<h2 id="事件分发过程"><a href="#事件分发过程" class="headerlink" title="事件分发过程"></a>事件分发过程</h2><p>EventBus通过post方法来发送一个事件，首先看看post方法的实现过程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</div><div class="line">	<span class="comment">//得到当前线程的Posting状态</span></div><div class="line">	PostingThreadState postingState = currentPostingThreadState.get();</div><div class="line">	<span class="comment">//获取当前线程的事件队列</span></div><div class="line">	List&lt;Object&gt; eventQueue = postingState.eventQueue;</div><div class="line">	<span class="comment">//加入事件到队列</span></div><div class="line">	eventQueue.add(event);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!postingState.isPosting) &#123;</div><div class="line">		postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();</div><div class="line">		postingState.isPosting = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (postingState.canceled) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//发送知道队列为空</span></div><div class="line">			<span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</div><div class="line">				<span class="comment">//发送单个事件</span></div><div class="line">				postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			postingState.isPosting = <span class="keyword">false</span>;</div><div class="line">			postingState.isMainThread = <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先是通过currentPostingThreadState.get()方法来得到当前线程PostingThreadState的对象，为什么是说当前线程？我们来看看currentPostingThreadState的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = <span class="keyword">new</span> ThreadLocal&lt;PostingThreadState&gt;() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> PostingThreadState <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PostingThreadState();</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>currentPostingThreadState的实现是一个包含了PostingThreadState的ThreadLocal对象。</p>
<p>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储线程，而这段数据是不会与其他线程共享的，其内部原理是通过生成一个它包裹的泛型对象的数组，在不同的线程会有不同的数组索引值，这样就可以做到每个线程通过get()方法获取的时候，取到的只能是自己线程所对应的数据，所以这里取到的就是每个线程的PostingThreadState状态。</p>
<p>接下来我们来看postingSingleEvent()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSingleEvent</span><span class="params">(Object event, PostingThreadState postingState)</span> <span class="keyword">throws</span> Error </span>&#123;</div><div class="line">	Class&lt;?&gt; eventClass = event.getClass();</div><div class="line">	<span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</div><div class="line">	<span class="comment">//是否触发订阅了该事件（eventClass）的父类，以及接口的类的响应方法</span></div><div class="line">	<span class="keyword">if</span> (eventInheritance) &#123;</div><div class="line">		<span class="comment">////查找eventClass类所有的父类以及接口</span></div><div class="line">		List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</div><div class="line">		<span class="keyword">int</span> countTypes = eventTypes.size();</div><div class="line">		<span class="comment">//循环postSingleEventForEventType</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</div><div class="line">			Class&lt;?&gt; clazz = eventTypes.get(h);</div><div class="line">			subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//post单个事件</span></div><div class="line">		subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//如果没有发现</span></div><div class="line">	<span class="keyword">if</span> (!subscriptionFound) &#123;</div><div class="line">		<span class="keyword">if</span> (logNoSubscriberMessages) &#123;</div><div class="line">			Log.d(TAG, <span class="string">"No subscribers registered for event "</span> + eventClass);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</div><div class="line">				eventClass != SubscriberExceptionEvent.class) &#123;</div><div class="line">				<span class="comment">//发送一个NoSubscriberEvent事件，如果我们需要处理这种状态，接收这个事件就可以了</span></div><div class="line">			post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面可知，实际上事件分发是在postSingleEventForEventType()方法里进行的，代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">postSingleEventForEventType</span><span class="params">(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass)</span> </span>&#123;</div><div class="line">	CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</div><div class="line">	<span class="comment">//获取订阅了这个事件的Subscription列表.</span></div><div class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">		subscriptions = subscriptionsByEventType.get(eventClass);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</div><div class="line">		<span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</div><div class="line">			postingState.event = event;</div><div class="line">			postingState.subscription = subscription;</div><div class="line">			<span class="comment">//是否被中断</span></div><div class="line">			<span class="keyword">boolean</span> aborted = <span class="keyword">false</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">//分发给订阅者</span></div><div class="line">				postToSubscription(subscription, event, postingState.isMainThread);</div><div class="line">				aborted = postingState.canceled;</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				postingState.event = <span class="keyword">null</span>;</div><div class="line">				postingState.subscription = <span class="keyword">null</span>;</div><div class="line">				postingState.canceled = <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (aborted) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</div><div class="line">	<span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</div><div class="line">		<span class="keyword">case</span> POSTING:</div><div class="line">			invokeSubscriber(subscription, event);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> MAIN:</div><div class="line">			<span class="keyword">if</span> (isMainThread) &#123;</div><div class="line">				invokeSubscriber(subscription, event);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				mainThreadPoster.enqueue(subscription, event);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> BACKGROUND:</div><div class="line">			<span class="keyword">if</span> (isMainThread) &#123;</div><div class="line">				backgroundPoster.enqueue(subscription, event);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				invokeSubscriber(subscription, event);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> ASYNC:</div><div class="line">			asyncPoster.enqueue(subscription, event);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先从subscriptionsByEventType里获得所有订阅了这个事件的Subscription列表，然后在通过postToSubScription()方法来分发事件，在postToSubScription()通过不同的threadMode在不同的线程里invoke()订阅者的方法，ThreadMode共有四类：</p>
<ul>
<li><p>PostThread：默认的 ThreadMode，表示在执行 Post 操作的线程直接调用订阅者的事件响应方法，不论该线程是否为主线程（UI 线程）。当该线程为主线程时，响应方法中不能有耗时操作，否则有卡主线程的风险。适用场景：对于是否在主线程执行无要求，但若 Post 线程为主线程，不能耗时的操作；</p>
</li>
<li><p>MainThread：在主线程中执行响应方法。如果发布线程就是主线程，则直接调用订阅者的事件响应方法，否则通过主线程的 Handler 发送消息在主线程中处理——调用订阅者的事件响应函数。显然，MainThread类的方法也不能有耗时操作，以避免卡主线程。适用场景：必须在主线程执行的操作；</p>
</li>
<li><p>BackgroundThread：在后台线程中执行响应方法。如果发布线程不是主线程，则直接调用订阅者的事件响应函数，否则启动唯一的后台线程去处理。由于后台线程是唯一的，当事件超过一个的时候，它们会被放在队列中依次执行，因此该类响应方法虽然没有PostThread类和MainThread类方法对性能敏感，但最好不要有重度耗时的操作或太频繁的轻度耗时操作，以造成其他操作等待。适用场景：操作轻微耗时且不会过于频繁，即一般的耗时操作都可以放在这里；</p>
</li>
<li><p>Async：不论发布线程是否为主线程，都使用一个空闲线程来处理。和BackgroundThread不同的是，Async类的所有线程是相互独立的，因此不会出现卡线程的问题。适用场景：长耗时操作，例如网络访问。</p>
</li>
</ul>
<p>下面我们来看看invokeSubscriber(subscription, event)是如何实现的，关于不同线程的Poster使用可以参考这篇文章<a href="http://kymjs.com/code/2015/12/12/01" target="_blank" rel="external">http://kymjs.com/code/2015/12/12/01</a></p>
<p>invokeSubscriber(subscription, event)代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invokeSubscriber</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</div><div class="line">	&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">		handleSubscriberException(subscription, event, e.getCause());</div><div class="line">	&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected exception"</span>, e);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上就是通过反射调用了订阅者的订阅函数并把event对象作为参数传入，至此post()流程如上述所示。整体流程图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/eventbus-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.png" alt="Post流程"></p>
<h2 id="解除注册过程"><a href="#解除注册过程" class="headerlink" title="解除注册过程"></a>解除注册过程</h2><p>解除注册只要调用unregister()方法即可，实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object subscriber)</span> </span>&#123;</div><div class="line">	<span class="comment">//通过typesBySubscriber来取出这个subscriber订阅者订阅的事件类型,</span></div><div class="line">	List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);</div><div class="line">	<span class="keyword">if</span> (subscribedTypes != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">//分别解除每个订阅了的事件类型</span></div><div class="line">		<span class="keyword">for</span> (Class&lt;?&gt; eventType : subscribedTypes) &#123;</div><div class="line">			unsubscribeByEventType(subscriber, eventType);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//从typesBySubscriber移除subscriber</span></div><div class="line">		typesBySubscriber.remove(subscriber);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		Log.w(TAG, <span class="string">"Subscriber to unregister was not registered before: "</span> + subscriber.getClass());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unsubscribeByEventType</span><span class="params">(Object subscriber, Class&lt;?&gt; eventType)</span> </span>&#123;</div><div class="line">	<span class="comment">//subscriptionsByEventType里拿出这个事件类型的订阅者列表.</span></div><div class="line">	List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</div><div class="line">	<span class="keyword">if</span> (subscriptions != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">int</span> size = subscriptions.size();</div><div class="line">		<span class="comment">//取消订阅</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">			Subscription subscription = subscriptions.get(i);</div><div class="line">			<span class="keyword">if</span> (subscription.subscriber == subscriber) &#123;</div><div class="line">				subscription.active = <span class="keyword">false</span>;</div><div class="line">				subscriptions.remove(i);</div><div class="line">				i--;</div><div class="line">				size--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终分别从typesBySubscriber和subscriptions里分别移除订阅者以及相关信息即可</p>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式是对象的行为模式，又叫发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者模式。观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。EventBus并不是标准的观察者模式的实现，但是它的整体就是一个发布/订阅框架，也拥有观察者模式的有点，比如：发布者和订阅者的解耦。</p>
<p>参考文章:</p>
<p><a href="http://www.jianshu.com/p/f057c460c77e" target="_blank" rel="external">EventBus 3.0 源码分析</a><br><a href="http://kymjs.com/code/2015/12/12/01" target="_blank" rel="external">EventBus源码研读</a><br><a href="http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">EventBus 源码解析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Otto源码解析]]></title>
      <url>http://liuguoquan727.github.io/2016/04/18/Android%20Otto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>前面介绍了<a href="http://liuguoquan727.github.io/2016/04/17/Android_Otto%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">Otto的使用情况</a>，下面开始进入Otto的源码分析之旅。</p>
<p>首先来看看构造函数：</p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String identifier;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadEnforcer enforcer;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> HandlerFinder handlerFinder;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(DEFAULT_IDENTIFIER);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">(String identifier)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(ThreadEnforcer.MAIN, identifier);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">(ThreadEnforcer enforcer, String identifier)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(enforcer, identifier, HandlerFinder.ANNOTATED);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Bus(ThreadEnforcer enforcer, String identifier, HandlerFinder handlerFinder) &#123;</div><div class="line">    <span class="keyword">this</span>.enforcer =  enforcer;</div><div class="line">    <span class="keyword">this</span>.identifier = identifier;</div><div class="line">    <span class="keyword">this</span>.handlerFinder = handlerFinder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认参数enforcer=ThreadEnforcer.MAIN，identifier=DEFAULT_IDENTIFIER，handlerFinder=HandlerFinder.ANNOTATED。下面来看看这些参数是什么意思：</p>
<h2 id="ThreadEnforce"><a href="#ThreadEnforce" class="headerlink" title="ThreadEnforce"></a>ThreadEnforce</h2><p>ThreadEnforce是一个接口，enforce()方法用于检查当前的线程是否为指定的线程类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadEnforcer</span> </span>&#123;</div><div class="line"></div><div class="line">    ThreadEnforcer ANY = <span class="keyword">new</span> ThreadEnforcer() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enforce</span><span class="params">(Bus bus)</span> </span>&#123;</div><div class="line">                <span class="comment">// Allow any thread.</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    ThreadEnforcer MAIN = <span class="keyword">new</span> ThreadEnforcer() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enforce</span><span class="params">(Bus bus)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (Looper.myLooper() != Looper.getMainLooper()) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Event bus "</span> + bus +</div><div class="line">                        <span class="string">" accessed from non-main thread "</span> + Looper.myLooper());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enforce</span><span class="params">(Bus bus)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不带参数的构造函数默认使用ThreadEnforcer.MAIN，表示enforce()方法必须在主线程上执行。</p>
<h2 id="identifier"><a href="#identifier" class="headerlink" title="identifier"></a>identifier</h2><p>identifier为Bus对象的名字，debug用</p>
<h2 id="HandlerFinder"><a href="#HandlerFinder" class="headerlink" title="HandlerFinder"></a>HandlerFinder</h2><p>HandlerFinder用于在注册/反注册的时候查找Subscriber和Produce，后文会对其展开源码级别的解析。默认使用HandlerANNOTATED，表示使用注解来进行查找。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除上述以外，Bus类还有两个成员变量handlersByType和producersByType:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">** 通过event的类型（class类型）来查找event handle。</div><div class="line">*	键为 event类型  值为 事件订阅者集合</div><div class="line">*	一个事件类型可以有多个事件订阅者</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; handlersByType =</div><div class="line">	  <span class="keyword">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt;();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">** 通过event的类型（class类型）来查找event producer。</div><div class="line">*	键为 event类型  值为 事件生产者</div><div class="line">*	一个事件类型，只能有一个事件生产者</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, EventProducer&gt; producersByType =</div><div class="line">	  <span class="keyword">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, EventProducer&gt;();</div></pre></td></tr></table></figure>
<h1 id="注册-反注册事件"><a href="#注册-反注册事件" class="headerlink" title="注册/反注册事件"></a>注册/反注册事件</h1><p>如下所示要成为订阅者HandlerEvent，只需将其注册到bus，然后使用@Subscribe注解标记回调处理方法即可。回调方法要求可见性为public，有且仅有一个参数，类型为订阅的event。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</div><div class="line">        bus.register(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answerAvailable</span><span class="params">(HandlerEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// process event</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Subsrible"><a href="#Subsrible" class="headerlink" title="@Subsrible"></a>@Subsrible</h2><p>首先看一下@Subscribe注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Subscribe &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RetentionPolicy.RUNTIME表示它是运行时的注解，ElementType.METHOD表示用于注解方法。</p>
<h2 id="register"><a href="#register" class="headerlink" title="register()"></a>register()</h2><p>register流程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//1.检查当前线程是否符合ThreadEnforcer的设置</span></div><div class="line">	<span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</div><div class="line">	  <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Object to register must not be null."</span>);</div><div class="line">	&#125;</div><div class="line">	enforcer.enforce(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">	<span class="comment">//2.默认情况下，通过@Producer注解找到所有的事件生产者Producers</span></div><div class="line">	Map&lt;Class&lt;?&gt;, EventProducer&gt; foundProducers = handlerFinder.findAllProducers(object);</div><div class="line">	<span class="keyword">for</span> (Class&lt;?&gt; type : foundProducers.keySet()) &#123;</div><div class="line"></div><div class="line">	  <span class="comment">//2-1 判断object上的produce注册的event是否已经被别人注册过</span></div><div class="line">	  <span class="keyword">final</span> EventProducer producer = foundProducers.get(type);</div><div class="line"></div><div class="line">	  <span class="comment">//type存在则返回type对应的值 type不存在则将type的键值设为producer</span></div><div class="line">	  EventProducer previousProducer = producersByType.putIfAbsent(type, producer);</div><div class="line">	  <span class="comment">//checking if the previous producer existed</span></div><div class="line">	  <span class="keyword">if</span> (previousProducer != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Producer method for type "</span> + type</div><div class="line">		  + <span class="string">" found on type "</span> + producer.target.getClass()</div><div class="line">		  + <span class="string">", but already registered by type "</span> + previousProducer.target.getClass() + <span class="string">"."</span>);</div><div class="line">	  &#125;</div><div class="line"></div><div class="line"></div><div class="line">	  <span class="comment">//2-2 如果没有被注册过，那么找出对应event的handler，触发一次回调</span></div><div class="line">	  Set&lt;EventHandler&gt; handlers = handlersByType.get(type);</div><div class="line">	  <span class="keyword">if</span> (handlers != <span class="keyword">null</span> &amp;&amp; !handlers.isEmpty()) &#123;</div><div class="line">		<span class="keyword">for</span> (EventHandler handler : handlers) &#123;</div><div class="line">		  dispatchProducerResultToHandler(handler, producer);</div><div class="line">		&#125;</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//3. 找出object上用@Subscribe注解的方法</span></div><div class="line">	Map&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; foundHandlersMap = handlerFinder.findAllSubscribers(object);</div><div class="line">	<span class="keyword">for</span> (Class&lt;?&gt; type : foundHandlersMap.keySet()) &#123;</div><div class="line">	  Set&lt;EventHandler&gt; handlers = handlersByType.get(type);</div><div class="line">	  </div><div class="line">	  </div><div class="line">	  <span class="keyword">if</span> (handlers == <span class="keyword">null</span>) &#123;</div><div class="line">		</div><div class="line">		<span class="comment">//3-1，该event是第一次注册，那么新建一个CopyOnWriteArraySet用来保存handler和event的对应关系</span></div><div class="line">		</div><div class="line">		Set&lt;EventHandler&gt; handlersCreation = <span class="keyword">new</span> CopyOnWriteArraySet&lt;EventHandler&gt;();</div><div class="line">		handlers = handlersByType.putIfAbsent(type, handlersCreation);</div><div class="line">		<span class="keyword">if</span> (handlers == <span class="keyword">null</span>) &#123;</div><div class="line">			handlers = handlersCreation;</div><div class="line">		&#125;</div><div class="line">	  &#125;</div><div class="line">	  </div><div class="line">	  <span class="comment">//3-2,保存object中新增的event-handler对应关系</span></div><div class="line">	  <span class="keyword">final</span> Set&lt;EventHandler&gt; foundHandlers = foundHandlersMap.get(type);</div><div class="line">	  <span class="keyword">if</span> (!handlers.addAll(foundHandlers)) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Object already registered."</span>);</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//4.检查object上的event是否存在对应的Producer，有则触发一次调用</span></div><div class="line">	<span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; entry : foundHandlersMap.entrySet()) &#123;</div><div class="line">	  Class&lt;?&gt; type = entry.getKey();</div><div class="line">	  EventProducer producer = producersByType.get(type);</div><div class="line">	  <span class="keyword">if</span> (producer != <span class="keyword">null</span> &amp;&amp; producer.isValid()) &#123;</div><div class="line">		Set&lt;EventHandler&gt; foundHandlers = entry.getValue();</div><div class="line">		<span class="keyword">for</span> (EventHandler foundHandler : foundHandlers) &#123;</div><div class="line">		  <span class="keyword">if</span> (!producer.isValid()) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		  &#125;</div><div class="line">		  <span class="keyword">if</span> (foundHandler.isValid()) &#123;</div><div class="line">			dispatchProducerResultToHandler(foundHandler, producer);</div><div class="line">		  &#125;</div><div class="line">		&#125;</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>register方法主要做了三件事情：触发新的Producer；注册新的event-handler关系；触发旧的Producer。另外有两点要注意：</p>
<ul>
<li>在保证线程安全的情况下，使用CopyOnWriteArraySet作为保存event和handler的容器，可以大大提高效率。</li>
<li>由于register方法没有加锁，所有在3-1中，尽管已经检查了handlers是否存在，但仍需使用putIfAbsent来保存handler。</li>
</ul>
<h2 id="HandlerFinder-1"><a href="#HandlerFinder-1" class="headerlink" title="HandlerFinder"></a>HandlerFinder</h2><p>注意到Bus通过HandlerFinder来查找object上的producer和subscriber，接下来看一下HanderFinder的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HandlerFinder</span> </span>&#123;</div><div class="line"></div><div class="line">  Map&lt;Class&lt;?&gt;, EventProducer&gt; findAllProducers(Object listener);</div><div class="line"></div><div class="line">  Map&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; findAllSubscribers(Object listener);</div><div class="line"></div><div class="line"></div><div class="line">  HandlerFinder ANNOTATED = <span class="keyword">new</span> HandlerFinder() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Map&lt;Class&lt;?&gt;, EventProducer&gt; findAllProducers(Object listener) &#123;</div><div class="line">      <span class="keyword">return</span> AnnotatedHandlerFinder.findAllProducers(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Map&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; findAllSubscribers(Object listener) &#123;</div><div class="line">      <span class="keyword">return</span> AnnotatedHandlerFinder.findAllSubscribers(listener);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中findAllProducers方法返回某event type对应的EventProducers，findAllSubscribers返回某event type对应的EventHandler集合。</p>
<h2 id="EventProducer"><a href="#EventProducer" class="headerlink" title="EventProducer"></a>EventProducer</h2><p>EventProducer是producer方法的包装类，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventProducer</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Object target;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method method;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> hashCode;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    EventProducer(Object target, Method method) &#123;</div><div class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(</div><div class="line">                <span class="string">"EventProducer target cannot be null."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(</div><div class="line">                <span class="string">"EventProducer method cannot be null."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        <span class="keyword">this</span>.method = method;</div><div class="line">        method.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 提前计算hashcode，以防每次调用hash()时消耗资源</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">        hashCode = ((prime + method.hashCode()) * prime) + target.hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> valid;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 应在object unregister时调用</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</div><div class="line">        valid = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">produceEvent</span><span class="params">()</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!valid) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(toString() +</div><div class="line">                <span class="string">" has been invalidated and can no longer produce events."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> method.invoke(target);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</div><div class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">            <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> Error) &#123;</div><div class="line">                <span class="keyword">throw</span> (Error) e.getCause();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 produceEvent方法用于获得event。可以看出Otto要求produce方法不能有参数。</p>
<h2 id="EventHandler"><a href="#EventHandler" class="headerlink" title="EventHandler"></a>EventHandler</h2><p>EventHandler是一个event handler方法（事件回调）的包装类，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method method;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> hashCode;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    EventHandler(Object target, Method method) &#123;</div><div class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(</div><div class="line">                <span class="string">"EventHandler target cannot be null."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(</div><div class="line">                <span class="string">"EventHandler method cannot be null."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        <span class="keyword">this</span>.method = method;</div><div class="line">        method.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Compute hash code eagerly since we know it will be used frequently and we cannot estimate the runtime of the</span></div><div class="line">        <span class="comment">// target's hashCode call.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">        hashCode = ((prime + method.hashCode()) * prime) + target.hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> valid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</div><div class="line">        valid = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEvent</span><span class="params">(Object event)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!valid) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(toString() +</div><div class="line">                <span class="string">" has been invalidated and can no longer handle events."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            method.invoke(target, event);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e);</div><div class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">            <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> Error) &#123;</div><div class="line">                <span class="keyword">throw</span> (Error) e.getCause();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中handlEvent方法用于在object上调用handle方法（事件回调），传入event对象。Otto要求event handler方法只能有一个参数就是event handler类。</p>
<h2 id="dispatchProducerResultToHandler"><a href="#dispatchProducerResultToHandler" class="headerlink" title="dispatchProducerResultToHandler()"></a>dispatchProducerResultToHandler()</h2><p>dispatchProducerResultToHandler方法用于将Producer产生的event分发给对应的handler，源码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchProducerResultToHandler</span><span class="params">(EventHandler handler, EventProducer producer)</span> </span>&#123;</div><div class="line">    Object event = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        event = producer.produceEvent();</div><div class="line">    &#125; <span class="keyword">catch</span>(InvocationTargetException e) &#123;</div><div class="line">        throwRuntimeException(<span class="string">"Producer "</span> + producer + <span class="string">" threw an exception."</span>, e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    dispatch(event, handler);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Object event, EventHandler wrapper)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        wrapper.handleEvent(event);</div><div class="line">    &#125; <span class="keyword">catch</span>(InvocationTargetException e) &#123;</div><div class="line">        throwRuntimeException(<span class="string">"Could not dispatch event: "</span> + event.getClass() + <span class="string">" to handler "</span> + wrapper, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要使用了Producer的produceEvent()获取event对象后，调用EventHandler的handleEvent（）方法处理事件。</p>
<h2 id="unregister"><a href="#unregister" class="headerlink" title="unregister()"></a>unregister()</h2><p>Bus类的unregister()方法用于解除目标对象和Bus之间的关联关系，包括对象上的producer方法，subscriber方法，源码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Object to unregister must not be null."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//1. 检查当前线程是否符合ThreadEnforcer的设置</span></div><div class="line">    enforcer.enforce(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="comment">//2. 默认情况下，通过注解在object上找出所有Producer，将其从producersByType中删除并标记为invalidate</span></div><div class="line">    Map&lt;Class&lt;?&gt;, EventProducer&gt; producersInListener = handlerFinder.findAllProducers(object);</div><div class="line">    <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, EventProducer&gt; entry : producersInListener.entrySet()) &#123;</div><div class="line">        <span class="keyword">final</span> Class&lt;?&gt; key = entry.getKey();</div><div class="line">        EventProducer producer = getProducerForEventType(key);</div><div class="line">        EventProducer value = entry.getValue();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span> || !value.equals(producer)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">            <span class="string">"Missing event producer for an annotated method. Is "</span> + object.getClass() + <span class="string">" registered?"</span>);</div><div class="line">        &#125;</div><div class="line">        producersByType.remove(key).invalidate();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//3. 默认情况下，找出object上用@Subscribe注解了的handler，将其从event集合中删除并标记为invalidate</span></div><div class="line">    Map&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; handlersInListener = handlerFinder.findAllSubscribers(object);</div><div class="line">    <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Set&lt;EventHandler&gt;&gt; entry : handlersInListener.entrySet()) &#123;</div><div class="line">        Set&lt;EventHandler&gt; currentHandlers = getHandlersForEventType(entry.getKey());</div><div class="line">        Collection&lt;EventHandler&gt; eventMethodsInListener = entry.getValue();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (currentHandlers == <span class="keyword">null</span> || !currentHandlers.containsAll(eventMethodsInListener)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">            <span class="string">"Missing event handler for an annotated method. Is "</span> + object.getClass() + <span class="string">" registered?"</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (EventHandler handler : currentHandlers) &#123;</div><div class="line">            <span class="keyword">if</span> (eventMethodsInListener.contains(handler)) &#123;</div><div class="line">                handler.invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        currentHandlers.removeAll(eventMethodsInListener);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="投递事件"><a href="#投递事件" class="headerlink" title="投递事件"></a>投递事件</h1><h2 id="post"><a href="#post" class="headerlink" title="post()"></a>post()</h2><p>简单的事件投递过程如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bus.post(<span class="keyword">new</span> HandlerEvent(<span class="number">42</span>));</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">bus.post(getEvent);</div><div class="line"></div><div class="line"><span class="meta">@Producer</span></div><div class="line"><span class="function"><span class="keyword">public</span> HandlerEvent <span class="title">getEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> HandlerEvent(<span class="number">42</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来看下post方法实现的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function">ublic <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Event to post must not be null."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//1. 检查当前线程是否符合ThreadEnforcer的设置</span></div><div class="line">    enforcer.enforce(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//2. 向上追溯event的所有父类</span></div><div class="line">    Set&lt;Class&lt;?&gt;&gt;dispatchTypes = flattenHierarchy(event.getClass());</div><div class="line">    </div><div class="line">    <span class="comment">//3. 当前event没有注册handler，则发送一个DeadEvent事件</span></div><div class="line">    <span class="keyword">boolean</span> dispatched = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span> (Class&lt;?&gt;eventType: dispatchTypes) &#123;</div><div class="line">        Set&lt;EventHandler&gt; wrappers = getHandlersForEventType(eventType);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (wrappers != <span class="keyword">null</span> &amp;&amp; !wrappers.isEmpty()) &#123;</div><div class="line">            dispatched = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">for</span> (EventHandler wrapper: wrappers) &#123;</div><div class="line">                <span class="comment">//3-1 将事件和handler放到分发队列里</span></div><div class="line">                enqueueEvent(event, wrapper);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//4. 当前event没有注册handler，则发送一个DeadEvent事件</span></div><div class="line">    <span class="keyword">if</span> (!dispatched &amp;&amp; !(event <span class="keyword">instanceof</span> DeadEvent)) &#123;</div><div class="line">        post(<span class="keyword">new</span> DeadEvent(<span class="keyword">this</span>, event));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//5. 通知队列进行分发操作</span></div><div class="line">    dispatchQueuedEvents();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意两点：</p>
<ul>
<li>发送一个Event时，订阅了Event父类的Subscriber方法也会被调用</li>
<li>事件被放到调用者所在线程的队列里依次分发</li>
</ul>
<h2 id="flattenHierarchy"><a href="#flattenHierarchy" class="headerlink" title="flattenHierarchy()"></a>flattenHierarchy()</h2><p>进行post操作时，首先会通过flattenHierarchy方法获得event的所有父类或接口的集合：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> Set&lt;Class&lt;?&gt;&gt; flattenHierarchy(Class&lt;?&gt; concreteClass) &#123;</div><div class="line">   Set&lt;Class&lt;?&gt;&gt; classes = flattenHierarchyCache.get(concreteClass);</div><div class="line">   <span class="keyword">if</span> (classes == <span class="keyword">null</span>) &#123;</div><div class="line">     Set&lt;Class&lt;?&gt;&gt; classesCreation = getClassesFor(concreteClass);</div><div class="line">     classes = flattenHierarchyCache.putIfAbsent(concreteClass, classesCreation);</div><div class="line">     <span class="keyword">if</span> (classes == <span class="keyword">null</span>) &#123;</div><div class="line">       classes = classesCreation;</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> classes;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">//利用深度优先遍历导出了concreteClass的所有父类</span></div><div class="line"> <span class="keyword">private</span> Set&lt;Class&lt;?&gt;&gt; getClassesFor(Class&lt;?&gt; concreteClass) &#123;</div><div class="line">   List&lt;Class&lt;?&gt;&gt; parents = <span class="keyword">new</span> LinkedList&lt;Class&lt;?&gt;&gt;();</div><div class="line">   Set&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;();</div><div class="line"></div><div class="line">   parents.add(concreteClass);</div><div class="line"></div><div class="line"><span class="comment">//深度优先遍历</span></div><div class="line">   <span class="keyword">while</span> (!parents.isEmpty()) &#123;</div><div class="line">     Class&lt;?&gt; clazz = parents.remove(<span class="number">0</span>);</div><div class="line">     classes.add(clazz);</div><div class="line"></div><div class="line">     Class&lt;?&gt; parent = clazz.getSuperclass();</div><div class="line">     <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">       parents.add(parent);</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> classes;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="Dispatch-Queue"><a href="#Dispatch-Queue" class="headerlink" title="Dispatch Queue"></a>Dispatch Queue</h2><p>通过post方法投递的event首先会放到当前线程所在的Dispatch Queue中，然后依次分发。Bus类有如下成员属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;ConcurrentLinkedQueue&lt;EventWithHandler&gt;&gt; eventsToDispatch =</div><div class="line">    <span class="keyword">new</span> ThreadLocal&lt;ConcurrentLinkedQueue&lt;EventWithHandler&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> ConcurrentLinkedQueue&lt;EventWithHandler&gt; <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcurrentLinkedQueue&lt;EventWithHandler&gt;();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>eventsToDispatch是一个ThreadLocal对象，通过initialValue()方法，eventsToDispatch每次在新的线程上调用的时候都会生成新的ConcurrentLinkedQueue实例。event是通过enqueueEvent方法放到queue中的，下面看看equeueEvent()的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">enqueueEvent</span><span class="params">(Object event, EventHandler handler)</span> </span>&#123;</div><div class="line">	eventsToDispatch.get().offer(<span class="keyword">new</span> EventWithHandler(event, handler));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>offer()方法会将EventWithHandler对象放到当前线程的queue的尾部。offer方法和add方法的区别在于，当无法插入（例如空间不够）情况下会返回false，而不是抛出异常。EventWithHandler类对event和handler的关系进行了简单的包装，实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventWithHandler</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> Object event;</div><div class="line">	<span class="keyword">final</span> EventHandler handler;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EventWithHandler</span><span class="params">(Object event, EventHandler handler)</span> </span>&#123;</div><div class="line">	  <span class="keyword">this</span>.event = event;</div><div class="line">	  <span class="keyword">this</span>.handler = handler;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来看看dispatchQueuedEvents方法的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchQueuedEvents</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// don't dispatch if we're already dispatching, that would allow reentrancy and out-of-order events. Instead, leave</span></div><div class="line">    <span class="comment">// the events to be dispatched after the in-progress dispatch is complete.</span></div><div class="line">    <span class="comment">//1. 不能重复分发，否则会导致event的分发次序混乱</span></div><div class="line">    <span class="keyword">if</span> (isDispatching.get()) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    isDispatching.set(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="comment">//2. 依次取出EventWithHandler，并通过dispatch方法进行分发。</span></div><div class="line">            EventWithHandler eventWithHandler = eventsToDispatch.get().poll();</div><div class="line">            <span class="keyword">if</span> (eventWithHandler == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (eventWithHandler.handler.isValid()) &#123;</div><div class="line">                dispatch(eventWithHandler.event, eventWithHandler.handler);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        isDispatching.set(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Object event, EventHandler wrapper)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      wrapper.handleEvent(event);</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">      throwRuntimeException(</div><div class="line">          <span class="string">"Could not dispatch event: "</span> + event.getClass() + <span class="string">" to handler "</span> + wrapper, e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>值得注意的是，所有subscrible方法抛出的异常都会在这里捕获，捕获到异常以后event分发过程即停止，直到下一次在该线程上调用post为止。</p>
<h1 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h1><p>Otto的总体结构如下表示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">            +-------------------------+</div><div class="line">            |Bus(ThreadLocal)         |</div><div class="line">            |     +--------------+    |</div><div class="line">            |     |EventProducers|    |</div><div class="line">            |     |  +-------+   |  register  +-------+</div><div class="line">            |     |  |Produce|   &lt;----+-------+Produce|</div><div class="line">            |     |  +-------+   |    |       +-------+</div><div class="line">            |     |  +-------+   |    |</div><div class="line">            |     |  |Produce|   |    |</div><div class="line">            |     |  +-------+   |    |</div><div class="line">            |     +--------------+    |</div><div class="line">            |            |            |</div><div class="line">            |          event          |</div><div class="line">            |            |            |</div><div class="line"> post(event)|    +-------v--------+   |</div><div class="line">+----------------&gt; Dispatch Queue |   |</div><div class="line">            |    +-------+--------+   |</div><div class="line">            |            |            |</div><div class="line">            |          event          |</div><div class="line">            |            |            |</div><div class="line">            |     +------v------+     |</div><div class="line">            |     |EventHandlers|     |</div><div class="line">            |     | +---------+ |     |</div><div class="line">            |     | |Subscribe| |   register  +---------+</div><div class="line">            |     | +---------+ &lt;-----+-------+Subscribe|</div><div class="line">            |     | +---------+ |     |       +---------+</div><div class="line">            |     | |Subscribe| |     |</div><div class="line">            |     | +---------+ |     |</div><div class="line">            |     +-------------+     |</div><div class="line">            |                         |</div><div class="line">            +-------------------------+</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Okhttp使用详解]]></title>
      <url>http://liuguoquan727.github.io/2016/04/17/Android%20Okhttp%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>Okhttp是高性能的http库，支持同步、异步，而且实现了spdy、http2、websocket协议，api很简洁易用，和volley一样实现了http协议的缓存。Okhttp已经被Android官方采用，实现了几乎和Java.net.HttpURLConnection一样的功能。</p>
<h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p><a href="http://square.github.io/okhttp/" target="_blank" rel="external">官方介绍：http://square.github.io/okhttp/</a><br><a href="https://github.com/square/okhttp" target="_blank" rel="external">Github源代码：https://github.com/square/okhttp</a></p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li>一般的Get请求</li>
<li>一般的Post请求</li>
<li>基于Http的文件上传</li>
<li>文件下载</li>
<li>加载图片</li>
<li>支持请求回调，直接返回对象、对象集合</li>
<li>支持session的保持</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="Http-Get"><a href="#Http-Get" class="headerlink" title="Http Get"></a>Http Get</h2><p>对于网络加载库，最常用的就是http get请求，比如获取一个网页的内容。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//1.创建OkHttpClient对象</span></div><div class="line">    OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">    <span class="comment">//2.创建一个Request</span></div><div class="line">    <span class="keyword">final</span> Request mRequest = <span class="keyword">new</span> Request.Builder().url(<span class="string">"https://www.baidu.com"</span>).build();</div><div class="line"></div><div class="line">    <span class="comment">//3.创建Call对象</span></div><div class="line">    Call mCall = mOkHttpClient.newCall(mRequest);</div><div class="line"></div><div class="line">    <span class="comment">//4.请求加入调度</span></div><div class="line">    mCall.enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mMsgTxt.setText(<span class="string">"failure"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, <span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">//字符串</span></div><div class="line">            <span class="keyword">final</span> String msg = response.body().string();</div><div class="line">            <span class="comment">//字节数组</span></div><div class="line">            <span class="keyword">byte</span>[] msgBytes = response.body().bytes();</div><div class="line">            <span class="comment">//流</span></div><div class="line">            InputStream inputStream = response.body().byteStream();</div><div class="line"></div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mMsgTxt.setText(msg);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是发送一个Get请求的步骤</p>
<ol>
<li>首先构造一个Request对象，参数最少有个url，可以通过Request.Builder设置更多的参数，比如：header、method等。</li>
<li>然后通过Request的对象去够着一个Call对象，类似于将你的请求封装成任务。</li>
<li>最后，我们希望以异步的方式去执行请求，所以我们调用的是call.equeue，将call加入调度队列，然后等待任务执行完成，在Callback中即可得到结果。注意，回调方法都是运行在子线程中，如果需要操作控件，需要使用Handler切换到主线程。</li>
</ol>
<p>上面是异步的方式执行get请求，当然也支持阻塞的方式，直接调用call.execute()方法返回一个Response。如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//阻塞调用</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Response response = mCall.execute();</div><div class="line">			System.out.println(response.body().string());</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<h2 id="Http-post请求"><a href="#Http-post请求" class="headerlink" title="Http post请求"></a>Http post请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Request request = buildMultipartFormRequest(</div><div class="line">        url, <span class="keyword">new</span> File[]&#123;file&#125;, <span class="keyword">new</span> String[]&#123;fileKey&#125;, <span class="keyword">null</span>);</div><div class="line">FormEncodingBuilder builder = <span class="keyword">new</span> FormEncodingBuilder();   </div><div class="line">builder.add(<span class="string">"username"</span>,<span class="string">"liuguoquan"</span>);</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                   .url(url)</div><div class="line">                .post(builder.build())</div><div class="line">                .build();</div><div class="line"> mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback()&#123;&#125;);</div></pre></td></tr></table></figure>
<p>Post请求时，参数是包含在请求体中的，所以我们通过FormEncodingBuilder，添加多个String键值对，然后去构造RequestBody，最后完成Request的构造。</p>
<h2 id="基于Http的文件上传"><a href="#基于Http的文件上传" class="headerlink" title="基于Http的文件上传"></a>基于Http的文件上传</h2><p>接下来构造一个RequestBody的Builder叫做MultipartBuilder。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">File file = new File(Environment.getExternalStorageDirectory(), "balabala.mp4");</div><div class="line"></div><div class="line">RequestBody fileBody = RequestBody.create(MediaType.parse("application/octet-stream"), file);</div><div class="line"></div><div class="line">RequestBody requestBody = new MultipartBuilder()</div><div class="line">     .type(MultipartBuilder.FORM)</div><div class="line">     .addPart(Headers.of(</div><div class="line">          "Content-Disposition", </div><div class="line">              "form-data; name=\"username\""), </div><div class="line">          RequestBody.create(null, "liu"))</div><div class="line">     .addPart(Headers.of(</div><div class="line">         "Content-Disposition", </div><div class="line">         "form-data; name=\"mFile\"; </div><div class="line">         filename=\"wjd.mp4\""), fileBody)</div><div class="line">     .build();</div><div class="line"></div><div class="line">Request request = new Request.Builder()</div><div class="line">    .url("http://192.168.1.103:8080/okHttpServer/fileUpload")</div><div class="line">    .post(requestBody)</div><div class="line">    .build();</div><div class="line"></div><div class="line">Call call = mOkHttpClient.newCall(request);</div><div class="line">call.enqueue(new Callback()</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上述代码向服务器传递了一个键值对username：liu和一个文件。通过MultipartBuilder的addPart方法可以添加键值对或者文件。</p>
<h2 id="图片下载"><a href="#图片下载" class="headerlink" title="图片下载"></a>图片下载</h2><p>图片下载和文件下载，这两个是通过回调的Response拿到byte[]然后解码成图片；文件下载就是拿到InputStream后做写文件操作。</p>
<p>参考文章：</p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/23781773" target="_blank" rel="external">从原理角度解析Android （Java） http 文件上传</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0106/2275.html" target="_blank" rel="external">泡网：OkHttp使用教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Otto使用详解]]></title>
      <url>http://liuguoquan727.github.io/2016/04/17/Android_Otto%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>Otto是Square推出的基于Guava项目的Android支持库，otto是一个事件总线，用于应用程序的不同组件之间进行有效的通信。OTTO是基于Observer的设计模式。它有发布者，订阅者这两个主要对象。OTTO的最佳实践就是通过反射牺牲了微小的性能，同时极大的降低了程序的耦合度。</p>
<p>Otto官网: <a href="http://square.github.io/otto/" target="_blank" rel="external">http://square.github.io/otto/</a></p>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>Otto框架的主要功能是帮助我们来降低多个组件通信之间的耦合度（解耦）。</p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>比如：由界面A跳转至界面B，然后点击B中的Button发送消息更新界面A的视图；<br>比如：界面有一个界面A，A里面有个Fragment，点击Fragment中的一个Button，跳转至界面B，点击界面B的Button来更新界面A的Fragment视图，等等。</p>
<p>上面列出的两种场景，以前可以用startActivityForResult和interface的方式实现的话会比较麻烦，并且产生了很多的状态判断和逻辑判断，并且可能产生很多不必要的bug，代码量也比较大和繁琐，使用Otto就可以容易的避免这些问题。</p>
<h1 id="基本用法实例"><a href="#基本用法实例" class="headerlink" title="基本用法实例"></a>基本用法实例</h1><h2 id="添加Otto"><a href="#添加Otto" class="headerlink" title="添加Otto"></a>添加Otto</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.squareup:otto:1.3.8'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实现一个Bus的单例"><a href="#实现一个Bus的单例" class="headerlink" title="实现一个Bus的单例"></a>实现一个Bus的单例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  单例Bus对象</div><div class="line"> * Created by Michael on 2016/4/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BusProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Bus bus = <span class="keyword">new</span> Bus();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bus <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BusProvider</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义一个Event事件，封装消息"><a href="#自定义一个Event事件，封装消息" class="headerlink" title="自定义一个Event事件，封装消息"></a>自定义一个Event事件，封装消息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义一个Event事件，用来封装信息</div><div class="line"> * Created by Michael on 2016/4/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventFirst</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String msg;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventFirst</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.msg = msg;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MainActivity，订阅事件"><a href="#MainActivity，订阅事件" class="headerlink" title="MainActivity，订阅事件"></a>MainActivity，订阅事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mBtn1;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">//订阅事件</span></div><div class="line">        BusProvider.getInstance().register(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mBtn1 = (Button) findViewById(R.id.btn_1);</div><div class="line"></div><div class="line">        mBtn1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,BActivity.class));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理事件EventFirst</div><div class="line">     * <span class="doctag">@param</span> event</div><div class="line">     */</div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventFirst</span><span class="params">(EventFirst event)</span> </span>&#123;</div><div class="line"></div><div class="line">        mBtn1.setText(event.msg);</div><div class="line">        System.out.println(<span class="string">"onEventFirst:"</span> + event.msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventSecond</span><span class="params">(EventFirst event)</span> </span>&#123;</div><div class="line"></div><div class="line">        mBtn1.setText(event.msg);</div><div class="line">        System.out.println(<span class="string">"onEventFirst:"</span> + event.msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="comment">//取消订阅</span></div><div class="line">        BusProvider.getInstance().register(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Subscrible这个注解在调用了register之后有效，表示订阅一个事件，并且方法用public修饰，方法名可以任意取，参数为自定义的事件类，Otto根据事件对象的类名来判断和处理对应的事件。</p>
<h2 id="BActivity发送订阅事件"><a href="#BActivity发送订阅事件" class="headerlink" title="BActivity发送订阅事件"></a>BActivity发送订阅事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_b);</div><div class="line"></div><div class="line"><span class="comment">//        BusProvider.getInstance().register(this);</span></div><div class="line"></div><div class="line">        mBtn = (Button) findViewById(R.id.btn_1);</div><div class="line"></div><div class="line">        mBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"> <span class="comment">//               BusProvider.getInstance().post(new EventFirst("Event First"));</span></div><div class="line">                BusProvider.getInstance().post(produceEventFirst());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 产生事件</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Produce</span></div><div class="line">    <span class="function"><span class="keyword">public</span> EventFirst <span class="title">produceEventFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EventFirst(<span class="string">"Event First"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"><span class="comment">//        BusProvider.getInstance().unregister(this);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Produce注解告诉Bus该函数是一个事件产生者，产生的事件类型为该函数的返回值。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>点击BActivity中的按钮发送消息，然后返回至MainActivity中，打印如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">04</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">52</span>:<span class="number">13.179</span> <span class="number">24744</span>-<span class="number">24744</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.ottodemo</span> I/System<span class="selector-class">.out</span>: onEventSecond:Event First</div><div class="line"><span class="number">04</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">52</span>:<span class="number">13.179</span> <span class="number">24744</span>-<span class="number">24744</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.ottodemo</span> I/System<span class="selector-class">.out</span>: onEventFirst:Event First</div></pre></td></tr></table></figure>
<p>结果说明：@Subscrible注解的消息处理函数时根据事件对象的类名来确定事件类型，这里的两个方法的参数都是EventFirst类型，所以两个方法都处理了EventFirst事件消息。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过例子我们可以发现，其实事件发布者不用@Produce注解和注册事件也可以发布消息。但是你要Subscribe订阅事件就一定要register这个类了,否则是接受不到事件的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EventBus使用详解]]></title>
      <url>http://liuguoquan727.github.io/2016/04/17/Android_EventBus%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>EventBus是一个Android事件发布/订阅框架，通过解耦发布者和订阅者简化Android事件传递，这里的事件可以理解为消息。事件传递既可以用于Android四大组件间通讯，也可以用于异步线程和主线程间通讯等。<br>传统的事件传递方式包括：Handler、BroadcastReceiver、Interface回调，相比之下EventBus的有点是代码简洁，使用简单，并将事件发布和 订阅充分解耦。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>事件Event： </strong>又可成为消息，其实就是一个对象，可以是网络请求返回的字符串，也可以是某个开关状态等等。事件类型EventType是指事件所属的Class。</p>
<p>事件分为一般事件和Sticky事件，相对于一般事件，Sticky事件不同之处在于，当事件发布后，再有订阅者开始订阅该类型事件，依然能收到该类型事件的最近一个Sticky事件。</p>
<p><strong>订阅者Subscriber： </strong>订阅某种事件类型的对象，当有发布者发布这类事件后，EventBus会执行订阅者的onEvent函数，这个函数叫事件响应函数。订阅者通过register接口订阅某个事件类型，unregister接口退订。订阅者存在优先级，优先级高的订阅者可以取消事件继续向优先级低的订阅者分发，默认所有订阅者优先级都为0。</p>
<p><strong>发布者Publisher： </strong>发布某事件的对象，通过post接口发布事件。</p>
<h2 id="GitHub地址"><a href="#GitHub地址" class="headerlink" title="GitHub地址"></a>GitHub地址</h2><p><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus源码：https://github.com/greenrobot/EventBus</a></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="自定义一个事件类"><a href="#自定义一个事件类" class="headerlink" title="自定义一个事件类"></a>自定义一个事件类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnyEventType</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">AnyEventType</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="在要接受消息的页面注册"><a href="#在要接受消息的页面注册" class="headerlink" title="在要接受消息的页面注册"></a>在要接受消息的页面注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<h3 id="接收消息的方法"><a href="#接收消息的方法" class="headerlink" title="接收消息的方法"></a>接收消息的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Subscribe</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(AnyEventType event)</span> </span>&#123;<span class="comment">/* Do something */</span>&#125;;</div></pre></td></tr></table></figure>
<h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(event);</div></pre></td></tr></table></figure>
<h3 id="取消注册"><a href="#取消注册" class="headerlink" title="取消注册"></a>取消注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面我们来实现一个具体的例子来介绍EventBus的基本使用。</p>
<p>需求如下：在MainActivity中注册EventBus事件，并实现事件响应方法，当点击MainActivity中的按钮时跳转到SecondActivity，当点击SecondActivity中的按钮时向MainActivity发送Event事件，当MainActivity收到事件后，将事件内容显示在TextView中。</p>
<ol>
<li><p>MainActivity<br><img src="http://7xs7a3.com1.z0.glb.clouddn.com/EventBus_before.png" alt="MainActivity"></p>
</li>
<li><p>SecondActivity<br><img src="http://7xs7a3.com1.z0.glb.clouddn.com/EnventBus_middle.png" alt=""></p>
</li>
<li><p>事件处理<br><img src="http://7xs7a3.com1.z0.glb.clouddn.com/EventBus_Afer.png" alt=""></p>
</li>
</ol>
<h3 id="事件类Event"><a href="#事件类Event" class="headerlink" title="事件类Event"></a>事件类Event</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><p>在OnCreate()函数中注册EventBus，在Ondestroy()函数中反注册。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.btn_open)</div><div class="line">    Button mOpenBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.tv_showinfo)</div><div class="line">    TextView mInfoTxt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//注册</span></div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 事件响应方法</div><div class="line">     * 接收消息</div><div class="line">     * <span class="doctag">@param</span> event</div><div class="line">     */</div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        mInfoTxt.setText(msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//绑定点击事件</span></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_open)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSecondActivity</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">            startActivity(intent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="comment">//反注册</span></div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SecondActivity"><a href="#SecondActivity" class="headerlink" title="SecondActivity"></a>SecondActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.btn_post)</div><div class="line">    Button mPostBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_second);</div><div class="line"></div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"></div><div class="line">        mPostBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        <span class="comment">//发送事件</span></div><div class="line">                        EventBus.getDefault().post(<span class="keyword">new</span> Event(<span class="string">"Just do it"</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="EventBus的事件订阅函数"><a href="#EventBus的事件订阅函数" class="headerlink" title="EventBus的事件订阅函数"></a>EventBus的事件订阅函数</h2><h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><p>在上面的例子中，我们再注解<code>@Subscribe(threadMode = ThreadMode.MAIN)</code>中使用了ThreadMode.MAIN这个模式，表示该函数在主线程即UI线程中执行，实际上EventBus总共有四种线程模式，分别是：</p>
<ul>
<li><p>ThreadMode.MAIN：表示无论事件是在哪个线程发布出来的，该事件订阅方法onEvent都会在UI线程中执行，这个在Android中是非常有用的，因为在Android中只能在UI线程中更新UI，所有在此模式下的方法是不能执行耗时操作的。</p>
</li>
<li><p>ThreadMode.POSTING：表示事件在哪个线程中发布出来的，事件订阅函数onEvent就会在这个线程中运行，也就是说发布事件和接收事件在同一个线程。使用这个方法时，在onEvent方法中不能执行耗时操作，如果执行耗时操作容易导致事件分发延迟。</p>
</li>
<li><p>ThreadMode.BACKGROUND：表示如果事件在UI线程中发布出来的，那么订阅函数onEvent就会在子线程中运行，如果事件本来就是在子线程中发布出来的，那么订阅函数直接在该子线程中执行。</p>
</li>
<li><p>ThreadMode.AYSNC：使用这个模式的订阅函数，那么无论事件在哪个线程发布，都会创建新的子线程来执行订阅函数。</p>
</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="如何调用不同的订阅函数"><a href="#如何调用不同的订阅函数" class="headerlink" title="如何调用不同的订阅函数"></a>如何调用不同的订阅函数</h3><p>要调用四种不同模式的订阅函数，我们首先要用清楚EventBus是如何指定调用的函数的？</p>
<p>先回顾一下上一节中的例子是如何调用订阅函数onEvent的，首先新建一个事件类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发布事件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(<span class="keyword">new</span> Event(<span class="string">"Just do it"</span>));</div></pre></td></tr></table></figure></p>
<p>订阅事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 事件响应方法</div><div class="line"> * <span class="doctag">@param</span> event</div><div class="line"> */</div><div class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMain</span><span class="params">(Event event)</span> </span>&#123;</div><div class="line"></div><div class="line">    String msg = event.getMessgae();</div><div class="line">    mInfoTxt.setText(msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>观察可以发现：发布事件中的参数是Event的实例，而订阅函数中的参数也是Event的实例，可以推断EventBus是通过post函数传进去的类的实例来确定调用哪个订阅函数的，是哪个就调用哪个，如果有多个订阅函数呢，那么这些函数都会被调用！</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面我们来验证这个推断：</p>
<p>我们在基本使用章节的例子上进行扩展，首先建立四个类：FirstEvent、SecondEvent、ThirdEvent、FourthEvent。</p>
<p>FirstEvent.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstEvent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstEvent</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SecondEvent.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondEvent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecondEvent</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ThirdEvent.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdEvent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThirdEvent</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FourthEvent.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourthEvent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String messgae;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FourthEvent</span><span class="params">(String messgae)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messgae = messgae;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessgae</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messgae;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在MainActivity中，增加四种模式的订阅函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.btn_open)</div><div class="line">    Button mOpenBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.tv_showinfo)</div><div class="line">    TextView mInfoTxt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//注册</span></div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 事件响应方法</div><div class="line">     * <span class="doctag">@param</span> event</div><div class="line">     */</div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMain</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        Log.i(TAG, <span class="string">"onEventMain: "</span> + event.getMessgae());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.POSTING)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventPosting</span><span class="params">(SecondEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        Log.i(TAG, <span class="string">"onEventPosting: "</span>+ event.getMessgae());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventBackgroud</span><span class="params">(ThirdEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        Log.i(TAG, <span class="string">"onEventBackgroud: "</span> + event.getMessgae());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Subscribe</span>(threadMode = ThreadMode.ASYNC)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventAsync</span><span class="params">(FourthEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        String msg = event.getMessgae();</div><div class="line">        Log.i(TAG, <span class="string">"onEventAsync: "</span> + event.getMessgae());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//绑定点击事件</span></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_open)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSecondActivity</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">            startActivity(intent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="comment">//反注册</span></div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来在SecondActivity中增加四个按钮，分别发送不同类别的事件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_second);</div><div class="line"></div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_post)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostA</span><span class="params">()</span> </span>&#123;</div><div class="line">        EventBus.getDefault().post(<span class="keyword">new</span> FirstEvent(<span class="string">"FirstEvent"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_post2)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostB</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        EventBus.getDefault().post(<span class="keyword">new</span> SecondEvent(<span class="string">"SecondEvent"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_post3)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostC</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        EventBus.getDefault().post(<span class="keyword">new</span> ThirdEvent(<span class="string">"ThirdEvent"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_post4)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostD</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        EventBus.getDefault().post(<span class="keyword">new</span> FourthEvent(<span class="string">"FourthEvent"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后，分别顺序点击SecondActivity的四个按钮，打印信息如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">02</span>:<span class="number">53</span>:<span class="number">45.950</span> <span class="number">4779</span>-<span class="number">4779</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventMain: FirstEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">02</span>:<span class="number">53</span>:<span class="number">47.528</span> <span class="number">4779</span>-<span class="number">4779</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventPosting: SecondEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">02</span>:<span class="number">53</span>:<span class="number">48.882</span> <span class="number">4779</span>-<span class="number">4940</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventBackgroud: ThirdEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">02</span>:<span class="number">53</span>:<span class="number">50.462</span> <span class="number">4779</span>-<span class="number">4940</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventAsync: FourthEvent</div></pre></td></tr></table></figure>
<blockquote>
<p>由此可见，通过发布不同的事件类的实例，EventBus根据类的实例分别调用了不同的订阅函数来处理事件。</p>
</blockquote>
<p>那么，当同一个类的实例有多个函数订阅时，结果会是怎样呢？答案是，这些函数都会执行。下面我们来验证一下，将MainActivity中订阅函数的参数都改为FirstEvent，代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 事件响应方法</div><div class="line">  * <span class="doctag">@param</span> event</div><div class="line">  */</div><div class="line"> <span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMain</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">     String msg = event.getMessgae();</div><div class="line">     Log.i(TAG, <span class="string">"onEventMain: "</span> + event.getMessgae());</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Subscribe</span>(threadMode = ThreadMode.POSTING)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventPosting</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">     String msg = event.getMessgae();</div><div class="line">     Log.i(TAG, <span class="string">"onEventPosting: "</span>+ event.getMessgae());</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Subscribe</span>(threadMode = ThreadMode.BACKGROUND)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventBackgroud</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">     String msg = event.getMessgae();</div><div class="line">     Log.i(TAG, <span class="string">"onEventBackgroud: "</span> + event.getMessgae());</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Subscribe</span>(threadMode = ThreadMode.ASYNC)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventAsync</span><span class="params">(FirstEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">     String msg = event.getMessgae();</div><div class="line">     Log.i(TAG, <span class="string">"onEventAsync: "</span> + event.getMessgae());</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>运行程序，点击SecondActivity的FirstEvent按钮，打印信息如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07.032</span> <span class="number">23611</span>-<span class="number">23746</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventAsync: FirstEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07.033</span> <span class="number">23611</span>-<span class="number">23611</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventMain: FirstEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07.033</span> <span class="number">23611</span>-<span class="number">23611</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventPosting: FirstEvent</div><div class="line"><span class="number">03</span>-<span class="number">31</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07.034</span> <span class="number">23611</span>-<span class="number">23748</span>/com<span class="selector-class">.example</span><span class="selector-class">.michael</span><span class="selector-class">.eventbusdemo</span> I/MainActivity: onEventBackgroud: FirstEvent</div></pre></td></tr></table></figure>
<blockquote>
<p>分析可知，当SecondActivity发送FirstEvent事件过来的时候，这个四个订阅函数会同时接收到这个事件并执行。</p>
</blockquote>
<p><strong>总结： </strong>订阅函数的执行是根据参数中的事件类的类名来决定的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发模式之MVP]]></title>
      <url>http://liuguoquan727.github.io/2016/04/17/Android%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8BMVP/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在开发Android App时，越到最后肯定会发现，Activity的负担非常重，既要初始化控件，又要写一些逻辑操作的展示等等，很多Activity中的代码都充当了Controller和Model的角色，因而发现Activity违背了单一职责原则，负担过重。所以，MVP架构模式应运而生。</p>
<h2 id="MVP架构是什么"><a href="#MVP架构是什么" class="headerlink" title="MVP架构是什么"></a>MVP架构是什么</h2><p>MVP就是Model-View-Presenter，MVP是从经典的MVC演变而来，它们的基本思想有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。作为一种新的模式，MVP与MVC有着一个重大的区别：在MVP中View并不会直接使用Model，它们之间的通信是通过Presenter（MVC中是Controller）来进行的，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过Controller。</p>
<p>在MVC里，View是可以直接访问Model的，从而View里会包含Model信息，不可避免的还要包括一些业务逻辑。在MVC模型里，更关注的是Model的不变，而同时有多个对Model的不同显示的View。所有在MVC模型里，Model不依赖于View，但是View依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。</p>
<p>用流程图的方式解释就更清楚了：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/mvp-mvp%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="MVP流程图"></p>
<h2 id="MVC与MVP的区别"><a href="#MVC与MVP的区别" class="headerlink" title="MVC与MVP的区别"></a>MVC与MVP的区别</h2><h3 id="MVP架构"><a href="#MVP架构" class="headerlink" title="MVP架构"></a>MVP架构</h3><blockquote>
<p>View：对应于Activity，负责View的绘制以及与用户交互、<br>Model：业务逻辑和实体模型<br>Presenter：负责完成View与Model间的交互</p>
</blockquote>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/mvp-mvp.png" alt="MVP示意图"></p>
<ul>
<li>View不直接与Model交互，而是通过Presenter交互来与Model间接交互</li>
<li>Presenter与View的交互是通过接口来进行的</li>
<li>通过View与Presenter是一对一的，但复杂的View可能绑定多个Presenter来处理逻辑</li>
</ul>
<h3 id="MVC架构"><a href="#MVC架构" class="headerlink" title="MVC架构"></a>MVC架构</h3><blockquote>
<p>View：对应于布局文件<br>Model：业务逻辑和实体模型<br>Controller：对应于Activity</p>
</blockquote>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/mvp-mvc.png" alt="mvc示意图"></p>
<ul>
<li>View可以和Model直接交互</li>
<li>Controller是基于行为的，并且可以被多个View共享。</li>
<li>可以复杂决定显示哪个View</li>
</ul>
<p>总的就是说：从MVC到MVP的一个转变，就是减少了Activity的职责，减轻了它的负担，简化了Activity中的代码和一些操作，将逻辑代码提取到了Presenter中进行处理，降低其耦合度。</p>
<p>在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。 我们甚至可以在Model和View都没有完成时候，就可以通过编写Mock Object（即实现了Model和View的接口，但没有具体的内容的）来测试Presenter的逻辑。 在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。因此就有人提出了Presenter First的设计模式，就是根据User Story来首先设计和开发Presenter。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。</p>
<h3 id="MVP的优点"><a href="#MVP的优点" class="headerlink" title="MVP的优点"></a>MVP的优点</h3><ul>
<li>降低耦合度，隐藏数据，Activity中代码更简洁</li>
<li>模块职责划分明显</li>
<li>方便测试驱动开发</li>
<li>代码复用度较高</li>
<li>代码灵活性增强</li>
</ul>
<h2 id="MVP架构模式示例"><a href="#MVP架构模式示例" class="headerlink" title="MVP架构模式示例"></a>MVP架构模式示例</h2><p>这个示例是根据用户id获取用户信息并展示的一个过程，其中获取信息用了一个线程进行了模拟获取。</p>
<p>先看一下MVP包结构图：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/mvp-mvp%E5%8C%85%E7%BB%93%E6%9E%84.png" alt=""></p>
<h3 id="1-Model层"><a href="#1-Model层" class="headerlink" title="1.Model层"></a>1.Model层</h3><p>首先是建一个JavaBean User实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.mvpdemo.bean;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String id;</div><div class="line">	<span class="keyword">private</span> String sex;</div><div class="line">	<span class="keyword">private</span> String age;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sex;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sex = sex;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建Model层抽象接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGetUser</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfo</span><span class="params">(<span class="keyword">int</span> id,OnUserInfoListener listener)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnUserInfoListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoSuccess</span><span class="params">(User user)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoFailed</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Model层抽象接口实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetUserInfo</span> <span class="keyword">implements</span> <span class="title">IGetUser</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfo</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> OnUserInfoListener listener)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				SystemClock.sleep(<span class="number">5000</span>); <span class="comment">//模拟子线程耗时操作</span></div><div class="line"></div><div class="line">				<span class="keyword">if</span> (id == <span class="number">1</span>) &#123;</div><div class="line">					User user = <span class="keyword">new</span> User();</div><div class="line">					user.setName(<span class="string">"liu"</span>);</div><div class="line">					user.setAge(<span class="string">"27"</span>);</div><div class="line">					user.setSex(<span class="string">"男"</span>);</div><div class="line">					user.setId(<span class="string">"1"</span>);</div><div class="line">					listener.getUserInfoSuccess(user);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					listener.getUserInfoFailed();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-View层"><a href="#2-View层" class="headerlink" title="2.View层"></a>2.View层</h3><p>Presenter和View交互是通过接口，所有我们需要定义一个IShowUserView的接口，这个接口封装的方法基本都跟视图展示有关。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IShowUserView</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toMainActivity</span><span class="params">(User user)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFailedError</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-Presenter层"><a href="#3-Presenter层" class="headerlink" title="3.Presenter层"></a>3.Presenter层</h3><p>Presenter是Model和View之间交互的桥梁，里面有一些业务逻辑的操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoPresenter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> IGetUser iGetUser;</div><div class="line">	<span class="keyword">private</span> IShowUserView iShowUserView;</div><div class="line">	<span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserInfoPresenter</span><span class="params">(IShowUserView iShowUserView)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.iShowUserView = iShowUserView;</div><div class="line">		<span class="keyword">this</span>.iGetUser = <span class="keyword">new</span> GetUserInfo();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoToShow</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		iShowUserView.showLoading();</div><div class="line">		iGetUser.getUserInfo(id, <span class="keyword">new</span> OnUserInfoListener() &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoSuccess</span><span class="params">(<span class="keyword">final</span> User user)</span> </span>&#123;</div><div class="line">				<span class="comment">// UI线程执行</span></div><div class="line">				mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">					</div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">						<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">						iShowUserView.toMainActivity(user);</div><div class="line">						iShowUserView.hideLoading();</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoFailed</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">					</div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">						<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">						iShowUserView.showFailedError();</div><div class="line">						iShowUserView.hideLoading();</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-Activity中调用"><a href="#4-Activity中调用" class="headerlink" title="4.Activity中调用"></a>4.Activity中调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">IShowUserView</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> TextView mNameTxt;</div><div class="line">	<span class="keyword">private</span> TextView mAgeTxt;</div><div class="line">	<span class="keyword">private</span> TextView mSexTxt;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Button mLoadBtn;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> ProgressDialog mDialog;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> UserInfoPresenter mPresenter;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		mPresenter = <span class="keyword">new</span> UserInfoPresenter(<span class="keyword">this</span>);</div><div class="line">		</div><div class="line">		mDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">		</div><div class="line">		mNameTxt = (TextView) findViewById(R.id.tv_name);</div><div class="line">		mAgeTxt = (TextView) findViewById(R.id.tv_age);</div><div class="line">		mSexTxt = (TextView) findViewById(R.id.tv_sex);</div><div class="line">		mLoadBtn = (Button) findViewById(R.id.btn_load);</div><div class="line">		mLoadBtn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				mPresenter.getUserInfoToShow(<span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mDialog.show();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mDialog.dismiss();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toMainActivity</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		mNameTxt.setText(user.getName());</div><div class="line">		mAgeTxt.setText(user.getAge());</div><div class="line">		mSexTxt.setText(user.getSex());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFailedError</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Toast.makeText(<span class="keyword">this</span>, <span class="string">"Load failed"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看出，虽说是代码量增加了，但是Activity中的代码变得简洁起来，程序也清晰明了，好处还是很多的。好记性不如烂笔头，勤加练习和实践。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android-Universal-Image-Loader源码分析]]></title>
      <url>http://liuguoquan727.github.io/2016/04/17/Android-Universal-Image-Loader%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1><h2 id="Android-Universal-Image-Loader"><a href="#Android-Universal-Image-Loader" class="headerlink" title="Android-Universal-Image-Loader"></a>Android-Universal-Image-Loader</h2><p>Android-Universal-Image-Loader是一个强大的、可高度定制的开源图片缓存框架，简称UIL。简单的说UIL就做了一件事–获取图片并显示在相应的控件上。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>添加完依赖后再Application或Activity中初始化ImageLoader，一般式在Application中初始化，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UILApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">		initImageLoader(getApplicationContext());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initImageLoader</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//缓存目录</span></div><div class="line">		File cacheDir = StorageUtils.getCacheDirectory(context);</div><div class="line">		<span class="comment">//添加配置需求</span></div><div class="line">		ImageLoaderConfiguration config = <span class="keyword">new</span> ImageLoaderConfiguration.Builder(context)</div><div class="line">		  .memoryCacheExtraOptions(<span class="number">480</span>, <span class="number">800</span>) <span class="comment">// default = device screen dimensions</span></div><div class="line">		  .diskCacheExtraOptions(<span class="number">480</span>, <span class="number">800</span>, CompressFormat.JPEG, <span class="number">75</span>, <span class="keyword">null</span>)</div><div class="line">		  .taskExecutor(...)</div><div class="line">		  .taskExecutorForCachedImages(...)</div><div class="line">		  .threadPoolSize(<span class="number">3</span>) <span class="comment">// default 线程池大小</span></div><div class="line">		  .threadPriority(Thread.NORM_PRIORITY - <span class="number">1</span>) <span class="comment">// default 线程优先级</span></div><div class="line">		  .tasksProcessingOrder(QueueProcessingType.FIFO) <span class="comment">// default 任务队列模式</span></div><div class="line">		  .denyCacheImageMultipleSizesInMemory()</div><div class="line">		  .memoryCache(<span class="keyword">new</span> LruMemoryCache(<span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>)) <span class="comment">//</span></div><div class="line">		  .memoryCacheSize(<span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>)</div><div class="line">		  .memoryCacheSizePercentage(<span class="number">13</span>) <span class="comment">// default</span></div><div class="line">		  .diskCache(<span class="keyword">new</span> UnlimitedDiscCache(cacheDir)) <span class="comment">// default</span></div><div class="line">		  .diskCacheSize(<span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>)</div><div class="line">		  .diskCacheFileCount(<span class="number">100</span>)</div><div class="line">		  .diskCacheFileNameGenerator(<span class="keyword">new</span> HashCodeFileNameGenerator()) <span class="comment">// default</span></div><div class="line">		  .imageDownloader(<span class="keyword">new</span> BaseImageDownloader(context)) <span class="comment">// default</span></div><div class="line">		  .imageDecoder(<span class="keyword">new</span> BaseImageDecoder()) <span class="comment">// default</span></div><div class="line">		  .defaultDisplayImageOptions(DisplayImageOptions.createSimple()) <span class="comment">// default</span></div><div class="line">		  .writeDebugLogs()</div><div class="line">		  .build();</div><div class="line"></div><div class="line">		<span class="comment">// 初始化ImageLoader配置</span></div><div class="line">		ImageLoader.getInstance().init(config);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ImageLoaderConfiguration表示ImageLoader的配置信息，可包括图片最大尺寸、线程池、下载器、缓存等参数的配置。</p>
<h3 id="Manifest配置"><a href="#Manifest配置" class="headerlink" title="Manifest配置"></a>Manifest配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</div><div class="line"></div><div class="line">&lt;application</div><div class="line">	android:name=<span class="string">".UILApplication"</span></div><div class="line">	``</div><div class="line">	``</div><div class="line">	``</div><div class="line">/application&gt;</div></pre></td></tr></table></figure>
<p>添加网络权限和添加读写外部存储权限</p>
<h3 id="下载显示图片"><a href="#下载显示图片" class="headerlink" title="下载显示图片"></a>下载显示图片</h3><p>下载图片，解析为Bitmap并在ImageView中显示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ImageLoadingListener animateFirstListener = <span class="keyword">new</span> AnimateFirstDisplayListener();</div><div class="line"></div><div class="line"><span class="keyword">private</span> DisplayImageOptions options;</div><div class="line"></div><div class="line">ImageAdapter(Context context) &#123;</div><div class="line">		inflater = LayoutInflater.from(context);</div><div class="line">		</div><div class="line">		<span class="comment">//下载图片选项</span></div><div class="line">options = <span class="keyword">new</span> DisplayImageOptions.Builder()</div><div class="line">		.showImageOnLoading(R.drawable.ic_stub) <span class="comment">//下载中</span></div><div class="line">		.showImageForEmptyUri(R.drawable.ic_empty) <span class="comment">//空URL</span></div><div class="line">		.showImageOnFail(R.drawable.ic_error) <span class="comment">//失败</span></div><div class="line">		.cacheInMemory(<span class="keyword">true</span>)</div><div class="line">		.cacheOnDisk(<span class="keyword">true</span>)</div><div class="line">		.considerExifParams(<span class="keyword">true</span>)</div><div class="line">		.displayer(<span class="keyword">new</span> CircleBitmapDisplayer(Color.WHITE, <span class="number">5</span>))</div><div class="line">		.build();</div><div class="line"><span class="comment">//显示图片</span></div><div class="line">ImageLoader.getInstance().displayImage(imageUrl, holder.image, options, animateFirstListener);	</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">*监听下载图片，传递Bitmap给回调接口</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimateFirstDisplayListener</span> <span class="keyword">extends</span> <span class="title">SimpleImageLoadingListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; displayedImages = Collections.synchronizedList(<span class="keyword">new</span> LinkedList&lt;String&gt;());</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadingComplete</span><span class="params">(String imageUri, View view, Bitmap loadedImage)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (loadedImage != <span class="keyword">null</span>) &#123;</div><div class="line">			ImageView imageView = (ImageView) view;</div><div class="line">			<span class="keyword">boolean</span> firstDisplay = !displayedImages.contains(imageUri);</div><div class="line">			<span class="keyword">if</span> (firstDisplay) &#123;</div><div class="line">				FadeInBitmapDisplayer.animate(imageView, <span class="number">500</span>);</div><div class="line">				displayedImages.add(imageUri);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>可配置度高。支持任务线程池、下载器、解码器、内存及磁盘缓存、显示选项等的配置。</li>
<li>包含内存缓存和磁盘缓存两级缓存。</li>
<li>支持多线程，支持异步和同步加载</li>
<li>支持多种缓存算法、下载进度监听、ListView图片错乱解决等。</li>
</ul>
<h1 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h1><h2 id="总体设计框图"><a href="#总体设计框图" class="headerlink" title="总体设计框图"></a>总体设计框图</h2><p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-overall-design.png" alt="UIL框架图"></p>
<p>上面是UIL的总体框架图。整个库主要分为ImageLoader、ImageLoaderEngine、Cache、ImageDownloader、ImageDecoder、BitmapDisplayer、BitmapProcessor七大模块，其中Cache分为Memory Cache和DiskCache两部分。</p>
<p>简单的讲就是ImageLoader收到加载及显示图片的任务，并将它交给ImageLoaderEngine，ImageLoaderEngine分发任务到具体线程池去执行，任务通过Cache及ImageDownloader获取图片，中间可能经过BitmapProcessor和ImageDecoder处理，最终转换为Bitmap交给BitmapDisplayer在ImageAware中显示。</p>
<h2 id="UIL中的概念"><a href="#UIL中的概念" class="headerlink" title="UIL中的概念"></a>UIL中的概念</h2><ul>
<li><strong>ImageLoaderEngine</strong></li>
</ul>
<p>任务分发器，负责分发LoadAndDisplayImageTask和ProcessAndDisplayImageTask给具体的线程去执行。</p>
<ul>
<li><strong>LoadAndDisplayImageTask</strong></li>
</ul>
<p>用于加载并显示图片的任务。</p>
<ul>
<li><strong>ProcessAndDisplayImageTask</strong></li>
</ul>
<p>用于处理并显示图片的任务。</p>
<ul>
<li><strong>DisplayBitmapTask</strong></li>
</ul>
<p>用于显示图片的任务</p>
<ul>
<li><strong>ImageAware</strong></li>
</ul>
<p>显示图片的对象，可以是ImageView等。</p>
<ul>
<li><strong>BitmapDisplayer</strong></li>
</ul>
<p>将Bitmap对象显示在相应的控件ImageAware上。</p>
<ul>
<li><strong>ImageDownloader</strong></li>
</ul>
<p>图片下载器，负责从图片的各个来源获取输入流</p>
<ul>
<li><strong>MemoryCache</strong></li>
</ul>
<p>内存图片缓存，可向内存缓存图片或从内存读取图片</p>
<ul>
<li><strong>DiskCache</strong></li>
</ul>
<p>本地图片缓存，可向本地磁盘缓存保存图片或从本地磁盘读取图片</p>
<ul>
<li><strong>ImageDecoder</strong></li>
</ul>
<p>图片解码器，负责将图片输入流InputStream转换为Bitmap对象。</p>
<ul>
<li><strong>BitmapProcessor</strong></li>
</ul>
<p>图片处理器，负责从缓存读取或写入前对图片进行处理</p>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-flow.png" alt="图片加载及显示流程图"></p>
<p>上图为图片加载及显示流程图,可知有三种情况:</p>
<ul>
<li>[ 1 ] - 图片没有缓存</li>
</ul>
<p>先下载图片，然后显示图片，同时异步将图片缓存到磁盘和内存中。</p>
<ul>
<li>[ 2 ] - 图片缓存在磁盘上</li>
</ul>
<p>若图片不在缓存中，则从磁盘缓存中查找图片，然后将图片解码为Bitmap对象并显示在控件上。</p>
<ul>
<li>[ 3 ] - Bitmap对象缓存在内存里</li>
</ul>
<p>直接从内存缓存取出相应的Bitmap对象并显示在控件上。</p>
<h1 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h1><h2 id="类关系图"><a href="#类关系图" class="headerlink" title="类关系图"></a>类关系图</h2><p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-relation-class.png" alt="类关系图"></p>
<h2 id="核心类介绍"><a href="#核心类介绍" class="headerlink" title="核心类介绍"></a>核心类介绍</h2><h3 id="ImageLoader-java"><a href="#ImageLoader-java" class="headerlink" title="ImageLoader.java"></a>ImageLoader.java</h3><p>图片加载器，对外的主要API，采用了<strong>单例设计模式</strong>，用于图片的加载和显示。</p>
<p>主要函数：</p>
<ul>
<li>getInstance()</li>
</ul>
<p>得到ImageLoader单例，通过双层是否为null判断提高性能。</p>
<ul>
<li>init(ImageLoaderConfiguration configuration)</li>
</ul>
<p>初始化配置参数，参数为configuration为ImageLoader的配置信息，包括图片最大尺寸、任务线程池、磁盘缓存、下载器、解码器等等。实现中会初始化ImageLoaderEngine engine属性，该属性为任务分发器。</p>
<ul>
<li>displayImage(String uri, ImageAware imageAware, DisplayImageOptions options, ImageLoadingListener listener, ImageLoadingProgressListener progressListener)</li>
</ul>
<p>加载并显示图片或加载并执行回调接口。ImageLoader加载图片主要分为三类接口：</p>
<ol>
<li>displayImage()表示异步加载并显示图片到对应的ImageAware上。</li>
<li>loadImage()表示异步加载图片并执行回调接口。</li>
<li>loadImageSync()表示同步加载图片。</li>
</ol>
<p>以上三类接口最终都会调用到这个函数进行图片加载。函数参数解释如下：</p>
<p>Uri: 图片的uri，uri支持多种来源的图片，包括http、https、file、content、assets、drawable及自定义<br>ImageAware： 一个接口，表示需要加载图片的对象，可包装View。<br>Options： 图片显示的配置项。比如加载前、加载中、加载失败应该显示的占位图片，图片是否需要在磁盘缓存，是否需要在内存缓存等。<br>listener： 图片加载各种时刻的回调接口，包括开始加载、加载失败、加载成功、取消加载四个时刻的回调函数。<br>progressListener： 图片加载进度的回调接口。</p>
<p>函数流程图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-display-image-flow-chart.png" alt=""></p>
<h3 id="ImageLoaderConfiguration-java"><a href="#ImageLoaderConfiguration-java" class="headerlink" title="ImageLoaderConfiguration.java"></a>ImageLoaderConfiguration.java</h3><p>ImageLoader的配置信息，包括图片最大尺寸、线程池、缓存、下载器、解码器等等。</p>
<p>主要属性：</p>
<ul>
<li><p>Resources resources 程序本地资源访问器，用于加载DisplayImageOptions中设置的一些App中图片资源。</p>
</li>
<li><p>int maxImageWidthForMemoryCache 内存缓存的图片最大宽度。</p>
</li>
<li><p>int maxImageHeightForMemoryCache 内存缓存的图片最大高度。</p>
</li>
<li><p>int maxImageWidthForDiskCache 磁盘缓存的图片最大宽度。</p>
</li>
<li><p>int maxImageHeightForDiskCache 磁盘缓存的图片最大高度。</p>
</li>
<li><p>BitmapProcessor processorForDiskCache 图片处理器，用于处理从磁盘缓存中读取到的图片。</p>
</li>
<li><p>Executor taskExecutor  ImageLoaderEngine中用于执行从源获取图片的任务</p>
</li>
<li><p>Executor taskExecutorForCachedImages ImageLoaderEngine中用于执行从缓存获取图片任务的Executor。</p>
</li>
<li><p>boolean customExecutor 用户是否自定义了上面的taskExecutor</p>
</li>
<li><p>boolean customExecutorForCachedImages 用户是否自定义了上面的taskExecutorForCachedImages</p>
</li>
<li><p>int threadPoolSize 上面两个默认线程池的核心池大小，即最大并发数</p>
</li>
<li><p>int threadPriority 上面默认线程池的线程优先级。</p>
</li>
<li><p>QueueProcessingType tasksProcessingType 上面两个默认线程池的线程队列类型，目前只有FIFO，LIFO两种选择</p>
</li>
<li><p>MemoryCache MemoryCache 图片内存缓存</p>
</li>
<li><p>DiskCache diskCache 图片磁盘缓存，一般放在SD卡</p>
</li>
<li><p>ImageDownloader downloader 图片下载器</p>
</li>
<li><p>ImageDecoder decoder 图片解码器，内部可使用我们常见的BitmapFactory.decode()将图片资源解码成Bitmap对象</p>
</li>
<li><p>DisplayImageOptions defaultDisplayImageOptions 图片显示的配置项。比如加载前、加载中、加载失败应该显示的占位图片，图片是否需要在磁盘缓存，是否需要在内存缓存等。</p>
</li>
<li><p>ImageDownloader networkDeniedDownloader 不允许访问网络的图片下载器</p>
</li>
<li><p>ImageDownloader slowNetworkDownloader 慢网络情况下的图片下载器</p>
</li>
</ul>
<h3 id="ImageLoaderConfiguration-Builder-java-静态内部类"><a href="#ImageLoaderConfiguration-Builder-java-静态内部类" class="headerlink" title="ImageLoaderConfiguration.Builder.java 静态内部类"></a>ImageLoaderConfiguration.Builder.java 静态内部类</h3><p><strong>Builder模式</strong>，用于构造参数繁多的ImageLoaderConfiguration。其属性与ImageLoaderConfiguration类似，函数多是属性设置函数。</p>
<p>主要函数及含义：</p>
<ul>
<li>builder()</li>
</ul>
<p>按照配置，生成ImageLoaderConfiguration。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ImageLoaderConfiguration <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">	initEmptyFieldsWithDefaultValues();</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ImageLoaderConfiguration(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>initEmptyFieldsWithDefaultValues()</li>
</ul>
<p>初始化值为null的属性。若用户没有配置相关项，UIL会通过调用DefaultConfigurationFactory中的函数返回一个默认值当配置。</p>
<p>taskExecutorForCacheImages、taskExecutor及ImageLoaderEngine的taskDistributor的默认值如下：</p>
<table>
<thead>
<tr>
<th>parameters</th>
<th>taskDistributor</th>
<th>taskExecutorForCacheImages/taskExecutor</th>
</tr>
</thead>
<tbody>
<tr>
<td>corePoolSize</td>
<td>0</td>
<td>3</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>Integer.MAX_VALUE</td>
<td>3</td>
</tr>
<tr>
<td>keepAliveTime</td>
<td>60</td>
<td>3</td>
</tr>
<tr>
<td>unit</td>
<td>SECONDS</td>
<td>MILLISECONDS</td>
</tr>
<tr>
<td>workQueue</td>
<td>SynchronousQueue</td>
<td>LIFOLinkedBlockingDequeu/LinkedBlockingQueue</td>
</tr>
<tr>
<td>priority</td>
<td>5</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>diskCacheFileNameGenerator默认值为HashCodeFileNameGenerator</p>
<p>memoryCache默认值为LruMemoryCache。如果内存缓存不允许缓存一张图片的多个尺寸，则用FuzzyKeyMemoryCache做封装，同一个图片新的尺寸会覆盖缓存中该图片老的尺寸。</p>
<p>diskCache默认值与diskCacheSize和diskCacheFileCount值有关，如果他们有一个大于0，则默认为LruDiskCache，否则使用无大小限制的UnlimitedDiskCache。</p>
<p>downloader默认值为BaseImageDownloader。</p>
<p>decoder默认值为BaseImageDecoder</p>
<p>defaultDisplayImageOptions为Builder().build()</p>
<ul>
<li>denyCacheImageMultipleSizeInMemory()</li>
</ul>
<p>设置内存缓存不允许缓存一张图片的多个尺寸，默认允许。后面会讲到的View的getWidth()在初始化前后的不同值与这个设置的关系。</p>
<ul>
<li>diskCacheSize(int maxCacheSize)</li>
</ul>
<p>设置磁盘缓存的最大字节数，如果大于0或者下面的maxFileCount大于0，默认的DiskCache会用LruDiskCache，否则使用无大小限制的UnlimitedDiskCache。</p>
<ul>
<li>diskCacheFileCount(int maxFileCount)</li>
</ul>
<p>设置磁盘缓存的最大文件数，如果大于0或者上面的maxCacheSize大于0，默认的DiskCache会用LruDiskCache，否则使用无大小限制的UnlimitedDiskCache。</p>
<h3 id="ImageLoaderConfiguration-NetworkDeniedDownloader-java-静态内部类"><a href="#ImageLoaderConfiguration-NetworkDeniedDownloader-java-静态内部类" class="headerlink" title="ImageLoaderConfiguration.NetworkDeniedDownloader.java 静态内部类"></a>ImageLoaderConfiguration.NetworkDeniedDownloader.java 静态内部类</h3><p>不允许访问网络的图片下载器，实现了ImageDownloader接口。实现也比较简单，包装了一个ImageDownloader对象，通过getStream()函数中禁止Http和Https Scheme禁止网络访问，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkDeniedImageDownloader</span> <span class="keyword">implements</span> <span class="title">ImageDownloader</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ImageDownloader wrappedDownloader;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NetworkDeniedImageDownloader</span><span class="params">(ImageDownloader wrappedDownloader)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.wrappedDownloader = wrappedDownloader;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> InputStream <span class="title">getStream</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		<span class="keyword">switch</span> (Scheme.ofUri(imageUri)) &#123;</div><div class="line">			<span class="keyword">case</span> HTTP:</div><div class="line">			<span class="keyword">case</span> HTTPS:</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				<span class="keyword">return</span> wrappedDownloader.getStream(imageUri, extra);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ImageLoaderConfiguration-SlowNetworkingImageDownloader-java-静态内部类"><a href="#ImageLoaderConfiguration-SlowNetworkingImageDownloader-java-静态内部类" class="headerlink" title="ImageLoaderConfiguration.SlowNetworkingImageDownloader.java 静态内部类"></a>ImageLoaderConfiguration.SlowNetworkingImageDownloader.java 静态内部类</h3><p>慢网络情况下的图片下载器，实现了ImageDownloader接口。<br>通过包装一个ImageDownloader对象实现，在getStream()函数中当Scheme为Http和Https时，用FlushedInputStream代替InputStream处理慢网络情况。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SlowNetworkImageDownloader</span> <span class="keyword">implements</span> <span class="title">ImageDownloader</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ImageDownloader wrappedDownloader;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SlowNetworkImageDownloader</span><span class="params">(ImageDownloader wrappedDownloader)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.wrappedDownloader = wrappedDownloader;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> InputStream <span class="title">getStream</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		InputStream imageStream = wrappedDownloader.getStream(imageUri, extra);</div><div class="line">		<span class="keyword">switch</span> (Scheme.ofUri(imageUri)) &#123;</div><div class="line">			<span class="keyword">case</span> HTTP:</div><div class="line">			<span class="keyword">case</span> HTTPS:</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> FlushedInputStream(imageStream);</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				<span class="keyword">return</span> imageStream;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ImageLoaderEngine-java"><a href="#ImageLoaderEngine-java" class="headerlink" title="ImageLoaderEngine.java"></a>ImageLoaderEngine.java</h3><p>LoadAndDisplayImageTask和ProcessAndDisplayImageTask任务分发器，负责分发任务给具体的线程池。</p>
<p>主要属性：</p>
<ul>
<li>ImageLoaderConfiguration configuration</li>
</ul>
<p>ImageLoader的配置信息，可包括图片最大尺寸、线程池、缓存、下载器、解码器等等。</p>
<ul>
<li>Executor taskExecutor</li>
</ul>
<p>用于执行从源执行获取图片任务的Executor，为configuration中的taskExecutor，如果为null，则会调用DefaultConfigurationFactory.createExecutor()根据配置返回一个默认的线程池。</p>
<ul>
<li>Executor taskExecutorForCachedImages</li>
</ul>
<p>用于执行从缓存获取图片任务的Executor，为configuration中的taskExecutorForCachedImages，如果为null，则会调用DefaultConfigurationFactory.createExecutor()根据配置返回一个默认的线程池。</p>
<ul>
<li>Executor taskDistributor</li>
</ul>
<p>任务分发线程池，任务指LoadAndDisplayImageTask和ProcessAndDisplayImageTask，因为需要分发给上面的两个Executor去执行任务，不存在较耗时或阻塞操作，所以无并发数（Int最大值）限制的线程池即可。</p>
<ul>
<li>Map cacheKeysForImageAwares</li>
</ul>
<p>ImageAware与内存缓存key对应的map，key为ImageAware的id，value为内存缓存的key。</p>
<ul>
<li>Map uriLocks</li>
</ul>
<p>图片正在加锁的重入锁map，key为图片的uri，value为标识其正在加载的重入锁。</p>
<ul>
<li>AtomicBoolean pause</li>
</ul>
<p>是否被暂停。如果为true，则所有新的加载或显示任务都会等待直到取消暂停（为false）</p>
<ul>
<li>AtomicBooleannetWorkDenied</li>
</ul>
<p>是否不允许访问网络，如果为true，通过回调ImageLoadingListener.onLoadingFailed()获取图片，则所有不在缓存中需要网络访问的请求都会失败，返回失败的原因为：网络访问被禁止。</p>
<ul>
<li>AtomicBoolean slowNetwork</li>
</ul>
<p>是否是慢网络情况，如果未true，则自动调用SlowNetworkImageDownloader下载图片</p>
<ul>
<li>Object pauseLock</li>
</ul>
<p>暂停的等待锁，可在engine被暂停后调用这个锁等待</p>
<p>主要函数：</p>
<ul>
<li>void submit(final LoadAndDisplayImageTask task)</li>
</ul>
<p>传入一个LoadAndDisplayImageTask，直接用taskDistributor执行一个Runnable，在Runnable内部根据图片是否被磁盘缓存过确定使用taskExecutorForCachedImages还是taskExecutor执行该task。</p>
<ul>
<li>void submit(ProcessAndDisplayImageTask task)</li>
</ul>
<p>传入一个ProcessAndDisplayImageTask，直接用taskExecutorForCachedImages执行该task，从缓存中去图片。</p>
<ul>
<li>void pause()</li>
</ul>
<p>暂停图片加载任务，所有新的加载或显示任务都会等待直到取消暂停为止。</p>
<ul>
<li>void resume()</li>
</ul>
<p>继续图片加载任务</p>
<ul>
<li>stop()</li>
</ul>
<p>暂停所有加载和显示图片任务并清除这里的内部属性值。</p>
<ul>
<li>fireCallBack(Runnable r)</li>
</ul>
<p>taskDistributor立即执行某个任务</p>
<ul>
<li>getLockForUri(String uri)</li>
</ul>
<p>得到某个uri的重入锁，如果不存在则新建一个</p>
<ul>
<li>private Executor createTaskExecutor()</li>
</ul>
<p>调用DefaultConfigurationFactor.createExecutor()创建一个线程池</p>
<ul>
<li>String getLoadingUriForView(ImageAware imageAware)</li>
</ul>
<p>得到某个ImageAware正在加载的图片uri</p>
<ul>
<li>prepareDisplayTaskFor(ImageAware imageAware, String memoryCacheKey)</li>
</ul>
<p>准备开始一个Task。向cacheKeysForImageAwares中插入ImageAware的id和图片在内存缓存中的key</p>
<ul>
<li>void cancelDisplayTaskFor(ImageAware imageAware)</li>
</ul>
<p>取消一个显示任务。从cacheKeysForImageAwares中删除ImageAware对应元素</p>
<ul>
<li>void denyNetworkDownloads(boolean denyNetworkDownloads)</li>
</ul>
<p>设置是否不允许网络访问</p>
<ul>
<li>void handleSlowNetwork(boolean handleSlowNetwork)</li>
</ul>
<p>设置是否慢网络情况</p>
<h3 id="DefaultConfigurationFactory-java"><a href="#DefaultConfigurationFactory-java" class="headerlink" title="DefaultConfigurationFactory.java"></a>DefaultConfigurationFactory.java</h3><p>为ImageLoaderConfiguration及ImageLoaderEngine提供一些默认配置</p>
<p>主要函数：</p>
<ul>
<li>Executor createExecutor(int threadPoolSize, int threadPriority,QueueProcessingType tasksProcessingType)</li>
</ul>
<p>创建线程池：<br>threadPoolSize表示核心线程池大小（最大并发数）<br>threadPriority表示线程优先级<br>tasksProcessingType表示线程队列类型，目前只有FIFO，LIFO两种可选择</p>
<p>内部实现会调用createThreadFactory(…)返回一个支持线程优先级设置，并且以固定规则命名新建的线程的线程工厂类DefaultConfigurationFactory.DefaultThreadFactory。</p>
<ul>
<li>Executor createTaskDistributor()</li>
</ul>
<p>为ImageLoaderEngine中的任务分发器taskDistributor提供线程池，该线程池为normal优先级的无并发大小限制的线程池。</p>
<ul>
<li>FileNameGenerator createFileNameGenerator()</li>
</ul>
<p>返回一个HashCodeFileNameGenerator对象，即以uri HashCode为文件名的文件名生成器。</p>
<ul>
<li>DiskCache createDiskCache(Context context, FileNameGenerator diskCacheFileNameGenerator,long diskCacheSize, int diskCacheFileCount)</li>
</ul>
<p>创建一个 Disk Cache。如果 diskCacheSize 或者 diskCacheFileCount 大于 0，返回一个LruDiskCache，否则返回无大小限制的UnlimitedDiskCache。</p>
<ul>
<li>MemoryCache createMemoryCache(Context context, int memoryCacheSize)</li>
</ul>
<p>创建一个 Memory Cache。返回一个LruMemoryCache，若 memoryCacheSize 为 0，则设置该内存缓存的最大字节数为App最大可用内存的1/8。这里的App的最大可用内存也支持系统在Honeycomb之后（Api Level &gt;= 11)application中android:largeHeap=”true”的设置。</p>
<ul>
<li>ImageDownloader createImageDownloader(Context context)</li>
</ul>
<p>创建图片下载器，返回一个BaseImageDownloader。</p>
<ul>
<li>ImageDecoder createImageDecoder(boolean loggingEnabled)</li>
</ul>
<p>创建图片解码器，返回一个BaseImageDecoder。</p>
<ul>
<li>BitmapDisplayer createBitmapDisplayer()</li>
</ul>
<p>创建图片显示器，返回一个SimpleBitmapDisplayer。</p>
<h3 id="DefaultConfigurationFactory-DefaultThreadFactory"><a href="#DefaultConfigurationFactory-DefaultThreadFactory" class="headerlink" title="DefaultConfigurationFactory.DefaultThreadFactory"></a>DefaultConfigurationFactory.DefaultThreadFactory</h3><p>默认的线程工厂类，为</p>
<p>DefaultConfigurationFactory.createExecutor(…)<br>和<br>DefaultConfigurationFactory.createTaskDistributor(…)<br>提供线程工厂。支持线程优先级设置，并且以固定规则命名新建的线程。</p>
<h3 id="ImageAware"><a href="#ImageAware" class="headerlink" title="ImageAware"></a>ImageAware</h3><p>需要显示图片的对象的接口，可包装View表示某个需要显示图片的View。</p>
<p>主要函数：</p>
<ul>
<li>View getWrappedView()</li>
</ul>
<p>得到被包装的View，图片显示在该View上</p>
<ul>
<li>int getWidth()和int getHeight()</li>
</ul>
<p>得到宽度高度，在计算图片缩放比例时会用到</p>
<ul>
<li>int getId()</li>
</ul>
<p>得到唯一标识id。ImageLoaderEngine中用这个id标识正在加载图片的ImageAware和图片内存缓存key的对应关系，图片请求前会将内存缓存key与新的内存缓存key进行比较，如果不相等，则之前的图片请求会被取消。这样当ImageAware被复用时就不会因异步加载（前面任务未取消）而造成错乱了。</p>
<h3 id="ViewAware-java"><a href="#ViewAware-java" class="headerlink" title="ViewAware.java"></a>ViewAware.java</h3><p>封装Android View来显示图片的抽象类，实现类ImageAware接口，利用Reference来Wrap View防止内存泄露。</p>
<p>主要函数：</p>
<ul>
<li>ViewAware(View view, boolean checkActualViewSize)</li>
</ul>
<p>构造函数：<br>view表示需要显示图片的对象<br>checkActualViewSize表示通过getWidth()和getHeight()获取图片宽高时返回真实的宽和高，还是LayoutParams的宽高，true表示返回真实宽和高。</p>
<p>如果为true会导致一个问题，view在还没有初始化完成时加载图片，这是它的真实宽高为0，会取它LayoutParams的宽高，而图片缓存的key与这个宽高有关，所以当view的初始化完成再次需要加载该图片时，getWidth()和getHeight()返回的宽高都已经变化了，缓存key不一样，从而导致缓存读取失败会再次从网络下载一次图片。可通过ImageLoaderConfiguration.Builder.denyCacheImageMultipleSizesInMemory()设置不允许内存缓存缓存一张图片的多个尺寸。</p>
<ul>
<li>boolean setImageDrawable(Drawable drawable)</li>
</ul>
<p>如果当前操作在主线程并且View没有被回收，则调用抽象函数setImageDrawableInto(Drawable drawable, View view)去向view设置图片。</p>
<ul>
<li>boolean setImageBitmap(Bitmap bitmap)</li>
</ul>
<p>如果当前操作在主线程并且View没有被回收，则调用抽象函数setImageBitmapInto(Bitmap bitmap, View view)去向view设置图片。</p>
<h3 id="ImageViewAware-java"><a href="#ImageViewAware-java" class="headerlink" title="ImageViewAware.java"></a>ImageViewAware.java</h3><p>封装Android ImageView来显示图片的ImageAware，继承了viewAware，利用Reference来Wrap View防止内存泄露。</p>
<p>如果getWidth()函数小于等于0，会利用反射获取mMaxWidth的值作为宽。<br>如果getHeight()函数小于等于0，会利用反射获取mMaxHeight的值作为高。</p>
<h3 id="NonViewAware"><a href="#NonViewAware" class="headerlink" title="NonViewAware"></a>NonViewAware</h3><p>仅包含处理图片相关信息却没有需要显示图片的View的ImageAware，实现了ImageAware接口。常用于加载图片后调用回调接口而不是显示的情况。</p>
<h3 id="DisplayImagesOptions-java"><a href="#DisplayImagesOptions-java" class="headerlink" title="DisplayImagesOptions.java"></a>DisplayImagesOptions.java</h3><p>图片显示的配置项。比如加载前、加载中、加载失败应该显示的占位图片，图片是否需要在磁盘缓存，是否需要在memory缓存等。</p>
<p>主要属性及含义：</p>
<ul>
<li>int imageResOnLoading</li>
</ul>
<p>图片正在加载中的占位图片的resource id，优先级比下面的imageOnLoading高，当存在时，imageOnLoading不起作用。</p>
<ul>
<li>int imageResForEmptyUri</li>
</ul>
<p>空uri时的占位图片的resource id，优先级比下面的imageForEmptyUri高，当存在时，imageForEmptyUri不起作用。</p>
<ul>
<li>int imageResOnFail</li>
</ul>
<p>加载失败时的占位图片的resource id，优先级比下面的imageOnFail高，当存在时，imageOnFail不起作用。</p>
<ul>
<li>Drawable imageOnLoading</li>
</ul>
<p>加载中的占位图片的Drawable对象，默认为null</p>
<ul>
<li>Drawable imageForEmptyUri</li>
</ul>
<p>空uri时的占位图片drawable对象，默认为null</p>
<ul>
<li>boolean resetViewBeforeLoading</li>
</ul>
<p>在加载前是否重置view，通过Builder构建的对象默认为false</p>
<ul>
<li>boolean cacheInMemory</li>
</ul>
<p>是否缓存在内存中，通过Builder构建的对象默认为false。</p>
<ul>
<li>boolean cacheOnDisk</li>
</ul>
<p>是否缓存在磁盘中，通过Builder构建的对象默认为false。</p>
<ul>
<li>ImageScaleType imageScaleType</li>
</ul>
<p>图片的缩放类型，通过Builder构建的对象默认为IN_SAMPLE_POWER_OF_2</p>
<ul>
<li>Options decodingOptions</li>
</ul>
<p>为BitmapFactory.Options，用于BitmapFactory.decodeStream(imageStream, null, decodingOptions)得到图片尺寸等信息。</p>
<ul>
<li>int delayBeforeLoading</li>
</ul>
<p>设置在开始加载前的延迟时间，单位为毫秒，通过Builder构建的对象默认为0。</p>
<ul>
<li>boolean considerExitParams</li>
</ul>
<p>是否考虑图片的EXIF信息，通过Builder构建的对象默认为false。</p>
<ul>
<li>Object extraForDownloader</li>
</ul>
<p>下载器需要的辅助信息。下载时传入ImageDownloader.getStream(String,Object)的对象，方面用户自己扩展，默认为null</p>
<ul>
<li>BitmapProcessor preProcessor;</li>
</ul>
<p>缓存在内存之前的处理程序，默认为null</p>
<ul>
<li>BitmapProcessor postProcessor</li>
</ul>
<p>缓存在内存之后的处理程序，默认为null</p>
<ul>
<li>BitmapDisplayer displayer;</li>
</ul>
<p>图片的显示方式，通过Builder构建的对象默认为SimpleBitmapDisplayer</p>
<ul>
<li>Handler handler;</li>
</ul>
<p>handler对象，默认为null</p>
<ul>
<li>boolean isSyncLoading;</li>
</ul>
<p>是否同步加载，通过Builder构建的对象默认为false。</p>
<h3 id="DisplayImageOptions-Builder-java-静态内部类"><a href="#DisplayImageOptions-Builder-java-静态内部类" class="headerlink" title="DisplayImageOptions.Builder.java 静态内部类"></a>DisplayImageOptions.Builder.java 静态内部类</h3><p>Builder模式，用于构造参数繁多的DisplayImageOptions。</p>
<h3 id="ImageLoadingListener"><a href="#ImageLoadingListener" class="headerlink" title="ImageLoadingListener"></a>ImageLoadingListener</h3><p>图片加载各种时刻的回调接口，可在图片加载的某些点做监听。<br>包括开始加载（onLoadingStarted）、加载失败（onLoadingFailed）、加载成功（onLoadingComplete）、取消加载（onLoadingCancelled）四个回调函数。</p>
<h3 id="SimpleImageLoadingListener"><a href="#SimpleImageLoadingListener" class="headerlink" title="SimpleImageLoadingListener"></a>SimpleImageLoadingListener</h3><p>实现ImageLoadingListener接口，不过各个函数都是空实现，表示不在Image加载过程中做任何回调监听实现。ImageLoader.displayImage()函数中当listener传入值为null时的默认值。</p>
<h3 id="ImageLoadingProgressListener-java"><a href="#ImageLoadingProgressListener-java" class="headerlink" title="ImageLoadingProgressListener.java"></a>ImageLoadingProgressListener.java</h3><p>Image加载进度的回调接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageLoadingProgressListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Is called when image loading progress changed.</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> imageUri Image URI</div><div class="line">	 * <span class="doctag">@param</span> view     View for image. Can be &lt;b&gt;null&lt;/b&gt;.</div><div class="line">	 * <span class="doctag">@param</span> current  Downloaded size in bytes</div><div class="line">	 * <span class="doctag">@param</span> total    Total size in bytes</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(String imageUri, View view, <span class="keyword">int</span> current, <span class="keyword">int</span> total)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>会在获取图片存储到文件系统时被调用，其中total表示图片总大小，为网络请求结果Response Header中content-length字段，如果不存在则为-1。</p>
<h3 id="DisplayBitmapTask-java"><a href="#DisplayBitmapTask-java" class="headerlink" title="DisplayBitmapTask.java"></a>DisplayBitmapTask.java</h3><p>显示图片的Task，实现类Runnable接口，必须在主线程调用。</p>
<p>主要函数：</p>
<ul>
<li>run()</li>
</ul>
<p>首先判断ImageAware是否被GC回收，如果是直接调用取消加载回调接口listener.onLoadingCancelled()；<br>否则判断ImageAware是否被复用，如果是直接调用取消加载回调接口listener.onLoadingCancelled()；<br>否则调用diaplay显示图片，并将ImageAware从正在加载的map中移除。调用加载成功回调接口listener.onLoadingComplete()；</p>
<p>对于ListView或是GridView这里缓存item的View来说，单个Item中如果含有ImageView，在滑动过程中可能因为异步加载及View复用导致图片错乱，这里对ImageAware是否被复用的判断就能很好的解决这个问题。原因类似：<a href="http://www.trinea.cn/android/android-listview-display-error-image-when-scroll/" target="_blank" rel="external"><br>Android ListView滑动过程中图片显示重复错位闪烁问题解决</a></p>
<h3 id="ProcessAndDisplayImageTask-java"><a href="#ProcessAndDisplayImageTask-java" class="headerlink" title="ProcessAndDisplayImageTask.java"></a>ProcessAndDisplayImageTask.java</h3><p>处理并显示图片的Task，实现了Runnable接口。</p>
<p>主要函数：</p>
<ul>
<li>run()</li>
</ul>
<p>主要通过imageLoadingInfo得到BitmapProcessor处理图片，并且处理后的图片和配置新建一个DisplayBitmapTask在ImageAware中显示图片。</p>
<h3 id="LoadAndDisplayImageTask-java"><a href="#LoadAndDisplayImageTask-java" class="headerlink" title="LoadAndDisplayImageTask.java"></a>LoadAndDisplayImageTask.java</h3><p>加载并显示图片的Task，实现了Runnable接口，用于从网络、文件系统或内存获取图片并解析，然后调用DisplayBitmapTask在ImageAware中显示图片。</p>
<p>主要函数：</p>
<ul>
<li>run()</li>
</ul>
<p>获取图片并显示，核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">bmp = configuration.memoryCache.get(memoryCacheKey);</div><div class="line"><span class="keyword">if</span> (bmp == <span class="keyword">null</span> || bmp.isRecycled()) &#123;</div><div class="line">	bmp = tryLoadBitmap();</div><div class="line">	<span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span>; <span class="comment">// listener callback already was fired</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (bmp != <span class="keyword">null</span> &amp;&amp; options.isCacheInMemory()) &#123;</div><div class="line">		L.d(LOG_CACHE_IMAGE_IN_MEMORY, memoryCacheKey);</div><div class="line">		configuration.memoryCache.put(memoryCacheKey, bmp);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (bmp != <span class="keyword">null</span> &amp;&amp; options.shouldPostProcess()) &#123;</div><div class="line">		L.d(LOG_POSTPROCESS_IMAGE, memoryCacheKey);</div><div class="line">		bmp = options.getPostProcessor().process(bmp);</div><div class="line">		<span class="keyword">if</span> (bmp == <span class="keyword">null</span>) &#123;</div><div class="line">			L.e(ERROR_POST_PROCESSOR_NULL, memoryCacheKey);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">DisplayBitmapTask displayBitmapTask = <span class="keyword">new</span> DisplayBitmapTask(bmp, imageLoadingInfo, engine, loadedFrom);</div><div class="line">runTask(displayBitmapTask, syncLoading, handler, engine);</div></pre></td></tr></table></figure>
<p>从上面代码可以看到显示从内存缓存中去读bitmap对象，若bitmap对象不存在，则调用tryLoadBitma()函数获取bitmap对象，获取成功后若在DisplayImageOptions.Builder中设置类cacheInMemory(true),同时将Bitmap对象缓存到内存中。最后新建DisplayBitmapTask对象显示图片。</p>
<p>函数流程图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/uil-load-display-flow-chart.png" alt=""></p>
<ol>
<li>判断图片的内存缓存是否存在，若存在直接执行步骤8；</li>
<li>判断图片的内存缓存是否存在，若存在直接执行步骤5；</li>
<li>从网络上下载图片</li>
<li>将图片缓存在磁盘上</li>
<li>将图片decode成bitmap对象；</li>
<li>根据DisplayImageOptions配置对图片进行预处理；</li>
<li>将Bitmap对象缓存到内存中；</li>
<li>根据DisplayImageOptions配置对图片进行后处理；</li>
<li>执行DisplayBitmapTask将图片显示在相应的控件上；</li>
</ol>
<ul>
<li>tryLoadBitmap()</li>
</ul>
<p>从磁盘缓存或网络获取图片，核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">tryLoadBitmap</span><span class="params">()</span> <span class="keyword">throws</span> TaskCancelledException </span>&#123;</div><div class="line">	Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		File imageFile = configuration.diskCache.get(uri);</div><div class="line">		<span class="keyword">if</span> (imageFile != <span class="keyword">null</span> &amp;&amp; imageFile.exists() &amp;&amp; imageFile.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">			</div><div class="line">			...</div><div class="line">			</div><div class="line">			bitmap = decodeImage(Scheme.FILE.wrap(imageFile.getAbsolutePath()));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (bitmap == <span class="keyword">null</span> || bitmap.getWidth() &lt;= <span class="number">0</span> || bitmap.getHeight() &lt;= <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">			...</div><div class="line"></div><div class="line">			String imageUriForDecoding = uri;</div><div class="line">			<span class="keyword">if</span> (options.isCacheOnDisk() &amp;&amp; tryCacheImageOnDisk()) &#123;</div><div class="line">				imageFile = configuration.diskCache.get(uri);</div><div class="line">				<span class="keyword">if</span> (imageFile != <span class="keyword">null</span>) &#123;</div><div class="line">					imageUriForDecoding = Scheme.FILE.wrap(imageFile.getAbsolutePath());</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			checkTaskNotActual();</div><div class="line">			bitmap = decodeImage(imageUriForDecoding);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> bitmap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先根据uri看磁盘中是不是已经缓存了这个文件，如果已经缓存，调用decodeImage函数，将图片文件decode成Bitmap对象；如果Bitmap对象不合法或缓存文件不存在，判断是否需要缓存在磁盘，需要则调用tryCacheImageOnDisk()函数去下载并缓存图片到本地磁盘，再通过decodeImage(imageUri)函数将图片文件decode成bitmap对象，否则直接通过decodeImage(imageUriForDecoding)下载图片并解析。</p>
<h3 id="tryCacheImageOnDisk"><a href="#tryCacheImageOnDisk" class="headerlink" title="tryCacheImageOnDisk()"></a>tryCacheImageOnDisk()</h3><p>下载图片并存储在磁盘内，根据磁盘缓存图片最长宽高的配置处理图片</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryCacheImageOnDisk</span><span class="params">()</span> <span class="keyword">throws</span> TaskCancelledException </span>&#123;</div><div class="line">	L.d(LOG_CACHE_IMAGE_ON_DISK, memoryCacheKey);</div><div class="line"></div><div class="line">	<span class="keyword">boolean</span> loaded;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		loaded = downloadImage(); <span class="comment">//调用下载器并保存图片</span></div><div class="line">		<span class="keyword">if</span> (loaded) &#123;</div><div class="line">			<span class="keyword">int</span> width = configuration.maxImageWidthForDiskCache;</div><div class="line">			<span class="keyword">int</span> height = configuration.maxImageHeightForDiskCache;</div><div class="line">			<span class="keyword">if</span> (width &gt; <span class="number">0</span> || height &gt; <span class="number">0</span>) &#123;</div><div class="line">				L.d(LOG_RESIZE_CACHED_IMAGE_FILE, memoryCacheKey);</div><div class="line">				resizeAndSaveImage(width, height); <span class="comment">// TODO : process boolean result</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		L.e(e);</div><div class="line">		loaded = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> loaded;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你在ImageLoaderConfiguration中配置了maxImageWidthForDiskCache或者maxImageHeightForDiskCache，还会调用resizeAndSaveImage()函数，调整图片尺寸，并保存新的图片文件。</p>
<h3 id="downloadImage"><a href="#downloadImage" class="headerlink" title="downloadImage()"></a>downloadImage()</h3><p>下载图片并存储在磁盘内。调用getDownloader()得到ImageDownloader其下载图片。</p>
<h3 id="resizeAndSaveImage-int-maxWidth-int-maxHeight"><a href="#resizeAndSaveImage-int-maxWidth-int-maxHeight" class="headerlink" title="resizeAndSaveImage(int maxWidth,int maxHeight)"></a>resizeAndSaveImage(int maxWidth,int maxHeight)</h3><p>从磁盘缓存中得到图片，重新设置大小及进行一些处理后保存。</p>
<h3 id="geDownloader"><a href="#geDownloader" class="headerlink" title="geDownloader()"></a>geDownloader()</h3><p>根据ImageLoaderEngine配置得到下载器。<br>如果不允许访问网络，则使用不允许访问网络的图片下载器NetWorkDeniedImageDownloader；如果是慢网络情况，则使用慢网络情况下的图片下载器SlowNetworkImageDownloader；否则直接使用ImageLoaderConfiguration中的downloader。</p>
<h3 id="ImageLoadingInfo-java"><a href="#ImageLoadingInfo-java" class="headerlink" title="ImageLoadingInfo.java"></a>ImageLoadingInfo.java</h3><p>加载和显示图片任务需要的信息。成员变量如下：</p>
<p>String uri  图片url<br>String memoryCacheKey  图片缓存key<br>ImageAware imageAware  需要加载图片的对象<br>ImageSize targetSize  图片的显示尺寸<br>DisplayImageOptions options; 图片显示的配置项<br>ImageLoadingListener listener; 图片加载时状态的回调接口<br>ImageLoadingProgressListener progressListener; 图片加载进度的回调接口<br>ReentrantLock loadFromUriLock; 图片加载中的重入锁</p>
<h3 id="ImageDownloader-java"><a href="#ImageDownloader-java" class="headerlink" title="ImageDownloader.java"></a>ImageDownloader.java</h3><p>图片下载接口，待实现函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getString(String imageUri, Object extra)</div></pre></td></tr></table></figure>
<p>表示通过uri得到InputStream<br>通过内部定义的枚举Scheme，可以看出UIL支持哪些图片来源。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">HTTP</span>(<span class="string">"http"</span>), <span class="selector-tag">HTTPS</span>(<span class="string">"https"</span>), <span class="selector-tag">FILE</span>(<span class="string">"file"</span>), <span class="selector-tag">CONTENT</span>(<span class="string">"content"</span>), <span class="selector-tag">ASSETS</span>(<span class="string">"assets"</span>), <span class="selector-tag">DRAWABLE</span>(<span class="string">"drawable"</span>), <span class="selector-tag">UNKNOWN</span>(<span class="string">""</span>);</div></pre></td></tr></table></figure>
<h3 id="BaseImageDownloader-java"><a href="#BaseImageDownloader-java" class="headerlink" title="BaseImageDownloader.java"></a>BaseImageDownloader.java</h3><p>ImageDownloader的具体实现类。得到上面各种Scheme对应的图片InputStream。</p>
<p>主要函数：</p>
<ul>
<li>InputStream getStream(String imageUri, Object extra)</li>
</ul>
<p>函数内根据不同Scheme类型获取图片输入流</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getStream</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	<span class="keyword">switch</span> (Scheme.ofUri(imageUri)) &#123;</div><div class="line">		<span class="keyword">case</span> HTTP:</div><div class="line">		<span class="keyword">case</span> HTTPS:</div><div class="line">			<span class="keyword">return</span> getStreamFromNetwork(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> FILE:</div><div class="line">			<span class="keyword">return</span> getStreamFromFile(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> CONTENT:</div><div class="line">			<span class="keyword">return</span> getStreamFromContent(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> ASSETS:</div><div class="line">			<span class="keyword">return</span> getStreamFromAssets(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> DRAWABLE:</div><div class="line">			<span class="keyword">return</span> getStreamFromDrawable(imageUri, extra);</div><div class="line">		<span class="keyword">case</span> UNKNOWN:</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">return</span> getStreamFromOtherSource(imageUri, extra);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>InputStream getStreamFromNetwork(String imageUri, Object extra)</li>
</ul>
<p>通过HttpURLConnection从网络获取图片的InputStream，支持response code为3xx的重定向。这里有个小细节代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">InputStream imageStream;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	imageStream = conn.getInputStream();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">	<span class="comment">// Read all data to allow reuse connection (http://bit.ly/1ad35PY)</span></div><div class="line">	IoUtils.readAndCloseStream(conn.getErrorStream());</div><div class="line">	<span class="keyword">throw</span> e;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!shouldBeProcessed(conn)) &#123;</div><div class="line">	IoUtils.closeSilently(imageStream);</div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Image request failed with response code "</span> + conn.getResponseCode());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在发生异常时会调用<code>conn.getErrorStream()</code>继续读取Error Stream，这是为了利用网络连接回收及复用，但有意思的是在2.2之前，HttpURLConnection有个重大Bug，调用close()函数会影响连接池，导致连接复用失效，不过2.3以后已经解决了此went。</p>
<ul>
<li>InputStream getStreamFromFile(String imageUri, Object extra)</li>
</ul>
<p>从文件系统获取图片的InputStream。如果uri的类型是Video，则得到video的缩略图返回，否则按照一般文件操作返回。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> InputStream <span class="title">getStreamFromFile</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	String filePath = Scheme.FILE.crop(imageUri);</div><div class="line">	<span class="keyword">if</span> (isVideoFileUri(imageUri)) &#123;</div><div class="line">		<span class="keyword">return</span> getVideoThumbnailStream(filePath); <span class="comment">//缩略图</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		BufferedInputStream imageStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(filePath), BUFFER_SIZE);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ContentLengthInputStream(imageStream, (<span class="keyword">int</span>) <span class="keyword">new</span> File(filePath).length());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>InputStream getStreamFromContent(String imageUri, Object extra)</li>
</ul>
<p>从ContentProvider获取图片的InputStream。<br>如果是video类型，则先从MediaStore得到video的缩略图返回；<br>如果是联系人类型，则通过<code>ContactsContract.Contacts.openContactPhotoInputStream(res, uri, true)</code>读取内容返回；<br>否则通过<code>ContentResolver..openInputStream(uri)</code>读取内容返回</p>
<ul>
<li>InputStream getStreamFromAssets(String imageUri, Object extra)</li>
</ul>
<p>从Assets文件夹中获取图片的InputStream</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> InputStream <span class="title">getStreamFromAssets</span><span class="params">(String imageUri, Object extra)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	String filePath = Scheme.ASSETS.crop(imageUri);</div><div class="line">	<span class="keyword">return</span> context.getAssets().open(filePath);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>InputStream getStreamFromDrawable(String imageUri, Object extra)</li>
</ul>
<p>从Drawable资源中获取图片的InputStream。</p>
<ul>
<li>InputStream getStreamFromOtherSource(String imageUri, Object extra)</li>
</ul>
<p>UNKNOWN类型的处理，目前直接抛出不支持的异常</p>
<h3 id="MemoryCache-java"><a href="#MemoryCache-java" class="headerlink" title="MemoryCache.java"></a>MemoryCache.java</h3><p>Bitmap内存缓存接口，需要实现的接口包括get()、put()、remove()、clear()、keys()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemoryCache</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Puts value into cache by key</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">put</span><span class="params">(String key, Bitmap value)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Returns value by key. If there is no value for key then null will be returned. */</span></div><div class="line">	<span class="function">Bitmap <span class="title">get</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Removes item by key */</span></div><div class="line">	<span class="function">Bitmap <span class="title">remove</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Returns all keys of cache */</span></div><div class="line">	<span class="function">Collection&lt;String&gt; <span class="title">keys</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Remove all items from cache */</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BaseMemoryCache-java"><a href="#BaseMemoryCache-java" class="headerlink" title="BaseMemoryCache.java"></a>BaseMemoryCache.java</h3><p>实现了MemoryCache主要函数的抽象类，以<code>Map&lt;String, Reference&lt;Bitmap&gt;&gt; softMap</code>作为缓存池，利于虚拟机在内存不足是回收缓存对象。提供抽象函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Reference&lt;Bitmap&gt; <span class="title">createReference</span><span class="params">(Bitmap value)</span></span>;</div></pre></td></tr></table></figure>
<p>表示根据Bitmap创建一个Reference作为缓存对象。Reference可以是WeakReference、SoftReference等。</p>
<h3 id="WeakMemoryCache-java"><a href="#WeakMemoryCache-java" class="headerlink" title="WeakMemoryCache.java"></a>WeakMemoryCache.java</h3><p>以<code>WeakReference&lt;Bitmap&gt;</code>作为缓存value的内存缓存，实现了BaseMemoryCache的<code>createReference(Bitmap value)</code>函数，直接返回一个<code>new WeakReference&lt;Bitmap&gt;(value)</code>作为缓存value。</p>
<h3 id="LimitedMemoryCache-java"><a href="#LimitedMemoryCache-java" class="headerlink" title="LimitedMemoryCache.java"></a>LimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，继承自BaseMemoryCache抽象类。<br>会在put(…)函数中判断总体大小是否超出上限，超出则循环删除缓存对象直到小于上限。删除顺序由抽象函数<code>protected abstract Bitmap removeNext()</code>决定。抽象函数<code>protected abstract int getSize(Bitmap value)</code>表示每个元素大小。</p>
<h3 id="LargestLimitedMemoryCache-java"><a href="#LargestLimitedMemoryCache-java" class="headerlink" title="LargestLimitedMemoryCache.java"></a>LargestLimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满时优先删除size最大的元素，继承自LimitedMemoryCache。实现了LimitedMemoryCache的removeNext()函数，总是返回当前缓存中size最大的元素。</p>
<h3 id="UsingFreqLimitedMemoryCache-java"><a href="#UsingFreqLimitedMemoryCache-java" class="headerlink" title="UsingFreqLimitedMemoryCache.java"></a>UsingFreqLimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满时优先删除使用次数最少的元素，继承自LimitedMemoryCache。实现了LimitedMemoryCache的removeNext()函数，总是返回当前缓存中使用次数最少的元素。</p>
<h3 id="LRULimitedMemoryCache-java"><a href="#LRULimitedMemoryCache-java" class="headerlink" title="LRULimitedMemoryCache.java"></a>LRULimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满时优先删除最近最少使用的元素，继承自LimitedMemoryCache。通过<code>new LinkedHashMap&lt;String, Bitmap&gt;(10, 1.1f, true)</code>作为缓存池。LinkedHashMap第三个参数表示是否需要根据访问顺序(accessOrder)排序，true表示根据accessOrder排序，最近访问的跟最新加入的一样放到最后面，false表示根据插入顺序排序。这里为true且缓存满时始终删除第一个元素，即始终删除最近最少访问的元素。实现了LimitedMemoryCache的removeNext()函数，总是返回当前缓存中最近最少使用的元素。</p>
<h3 id="FIFOLimitedMemoryCache-java"><a href="#FIFOLimitedMemoryCache-java" class="headerlink" title="FIFOLimitedMemoryCache.java"></a>FIFOLimitedMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满的时优先删除进入缓存的元素，继承自LimitedMemoryCache。实现了LimitedMemoryCache的removeNext()函数，总是返回当前缓存中最先进入缓存的元素。</p>
<blockquote>
<p><strong>以上所有LimitedMemoryCache子类都有个问题，就是Bitmap虽然通过WeakReference<bitmap>包装，但实际根本不会被虚拟机回收，因为他们子类中同时都保留了Bitmap的强引用。这些大都是UIL早期实现的版本，不推荐使用</bitmap></strong></p>
</blockquote>
<h3 id="LruMemoryCache-java"><a href="#LruMemoryCache-java" class="headerlink" title="LruMemoryCache.java"></a>LruMemoryCache.java</h3><p>限制总字节大小的内存缓存，会在缓存满时优先删除最近最少使用的元素，实现了MemoryCache。LRU(Least Recently Used)为最少使用算法。</p>
<p>通过<code>new LinkedHashMap&lt;String, Bitmap&gt;(0, 0.75f, true)</code>作为缓存池。LinkedHashMap第三个参数表示是否需要根据访问顺序(accessOrder)排序，true表示根据accessOrder排序，最近访问的跟最新加入的一样放到最后面，false表示根据插入顺序排序。这里为true且缓存满时始终删除第一个元素，即始终删除最近最少访问的元素。</p>
<p>在put(..)函数中通过trimToSize(int maxtSize)函数判断总体大小是否超出了上限，是则删除缓存池中第一个元素，即最近最少使用的元素，指导总体大小小于上限。</p>
<p>LruMemory功能上谕LRULimitedMemoryCache类似，不过在实现上更加优雅，用简单的实现接口方式，而不是不断继承的方式。</p>
<h3 id="LimitedAgeMemoryCache-java"><a href="#LimitedAgeMemoryCache-java" class="headerlink" title="LimitedAgeMemoryCache.java"></a>LimitedAgeMemoryCache.java</h3><p>限制类对象最长存活周期的内存缓存。<br>MemoryCache的装饰者，相当于为MemoryCache添加一个特性，以一个MemoryCache内存缓存和一个maxAge作为构造函数参数。在get()中判断如果对象存活时间已经超过设置的最长时间，则删除。</p>
<h3 id="FuzzyKeyMemoryCache-java"><a href="#FuzzyKeyMemoryCache-java" class="headerlink" title="FuzzyKeyMemoryCache.java"></a>FuzzyKeyMemoryCache.java</h3><p>可以将某些原本不同的key看做相等，在put时删除这些相等的key。<br>MemoryCache的装饰者，相当于为MemoryCache添加一个特性，以一个MemoryCache内存缓存和一个 keyComparator作为构造函数参数。在put()函数中判断如果key与缓存中已有key经过Comparator比较后相等，则删除之前的元素。</p>
<h3 id="FileNameGenerator-java"><a href="#FileNameGenerator-java" class="headerlink" title="FileNameGenerator.java"></a>FileNameGenerator.java</h3><p>根据uri得到文件名的接口</p>
<h3 id="HashCodeFileNameGenerator-java"><a href="#HashCodeFileNameGenerator-java" class="headerlink" title="HashCodeFileNameGenerator.java"></a>HashCodeFileNameGenerator.java</h3><p>以uri的hashCode值作为文件名</p>
<h3 id="Md5FileNameGenerator-java"><a href="#Md5FileNameGenerator-java" class="headerlink" title="Md5FileNameGenerator.java"></a>Md5FileNameGenerator.java</h3><p>以uri的MD5值作为文件名</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5FileNameGenerator</span> <span class="keyword">implements</span> <span class="title">FileNameGenerator</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HASH_ALGORITHM = <span class="string">"MD5"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RADIX = <span class="number">10</span> + <span class="number">26</span>; <span class="comment">// 10 digits + 26 letters</span></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">generate</span><span class="params">(String imageUri)</span> </span>&#123;</div><div class="line">		<span class="keyword">byte</span>[] md5 = getMD5(imageUri.getBytes());</div><div class="line">		BigInteger bi = <span class="keyword">new</span> BigInteger(md5).abs();</div><div class="line">		<span class="keyword">return</span> bi.toString(RADIX);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">byte</span>[] getMD5(<span class="keyword">byte</span>[] data) &#123;</div><div class="line">		<span class="keyword">byte</span>[] hash = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);</div><div class="line">			digest.update(data);</div><div class="line">			hash = digest.digest();</div><div class="line">		&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">			L.e(e);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> hash;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DiskCache-java"><a href="#DiskCache-java" class="headerlink" title="DiskCache.java"></a>DiskCache.java</h3><p>图片的磁盘缓存接口。</p>
<p>主要函数：</p>
<ul>
<li>File getDirectory()</li>
</ul>
<p>得到磁盘缓存的根目录</p>
<ul>
<li>File get(String imageUri)</li>
</ul>
<p>根据原始图片uri去获取缓存图片的文件</p>
<ul>
<li>boolean save(String imageUri, InputStream imageStream, IoUtils.CopyListener listener)</li>
</ul>
<p>保存imageStream到磁盘中，listener表示保存进度且可在其中取消某些段的保存。</p>
<ul>
<li>boolean save(String imageUri, Bitmap bitmap)</li>
</ul>
<p>保存图片到磁盘</p>
<ul>
<li>boolean remove(String imageUri)</li>
</ul>
<p>根据图片uri删除缓存图片</p>
<ul>
<li>void close()</li>
</ul>
<p>关闭磁盘缓存，并释放资源</p>
<ul>
<li>void clear()</li>
</ul>
<p>清空磁盘缓存</p>
<h3 id="BaseDiskCache-java"><a href="#BaseDiskCache-java" class="headerlink" title="BaseDiskCache.java"></a>BaseDiskCache.java</h3><p>一个无大小限制的本地图片缓存，实现了DiskCache主要函数的抽象类。<br>图片缓存在cacheDir文件夹内，当cacheDir不可用时，则使用备用库reserveCacheDir。</p>
<p>主要函数：</p>
<ul>
<li>boolean save(String imageUri, InputStream imageStream, IoUtils.CopyListener listener)</li>
</ul>
<p>先根据imageUri得到目标文件，将imageStream先写入与目标文件同一文件夹的.tmp结尾的临时文件内，若未被listener取消且写入成功则将临时文件重命名为目标文件并返回true，否则删除临时文件并返回false。</p>
<ul>
<li>boolean save(String imageUri, Bitmap bitmap)</li>
</ul>
<p>先根据imageUri得到目标文件，通过Bitmap.compress(..)函数将bitmap先写入与目标文件同一文件夹的.tmp结尾的临时文件内，若写入成功则将临时文件名重命名为目标文件并返回true，否则删除临时文件并返回false。</p>
<ul>
<li>File getFile(String imageUri)</li>
</ul>
<p>根据imageUri和fileNameGenerator得到文件名，返回cacheDir文件夹内该文件，若cacheDir不可用，则使用备用库reserveCacheDir。</p>
<h3 id="LimitedAgeDiskCache-java"><a href="#LimitedAgeDiskCache-java" class="headerlink" title="LimitedAgeDiskCache.java"></a>LimitedAgeDiskCache.java</h3><p>限制缓存对象最长存活周期的磁盘缓存，继承自BaseDiskCache。<br>在get()函数判断如果缓存对象存活时间已经超过设置的最长时间，则删除。在save()中保存当前时间作为对象的创建时间。</p>
<h3 id="UnLimitedDiskCache-java"><a href="#UnLimitedDiskCache-java" class="headerlink" title="UnLimitedDiskCache.java"></a>UnLimitedDiskCache.java</h3><p>一个无大小限制的本地图片缓存。与BaseDiskCache无异，只是用了个意思明确的类名。</p>
<h3 id="DiskLruCache-java"><a href="#DiskLruCache-java" class="headerlink" title="DiskLruCache.java"></a>DiskLruCache.java</h3><p>限制总字节大小的磁盘缓存，会在缓存满时优先删除最近最少使用的元素。</p>
<p>通过缓存目录下名为journal的文件记录缓存的所有操作，并在缓存open时读取journal的文件内容存储到<code>LinkedHashMap&lt;String, Bitmap&gt; lruEntries</code>，后面<code>get(String key)</code>获取缓存内容时，会先从lruEntries中得到图片文件名返回文件。</p>
<p>通过<code>new LinkedHashMap&lt;String, Entry&gt;(0, 0.75f, true)</code>作为缓存池。LinkedHashMap第三个参数表示是否需要根据访问顺序(accessOrder)排序，true表示根据accessOrder排序，最近访问的跟最新加入的一样放到最后面，false表示根据插入顺序排序。这里为true且缓存满时trimToSize()函数始终删除第一个元素，即始终删除最近最少访问的元素。</p>
<h3 id="LruDiskCache-java"><a href="#LruDiskCache-java" class="headerlink" title="LruDiskCache.java"></a>LruDiskCache.java</h3><p>限制总字节大小的本地缓存，会在缓存满时优先删除最近最少使用的元素，实现了DiskCache。内部有个DiskLruCache cache、属性，缓存的存、取操作基本都是由该属性代理完成。</p>
<h3 id="StrictLineReader-java"><a href="#StrictLineReader-java" class="headerlink" title="StrictLineReader.java"></a>StrictLineReader.java</h3><p>通过readLine()函数从InputStream中读取一行，目前仅用于磁盘缓存操作记录文件journal的解析。</p>
<h3 id="Util-java"><a href="#Util-java" class="headerlink" title="Util.java"></a>Util.java</h3><p>工具类：</p>
<p>String readFully(Reader reader)读取 reader 中内容。<br>deleteContents(File dir)递归删除文件夹内容。</p>
<h3 id="ContentLengthInputStream-java"><a href="#ContentLengthInputStream-java" class="headerlink" title="ContentLengthInputStream.java"></a>ContentLengthInputStream.java</h3><p>InputStream的装饰者，可通过available()函数得到 InputStream 对应数据源的长度(总字节数)。主要用于计算文件存储进度即图片下载进度时的总进度。</p>
<h3 id="FailReason-java"><a href="#FailReason-java" class="headerlink" title="FailReason.java"></a>FailReason.java</h3><p>图片下载及显示时的错误原因，目前包括：<br>IO_ERROR 网络连接或是磁盘存储错误。<br>DECODING_ERROR decode image 为 Bitmap 时错误。<br>NETWORK_DENIED 当图片不在缓存中，且设置不允许访问网络时的错误。<br>OUT_OF_MEMORY 内存溢出错误。<br>UNKNOWN 未知错误。</p>
<h3 id="FlushedInputStream-java"><a href="#FlushedInputStream-java" class="headerlink" title="FlushedInputStream.java"></a>FlushedInputStream.java</h3><p>为了解决早期 Android 版本BitmapFactory.decodeStream(…)在慢网络情况下 decode image 异常的 Bug。<br>主要通过重写FilterInputStream的 skip(long n) 函数解决，确保 skip(long n) 始终跳过了 n 个字节。如果返回结果即跳过的字节数小于 n，则不断循环直到 skip(long n) 跳过 n 字节或到达文件尾。</p>
<h3 id="ImageScaleType-java"><a href="#ImageScaleType-java" class="headerlink" title="ImageScaleType.java"></a>ImageScaleType.java</h3><p>Image 的缩放类型，目前包括：<br>NONE不缩放。<br>NONE_SAFE根据需要以整数倍缩小图片，使得其尺寸不超过 Texture 可接受最大尺寸。<br>IN_SAMPLE_POWER_OF_2根据需要以 2 的 n 次幂缩小图片，使其尺寸不超过目标大小，比较快的缩小方式。<br>IN_SAMPLE_INT根据需要以整数倍缩小图片，使其尺寸不超过目标大小。<br>EXACTLY根据需要缩小图片到宽或高有一个与目标尺寸一致。<br>EXACTLY_STRETCHED根据需要缩放图片到宽或高有一个与目标尺寸一致。</p>
<h3 id="ViewScaleType-java"><a href="#ViewScaleType-java" class="headerlink" title="ViewScaleType.java"></a>ViewScaleType.java</h3><p>ImageAware的 ScaleType。<br>将 ImageView 的 ScaleType 简化为两种FIT_INSIDE和CROP两种。FIT_INSIDE表示将图片缩放到至少宽度和高度有一个小于等于 View 的对应尺寸，CROP表示将图片缩放到宽度和高度都大于等于 View 的对应尺寸。</p>
<h3 id="ImageSize-java"><a href="#ImageSize-java" class="headerlink" title="ImageSize.java"></a>ImageSize.java</h3><p>表示图片宽高的类。<br>scaleDown(…) 等比缩小宽高。<br>scale(…) 等比放大宽高。</p>
<h3 id="LoadedFrom-java"><a href="#LoadedFrom-java" class="headerlink" title="LoadedFrom.java"></a>LoadedFrom.java</h3><p>图片来源枚举类，包括网络、磁盘缓存、内存缓存。</p>
<h3 id="ImageDecoder-java"><a href="#ImageDecoder-java" class="headerlink" title="ImageDecoder.java"></a>ImageDecoder.java</h3><p>将图片转换为 Bitmap 的接口，抽象函数：<br>Bitmap decode(ImageDecodingInfo imageDecodingInfo) throws IOException;<br>表示根据ImageDecodingInfo信息得到图片并根据参数将其转换为 Bitmap。</p>
<h3 id="BaseImageDecoder-java"><a href="#BaseImageDecoder-java" class="headerlink" title="BaseImageDecoder.java"></a>BaseImageDecoder.java</h3><p>实现类ImageDecoder。调用ImageDownloader获取图片，然后根据ImageDecodingInfo或图片Exif信息处理图片转换为Bitmap。</p>
<p>主要函数：</p>
<ul>
<li>decode(ImageDecodingInfo decodingInfo)</li>
</ul>
<p>调用ImageDownloader获取图片，再调用defineImageSizeAndRotation()函数得到图片的相关信息，调用preparedDecodingOptions()得到图片缩放的比例，调用BitmapFactory.decodeStream()将InputStream转换为Bitmap，最后调用considerExactScaleAndOrientatiton()根据参数将图片放大、翻转、旋转为合适的样子返回。</p>
<ul>
<li>ImageFileInfo defineImageSizeAndRotation(InputStream imageStream, ImageDecodingInfo decodingInfo)</li>
</ul>
<p>得到图片真实大小以及Exif信息（设置考虑Exif的条件下）</p>
<ul>
<li>ExifInfo defineExifOrientation(String imageUri)</li>
</ul>
<p>得到图片Exif信息中的翻转以及旋转角度信息。</p>
<ul>
<li>Options prepareDecodingOptions(ImageSize imageSize, ImageDecodingInfo decodingInfo)</li>
</ul>
<p>得到图片缩放的比例：</p>
<ol>
<li>如果scaleType等于ImageScaleType.NONE，则缩放比例为1；</li>
<li>如果scaleType等于ImageScaleType.NONE_SAFE，则缩放比例为ImageSizeUtils.computeImageSampleSize.computeMinImageSampleSize()的返回值。</li>
<li>否则，调用ImageSizeUtils.computeImageSampleSize()计算返回值。</li>
</ol>
<p>在computeImageSampleSize()中</p>
<ol>
<li><p>如果viewScaleType等于FIT_INSIDE：<br> 1.1 如果scaleType等于ImageScaleType.IN_SAMPLE_POWER_OF_2，则缩放比例从1开始不断*2直到宽或高小于最大尺寸。<br> 1.2 否则，取宽和高分别与最大尺寸比例中较大值，即Math.max(srcWidth / targetWidth, srcHeight / targetHeight)。</p>
</li>
<li><p>如果viewScaleType等于CROP；<br> 2.1 如果scaleType等于ImageScaleType.IN_SAMPLE_POWER_OF_2，则缩放比例从1开始不断*2直到宽或高小于最大尺寸。<br> 2.2 否则，取宽和高分别与最大尺寸比例中较小值，即Math.min(srcWidth / targetWidth, srcHeight / targetHeight)</p>
</li>
<li><p>最后，在considerMaxTextureSize()中判断宽和高是否超过最大值，如果是则*2或是+1缩放。</p>
</li>
</ol>
<ul>
<li>Bitmap considerExactScaleAndOrientatiton(Bitmap subsampledBitmap, ImageDecodingInfo decodingInfo,int rotation, boolean flipHorizontal)</li>
</ul>
<p>根据参数将图片放大、翻转、旋转为合适的样子返回。</p>
<h3 id="ImageDownloadingInfo-java"><a href="#ImageDownloadingInfo-java" class="headerlink" title="ImageDownloadingInfo.java"></a>ImageDownloadingInfo.java</h3><p>Image Decode 需要的信息。<br>String imageKey 图片。<br>String imageUri 图片 uri，可能是缓存文件的 uri。<br>String originalImageUri 图片原 uri。<br>ImageSize targetSize 图片的显示尺寸。<br>imageScaleType 图片的 ScaleType。<br>ImageDownloader downloader 图片的下载器。<br>Object extraForDownloader 下载器需要的辅助信息。<br>boolean considerExifParams 是否需要考虑图片 Exif 信息。<br>Options decodingOptions 图片的解码信息，为 BitmapFactory.Options。</p>
<h3 id="BitmapDisplayer-java"><a href="#BitmapDisplayer-java" class="headerlink" title="BitmapDisplayer.java"></a>BitmapDisplayer.java</h3><p>在ImageAware中显示 bitmap 对象的接口。可在实现中对 bitmap 做一些额外处理，比如加圆角、动画效果。</p>
<h3 id="FadeInBitmapDisplayer-java"><a href="#FadeInBitmapDisplayer-java" class="headerlink" title="FadeInBitmapDisplayer.java"></a>FadeInBitmapDisplayer.java</h3><p>图片淡入方式显示在ImageAware中，实现了BitmapDisplayer接口。</p>
<h3 id="RoundedBitmapDisplayer-java"><a href="#RoundedBitmapDisplayer-java" class="headerlink" title="RoundedBitmapDisplayer.java"></a>RoundedBitmapDisplayer.java</h3><p>为图片添加圆角显示在ImageAware中，实现了BitmapDisplayer接口。主要通过BitmapShader实现。</p>
<h3 id="RoundedVignetteBitmapDisplayer-java"><a href="#RoundedVignetteBitmapDisplayer-java" class="headerlink" title="RoundedVignetteBitmapDisplayer.java"></a>RoundedVignetteBitmapDisplayer.java</h3><p>为图片添加渐变效果的圆角显示在ImageAware中，实现了BitmapDisplayer接口。主要通过RadialGradient实现。</p>
<h3 id="SimpleBitmapDisplayer-java"><a href="#SimpleBitmapDisplayer-java" class="headerlink" title="SimpleBitmapDisplayer.java"></a>SimpleBitmapDisplayer.java</h3><p>直接将图片显示在ImageAware中，实现了BitmapDisplayer接口。</p>
<h3 id="BitmapProcessor-java"><a href="#BitmapProcessor-java" class="headerlink" title="BitmapProcessor.java"></a>BitmapProcessor.java</h3><p>图片处理接口。可用于对图片预处理(Pre-process Bitmap）和后处理(Post-process Bitmap)。抽象函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BitmapProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function">Bitmap <span class="title">process</span><span class="params">(Bitmap bitmap)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户可以根据自己的需要去实现它。比如你想要为你的图片添加一个水印，那么可以自己去实现BitmapProcessor接口。在DisplayImageOptions中配置Pre-process阶段预处理图片，这样设置后存储在文件系统以及内存缓存中的图片都是加了水印的。如果只希望在显示时改变不动原图片，可以在BitmapDisplayer中处理。</p>
<h3 id="PauseOnScrollListener-java"><a href="#PauseOnScrollListener-java" class="headerlink" title="PauseOnScrollListener.java"></a>PauseOnScrollListener.java</h3><p>可以在View滚动过程中暂停图片加载的Listener，实现了OnScrollListener接口。<br>它的好处是防止滚动中不必要的图片加载，在ListView或GridView中item加载图片最好使用它，简单的一行代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gridView.setOnScrollListener(<span class="keyword">new</span> PauseOnScrollListener(ImageLoader.getInstance(), <span class="keyword">false</span>, <span class="keyword">true</span>));</div></pre></td></tr></table></figure>
<p>主要成员变量：</p>
<p>pauseOnScroll; 触摸(手指依然在屏幕上)滑动过程中是否暂停图片加载<br>pauseOnFling;  甩指(手指已离开屏幕)过程中是否暂停图片加载<br>externalListener; 自定义的OnScrollListener接口，适用于View原来就有自定义OnScrollListener情况设置</p>
<p>实现原理：重写onScrollStateChanged(…)函数判断不同的状态下暂停或继续图片加载。</p>
<p>OnScrollListener.SCROLL_STATE_IDLE表示 View 处于空闲状态，没有在滚动，这时候会加载图片。</p>
<p>OnScrollListener.SCROLL_STATE_TOUCH_SCROLL表示 View 处于触摸滑动状态，手指依然在屏幕上，通过pauseOnScroll变量确定是否需要暂停图片加载。这种时候大都属于慢速滚动浏览状态，所以建议继续图片加载。</p>
<p>OnScrollListener.SCROLL_STATE_FLING表示 View 处于甩指滚动状态，手指已离开屏幕，通过pauseOnFling变量确定是否需要暂停图片加载。这种时候大都属于快速滚动状态，所以建议暂停图片加载以节省资源。</p>
<h3 id="QueueProcessingType-java"><a href="#QueueProcessingType-java" class="headerlink" title="QueueProcessingType.java"></a>QueueProcessingType.java</h3><p>任务队列的处理类型，包括FIFO先进先出、LIFO后进先出。</p>
<h3 id="LIFOLinkedBlockingDeque-java"><a href="#LIFOLinkedBlockingDeque-java" class="headerlink" title="LIFOLinkedBlockingDeque.java"></a>LIFOLinkedBlockingDeque.java</h3><p>后进先出阻塞队列。重写LinkedBlockingDeque的offer()函数如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T e)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.offerFirst(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让LinkedBlockingDeque插入总在最前，而remove()本身始终删除第一个元素，所以就变为了后进先出阻塞队列。实际一般情况只重写offer(…)函数是不够的，但因为ThreadPoolExecutor默认只用到了BlockingQueue的offer(…)函数，所以这种简单重写后做为ThreadPoolExecutor的任务队列没问题。</p>
<p>LIFOLinkedBlockingDeque.java包下的LinkedBlockingDeque.java、BlockingDeque.java、Deque.java都是 Java 1.6 源码中的，这里不做分析。</p>
<h3 id="DiskCacheUtils-java"><a href="#DiskCacheUtils-java" class="headerlink" title="DiskCacheUtils.java"></a>DiskCacheUtils.java</h3><p>磁盘缓存工具类，可用于查找或删除某个 uri 对应的磁盘缓存。</p>
<h3 id="MemoryCacheUtils-java"><a href="#MemoryCacheUtils-java" class="headerlink" title="MemoryCacheUtils.java"></a>MemoryCacheUtils.java</h3><p>内存缓存工具类。可用于根据 uri 生成内存缓存 key，缓存 key 比较，根据 uri 得到所有相关的 key 或图片，删除某个 uri 的内存缓存。<br>generateKey(String imageUri, ImageSize targetSize)<br>根据 uri 生成内存缓存 key，key 规则为[imageUri]_[width]x[height]。</p>
<h3 id="StorageUtils-java"><a href="#StorageUtils-java" class="headerlink" title="StorageUtils.java"></a>StorageUtils.java</h3><p>得到图片 SD 卡缓存目录路径。<br>缓存目录优先选择/Android/data/[app_package_name]/cache；若无权限或不可用，则选择 App 在文件系统的缓存目录context.getCacheDir()；若无权限或不可用，则选择/data/data/[app_package_name]/cache。<br>如果缓存目录选择了/Android/data/[app_package_name]/cache，则新建.nomedia文件表示不允许类似 Galley 这些应用显示此文件夹下图片。不过在 4.0 系统有 Bug 这种方式不生效。</p>
<h3 id="ImageSizeUtils-java"><a href="#ImageSizeUtils-java" class="headerlink" title="ImageSizeUtils.java"></a>ImageSizeUtils.java</h3><p>用于计算图片尺寸、缩放比例相关的工具类。</p>
<h3 id="IoUtils-java"><a href="#IoUtils-java" class="headerlink" title="IoUtils.java"></a>IoUtils.java</h3><p>IO 相关工具类，包括 stream 拷贝，关闭等。</p>
<h3 id="L-java"><a href="#L-java" class="headerlink" title="L.java"></a>L.java</h3><p>Log 工具类。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>UIL的内存缓存默认使用了LRU算法，即近期最少使用算法，选用了基于链表结构的LinkedHashMap作为存储结构。</p>
<p>假设情景：内存缓存设置的阈值只够存储两个bitmap对象，当put第三个bitmap对象时，将近期最少使用的bitmap对象移除。</p>
<ol>
<li>初始化LinkedHashMap，并按使用顺序来排序，accessOrder = true</li>
<li>向缓存池中放入bitmap1和bitmap2两个对象</li>
<li>继续放入第三个bitmap3，根据假设情景，将会超过设定缓存池阈值</li>
<li>释放对bitmap1对象的引用</li>
<li>bitmap1对象被GC回收</li>
</ol>
<p>UIL的磁盘缓存默认使用了UnlimitedDiskCache</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android官方数据绑定框架DataBinding]]></title>
      <url>http://liuguoquan727.github.io/2016/04/17/Android_DataBinding%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>转载自<a href="http://blog.csdn.net/jdsjlzx/article/details/48133293" target="_blank" rel="external">一叶飘舟</a></p>
<p>Android新推出了一个官方的数据绑定框架Data Binding Library，既然是官方推出的新玩意，我们就有必要了解一下Android新带来的数据绑定框架，等到该框架推出正式版的时候，我们就可以快速地运用到项目中去。数据绑定框架给我们带来了很大的方便性，以前我们可能需要在Activity里写很多的findViewById，烦人的代码也增加了我们代码的耦合性，现在我们马上就可以抛弃那些findViewById。说到这里，有人可能会问：我使用的一些注解框架也可以不用findViewById啊，是的，但是注解的缺点是拖累代码的效率，Data Binding则不会，Android官方文档说还会提高解析XML的速度，最主要的是Data Binding并不是单单减少我们的findViewById，更多的好处我们接下来一起探寻。</p>
<p>##1.环境</p>
<p>使用最新的Android Studio 1.5.1正式版，并更新你的Suport Repository到最新的版本，确保Android Studio的Gradle插件不低于1.5.0</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.5.0'</span></div></pre></td></tr></table></figure>
<p>然后修改对应模块（Module）的build.gradle，添加如下脚本代码：</p>
<pre><code>android {

    //添加DataBinding Library
    dataBinding {
    enabled true
    }
}
</code></pre><p>最后，点击Sync同步一下Gradle即可完成环境配置</p>
<p>##2.Data Binding示例</p>
<p>首先，我们需要新建一个Java Bean，一个简单的学生类。</p>
<pre><code><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.example.jimi098.databinding;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jimi098 on 2016/2/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Student &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> addr;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Student() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Student(<span class="keyword">String</span> name,<span class="keyword">String</span> addr) &#123;</div><div class="line">        <span class="keyword">this</span>.addr = addr;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getName() &#123;</div><div class="line">        <span class="built_in">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setName(<span class="keyword">String</span> name) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getAddr() &#123;</div><div class="line">        <span class="built_in">return</span> addr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setAddr(<span class="keyword">String</span> addr) &#123;</div><div class="line">        <span class="keyword">this</span>.addr = addr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>其次，编写布局文件data_binding.xml:</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>	            </div><div class="line">			<span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  //也可以是android:text="@</span><span class="template-variable">&#123;stu.getName()&#125;</span><span class="xml">"</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.addr&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span> //也可以是android:text="@</span><span class="template-variable">&#123;stu.getAddr()&#125;</span><span class="xml">"</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>最后，实现MainActivity,为变量赋值</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.example.jimi098.databinding.databinding.<span class="type">DataBindingBinding</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="type">DataBindingBinding</span> binding =  <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>, <span class="type">R</span>.layout.data_binding);</div><div class="line">        binding.setStu(<span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"lee"</span>, <span class="string">"Shenzhen"</span>));</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>由上面可以看出，MainActivity的代码非常简单，就添加了两行代码，需要注意的是我们并没有findViewById然后再去setText。</p>
<p>运行结果如下图所示：</p>
<p>##3.Data Binding详解</p>
<p>上面的示例仅仅是带领我们进入了Data Binding的世界，接下来我们解释一下Data Binding的开发步骤。先看看上面的布局文件。</p>
<pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>	            </div><div class="line">			<span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">	.....</div></pre></td></tr></table></figure>
</code></pre><p>根节点使用的是layout，在layout中分成两部分，第一部分是data节点，第二部分才是我们布局的根节点，在data节点下我们定义了一个variable，它是一个变量，变量名称是stu，类型是com.example.jimi098.databinding.Student，这类似我们在java文件中的定义：</p>
<pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.jimi098</span><span class="selector-class">.databinding</span><span class="selector-class">.Student</span> <span class="selector-tag">stu</span>;</div></pre></td></tr></table></figure>
</code></pre><p>不过这里要写Student完整的包名，如果这里我们需要多个Student呢？我们可以像写java文件那样导入类包</p>
<pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--导入类包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">	.....</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>这样就类似于java中的</p>
<pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.jimi098</span><span class="selector-class">.databinding</span><span class="selector-class">.Student</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">Student</span> <span class="selector-tag">stu1</span>,<span class="selector-tag">stu2</span>,...</div></pre></td></tr></table></figure>
</code></pre><p>既然变量定义好了，那该怎么使用呢？我们仍然看上面的xml文件</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">	....</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.addr&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>由上面可以看出，两个TextView的android:text，它的值是以@开始，以{}包裹的形式出现，而值呢？是stu.name，stu就是上面定义的variable，name就是Student类中的成员变量，其实这里就会去调用stu.getName()方法。</p>
<p>最后，我们看看如何给变量赋值呢？如下代码:</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.example.jimi098.databinding.databinding.<span class="type">DataBindingBinding</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="type">DataBindingBinding</span> binding =  <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>, <span class="type">R</span>.layout.data_binding);</div><div class="line">        binding.setStu(<span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"lee"</span>, <span class="string">"Shenzhen"</span>)); <span class="comment">//赋值</span></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>大部分情况，我们会在Activity中去使用它，以前我们都是在OnCreate方法中通过setContextView去设置布局。但现在不一样了，现在我们是通过DataBindingUtil类的一个静态方法setContentView设置布局，同时该方法会返回一个对象，这个对象时一个自动生成的类的对象，如DataBindingBinding？<strong>那么它的命名规则是什么呢？将我们布局文件的首字母大写，并且去掉下划线，将下划线后面的字母大写，加上后缀Binding组成。</strong>最后，我们通过这个对象来给变量赋值。</p>
<p>通过以上分析，我们了解Data Binding的具体开发步骤，下面让我们定义不同的几个变量看看</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span> /&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"str"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"String"</span>/&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"error"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"boolean"</span>/&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"num"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"int"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;str&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(num)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>由上面代码可以看出，String类型的变量没有导入包，这是因为Data Binding和Java一样，java.lang包里的类，我们是可以不用导入包的，再往下一个boolean和int类型的变量，都是java基本类型，也不用导入包。</p>
<p>再来看看几个TextView，第二个TextView，我们直接使用@{str}来为android:text设置文本内容；<strong>接下来注意第三个TextView，我们使用android:text=”@{String.valueOf(num)}”来设置一个int类型的变量，因为在给android:text设置int类型的值一定要转化为String类型，不然系统会认为是资源文件id。此外，我们还学习到了一点，在Xml中，我们不仅可以使用变量，而且还可以调用方法</strong></p>
<p>##4. 变量定义的高级部分</p>
<p>在上面，我们学会了如何在xml中定义变量，但是我们并没有定义像List、Map等这样的集合变量。那么到底能不能定义呢？答案是肯定的，而且定义的方式和我们上面的基本一致，区别就在于我们还需要为它定义key的变量，例如：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--导入类包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.graphics.Bitmap"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"java.util.ArrayList"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"java.util.HashMap"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"str"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"String"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"error"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"boolean"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"num"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"list"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"ArrayList&lt;String&gt;"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"map"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"HashMap&lt;String, String&gt;"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"array"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"String[]"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"listKey"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"mapKey"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"String"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"arrayKey"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">    </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;str&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(num)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;list[listKey]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;map[mapKey]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;array[arrayKey]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>然后在java代码中为变量赋值</p>
<pre><code><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line"></div><div class="line">        DataBindingBinding binding =  DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.data_binding);</div><div class="line">        binding.setStu(<span class="keyword">new</span> Student(<span class="string">"lee"</span>, <span class="string">"Shenzhen"</span>));</div><div class="line">        binding.setStr(<span class="string">"just do it"</span>);</div><div class="line">        binding.setNum(<span class="number">10</span>);</div><div class="line"></div><div class="line">        ArrayList&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</div><div class="line">        list.add(<span class="string">"list1"</span>);</div><div class="line">        list.add(<span class="string">"list2"</span>);</div><div class="line"></div><div class="line">        binding.setList(list);</div><div class="line">        binding.setListKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">        HashMap&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt;();</div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"name"</span>,<span class="string">"liu"</span>);</div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"sex"</span>,<span class="string">"male"</span>);</div><div class="line"></div><div class="line">        binding.setMap(<span class="built_in">map</span>);</div><div class="line">        binding.setMapKey(<span class="string">"sex"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">String</span>[] <span class="keyword">array</span> = <span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">array</span>[<span class="number">0</span>] = <span class="string">"array0"</span>;</div><div class="line">        <span class="keyword">array</span>[<span class="number">1</span>] = <span class="string">"array1"</span>;</div><div class="line"></div><div class="line">        binding.setArray(<span class="keyword">array</span>);</div><div class="line">        binding.setArrayKey(<span class="number">1</span>);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>##5.表达式</p>
<p>xml中还支持表达式</p>
<pre><code><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;TextView  </div><div class="line">    android:layout_width=<span class="string">"wrap_content"</span>  </div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span>  </div><div class="line">    android:<span class="built_in">text</span>='@&#123;<span class="keyword">error</span> ? <span class="string">"error"</span> : <span class="string">"ok"</span>&#125;'/&gt;</div></pre></td></tr></table></figure>
</code></pre><p>如上所示，android:text后是一个三元表达式，如果error是true，则text就是error，否则是OK。</p>
<p>除此外还支持null合并操作,??–左边的对象如果它不是null，选择左边的对象；或者如果它是null，选择右边的对象</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">TextView</span></span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">'@</span><span class="template-variable">&#123;str ?? "not null"&#125;</span><span class="xml"><span class="tag"><span class="string">'</span> /&gt;</span></span></div></pre></td></tr></table></figure>
</code></pre><p>还支持以下表达式:</p>
<ul>
<li>数学 + - / * % </li>
<li>字符串连接 + </li>
<li>逻辑 &amp;&amp; || </li>
<li>二进制 &amp; | ^ </li>
<li>一元运算 + - ! ~ </li>
<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt; </li>
<li>比较 == &gt; &lt; &gt;= &lt;= </li>
<li>instanceof</li>
<li>分组 () </li>
<li>null</li>
<li>Cast</li>
<li>方法调用</li>
<li>数据访问 [] </li>
<li>三元运算 ?: </li>
</ul>
<p>示例：</p>
<pre><code><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">android:</span>text=<span class="string">"@&#123;String.valueOf(index + 1)&#125;"</span></div><div class="line"><span class="string">android:</span>visibility=<span class="string">"@&#123;age &lt; 13 ? View.GONE : View.VISIBLE&#125;"</span></div><div class="line"><span class="string">android:</span>transitionName=<span class="string">'@&#123;"image_" + id&#125;'</span></div></pre></td></tr></table></figure>
</code></pre><p>但是它不支持一下表达式：</p>
<ul>
<li>this</li>
<li>super</li>
<li>new</li>
<li>显式泛型调用</li>
</ul>
<p>##6. 其他知识点</p>
<p>###6.1 设置别名</p>
<p>假如我们import了两个相同名称的类咋办？我们可以借助于别名来解决，别名借助alias字段来标识，例如：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">data</span>&gt;</span>  </span></div><div class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"xxx.Name"</span> <span class="attr">alias</span>=<span class="string">"MyName"</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"xxx.xx.Name"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xxx:</span>@</span><span class="template-variable">&#123;MyName.getName()&#125;</span><span class="xml"><span class="tag">&gt;</span>  </span></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xxx:</span>@</span><span class="template-variable">&#123;Name.getName()&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div></pre></td></tr></table></figure>
</code></pre><p>###6.2 自定义Binding类名称</p>
<p>默认情况下，Binding类的命名是基于所述layout文件的名称，用大写开头，除去下划线（）以及（）后的第一个字母大写，然后添加“Binding”后缀。这个类将被放置在一个模块封装包里的databinding封装包下。例如，所述layout文件contact_item.xml将生成ContactItemBinding。如果模块包是com.example.my.app，那么它将被放置在com.example.my.app.databinding。</p>
<p>Binding类可通过调整data元素中的class属性来重命名或放置在不同的包中。例如：</p>
<pre><code><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="class"><span class="keyword">data</span> class="<span class="type">ContactItem</span>"&gt;</span></div><div class="line">    ...</div><div class="line">&lt;/<span class="class"><span class="keyword">data</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p> 在模块封装包的databinding包中会生成名为ContactItem的Binding类。如果要想让该类生成在不同的包中，你需要添加前缀.，如下：</p>
<pre><code><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="class"><span class="keyword">data</span> class=".<span class="type">ContactItem</span>"&gt;</span></div><div class="line">    ...</div><div class="line">&lt;/<span class="class"><span class="keyword">data</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p> 在这个情况下，ContactItem类直接在模块包中生成。或者你可以提供整个包名：</p>
<pre><code><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="class"><span class="keyword">data</span> class="com.example.<span class="type">ContactItem</span>"&gt;</span></div><div class="line">    ...</div><div class="line">&lt;/<span class="class"><span class="keyword">data</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>###6.3 字符串</p>
<p>当使用单引号包含属性值时，在表达式中使用双引号很容易：<br>android:text=’@{map[“firstName”]}’</p>
<p>使用双引号来包含属性值也是可以的。字符串前后需要使用”<code>&quot;：
android:text=&quot;@{map[</code>`firstName`]}”</p>
<p>###6.4 Resources</p>
<p>使用正常的表达式来访问resources也是可行的：<br>android:padding=”@{large? @dimen/largePadding : @dimen/smallPadding}”</p>
<p>###6.5 include</p>
<p>通过使用application namespace以及在属性中的Variable名字从容器layout中传递Variables到一个被包含的layout：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">        <span class="attr">xmlns:bind</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/name"</span></span></div><div class="line">           <span class="attr">bind:user</span>=<span class="string">"@</span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/contact"</span></span></div><div class="line">           <span class="attr">bind:user</span>=<span class="string">"@</span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p><strong> 注意：在name.xml以及contact.xml两个layout文件中必需要有user variable</strong></p>
<p>##7.事件绑定</p>
<p>大家都知道，在xml中我们可以给button设置一个onClick来达到事件的绑定，现在DataBinding也提供了事件绑定，而且不仅仅是button。首先定义一个对象处理点击事件，如下：</p>
<pre><code><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jimi098 on 2016/2/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventHandler</span> &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleClick</span>(<span class="params">View view</span>) </span>&#123;</div><div class="line"></div><div class="line">        Toast.makeText(view.getContext(),<span class="string">"click"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>其次看布局：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.EventHandler"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"handler"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"EventHandler"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Click"</span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"@</span><span class="template-variable">&#123;handler.handleClick&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>最后，实现事件绑定</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="type">ClickBindingBinding</span> binding =  <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>, <span class="type">R</span>.layout.click_binding);</div><div class="line">        binding.setHandler(<span class="keyword">new</span> <span class="type">EventHandler</span>());</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>##8.Data对象</p>
<p>我们学会了通过binding为我们的变量设置数据，但是不知道你有没有发现一个问题，当我们数据改变的时候会怎样？数据是跟随着改变呢？还是原来的数据呢？这里告诉你答案：很不幸，显示的还是原来的数据？那有没有办法让数据源发生变化后显示的数据也随之发生变化？先来想想ListView是怎么做的， ListView的数据是通过Adapter提供的，当数据发生改变时，我们通过notifyDatasetChanged通过UI去改变数据，这里面的原理其实就是内容观察者，庆幸的是DataBinding也支持内容观察者，而且使用起来也相当方便！</p>
<p>###8.1 Observable</p>
<p>我们可以通过Observable的方式去通知UI数据已经改变了，当然了，官方为我们提供了更加简便的方式BaseObservable，我们的实体类只需要继承该类，稍做几个操作，就能轻松实现数据变化的通知。如何使用呢？ 首先我们的实体类要继承BaseObservale类，第二步在Getter上使用注解@Bindable，第三步，在Setter里调用方法notifyPropertyChanged，第四步，完成。就是这么简单，下面我们来实际操作一下。 </p>
<p>首先定义一个实体类，并继承BaseObservable</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jimi098 on 2016/2/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String addr;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,String addr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.addr = addr;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bindable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        notifyPropertyChanged(com.example.jimi098.databinding.BR.name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bindable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> addr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(String addr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.addr = addr;</div><div class="line">        notifyPropertyChanged(com.example.jimi098.databinding.BR.addr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>观察getName方法，我们使用了@Bindable注解，观察setName，我们调用了notifyPropertyChanged方法，这个方法还需要一个参数，这里参数类似于R.java，保存了我们所有变量的引用地址，这里我们使用了name。 </p>
<p>其次，看看布局文件</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.Student"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"click"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.example.jimi098.databinding.MainActivity"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name+stu.addr&#125;</span><span class="xml"><span class="tag"><span class="string">"</span></span></span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"@</span><span class="template-variable">&#123;click.click&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>最后，java实现</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">Student</span> mStu;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        <span class="type">ClickBindingBinding</span> binding =  <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>, <span class="type">R</span>.layout.click_binding);</div><div class="line">        mStu = <span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"lau"</span>,<span class="string">"Shenzhen"</span>);</div><div class="line"></div><div class="line">        binding.setStu(mStu); <span class="comment">//设置初始显示数据</span></div><div class="line">        binding.setClick(<span class="keyword">this</span>); <span class="comment">//设置点击事件</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public void click(<span class="type">View</span> view) &#123;</div><div class="line">		<span class="comment">//点击时数据发生改变</span></div><div class="line">        mStu.setName(<span class="string">"lee"</span>);</div><div class="line">        mStu.setAddr(<span class="string">"Beijing"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>###8.2 ObservableFields</p>
<p>上面使用BaseObservable已经非常容易了，但是google工程师还不满足，继续给我们封装了一系列的ObservableFields，这里有ObservableField,ObservableBoolean,ObservableByte,ObservableChar,ObservableShort,ObservableInt,ObservableLong,ObservableFloat,ObservableDouble,ObservableParcelable</p>
<p>ObservableFields的使用方法就更加简单了，例如下面代码:</p>
<pre><code><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;  </div><div class="line">    <span class="keyword">public</span> ObservableField&lt;<span class="keyword">String</span>&gt; name = <span class="keyword">new</span> <span class="type">ObservableField</span>&lt;&gt;();  </div><div class="line">    <span class="keyword">public</span> ObservableInt age = <span class="keyword">new</span> <span class="type">ObservableInt</span>();  </div><div class="line">    <span class="keyword">public</span> ObservableBoolean isMan = <span class="keyword">new</span> <span class="type">ObservableBoolean</span>();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>很简单，只有三个ObservableField变量，并且没有getter和setter，因为我们不需要getter和setter。<br>在xml中怎么使用呢？</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"people"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"org.loader.app4.People"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;people.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(people.age)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">'@</span><span class="template-variable">&#123;people.isMan ? "man" : "women"&#125;</span><span class="xml"><span class="tag"><span class="string">'</span>/&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>也很简单，直接使用变量，那怎么赋值和取值呢?这些ObservableField都会有一对get和set方法，所以使用起来也很方便了：</p>
<pre><code><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mPeople = new People()<span class="comment">;  </span></div><div class="line"><span class="keyword">binding.setPeople(mPeople); </span> </div><div class="line">mPeople.name<span class="meta">.set</span>(<span class="string">"people"</span>)<span class="comment">;  </span></div><div class="line">mPeople.age<span class="meta">.set</span>(<span class="number">19</span>)<span class="comment">;  </span></div><div class="line">mPeople.isMan<span class="meta">.set</span>(true)<span class="comment">;</span></div></pre></td></tr></table></figure>
</code></pre><p>###8.3 Observable Collections </p>
<p>既然普通的变量我们有了ObservableFields的分装，那集合呢？当然也有啦，来看着两个：ObservableArrayMap,ObservableArrayList。使用和普通的Map、List基本相同，直接看代码：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"map"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"android.databinding.ObservableArrayMap&lt;String,String&gt;"</span> /&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"list"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"android.databinding.ObservableArrayList&lt;String&gt;"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;map[`name`]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;list[0]&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>在来看java文件，怎么设置数据</p>
<pre><code><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ObservableArrayMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; <span class="built_in">map</span> = <span class="literal">new</span> ObservableArrayMap&lt;&gt;();  </div><div class="line">ObservableArrayList&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ObservableArrayList&lt;&gt;();  </div><div class="line"><span class="built_in">map</span>.put(<span class="string">"name"</span>, <span class="string">"loader or qibin"</span>);  </div><div class="line"><span class="built_in">list</span>.add(<span class="string">"loader!!!"</span>);  </div><div class="line">binding.setMap(<span class="built_in">map</span>);  </div><div class="line">binding.setList(<span class="built_in">list</span>);</div></pre></td></tr></table></figure>
</code></pre><p>##9.Inflate</p>
<p>上面的代码我们都是在activity中通过DataBindingUtil.setContentView来加载的布局的，现在有个问题了，如果我们是在Fragment中使用呢？Fragment没有setContentView怎么办？不要着急，Data Binding也提供了inflate的支持！ </p>
<p>使用方法如下，大家肯定会觉得非常眼熟。</p>
<pre><code><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">MyLayoutBinding binding</span> = MyLayoutBinding.inflate(layoutInflater);  </div><div class="line"><span class="attribute">MyLayoutBinding binding</span> = MyLayoutBinding.inflate(layoutInflater, viewGroup, false);</div></pre></td></tr></table></figure>
</code></pre><p>接下来，我们就尝试着在Fragment中使用一下Data Binding吧。 </p>
<p>首先还是那个学生类，Student</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.age = age;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Bindable</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> age;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.age = age;  </div><div class="line">        notifyPropertyChanged(org.loader.app5.BR.age);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Bindable</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> name;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">        notifyPropertyChanged(org.loader.app5.BR.name);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>其次，activity的布局</p>
<pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/container"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>Activity的实现</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);  </div><div class="line">        getSupportFragmentManager().beginTransaction()  </div><div class="line">                .replace(<span class="type">R</span>.id.container, <span class="keyword">new</span> <span class="type">MyFragment</span>()).commit();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>重点来了，我们这里data binding的操作都放在了fragment里，那么我们先来看看fragment的布局。</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"org.loader.app5.Student"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"Student"</span> /&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"frag"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"org.loader.app5.MyFragment"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"@</span><span class="template-variable">&#123;frag.click&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(stu.age)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>两个TextView分别绑定了Student的name和age字段，而且给name添加了一个点击事件，点击后会调用Fragment的click方法。我们来迫不及待的看一下Fragment怎么写：</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="type">Student</span> mStu;  </div><div class="line">  </div><div class="line">    <span class="meta">@Nullable</span>  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater,  </div><div class="line">                             <span class="type">ViewGroup</span> container, <span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        org.loader.app5.<span class="type">Custom</span> binding = <span class="type">DataBindingUtil</span>.inflate(inflater,  </div><div class="line">                <span class="type">R</span>.layout.frag_layout, container, <span class="literal">false</span>);  </div><div class="line">        mStu = <span class="keyword">new</span> <span class="type">Student</span>(<span class="number">20</span>, <span class="string">"loader"</span>);  </div><div class="line">        binding.setStu(mStu);  </div><div class="line">        binding.setFrag(<span class="keyword">this</span>);  </div><div class="line">        <span class="keyword">return</span> binding.getRoot();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public void click(<span class="type">View</span> view) &#123;  </div><div class="line">        mStu.setName(<span class="string">"qibin"</span>);  </div><div class="line">        mStu.setAge(<span class="number">18</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>在onCreateView中，不同于在Activity中，这里我们使用了DataBindingUtil.inflate方法，接受4个参数，第一个参数是一个LayoutInflater对象，正好，我们这里可以使用onCreateView的第一个参数，第二个参数是我们的布局文件，第三个参数是一个ViewGroup，第四个参数是一个boolean类型的，和在LayoutInflater.inflate一样，后两个参数决定了是否想container中添加我们加载进来的布局。 </p>
<p>下面的代码和我们之前写的并无差别，但是有一点，onCreateView方法需要返回一个View对象，我们从哪获取呢？ViewDataBinding有一个方法getRoot可以获取我们加载的布局，是不是很简单？ </p>
<p>来看一下效果：</p>
<p><img src="http://img.blog.csdn.net/20150817084236708" alt="ALT TEXT"></p>
<p>##10.Data Binding VS RecyclerView </p>
<p>有了上面的思路，大家是不是也会在ListView和RecyclerView中使用了？我们仅以一个RecyclerView来学习一下。 </p>
<p>首先来看看item的布局，</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stu"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"org.loader.app6.Student"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;stu.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">            <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span>/&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;String.valueOf(stu.age)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span>/&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>可以看到，还是用了那个Student实体，这样得代码，相信你也已经看烦了吧。<br>那我们来看看activity的。</p>
<pre><code><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> RecyclerView mRecyclerView;  </div><div class="line"><span class="keyword">private</span> ArrayList&lt;Student&gt; mData = <span class="keyword">new</span> ArrayList&lt;Student&gt;() &#123;  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) add(<span class="keyword">new</span> Student(<span class="string">"loader"</span> + i, <span class="number">18</span> + i));  </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">    setContentView(R.layout.activity_main);  </div><div class="line">  </div><div class="line">    mRecyclerView = (RecyclerView) findViewById(R.id.recycler);  </div><div class="line">    mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>,  </div><div class="line">            LinearLayoutManager.VERTICAL, <span class="keyword">false</span>));  </div><div class="line">    mRecyclerView.setAdapter(<span class="keyword">new</span> MyAdapter(mData));  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>这里给RecyclerView设置了一个Adapter，相信最主要的代码就在这个Adapter里。</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Student&gt; mData = <span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyAdapter</span><span class="params">(ArrayList&lt;Student&gt; data)</span> </span>&#123;  </div><div class="line">        mData.addAll(data);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup viewGroup, <span class="keyword">int</span> i)</span> </span>&#123;  </div><div class="line">        ViewDataBinding binding = DataBindingUtil.inflate(LayoutInflater  </div><div class="line">                .from(viewGroup.getContext()), R.layout.item, viewGroup, <span class="keyword">false</span>);  </div><div class="line">        ViewHolder holder = <span class="keyword">new</span> ViewHolder(binding.getRoot());  </div><div class="line">        holder.setBinding(binding);  </div><div class="line">        <span class="keyword">return</span> holder;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder viewHolder, <span class="keyword">int</span> i)</span> </span>&#123;  </div><div class="line">        viewHolder.getBinding().setVariable(org.loader.app6.BR.stu, mData.get(i));  </div><div class="line">        viewHolder.getBinding().executePendingBindings();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mData.size();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="keyword">private</span> ViewDataBinding binding;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;  </div><div class="line">            <span class="keyword">super</span>(itemView);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBinding</span><span class="params">(ViewDataBinding binding)</span> </span>&#123;  </div><div class="line">            <span class="keyword">this</span>.binding = binding;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> ViewDataBinding <span class="title">getBinding</span><span class="params">()</span> </span>&#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.binding;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</code></pre><p>果然，这个adapter的写法和我们之前的写法不太一样，首先看看ViewHolder，在这个holder里，我们保存了一个ViewDataBinding对象，并给它提供了Getter和Setter方法， 这个ViewDataBinding是干嘛的？我们稍后去讲。继续看看onCreateViewHolder，在这里面，我们首先调用DataBindingUtil.inflate方法返回了一个ViewDataBinding的对象，这个ViewDataBinding是个啥？我们以前没见过啊，这里告诉大家我们之前返回的那些都是ViewDataBinding的子类！继续看代码，我们new了一个holder，参数是肯定是我们的item布局了，继续看，接着我们又把binding设置给了holder，最后返回holder。这时候，我们的holder里就保存了刚刚返回的ViewDataBinding对象，干嘛用呢?继续看onBindViewHolder就知道了。</p>
<pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">Override</span>  </div><div class="line">public void onBindViewHolder(ViewHolder viewHolder, int i) &#123;  </div><div class="line">    <span class="selector-tag">viewHolder</span><span class="selector-class">.getBinding</span>()<span class="selector-class">.setVariable</span>(<span class="selector-tag">org</span><span class="selector-class">.loader</span><span class="selector-class">.app6</span><span class="selector-class">.BR</span><span class="selector-class">.stu</span>, <span class="selector-tag">mData</span><span class="selector-class">.get</span>(<span class="selector-tag">i</span>));  </div><div class="line">    <span class="selector-tag">viewHolder</span><span class="selector-class">.getBinding</span>()<span class="selector-class">.executePendingBindings</span>();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>只有两行代码，但是都是我们没有见过的，首先第一行，我们以前都是使用类似binding.setStu这样方法去设置变量，那这个setVariable呢？ 为什么没有setStu，这里要记住，ViewDataBinding是我们之前用的那些binding的父类，只有自动生成的那些子类才会有setXXX方法，那现在我们需要在ViewDataBinding中设置变量咋办？这个类为我们提供了setVariable去设置变量，第一个参数是我们的变量名的引用，第二个是我们要设置的值。</p>
<p>第二行代码，executePendingBindings的作用是干嘛的？</p>
<p>官方的回答是：<br>当数据改变时，binding会在下一帧去改变数据，如果我们需要立即改变，就去调用executePendingBindings方法。<br>所以这里的作用就是去让数据的改变立即执行。 </p>
<p>ok，现在看起来，我们的代码更加简洁了，而且不需要保存控件的实例，是不是很爽？ 来看看效果：</p>
<p><img src="http://img.blog.csdn.net/20150817084333489" alt="ALT TEXT"></p>
<p>##11.View with ID</p>
<p>在使用Data Binding的过程中，我们发现并没有保存View的实例，但是现在我们有需求需要这个View的实例咋办？难道走老路findViewById？当然不是啦，当我们需要某个view的实例时，我们只要给该view一个id，然后Data Binding框架就会给我们自动生成该view的实例，放哪了？当然是ViewDataBinding里面。 </p>
<p>上代码：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"str"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"android.databinding.ObservableField&lt;String&gt;"</span> /&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"handler"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"org.loader.app7.MainActivity"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;str.get&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"@</span><span class="template-variable">&#123;handler.click&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>xml中代码没有什么好说的，都是之前的代码。需要注意的是，<br>我们给TextView设定了一个id-textView。 </p>
<p>activity代码如下：</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> org.loader.app7.<span class="type">Custom</span> mBinding;  </div><div class="line">    <span class="keyword">private</span> <span class="type">ObservableField</span>&lt;<span class="type">String</span>&gt; mString;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        mBinding = <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>,  </div><div class="line">                <span class="type">R</span>.layout.activity_main);  </div><div class="line">        mString = <span class="keyword">new</span> <span class="type">ObservableField</span>&lt;<span class="type">String</span>&gt;();  </div><div class="line">        mString.set(<span class="string">"loader"</span>);  </div><div class="line">        mBinding.setStr(mString);  </div><div class="line">        mBinding.setHandler(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public void click(<span class="type">View</span> view) &#123;  </div><div class="line">        mString.set(<span class="string">"qibin"</span>);  </div><div class="line">        mBinding.textView.setTextColor(<span class="type">Color</span>.<span class="type">GREEN</span>);  <span class="comment">//找到控件 </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>通过ViewDataBinding类的实例直接去获取的。<strong>只要我们给了view一个id，那么框架就会在ViewDataBinding中自动帮我们保存这个view的实例，变量名就是我们设置的id。</strong></p>
<p>##12.自定义setter(BindingAdapter)</p>
<p>想想这样的一种情景，一个ImageView需要通过网络去加载图片，那我们怎么办？看似好像使用DataBinding不行，恩，我们上面所学到东西确实不能够解决这个问题，但是DataBinding框架给我们提供了很好的扩展，允许我们自定义setter，那该怎么做呢？这里就要引出另一个知识点——BindingAdapter，这是一个注解，参数是一个数组，数组中存放的是我们自定义的’属性’。接下来就以一个例子学习一下BindingAdapter的使用。</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"imageUrl"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"String"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">app:image</span>=<span class="string">"@</span><span class="template-variable">&#123;imageUrl&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>这里我们增加了一个命名空间app，并且注意ImageView的app:image属性，这里和我们自定义view时自定义的属性一样，但是这里并不需要我们去重写ImageView，这条属性的值是我们上面定义的String类型的imageUrl，从名称中看到这里我们可能会塞给他一个url。 </p>
<p>activity代码如下:</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        org.loader.app8.<span class="type">Custom</span> binding = <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>,  </div><div class="line">                <span class="type">R</span>.layout.activity_main);  </div><div class="line">        binding.setImageUrl(<span class="string">"http://images.csdn.net/20150810/Blog-Image%E5%89%AF%E6%9C%AC.jpg"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>果然在这里我们set了一个url，那图片怎么加载呢？这里就要使用到我们刚才说的BindingAdapter注解了。</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;  </div><div class="line">    <span class="meta">@BindingAdapter</span>(&#123;<span class="string">"bind:image"</span>&#125;)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">imageLoader</span><span class="params">(ImageView imageView, String url)</span> </span>&#123;  </div><div class="line">        ImageLoaderUtils.getInstance().displayImage(url, imageView);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>我们定义了一个Utils类，这个类你可以随便起名，该类中只有一个静态的方法imageLoader，该方法有两个参数，一个是需要设置数据的view，<br>一个是我们需要的url。值得注意的是那个BindingAdapter注解，看看他的参数，是一个数组，内容只有一个bind:image，仅仅几行代码，我们不需要 手工调用Utils.imageLoader，也不需要知道imageLoader方法定义到哪了，一个网络图片加载就搞定了，是不是很神奇，这里面起关键作用的就是BindingAdapter 注解了，来看看它的参数怎么定义的吧，难道是乱写？当然不是，这里要遵循一定的规则,</p>
<blockquote>
<p>以bind:开头，接着书写你在控件中使用的自定义属性名称。</p>
</blockquote>
<p>这里就是image了，不信来看。</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ImageView</span>  </span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">app:image</span>=<span class="string">"@</span><span class="template-variable">&#123;imageUrl&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div></pre></td></tr></table></figure>
</code></pre><p>##13.Converters</p>
<p>Converter是什么呢？举个例子吧：假如你的控件需要一个格式化好的时间，但是你只有一个Date类型额变量咋办？肯定有人会说这个简单，转化完成后在设置，恩，这也是一种办法，但是DataBinding还给我们提供了另外一种方式，虽然原理一样，但是这种方式使用的场景更多，那就是——Converter。和上面的BindingAdapter使用方法一样，这也是一个注解。下面还是以一段代码的形式进行学习。</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".Custom"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"time"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"java.util.Date"</span> /&gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;time&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><p>看TextView的text属性，我们需要一个String类型的值，但是这里确给了一个Date类型的，这就需要我们去定义Converter去转换它， </p>
<p>activity代码如下:</p>
<pre><code><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        org.loader.app9.<span class="type">Custom</span> binding = <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>,  </div><div class="line">                <span class="type">R</span>.layout.activity_main);  </div><div class="line">        binding.setTime(<span class="keyword">new</span> <span class="type">Date</span>());  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>去给这个Date类型的变量设置值。怎么去定义Converter呢？ 看代码：</p>
<pre><code><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@BindingConversion</span>  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">convertDate</span><span class="params">(Date date)</span> </span>&#123;  </div><div class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);  </div><div class="line">        <span class="function"><span class="keyword">return</span> sdf.<span class="title">format</span><span class="params">(date)</span></span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>和上面一样，我们不需要关心这个convertDate在哪个类中，重要的是他的@BindingConversion注解，这个方法接受一个Date类型的变量，正好我们的android:text设置的就是一个Date类型的值，在方法内部我们将这个Date类型的变量转换成String类型的日期并且返回。这样UI上就显示出我们转化好的字符串。<br>看看效果：</p>
<p><img src="http://img.blog.csdn.net/20150817084443284" alt="ALT TEXT"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Butterknife使用详解]]></title>
      <url>http://liuguoquan727.github.io/2016/04/17/Android_Butterknife%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">GitHub地址:https://github.com/JakeWharton/butterknife</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ButterKnife这个开源库可以让我们从大量的findViewById和setOnClickListener中解放出来，其对性能的影响微乎其微（其自定义注解的实现都是限定为RetentionPolicy.CLASS，也就是编译出.class文件为止有效，在运行时不额外消耗性能，其实通过java注解自动生成java代码的形式来完成工作），但也有一个明显的缺点，那就是代码的可读性差些，凡事有利有弊，我们需要做到有的放矢。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="Activity-Binding"><a href="#Activity-Binding" class="headerlink" title="Activity Binding"></a>Activity Binding</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.title) TextView title;</div><div class="line">  <span class="meta">@Bind</span>(R.id.subtitle) TextView subtitle;</div><div class="line">  <span class="meta">@Bind</span>(R.id.footer) TextView footer;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.simple_activity);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// TODO Use fields...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用注解bind生成的代码是可见的并且能够调试，上面的示例通过Bind注解生成的代码相当于下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(ExampleActivity activity)</span> </span>&#123;</div><div class="line">  activity.subtitle = (android.widget.TextView) activity.findViewById(<span class="number">2130968578</span>);</div><div class="line">  activity.footer = (android.widget.TextView) activity.findViewById(<span class="number">2130968579</span>);</div><div class="line">  activity.title = (android.widget.TextView) activity.findViewById(<span class="number">2130968577</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="RESOURCE-BINDING"><a href="#RESOURCE-BINDING" class="headerlink" title="RESOURCE BINDING"></a>RESOURCE BINDING</h3><p>Bind pre-defined resources with @BindBool, @BindColor, @BindDimen, @BindDrawable, @BindInt, @BindString, which binds an R.bool ID (or your specified type) to its corresponding field.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="meta">@BindString</span>(R.string.title) String title;</div><div class="line">  <span class="meta">@BindDrawable</span>(R.drawable.graphic) Drawable graphic;</div><div class="line">  <span class="meta">@BindColor</span>(R.color.red) <span class="keyword">int</span> red; <span class="comment">// int or ColorStateList field</span></div><div class="line">  <span class="meta">@BindDimen</span>(R.dimen.spacer) Float spacer; <span class="comment">// int (for pixel size) or float (for exact value) field</span></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="NON-ACTIVITY-BINDING"><a href="#NON-ACTIVITY-BINDING" class="headerlink" title="NON-ACTIVITY BINDING"></a>NON-ACTIVITY BINDING</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button1) Button button1;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button2) Button button2;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    <span class="comment">// TODO Use fields...</span></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ADAPTER-BINDING"><a href="#ADAPTER-BINDING" class="headerlink" title="ADAPTER BINDING"></a>ADAPTER BINDING</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> public <span class="type">View</span> getView(int position, <span class="type">View</span> view, <span class="type">ViewGroup</span> parent) &#123;</div><div class="line">    <span class="type">ViewHolder</span> holder;</div><div class="line">    <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</div><div class="line">      holder = (<span class="type">ViewHolder</span>) view.getTag();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      view = inflater.inflate(<span class="type">R</span>.layout.whatever, parent, <span class="literal">false</span>);</div><div class="line">      holder = <span class="keyword">new</span> <span class="type">ViewHolder</span>(view);</div><div class="line">      view.setTag(holder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    holder.name.setText(<span class="string">"John Doe"</span>);</div><div class="line">    <span class="comment">// etc...</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">    <span class="meta">@Bind</span>(<span class="type">R</span>.id.title) <span class="type">TextView</span> name;</div><div class="line">    <span class="meta">@Bind</span>(<span class="type">R</span>.id.job_title) <span class="type">TextView</span> jobTitle;</div><div class="line"></div><div class="line">    public <span class="type">ViewHolder</span>(<span class="type">View</span> view) &#123;</div><div class="line">      <span class="type">ButterKnife</span>.bind(<span class="keyword">this</span>, view);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="LIST-OR-ARRAY-BINDING"><a href="#LIST-OR-ARRAY-BINDING" class="headerlink" title="LIST OR ARRAY BINDING"></a>LIST OR ARRAY BINDING</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bind</span>(&#123; R.id.first_name, R.id.middle_name, R.id.last_name &#125;)</div><div class="line">List&lt;EditText&gt; nameViews;</div><div class="line"><span class="comment">//允许同时作用于list中的view</span></div><div class="line">ButterKnife.apply(nameViews, DISABLE);</div><div class="line">ButterKnife.apply(nameViews, ENABLED, <span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="comment">//Action and Setter interfaces allow specifying simple behavior.</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Action&lt;View&gt; DISABLE = <span class="keyword">new</span> ButterKnife.Action&lt;View&gt;() &#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(View view, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    view.setEnabled(<span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = <span class="keyword">new</span> ButterKnife.Setter&lt;View, Boolean&gt;() &#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(View view, Boolean value, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    view.setEnabled(value);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//An Android Property can also be used with the apply method.</span></div><div class="line">ButterKnife.apply(nameViews, View.ALPHA, <span class="number">0.0f</span>);</div></pre></td></tr></table></figure>
<h3 id="LISTENER-BINDING"><a href="#LISTENER-BINDING" class="headerlink" title="LISTENER BINDING"></a>LISTENER BINDING</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//带View参数</span></div><div class="line"><span class="meta">@OnClick</span>(R.id.submit)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO submit data to server...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不带View参数</span></div><div class="line"><span class="meta">@OnClick</span>(R.id.submit)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO submit data to server...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//带Button参数</span></div><div class="line"><span class="meta">@OnClick</span>(R.id.submit)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(Button button)</span> </span>&#123;</div><div class="line">  button.setText(<span class="string">"Hello!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//同时注入多个View事件</span></div><div class="line"><span class="meta">@OnClick</span>(&#123; R.id.door1, R.id.door2, R.id.door3 &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pickDoor</span><span class="params">(DoorView door)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (door.hasPrizeBehind()) &#123;</div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"You win!"</span>, LENGTH_SHORT).show();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"Try again"</span>, LENGTH_SHORT).show();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</div><div class="line">  <span class="meta">@OnClick</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// TODO do something!</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BINDING-RESET"><a href="#BINDING-RESET" class="headerlink" title="BINDING RESET"></a>BINDING RESET</h3><p>相对于Activity，Fragment有与之不同的视图声明周期。当早onCreateView中bind一个Fragment的时候，需要在OnDestroyView中将views设置为null。Butter Knife 通过一个ButterKnife.Unbinder接口来自动完成这个过程. Simply bind an unbinder with @Unbinder to the fragment.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button1) Button button1;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button2) Button button2;</div><div class="line">  <span class="meta">@Unbinder</span> ButterKnife.Unbinder unbinder;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    <span class="comment">// TODO Use fields...</span></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroyView();</div><div class="line">    unbinder.unbind();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="OPTIONAL-BINDINGS"><a href="#OPTIONAL-BINDINGS" class="headerlink" title="OPTIONAL BINDINGS"></a>OPTIONAL BINDINGS</h3><p>默认情况下,@Bind和绑定的目标是必须存在的，如果目标View不存在将会抛出异常。</p>
<p>为了避免这样情况并且创建一个可选的绑定目标，给变量增加@Nullable注解或者给方法增加 @Optional注解.</p>
<p>Note: Any annotation named @Nullable or can be used for fields. It is encouraged to use the @Nullable annotation from Android’s “support-annotations” library.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给变量增加@Nullable注解</span></div><div class="line"><span class="meta">@Nullable</span> <span class="meta">@Bind</span>(R.id.might_not_be_there) TextView mightNotBeThere;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给方法增加@Optional注解</span></div><div class="line"><span class="meta">@Optional</span> <span class="meta">@OnClick</span>(R.id.maybe_missing) <span class="function"><span class="keyword">void</span> <span class="title">onMaybeMissingClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MULTI-METHOD-LISTENERS"><a href="#MULTI-METHOD-LISTENERS" class="headerlink" title="MULTI-METHOD LISTENERS"></a>MULTI-METHOD LISTENERS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnItemSelected</span>(R.id.list_view)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnItemSelected</span>(value = R.id.maybe_missing, callback = NOTHING_SELECTED)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BONUS"><a href="#BONUS" class="headerlink" title="BONUS"></a>BONUS</h3><p>Also included are findById methods which simplify code that still has to find views on a View, Activity, or Dialog. It uses generics to infer the return type and automatically performs the cast.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, <span class="keyword">null</span>);</div><div class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);</div><div class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);</div><div class="line">ImageView photo = ButterKnife.findById(view, R.id.photo);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java内部类]]></title>
      <url>http://liuguoquan727.github.io/2016/04/17/Java%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>可以将一个类的定义放在另一个类的定义内部，这就是内部类。</p>
<p>内部类是一种非常有用的特性，因为它允许你把一些逻辑相关的类组织在一起，并控制位于内部的类的可视性。然而必须要了解的是内部类与组合是完全不同的概念。</p>
<h2 id="创建局部内部类"><a href="#创建局部内部类" class="headerlink" title="创建局部内部类"></a>创建局部内部类</h2><p>创建内部类的方式就是把类的定义置于外部类的里面。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Destination</span><span class="params">(String where)</span> </span>&#123;</div><div class="line">            label = where;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> label;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ship</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">        Content content = <span class="keyword">new</span> Content();</div><div class="line">        System.out.println(content.value());</div><div class="line">        Destination destination = <span class="keyword">new</span> Destination(dest);</div><div class="line">        System.out.println(destination.readLabel());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Parcel1 parcel = <span class="keyword">new</span> Parcel1();</div><div class="line">        parcel.ship(<span class="string">"ShangHai"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"><span class="number">11</span></div><div class="line">ShangHai</div></pre></td></tr></table></figure>
<p>当我们在ship()方法里面使用内部类的时候，与使用普通类没有什么不同。在这里实际的区别只是内部类的名字是嵌套在Parcel里面的。不过这不是唯一的区别。</p>
<p>更典型的情况是，外部类将有一个方法，该方法返回一个指向内部类的引用，就像to()和contexts()看到的那样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Destination</span><span class="params">(String where)</span> </span>&#123;</div><div class="line">            label = where;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> label;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">to</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination(dest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Content <span class="title">content</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Content();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ship</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">        Content content = content();</div><div class="line">        System.out.println(content.value());</div><div class="line">        Destination destination = to(dest);</div><div class="line">        System.out.println(destination.readLabel());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Parcel2 p = <span class="keyword">new</span> Parcel2();</div><div class="line">        p.ship(<span class="string">"ShangHai"</span>);</div><div class="line"></div><div class="line">        Parcel2 q = <span class="keyword">new</span> Parcel2();</div><div class="line">        Parcel2.Content content = q.content();</div><div class="line">        System.out.println(content.value());</div><div class="line">        Parcel2.Destination destination = q.to(<span class="string">"Beijing"</span>);</div><div class="line">        System.out.println(destination.readLabel());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">打印结果：</div><div class="line"><span class="number">11</span></div><div class="line">ShangHai</div><div class="line"><span class="number">11</span></div><div class="line">Beijing</div></pre></td></tr></table></figure>
<p>如果想从外部类的非静态方法之外的任意位置创建某个内部类的对象，那么必须像在main()方法中那样，具体地指明这个对象的类型：OuterClassName.InnerClassName.</p>
<h2 id="链接到外部类"><a href="#链接到外部类" class="headerlink" title="链接到外部类"></a>链接到外部类</h2><p>当生产一个内部类的对象时，此对象与生产它的外部类对象之间就有了一种联系，所以它能访问其外部类对象的所有成员，而不需要任何特殊条件。此外，内部类还拥有其外部类的所有元素的访问权。看看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Selector</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Object <span class="title">cuurent</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sequence</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Object[] items;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> next = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sequence</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">		items = <span class="keyword">new</span> Object[size];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (next &lt; items.length) &#123;</div><div class="line">			items[next++] = obj;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceSelecotr</span> <span class="keyword">implements</span> <span class="title">Selector</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> i == items.length; <span class="comment">//直接使用外部类的对象</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">cuurent</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> items[i];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">if</span> (i &lt; items.length) &#123;</div><div class="line">				i++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Sequence sequence = <span class="keyword">new</span> Sequence(<span class="number">10</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++) &#123;</div><div class="line">			sequence.add(Integer.toString(i));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		SequenceSelecotr selector = sequence.new SequenceSelecotr();</div><div class="line">		<span class="keyword">while</span>(!selector.end()) &#123;</div><div class="line">			System.out.println(<span class="string">"current: "</span> + selector.cuurent());</div><div class="line">			selector.next();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">current: <span class="number">0</span></div><div class="line">current: <span class="number">1</span></div><div class="line">current: <span class="number">2</span></div><div class="line">current: <span class="number">3</span></div><div class="line">current: <span class="number">4</span></div><div class="line">current: <span class="number">5</span></div><div class="line">current: <span class="number">6</span></div><div class="line">current: <span class="number">7</span></div><div class="line">current: <span class="number">8</span></div><div class="line">current: <span class="number">9</span></div></pre></td></tr></table></figure>
<p>有结果可以得知，内部类可以直接访问其外部类的方法和字段，内部类自动拥有对其外部类所有成员的访问权。这是如何做到的呢？当某个外部类的对象创建一个内部类对象时，此内部类对象必定会秘密地捕获一个指向那个外部类对象的引用。然后，在你访问此外部类的成员时，就是用那个引用来选择外部类的成员。幸运的是，编译器会帮你处理所有的细节。但你现在可以看到的是：内部类的对象只能在与其外部类的对象相关联的情况下才能被创建（在内部类是非static类时）。构建内部类对象时，需要一个指向其外部类的引用，如果编译器访问不到这个引用就会报错。</p>
<h2 id="使用-this与-new"><a href="#使用-this与-new" class="headerlink" title="使用.this与.new"></a>使用.this与.new</h2><p>如果你需要生产对象外部类对象的引用，可以使外部类的名字后面紧跟.this。这样产生的引用自动地具有正确的类型，这一点在编译期就被知晓并受到检查，因此没有任何运行时开销。下面例子展示如何使用.this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoThis</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> DoThis <span class="title">outer</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> DoThis.<span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"DoThis.f()"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		DoThis dt = <span class="keyword">new</span> DoThis();</div><div class="line">		InnerClass innerClass = dt.new InnerClass();</div><div class="line">		innerClass.outer().f();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果:</div><div class="line">DoThis.f()</div></pre></td></tr></table></figure>
<p>有时候你肯想要告知某些其他对象，去创建其某个内部类的对象。要实现此目的，你必须在new表达式中提供对其他外部类对象的引用，这时需要使用.new语法，就像下面这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DotNew</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		DotNew dn = <span class="keyword">new</span> DotNew();</div><div class="line"></div><div class="line">		Inner inner = dn.new Inner();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要想直接创建内部类的对象，不能去引用外部类的名字DotNew，而是必须使用外部类的对象来创建该内部类对象。这也解决了内部类名字作用域的问题，因此你不必声明也不能声明dn.new DotNew.Inner()。</p>
<p>在拥有外部类对象之前是不可能创建内部类对象的，这是因为内部类对象会暗地里连接到创建它的外部类引用对象上。但是如果你创建的是静态内部类，那么它就不需要对外部类对象的引用。</p>
<h2 id="内部类与向上转型"><a href="#内部类与向上转型" class="headerlink" title="内部类与向上转型"></a>内部类与向上转型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">readlabel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Contents</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parcel4</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> <span class="number">11</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">			label = dest;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> label;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PDestination(<span class="string">"Beijing"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PContents();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParcel</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Parcel4 parcel4 = <span class="keyword">new</span> Parcel4();</div><div class="line">		Contents contents = parcel4.contents();</div><div class="line">		System.out.println(contents.value());</div><div class="line">		Destination destination = parcel4.destination();</div><div class="line">		System.out.println(destination.readlabel());</div><div class="line"></div><div class="line">        <span class="comment">//不能向下转型</span></div><div class="line"><span class="comment">//		PContents contents1 = parcel4.contents();</span></div><div class="line"><span class="comment">//		PDestination destination1 = parcel4.destination();</span></div><div class="line">		<span class="comment">//不能访问Parcel4的私有成员</span></div><div class="line"><span class="comment">//		Contents contents2 = parcel4.new PContents();</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">打印结果：</div><div class="line"><span class="number">11</span></div><div class="line">Beijing</div></pre></td></tr></table></figure>
<p>在Parcel4类中，PDestination相当于Parcel4类的protected成员，所以只有Parcel4及其子类、还有与Parcel4在同一个包中的类能访问PDestination;PContents相当于Parcel4的私有成员，只有Parcel4类能够访问它。</p>
<h2 id="在方法和作用域内的内部类"><a href="#在方法和作用域内的内部类" class="headerlink" title="在方法和作用域内的内部类"></a>在方法和作用域内的内部类</h2><p>下面的例子展示在方法的作用域内（而不是在其他类的作用域内）创建一个完整的类，这称为局部内部类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel5</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span></span>&#123;</div><div class="line">			</div><div class="line">			<span class="keyword">private</span> String label;</div><div class="line">			</div><div class="line">			<span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">				label = dest;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> label;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PDestination(dest);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		</div><div class="line">		Parcel5 p = <span class="keyword">new</span> Parcel5();</div><div class="line">		Destination destination = p.destination(<span class="string">"Beijing"</span>);</div><div class="line">		System.out.println(destination.readlabel());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：<br>在destination()中定义了内部类PDestination，并不意味着一旦dest()方法执行完毕，PDestination就不可用了。<br>你可以在同一个子目录下的任意类对某个内部类使用类标识符PDestination，这并不会有命名冲突。</p>
<p>下面的例子展示如何在任意的作用域内嵌入一个内部类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel6</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destination</span><span class="params">(<span class="keyword">boolean</span> isCreate)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (isCreate) &#123;</div><div class="line"></div><div class="line">			<span class="class"><span class="keyword">class</span> <span class="title">PDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">				<span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">				<span class="function"><span class="keyword">private</span> <span class="title">PDestination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">					label = dest;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">					<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">					<span class="keyword">return</span> label;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			PDestination destination = <span class="keyword">new</span> PDestination(<span class="string">"Beijing"</span>);</div><div class="line">			System.out.println(destination.readlabel());</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="comment">//error，超出作用域范围</span></div><div class="line"><span class="comment">//		PDestination destination = new PDestination("Beijing");</span></div><div class="line"><span class="comment">//		System.out.println(destination.readlabel());</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Parcel6 p = <span class="keyword">new</span> Parcel6();</div><div class="line">		p.destination(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line">Beijing</div></pre></td></tr></table></figure>
<h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>先看一个匿名内部类示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel7</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//匿名内部类</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Contents() &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> <span class="number">11</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Parcel7 p = <span class="keyword">new</span> Parcel7();</div><div class="line">		System.out.println(p.contents().value());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种语句的意思是：创建一个继承自Contents的匿名类的对象。</p>
<p>上述匿名内部类的语法是下述形式的简化形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel7</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MyContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> <span class="number">11</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyContents();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Parcel7 p = <span class="keyword">new</span> Parcel7();</div><div class="line">		System.out.println(p.contents().value());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的匿名内部类中，使用了默认的构造函数来生成Contents。下面的代码展示了带参数的构造器的匿名内部类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.i = x;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> i;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel8</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Wrapper <span class="title">wrapper</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Wrapper(x) &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">super</span>.value() * <span class="number">22</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Parcel8 p = <span class="keyword">new</span> Parcel8();</div><div class="line">		System.out.println(p.wrapper(<span class="number">3</span>).value());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实例初始化匿名内部类成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel9</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(<span class="keyword">final</span> String dest,<span class="keyword">final</span> <span class="keyword">float</span> price)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Destination() &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">private</span> <span class="keyword">int</span> cost;</div><div class="line">			</div><div class="line">			<span class="comment">//实例初始化成员变量</span></div><div class="line">			&#123;</div><div class="line">				cost = Math.round(price);</div><div class="line">				System.out.println(<span class="string">"Price: "</span> + cost);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">private</span> String label = dest;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> label;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Parcel9 p = <span class="keyword">new</span> Parcel9();</div><div class="line">		Destination destination = p.destination(<span class="string">"Beijing"</span>, <span class="number">25.6f</span>);</div><div class="line">		System.out.println(destination.readlabel());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">Price: <span class="number">26</span></div><div class="line">Beijing</div></pre></td></tr></table></figure>
<p>对于匿名类而言，实例初始化的实际效果就是构造器，当然它受到了限制-你不能重载实例初始化方法。</p>
<h2 id="嵌套类-静态内部类"><a href="#嵌套类-静态内部类" class="headerlink" title="嵌套类(静态内部类)"></a>嵌套类(静态内部类)</h2><p>如果不需要内部类对象与其外部类对象之间有联系，那么将内部类声明为static，这就是静态内部类(嵌套类)。静态内部类与普通内部类的区别在于：</p>
<ul>
<li>要创建静态内部的对象并不需要其外部类的对象</li>
<li>不能从静态内部类的对象中访问非静态的外部类对象</li>
<li>普通内部类的字段和方法，只能放在类的外部层次上，所以普通的内部类不能有static数据和static字段，也不能包含静态内部类，但是静态内部类可以包含这些特性。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.michael.java.innerclass.Parcel11.ParcelDestination.AnotherLevel;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel11</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelContents</span> <span class="keyword">implements</span> <span class="title">Contents</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">11</span>;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParcelDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> String label;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="title">ParcelDestination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">			label = dest;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">readlabel</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">return</span> label;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//静态方法</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</div><div class="line">			</div><div class="line">			System.out.println(<span class="string">"f()"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//静态变量</span></div><div class="line">		<span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">10</span>;</div><div class="line"></div><div class="line">		<span class="comment">//静态内部类</span></div><div class="line">		<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherLevel</span> </span>&#123;</div><div class="line">			</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"AnotherLevel f()"</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Destination <span class="title">destination</span><span class="params">(String dest)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ParcelDestination(<span class="string">"Beijing"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Contents <span class="title">contents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ParcelContents();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Contents contents = contents();</div><div class="line">		contents.value();</div><div class="line">		</div><div class="line">		Destination destination = destination(<span class="string">"Beijing"</span>);</div><div class="line">		destination.readlabel();</div><div class="line">		</div><div class="line">		System.out.println(ParcelDestination.x);</div><div class="line">		ParcelDestination.f();</div><div class="line">		AnotherLevel.f();</div><div class="line">		System.out.println(AnotherLevel.x);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在main方法中，不需要任何Parcel11对象，而是使用选取static成员的普通语法来调用方法。</p>
<h2 id="接口的内部类"><a href="#接口的内部类" class="headerlink" title="接口的内部类"></a>接口的内部类</h2><p>正常情况下，不能在接口内放置任何代码，但静态内部类可以作为接口的一部分，你放到接口中的任何类都自动地是public和static、的。因为类是static的，只是将嵌套类置于接口的命名空间内，这并不违反接口的规则。你甚至可以在内部类中实现外部接口，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClassInInterface</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">ClassInInterface</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">howdy</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			System.out.println(<span class="string">"Howdy"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Test test = <span class="keyword">new</span> Test();</div><div class="line">		test.howdy();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="为什么需要内部类"><a href="#为什么需要内部类" class="headerlink" title="为什么需要内部类"></a>为什么需要内部类</h2><p>内部类最吸引人的原因是：每个内部类都能独立地继承自一个（接口的）实现，所有无论外部类是否已经继承了某个（接口的）实现，对于内部类都没有影响。</p>
<p>下面让我们考虑这样一种情况：即必须在一个类中以某种方式实现两个接口。由于接口的灵活性，你有两种选择：使用单一类，或者使用内部类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//内部类实现接口</span></div><div class="line">	<span class="function">B <span class="title">makeB</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> B() &#123;</div><div class="line">			</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiInterface</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesA</span><span class="params">(A a)</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesB</span><span class="params">(B b)</span></span>&#123;&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		X x = <span class="keyword">new</span> X();</div><div class="line">		Y y = <span class="keyword">new</span> Y();</div><div class="line">		</div><div class="line">		takesA(x);</div><div class="line">		takesA(y);</div><div class="line">		</div><div class="line">		takesB(x);</div><div class="line">		takesB(y.makeB());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果使用的是抽象的类或具体的类，而不是接口，那就只能使用内部类才能实现多重继承。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">extends</span> <span class="title">D</span> </span>&#123;</div><div class="line">	<span class="function">E <span class="title">makeE</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> E() &#123; &#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiImplementation</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesD</span><span class="params">(D d)</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">takesE</span><span class="params">(E e)</span></span>&#123;&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Z z = <span class="keyword">new</span> Z();</div><div class="line">		</div><div class="line">		takesD(z);</div><div class="line">		takesE(z.makeE());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用内部类可以获得一些特性：</p>
<ul>
<li>内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外部类对象的信息相互独立</li>
<li>在单个外部类中，可以让对个内部类以不同的方式实现同一个接口，或继承同一个类</li>
<li>创建内部类对象的时刻并不依赖于外部类对象的创建</li>
<li>内部类就是一个独立的实体</li>
</ul>
<h2 id="内部类的继承"><a href="#内部类的继承" class="headerlink" title="内部类的继承"></a>内部类的继承</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.innerclass;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"Inner"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>.<span class="title">Inner</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">// !public InheritInner() 不会被编译</span></div><div class="line">	</div><div class="line">	InheritInner(WithInner wi) &#123;</div><div class="line">		wi.<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		WithInner wi = <span class="keyword">new</span> WithInner();</div><div class="line">		InheritInner inner = <span class="keyword">new</span> InheritInner(wi);</div><div class="line">		inner.print();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，InheritInner只继承自内部类，而不是外部类，但是当要生成一个构造器时，默认的构造器并不能通过，并且不能只是传递一个指向外部类对象的引用，还必须在构造器中使用如下语句<code>OuterClassNameReference.super()</code></p>
<h2 id="内部类可以被覆盖吗"><a href="#内部类可以被覆盖吗" class="headerlink" title="内部类可以被覆盖吗"></a>内部类可以被覆盖吗</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Yolk yolk;</div><div class="line">	</div><div class="line">	<span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"Egg.Yolk()"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Egg</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"New Egg"</span>);</div><div class="line">		yolk = <span class="keyword">new</span> Yolk();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigEgg</span> <span class="keyword">extends</span> <span class="title">Egg</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"BigEgg.Yolk()"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">new</span> BigEgg();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果是：</div><div class="line">New Egg</div><div class="line">Egg.Yolk()</div></pre></td></tr></table></figure>
<p>结果说明，当BigEgg继承了Egg之后，BigEgg里面的内部类Yolk并没有覆盖Egg里面的内部类Yolk，这两个内部类是完全独立的两个实体，各自在自己的命名空间内。</p>
<h2 id="内部类标识符"><a href="#内部类标识符" class="headerlink" title="内部类标识符"></a>内部类标识符</h2><p>由于每个类都会产生一个。class文件，其中包含了如何创建该类型的对象的全部信息（此信息产生一个“meta-class”，叫做Class对象），内部类也必须生成一个.class文件以包含它们的Class对象信息。这些类文件的命名有严格的规则，加上“$”，再加上内部类的名字。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Counter.class</div><div class="line">LocalInnerClass$1.class ## 匿名内部类 用数字1表示</div><div class="line">LocalInnerClass$1LocalCounter.class ##局部内部类  LocalCounter在LocalInnerClass里面</div><div class="line">LocalInnerClass.class</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java字符串]]></title>
      <url>http://liuguoquan727.github.io/2016/04/17/Java%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h2 id="不可变String"><a href="#不可变String" class="headerlink" title="不可变String"></a>不可变String</h2><p>String对象时不可变的。查看JDK文档你就会发现，String类中每一个看起来会修改String值的方法，实际上都是创建了一个全新的String对象，这个新的String对象来包含修改后的字符串内容，而最初的String对象则没有变化。</p>
<p>看看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Immutable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        String str = <span class="string">"hello"</span>;</div><div class="line">        System.out.println(str); <span class="comment">//hello</span></div><div class="line">        String str1 = upCase(str);</div><div class="line">        System.out.println(str1); <span class="comment">//HELLO</span></div><div class="line">        System.out.println(str); <span class="comment">//hello</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upCase</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s.toUpperCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果打印如下：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hello</span></div><div class="line">HELLO</div><div class="line">hello</div></pre></td></tr></table></figure>
<p>当把str传给upCase()方法时，实际上传递的是引用的一个拷贝。其实，每当把String对象作为方法的参数时，都会复制一份对象的引用，而该引用所指向的对象其实一直指向同一个内存地址，从未改变。 回到upCase方法的定义，传入其中的引用有了名字s，只有upCase方法运行的时候，局部引用s才回存在，一旦upCase运行结束，s就消失了。当然upCase的返回值，其实只是最终结果的引用。而这个引用已经指向了一个新的对象，而原本的str对象还在原始的位置。</p>
<h2 id="重载”-”与StringBuilder"><a href="#重载”-”与StringBuilder" class="headerlink" title="重载”+”与StringBuilder"></a>重载”+”与StringBuilder</h2><p>String的不可变性会带来一定的效率问题。为String对象重载的”+”操作符就是一个例子。重载的意思是，一个操作符在应用特定的类时，被赋予特殊的意义（用于String的”+”与”+=”是Java中仅有的两个重载过的操作符，而Java并不允许程序员重载任何操作符）。</p>
<p>操作符”+”可以用来连接String：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concatention</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">        String str = <span class="string">"hello"</span>;</div><div class="line">        String result = str + <span class="string">" welcom"</span> + <span class="string">" to beijing"</span>;</div><div class="line">        System.out.println(result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果是:</div><div class="line">hello welcom to beijing</div></pre></td></tr></table></figure>
<p>这段代码可能是这样工作的：String有一个append（）方法，它会生成一个新的String对象，以包含”欢迎来”与str连接后的字符串。然后，该对象再与”到北京”相连，生成一个新的String对象result。 这种工作方式当然是可行的，但是为了生成最终的String，此方式会产生一大堆需要垃圾回收的中间对象。当达到一定的数量之后，性能表现会相当糟糕。</p>
<p>下面来看下以上代码到底是如何工作的，可以用JDK自带的工具javap命令来反编译以上代码。命令如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javap -<span class="built_in">c</span> <span class="type">Concatention</span>  <span class="comment">//-c 表示生产JVM字节码</span></div></pre></td></tr></table></figure>
<p>编译后的字节码为：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Compiled from <span class="string">"Concatention.java"</span></div><div class="line">class Concatention &#123;</div><div class="line">  Concatention();</div><div class="line">    <span class="built_in">Code</span>:</div><div class="line">       <span class="number">0</span>: aload_0</div><div class="line">       <span class="number">1</span>: invokespecial <span class="meta">#1                  <span class="comment">// Method java/lang/Object."&lt;init&gt;":()V</span></span></div><div class="line">       <span class="number">4</span>: <span class="keyword">return</span></div><div class="line"></div><div class="line">  public static void main(java.lang.<span class="keyword">String</span>[]);</div><div class="line">    <span class="built_in">Code</span>:</div><div class="line">       <span class="number">0</span>: ldc           <span class="meta">#2                  <span class="comment">// String hello</span></span></div><div class="line">       <span class="number">2</span>: astore_1</div><div class="line">       <span class="number">3</span>: <span class="keyword">new</span>           <span class="meta">#3                  <span class="comment">// class java/lang/StringBuilder</span></span></div><div class="line">       <span class="number">6</span>: dup</div><div class="line">       <span class="number">7</span>: invokespecial <span class="meta">#4                  <span class="comment">// Method java/lang/StringBuilder."&lt;init&gt;":()V</span></span></div><div class="line">      <span class="number">10</span>: aload_1</div><div class="line">      <span class="number">11</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">      <span class="number">14</span>: ldc           <span class="meta">#6                  <span class="comment">// String  welcom</span></span></div><div class="line">      <span class="number">16</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">      <span class="number">19</span>: ldc           <span class="meta">#7                  <span class="comment">// String  to beijing</span></span></div><div class="line">      <span class="number">21</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">      <span class="number">24</span>: invokevirtual <span class="meta">#8                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></div><div class="line">      <span class="number">27</span>: astore_2</div><div class="line">      <span class="number">28</span>: getstatic     <span class="meta">#9                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span></div><div class="line">      <span class="number">31</span>: aload_2</div><div class="line">      <span class="number">32</span>: invokevirtual <span class="meta">#10                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span></div><div class="line">      <span class="number">35</span>: <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的重点是：编译器自动引入了java.lang.StringBuilder类。虽然我们在源代码中并没有使用StringBuilder类，但是编译器却自作主张地使用了它，因为它更高效。</p>
<p>现在，你也行会觉得可以随意使用String对象，反正编译器会自动优化性能。可是在这之前，让我们更深入地看看编译器能为我们优化到什么程序。下面的程序采用两种方式生成一个String：方法一使用说个String对象，方法二使用StringBuilder</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhitherStringBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">implicit</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line"></div><div class="line">        String result = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; strs.length;i++) &#123;</div><div class="line">            result += strs[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">explicit</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line"></div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; strs.length;i++) &#123;</div><div class="line">            builder.append(strs[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在运行<code>javap -c WitherStringBuilder</code>可以看到两个方法对应的字节码，首先是implicit()方法：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public java.lang.<span class="keyword">String</span> implicit(java.lang.<span class="keyword">String</span>[]);</div><div class="line">  <span class="built_in">Code</span>:</div><div class="line">     <span class="number">0</span>: ldc           <span class="meta">#2                  <span class="comment">// String</span></span></div><div class="line">     <span class="number">2</span>: astore_2</div><div class="line">     <span class="number">3</span>: iconst_0</div><div class="line">     <span class="number">4</span>: istore_3</div><div class="line">     <span class="number">5</span>: iload_3</div><div class="line">     <span class="number">6</span>: aload_1</div><div class="line">     <span class="number">7</span>: arraylength</div><div class="line">     <span class="number">8</span>: if_icmpge     <span class="number">38</span></div><div class="line">    <span class="number">11</span>: <span class="keyword">new</span>           <span class="meta">#3                  <span class="comment">// class java/lang/StringBuilder</span></span></div><div class="line">    <span class="number">14</span>: dup</div><div class="line">    <span class="number">15</span>: invokespecial <span class="meta">#4                  <span class="comment">// Method java/lang/StringBuilder."&lt;init&gt;":()V</span></span></div><div class="line">    <span class="number">18</span>: aload_2</div><div class="line">    <span class="number">19</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">    <span class="number">22</span>: aload_1</div><div class="line">    <span class="number">23</span>: iload_3</div><div class="line">    <span class="number">24</span>: aaload</div><div class="line">    <span class="number">25</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">    <span class="number">28</span>: invokevirtual <span class="meta">#6                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></div><div class="line">    <span class="number">31</span>: astore_2</div><div class="line">    <span class="number">32</span>: iinc          <span class="number">3</span>, <span class="number">1</span></div><div class="line">    <span class="number">35</span>: <span class="keyword">goto</span>          <span class="number">5</span></div><div class="line">    <span class="number">38</span>: aload_2</div><div class="line">    <span class="number">39</span>: areturn</div></pre></td></tr></table></figure>
<p>从第8行到第35行构成了一个循环体。要注意的重点是：StringBuilder是在循环之内构造的，这意味着每经过循环一次，就会创建一个新的StringBuilder对象。</p>
<p>下面是explicit()方法对应的字节码：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public java.lang.<span class="keyword">String</span> explicit(java.lang.<span class="keyword">String</span>[]);</div><div class="line">   <span class="built_in">Code</span>:</div><div class="line">      <span class="number">0</span>: <span class="keyword">new</span>           <span class="meta">#3                  <span class="comment">// class java/lang/StringBuilder</span></span></div><div class="line">      <span class="number">3</span>: dup</div><div class="line">      <span class="number">4</span>: invokespecial <span class="meta">#4                  <span class="comment">// Method java/lang/StringBuilder."&lt;init&gt;":()V</span></span></div><div class="line">      <span class="number">7</span>: astore_2</div><div class="line">      <span class="number">8</span>: iconst_0</div><div class="line">      <span class="number">9</span>: istore_3</div><div class="line">     <span class="number">10</span>: iload_3</div><div class="line">     <span class="number">11</span>: aload_1</div><div class="line">     <span class="number">12</span>: arraylength</div><div class="line">     <span class="number">13</span>: if_icmpge     <span class="number">30</span></div><div class="line">     <span class="number">16</span>: aload_2</div><div class="line">     <span class="number">17</span>: aload_1</div><div class="line">     <span class="number">18</span>: iload_3</div><div class="line">     <span class="number">19</span>: aaload</div><div class="line">     <span class="number">20</span>: invokevirtual <span class="meta">#5                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></div><div class="line">     <span class="number">23</span>: <span class="keyword">pop</span></div><div class="line">     <span class="number">24</span>: iinc          <span class="number">3</span>, <span class="number">1</span></div><div class="line">     <span class="number">27</span>: <span class="keyword">goto</span>          <span class="number">10</span></div><div class="line">     <span class="number">30</span>: aload_2</div><div class="line">     <span class="number">31</span>: invokevirtual <span class="meta">#6                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></div><div class="line">     <span class="number">34</span>: areturn</div></pre></td></tr></table></figure>
<p>可以看到，不仅循环部分的代码更简短、更简单，而且它只生成一个StringBuilder对象。显示地创建StringBuilder还允许你预先为其指定大小。如果你已经知道最终的字符串大概有多长，那预先指定StringBuilder的大小可以避免多次重新分配缓冲。</p>
<p>因此，当你为一个类编写toString()方法时，如果字符串操作比较简单，那就可以信赖编译器,它会为你合理地构造最终的字符串结果。但是，如果你要在toString方法中使用循环时，最好还是自己创建一个StringBuilder对象，用它来构造最终的结果。</p>
<h2 id="无意识的递归"><a href="#无意识的递归" class="headerlink" title="无意识的递归"></a>无意识的递归</h2><p>Java中的每个类从根本上都是继承自Object，标准容器类自然也不例外。因此容器类都有toString方法，并复写了该方法，使得它生成的String结果能够表达容器自身，以及容器所包含的对象。例如ArrayList.toString()，它会遍历ArrayList中包含的所有对象，调用每个元素上的toString方法：</p>
<p>如果你希望toString()方法打印出对象的内存地址，也许你会考虑使用this关键字：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfiniteRecursion</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Recursion address: "</span> + <span class="keyword">this</span> + <span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        List&lt;InfiniteRecursion&gt; list = <span class="keyword">new</span> ArrayList&lt;InfiniteRecursion&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">            list.add(<span class="keyword">new</span> InfiniteRecursion());</div><div class="line"></div><div class="line">        System.out.println(list);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果</div><div class="line">Exception in thread <span class="string">"main"</span> java.lang.StackOverflowError</div><div class="line">    at java.lang.String.getChars(String.java:<span class="number">826</span>)</div><div class="line">    at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:<span class="number">416</span>)</div><div class="line">    at java.lang.StringBuilder.append(StringBuilder.java:<span class="number">132</span>)</div><div class="line">    at com.micheal.java.staticdemo.InfiniteRecursion.toString(InfiniteRecursion.java:<span class="number">12</span>)</div><div class="line">    at com.micheal.java.staticdemo.InfiniteRecursion.toString(InfiniteRecursion.java:<span class="number">12</span>)</div><div class="line">    at com.micheal.java.staticdemo.InfiniteRecursion.toString(InfiniteRecursion.java:<span class="number">12</span>)</div></pre></td></tr></table></figure>
<p>这里发生了自动类型转换，由InfiniteRecursion类型转换成String类型。因为编译器看到一个String对象后面跟着”+”，而在后面的对象不是String而是this，于是编译器试着将this转换成一个String。它怎么转换的呢，正是通过调用this上的toString方法，于是就发生了递归调用，造成栈溢出。</p>
<p>如果你真的想要打印出对象的内存地址，应该调用Objec.toString()方法，所有，你应该调用super.toString()方法.</p>
<h2 id="String上的操作"><a href="#String上的操作" class="headerlink" title="String上的操作"></a>String上的操作</h2><p>以下是String对象具备的一些基本方法，重载的方法归纳在同一行中：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/string-String%E4%B8%8A%E7%9A%84%E6%93%8D%E4%BD%9C1.png" alt=""> <img src="http://7xs7a3.com1.z0.glb.clouddn.com/string-String%E4%B8%8A%E7%9A%84%E6%93%8D%E4%BD%9C2.png" alt=""></p>
<p>上上图表中可以看出，当需要改变字符串的内容时，String类的方法都会返回一个新的String对象。同时，如果内容没有发生改变，String的方法只是返回指向原对象的引用而已，这可以节约存储空间以及避免额外的开销。</p>
<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><h3 id="System-out-printf"><a href="#System-out-printf" class="headerlink" title="System.out.printf()"></a>System.out.printf()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.printf(<span class="string">"Row: %d %s\n"</span>,<span class="number">12</span>,<span class="string">"just"</span>);</div></pre></td></tr></table></figure>
<h3 id="System-out-format"><a href="#System-out-format" class="headerlink" title="System.out.format()"></a>System.out.format()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.format(<span class="string">"Row: %d %s\n"</span>,<span class="number">12</span>,<span class="string">"just"</span>);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的构造函数调用顺序]]></title>
      <url>http://liuguoquan727.github.io/2016/04/05/Java%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>面试题中经常这样的题目，分析子类父类构造函数的调用顺序，下面开始分情况讨论父类子类构造函数的调用顺序：</p>
<p>先创建两个类A和B，其中B继承A</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"A的无参构造函数"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"A的有参构造函数: "</span> + msg);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"A的print方法"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"B的无参构造函数"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">	<span class="comment">//	super(msg); //此句代码表示调用父类A的有参构造函数，不加此句代码则表示调用父类A的默认无参构造函数</span></div><div class="line">		System.out.println(<span class="string">"B的有参构造函数: "</span> + msg);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"B的print方法"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"A的add方法"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用上述类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	B b = <span class="keyword">new</span> B();</div><div class="line">	B b1 = <span class="keyword">new</span> B(<span class="string">"hello"</span>);</div><div class="line">	b.print();</div><div class="line">	b.add();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">A的无参构造函数</div><div class="line"><span class="keyword">B的无参构造函数</span></div><div class="line">A的无参构造函数: hello</div><div class="line"><span class="keyword">B的有参构造函数: </span>hello</div><div class="line"><span class="keyword">B的print方法</span></div><div class="line">A的<span class="keyword">add方法</span></div></pre></td></tr></table></figure>
<p>从运行结果可得出以下结论:</p>
<ul>
<li>实例化无参子类B时，先调用父类A的无参构造函数，再调用B的无参构造函数；</li>
<li>实例化有参子类B时，先调用父类A的默认无参构造函数，再调用B的有参构造函数；若要调用A的有参构造函数，则在类B的有参构造函数的第一行加上super(msg)这句代码。</li>
<li>子类B调用方法时有两种情况：一是如果子类B中的方法和父类A中的print方法一致时，则调用子类B中print的方法，但是可通过super.print()调用父类中的print方法;二是如果子类B中无add方法而父类A中有add方法时，则子类B的示例直接调用父类A中的add方法；</li>
<li>父类A不能调用子类B中的方法和变量</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中static关键字详解]]></title>
      <url>http://liuguoquan727.github.io/2016/04/05/Java%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>static是Java的一个关键字，我们在Java开发中经常使用static，static主要用于下面五种情况：</p>
<h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>我们可以将类级别的变量声明为static，静态变量是属于类的，而不是属于类创建的对象或实例的。因为静态变量被类的所有实例共用，所以是线程不安全的。通常静态变量还和关键字final一起用，作为所有对象共用的资源或常量。如果静态变量不是私有的，那么可以通过ClassName.variableName来访问它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String name;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"contacts"</span>;</div></pre></td></tr></table></figure>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>静态方法也属于类，不属于实例。静态类只能访问类的静态变量或调用类的静态方法。通常静态方法作为工具方法，被其他类使用，而不需要创建类的实例。<br>静态方法如果没有使用静态变量，则是线程安全的。因为静态方法内部声明的变量，每个线程调用时都会重新创建一份，而不会共用同一个存储单元。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathUtils</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="静态块"><a href="#静态块" class="headerlink" title="静态块"></a>静态块</h2><p>静态块是类加载器加载对象时要执行的一组语句，它用于初始化静态变量，通常用于类加载的时候创建静态资源。我们在静态块中不能访问非静态变量。我们可以在一个类中有多个静态块，尽管这么做没什么意义，静态块只会在类加载到内存中的时候执行一次。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String str;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">new</span> FinalDemo();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="string">"静态块3"</span>);</div><div class="line">		<span class="comment">//仅能访问静态变量和静态方法</span></div><div class="line">		str = <span class="string">"Just"</span>;</div><div class="line">		add(<span class="number">3</span>,<span class="number">4</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="string">"静态块1"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FinalDemo</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"构造函数"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">静态块<span class="number">3</span></div><div class="line">静态块<span class="number">1</span></div><div class="line">构造函数</div></pre></td></tr></table></figure></p>
<blockquote>
<p>由运行结果可知：</p>
<ul>
<li>静态块最先加载，其次是构造函数；</li>
<li>有多个静态块时，按静态块顺序加载；</li>
<li>静态块内部代码按顺序运行;</li>
</ul>
</blockquote>
<h2 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h2><p>一般我们对嵌套类使用static关键字，static不能用于最外层的类。静态的嵌套类和其他外层的类别无区别，嵌套只是方便打包。</p>
<p>下面我们来看一个使用static关键字的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 静态变量</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String str;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"str: "</span> + str);</div><div class="line">		System.out.println(<span class="string">"add(3,4):"</span>+add(<span class="number">3</span>, <span class="number">4</span>));</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 静态方法</div><div class="line">	 * <span class="doctag">@param</span> x</div><div class="line">	 * <span class="doctag">@param</span> y</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> x + y;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 静态块</div><div class="line">	 */</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="string">"静态块3"</span>);</div><div class="line">		<span class="comment">//仅能访问静态变量和静态方法</span></div><div class="line">		str = <span class="string">"Test"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 静态类</div><div class="line">	 * TODO</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStaticClass</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getTag</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">//只能访问外部类的静态变量或方法</span></div><div class="line">			<span class="keyword">return</span> str;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果是：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">静态块<span class="number">3</span></div><div class="line">str: Test</div><div class="line"><span class="keyword">add</span><span class="bash">(3,4):7</span></div><div class="line">staticclass tag: Test</div></pre></td></tr></table></figure></p>
<h2 id="静态导包"><a href="#静态导包" class="headerlink" title="静态导包"></a>静态导包</h2><p>静态导包就是java包的静态导入，用import static静态导入包是JDK1.5引入的特性。<br>一般我们导入一个类都用import com.java…className；而静态导入是这样：<code>import static com.java..className.*</code>。这里多了static关键字，还有就是类名后面多了<code>.*</code>，意思是导入这个类里所有的静态方法。当然也可以只导入某个静态方法，只要把<code>.*</code>替换成静态方法名就行了。然后在这个类中，就可以直接调用方法名来调用静态方法，而不必用<code>ClassName.</code>方法名的方式来调用。</p>
<p>优点：<br>这种方法可以简化一些操作，例如打印System.out.println()，就可以将其导入一个静态方法，在使用时直接println()就可以了。下面通过代码来看看两种方式的导包:</p>
<p>普通导包:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalImport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        System.out.println(Integer.MAX_VALUE);</div><div class="line">        System.out.println(Integer.toHexString(<span class="number">42</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>静态导包:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticImport</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        out.println(MAX_VALUE);</div><div class="line">        out.println(toHexString(<span class="number">43</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>两个类的运行结果都是一样的。</p>
<p>静态导包的几条原则：</p>
<ul>
<li>必须是import static而不是static import</li>
<li>提防含糊不清的static成员。例如，如果对Integer类和Long类执行了静态导入，引用MAX_VALUE时将导致一个编译器错误，因为Integer和Long都有一个MAX_VALUE常量，并且Java不会知道你在引用哪个MAX_VALUE。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中final关键字详解]]></title>
      <url>http://liuguoquan727.github.io/2016/04/05/Java%E4%B8%ADfinal%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>Java开发中，我们常常见到final关键字，经常在使用匿名内部类的时候可能会经常用到final关键字。Java中的String类就是一个final类，下面我们就来详细了解一下final这个关键字的用法。</p>
<h2 id="final关键字的基本用法"><a href="#final关键字的基本用法" class="headerlink" title="final关键字的基本用法"></a>final关键字的基本用法</h2><p>Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。下面就从这三个方面来学习下final关键字的基本用法。</p>
<h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p>当final关键字修饰一个类时，表明这个类不能被继承。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/final-final%E4%BF%AE%E9%A5%B0%E7%B1%BB.png" alt=""></p>
<blockquote>
<p>在使用final修饰类的时候，要注意谨慎选择，除非这个类真的在以后不会用来继承或者是出于安全的考虑，尽量不要讲类设计为final类。</p>
</blockquote>
<h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><p>使用final关键字修饰方法的原因有两个：第一个原因是把方法锁定，以防止任何子类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用，但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升，不需要使用final方法进行这些优化。因此，如果想要禁止该方法在子类中被覆盖，那么久可以将该方法用final关键字修饰。</p>
<p>注：类的private方法会隐式地被指定为final方法。</p>
<h3 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h3><p>final修饰变量的基本语法：</p>
<ul>
<li>如果final修饰的是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；</li>
<li>如果final修饰的是引用类型的变量，则其初始化之后便不能再指向另一个对象；</li>
</ul>
<p>示例如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/final-final%E4%BF%AE%E9%A5%B0%E5%8F%98%E9%87%8F.png" alt=""></p>
<p>上面代码中，对变量i和obj的重新赋值都报错了。</p>
<h2 id="深入理解final关键字"><a href="#深入理解final关键字" class="headerlink" title="深入理解final关键字"></a>深入理解final关键字</h2><p>在了解final关键字的基本用法后，我们来看看final关键字容易混淆的地方。</p>
<h3 id="类的final变量和普通变量有什么区别？"><a href="#类的final变量和普通变量有什么区别？" class="headerlink" title="类的final变量和普通变量有什么区别？"></a>类的final变量和普通变量有什么区别？</h3><p>当用final作用于类的成员变量时，成员变量（注意是类的成员变量，局部变量只需要保证在使用之前被初始化赋值即可）必须在定义时或者构造器中进行初始化赋值，而且final变量一旦被初始化赋值之后，就不能再被赋值了。</p>
<p>final变量和普通变量到底有什么区别呢？先看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	</div><div class="line">	String a = <span class="string">"helloworld"</span>;</div><div class="line">	<span class="keyword">final</span> String b = <span class="string">"hello"</span>;</div><div class="line">	String c = <span class="string">"hello"</span>;</div><div class="line">	String d = b + <span class="string">"world"</span>;</div><div class="line">	String e = c + <span class="string">"world"</span>;</div><div class="line">	</div><div class="line">	System.out.println((a == d));</div><div class="line">	System.out.println((a == e));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>为什么第一个比较结果是true，而第二个比较结果为false？<br>这就是final变量和普变量的区别了，当final变量是基本数据类型以及String类型时，如果在编译期间能知道它的确切值，则编译器会把它当做编译器常量使用，也就是说用到该final变量的地方相当于直接访问这个常量，不需要在运行时确定。因此在上面的代码中，由于b被final修饰，因此会被当做编译器常量，所以在使用到b的地方会直接将变量b替换为它的值，而对于变量c的访问则在运行时通过链接来运行。要注意，只有在编译期间确切知道final变量值的情况下，编译器才会进行这样的优化，下面的这段代码就不会进行这样的优化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	</div><div class="line">	String a = <span class="string">"helloworld"</span>;</div><div class="line">	<span class="keyword">final</span> String b = getStr();</div><div class="line">	String c = <span class="string">"hello"</span>;</div><div class="line">	String d = b + <span class="string">"world"</span>;</div><div class="line">	String e = c + <span class="string">"world"</span>;</div><div class="line">	</div><div class="line">	System.out.println((a == d));</div><div class="line">	System.out.println((a == e));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"hell0"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果是：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">false</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h3 id="被final修饰的引用变量指向的对象内容可变吗？"><a href="#被final修饰的引用变量指向的对象内容可变吗？" class="headerlink" title="被final修饰的引用变量指向的对象内容可变吗？"></a>被final修饰的引用变量指向的对象内容可变吗？</h3><p>final修饰的引用变量一旦初始化赋值之后就不能再指向其他的对象，那么该引用变量指向的对象的内容可变吗？先看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">final</span> Person person = <span class="keyword">new</span> Person();</div><div class="line">		person.name = <span class="string">"liu"</span>;</div><div class="line">		person.age = <span class="number">27</span>;</div><div class="line">		System.out.println(person.toString());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String name = <span class="string">"zhang"</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">0</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Person</span> <span class="comment">[name=liu, age=27]</span></div></pre></td></tr></table></figure>
<blockquote>
<p>由运行结果可知，引用变量被final修饰之后，虽然不能再指向其他的对象，但是它指向的对象的内容是可变的。</p>
</blockquote>
<h3 id="final和static"><a href="#final和static" class="headerlink" title="final和static"></a>final和static</h3><p>我们经常容易把final和static关键字混淆，static作用于成员变量用来表示只保存一份副本，而final的作用是用来保证变量不可变。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		MyClass class1 = <span class="keyword">new</span> MyClass();</div><div class="line">		System.out.println(<span class="string">"i: "</span> + class1.i);</div><div class="line">		System.out.println(<span class="string">"j: "</span> + class1.j);</div><div class="line"></div><div class="line">		MyClass class2 = <span class="keyword">new</span> MyClass();</div><div class="line">		System.out.println(<span class="string">"i: "</span> + class2.i);</div><div class="line">		System.out.println(<span class="string">"j: "</span> + class2.j);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> i = Math.random();</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> j = Math.random();</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">i</span>: 0.6230804434703052</div><div class="line"><span class="attribute">j</span>: 0.8707443438720905</div><div class="line"></div><div class="line"><span class="avrasm"><span class="symbol">i:</span> <span class="number">0.6451393896255735</span></span></div><div class="line"><span class="symbol">j:</span> <span class="number">0.8707443438720905</span></div></pre></td></tr></table></figure>
<p>从结果可知，每次打印的i值不同，而j值都是一样的。从这里口可以知道final和static的区别了。</p>
<h3 id="匿名内部类中使用的外部局部变量为什么只能是final变量？"><a href="#匿名内部类中使用的外部局部变量为什么只能是final变量？" class="headerlink" title="匿名内部类中使用的外部局部变量为什么只能是final变量？"></a>匿名内部类中使用的外部局部变量为什么只能是final变量？</h3><p>保证数据的一致性。Java编译器限定必须将外部局部变量限制为final变量，不允许对外部局部变量进行更改（对应引用类型的变量，是不允许指向新的对象），这样就保证了数据的一致性。</p>
<h3 id="关于final参数的问题"><a href="#关于final参数的问题" class="headerlink" title="关于final参数的问题"></a>关于final参数的问题</h3><p>关于网上流传的“当你在方法中不需要改变作为参数的对象变量时，明确使用final进行声明，会防止你无意的修改而影响到调用方法外的变量”，这句话其实是不恰当的。<br>因为无论参数是基本数据类型的变量还是引用类型的变量，使用final声明都不会达到上面所说的效果。</p>
<p>下面看例子：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/final-final%E4%BF%AE%E9%A5%B0%E5%8F%82%E6%95%B0.png" alt=""></p>
<p>上面的代码像是让人觉得final修饰之后，就不能在方法中更改变量i的值了。殊不知，方法changValue和main方法中的变量i根本就不是一个变量，因为对于基本类型的变量，Java参数传递采用的是值传递，相当于直接将变量进行了拷贝，所以即使没有final修饰的情况下，在方法内部改变了变量i的值也不会影响方法外的i。</p>
<p>再看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		MyClass myClass = <span class="keyword">new</span> MyClass();</div><div class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">"hello"</span>);</div><div class="line">		myClass.changValue(buffer);</div><div class="line">		System.out.println(buffer.toString());</div><div class="line">		myClass.changValue2(buffer);</div><div class="line">		System.out.println(buffer.toString());</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">		</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changValue</span><span class="params">(<span class="keyword">final</span> StringBuffer buffer)</span> </span>&#123;</div><div class="line">		buffer.append(<span class="string">"world"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changValue2</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</div><div class="line">		StringBuffer buffer2 = buffer;</div><div class="line">		buffer2.append(<span class="string">"你好"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果是：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">helloworld</span></div><div class="line">helloworld你好</div></pre></td></tr></table></figure>
<p>由结果可知，很显然，用final进行修饰参数和不修饰参数都没有阻止在changeValue中改变buffer指向的对象的内容。原因在对于引用数据类型，Java采用的是按引用传递，传递的是引用的地址，也就是变量所对象的内存空间的地址。在这里形参和实参指向的是同一个对象，因此让形参重新指向另一个对象对实参并没有任何影响。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android动画之Interpolator]]></title>
      <url>http://liuguoquan727.github.io/2016/03/31/Android%E5%8A%A8%E7%94%BB%E4%B9%8BInterpolator/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Interpolator可以翻译成插值器。Android中interpolator的最底层接口如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.animation;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 时间插值器定义了一个动画的变化率。</div><div class="line"> * 这让动画让非线性的移动轨迹，例如加速和减速。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * A time interpolator defines the rate of change of an animation. This allows animations</div><div class="line"> * to have non-linear motion, such as acceleration and deceleration.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeInterpolator</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将动画已经消耗的时间的分数映射到一个表示插值的分数。</div><div class="line">     * 然后将插值与动画的变化值相乘来推导出当前已经过去的动画时间的动画变化量。</div><div class="line">     * &lt;hr/&gt;</div><div class="line">     * Maps a value representing the elapsed fraction of an animation to a value that represents</div><div class="line">     * the interpolated fraction. This interpolated value is then multiplied by the change in</div><div class="line">     * value of an animation to derive the animated value at the current elapsed animation time.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> input  一个0到1.0表示动画当前点的值，0表示开头。1表示结尾&lt;br/&gt; A value between 0 and 1.0 indicating our current point</div><div class="line">     *        in the animation where 0 represents the start and 1.0 represents</div><div class="line">     *        the end</div><div class="line">     * <span class="doctag">@return</span>   插值。它的值可以大于1来超出目标值，也小于0来空破底线。</div><div class="line">     *         interpolators which overshoot their targets, or less than 0 for</div><div class="line">     *         interpolators that undershoot their targets.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>TimeInterpolator是在Android API11加入，之前的类叫Interpolator。现在Interpolator继承了TimeInterpolator</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.animation.TimeInterpolator;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 一个定义动画变化率的插值器。</div><div class="line"> * 它允许对基本的（如透明，缩放，平移，旋转）进行加速，减速，重复等动画效果</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator defines the rate of change of an animation. This allows</div><div class="line"> * the basic animation effects (alpha, scale, translate, rotate) to be</div><div class="line"> * accelerated, decelerated, repeated, etc.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interpolator</span> <span class="keyword">extends</span> <span class="title">TimeInterpolator</span> </span>&#123;</div><div class="line">    <span class="comment">// A new interface, TimeInterpolator, was introduced for the new android.animation</span></div><div class="line">    <span class="comment">// package. This older Interpolator interface extends TimeInterpolator so that users of</span></div><div class="line">    <span class="comment">// the new Animator-based animations can use either the old Interpolator implementations or</span></div><div class="line">    <span class="comment">// new classes that implement TimeInterpolator directly.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插值器分析"><a href="#插值器分析" class="headerlink" title="插值器分析"></a>插值器分析</h2><h3 id="AccelerateInterpolator-加速插值器"><a href="#AccelerateInterpolator-加速插值器" class="headerlink" title="AccelerateInterpolator  加速插值器"></a>AccelerateInterpolator  加速插值器</h3><p>效果：在动画开始的地方速率改变比较慢，然后开始加速</p>
<p>源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 一个开始很慢然后不断加速的插值器。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the rate of change starts out slowly and</div><div class="line"> * and then accelerates.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccelerateInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mFactor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mDoubleFactor;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        mFactor = <span class="number">1.0f</span>;</div><div class="line">        mDoubleFactor = <span class="number">2.0</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> factor </div><div class="line">     *     动画的快慢度。将factor设置为1.0f会产生一条y=x^2的抛物线。</div><div class="line">增加factor到1.0f之后为加大这种渐入效果（也就是说它开头更加慢，结尾更加快）</div><div class="line">     *   &lt;br/&gt;Degree to which the animation should be eased. Seting</div><div class="line">     *        factor to 1.0f produces a y=x^2 parabola（抛物线）. Increasing factor above</div><div class="line">     *        1.0f  exaggerates the ease-in effect (i.e., it starts even</div><div class="line">     *        slower and ends evens faster)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateInterpolator</span><span class="params">(<span class="keyword">float</span> factor)</span> </span>&#123;</div><div class="line">        mFactor = factor;</div><div class="line">        mDoubleFactor = <span class="number">2</span> * mFactor;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a =</div><div class="line">                context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.AccelerateInterpolator);</div><div class="line"> </div><div class="line">        mFactor = a.getFloat(com.android.internal.R.styleable.AccelerateInterpolator_factor, <span class="number">1.0f</span>);</div><div class="line">        mDoubleFactor = <span class="number">2</span> * mFactor;</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mFactor == <span class="number">1.0f</span>) &#123;</div><div class="line">            <span class="keyword">return</span> input * input;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">float</span>)Math.pow(input, mDoubleFactor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法可知加速度的大小由参数mFactor决定。<br>当mFactor值为1.0f时，动画加速轨迹相对于一条y=x^2的抛物线。如下图</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AccelerateInterpolator_1.png" alt=""></p>
<p>当mFactor不为1时，轨迹曲线是y=x^(2 * mFactor)(0 &lt; x &lt;= 1)的曲线。<br>示例：当mFractor为4时，插值器的加速轨迹曲线如下图:</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AccelerateInterpolator_2.png" alt=""></p>
<p>如果你在使用AccelerateInterpolator，想要那种一开始很慢，然后突然就很快的加速的动画效果的话，就将mFractor的值设置大点。</p>
<h3 id="DecelerateInterpolator减速插值器"><a href="#DecelerateInterpolator减速插值器" class="headerlink" title="DecelerateInterpolator减速插值器"></a>DecelerateInterpolator减速插值器</h3><p>效果：在动画开始的地方速率改变比较慢，然后开始加速</p>
<p>源代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个开始比较快然后减速的插值器</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the rate of change starts out quickly and</div><div class="line"> * and then decelerates.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecelerateInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecelerateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructor</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> factor</div><div class="line">     *        动画的快慢度。将factor值设置为1.0f时将产生一条从上向下的y=x^2抛物线。</div><div class="line">     *        增加factor到1.0f以上将使渐入的效果增强（也就是说，开头更快，结尾更慢）</div><div class="line">     *        &lt;br/&gt;</div><div class="line">     *        Degree to which the animation should be eased. Setting factor to 1.0f produces</div><div class="line">     *        an upside-down y=x^2 parabola. Increasing factor above 1.0f makes exaggerates the</div><div class="line">     *        ease-out effect (i.e., it starts even faster and ends evens slower)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecelerateInterpolator</span><span class="params">(<span class="keyword">float</span> factor)</span> </span>&#123;</div><div class="line">        mFactor = factor;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecelerateInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a =</div><div class="line">                context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.DecelerateInterpolator);</div><div class="line"> </div><div class="line">        mFactor = a.getFloat(com.android.internal.R.styleable.DecelerateInterpolator_factor, <span class="number">1.0f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> result;</div><div class="line">        <span class="keyword">if</span> (mFactor == <span class="number">1.0f</span>) &#123;</div><div class="line">            result = (<span class="number">1.0f</span> - ((<span class="number">1.0f</span> - input) * (<span class="number">1.0f</span> - input)));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result = (<span class="keyword">float</span>)(<span class="number">1.0f</span> - Math.pow((<span class="number">1.0f</span> - input), <span class="number">2</span> * mFactor));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mFactor = <span class="number">1.0f</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法可知加速度的大小由参数mFactor决定。<br>当mFactor为1.0f时，它减速的轨迹函数为y=1-(1 - X)^2;如下图</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-DecelerateInterpolator_1.png" alt=""></p>
<p>当mFactor不为1.0f时，它减速的轨迹函数为:y=1.0 - (1.0 -x )^(2 * mFactor)。<br>当mFactor增大到4时，曲线轨迹如下图所示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-DecelerateInterpolator_2.png" alt=""></p>
<h3 id="AccelerateDecelerateInterpolator-加速减速插值器"><a href="#AccelerateDecelerateInterpolator-加速减速插值器" class="headerlink" title="AccelerateDecelerateInterpolator  加速减速插值器"></a>AccelerateDecelerateInterpolator  加速减速插值器</h3><p>效果：动画开始与结束的地方速率改变比较慢，在中间的时候加速</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个变化率开始慢从中间后开始变快。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the rate of change starts and ends slowly but</div><div class="line"> * accelerates through the middle.</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccelerateDecelerateInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateDecelerateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccelerateDecelerateInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)(Math.cos((input + <span class="number">1</span>) * Math.PI) / <span class="number">2.0f</span>) + <span class="number">0.5f</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法可以得出其变化曲线如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AccelerateDecelerateInterpolator.png" alt=""></p>
<h3 id="LinearInterpolator-线性插值器"><a href="#LinearInterpolator-线性插值器" class="headerlink" title="LinearInterpolator 线性插值器"></a>LinearInterpolator 线性插值器</h3><p>效果:动画按常速率变化</p>
<p>源代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * An interpolator where the rate of change is constant</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> input;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BounceInterpolator-弹跳插值器"><a href="#BounceInterpolator-弹跳插值器" class="headerlink" title="BounceInterpolator 弹跳插值器"></a>BounceInterpolator 弹跳插值器</h3><p>效果:动画结束的时候弹起</p>
<p>源代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个插值器的插值在后面呈弹跳状态。</div><div class="line"> * An interpolator where the change bounces at the end.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BounceInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BounceInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BounceInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">bounce</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t * t * <span class="number">8.0f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="comment">// _b(t) = t * t * 8</span></div><div class="line">        <span class="comment">// bs(t) = _b(t) for t &lt; 0.3535</span></div><div class="line">        <span class="comment">// bs(t) = _b(t - 0.54719) + 0.7 for t &lt; 0.7408</span></div><div class="line">        <span class="comment">// bs(t) = _b(t - 0.8526) + 0.9 for t &lt; 0.9644</span></div><div class="line">        <span class="comment">// bs(t) = _b(t - 1.0435) + 0.95 for t &lt;= 1.0</span></div><div class="line">        <span class="comment">// b(t) = bs(t * 1.1226)</span></div><div class="line">        t *= <span class="number">1.1226f</span>;</div><div class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0.3535f</span>) <span class="keyword">return</span> bounce(t);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0.7408f</span>) <span class="keyword">return</span> bounce(t - <span class="number">0.54719f</span>) + <span class="number">0.7f</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0.9644f</span>) <span class="keyword">return</span> bounce(t - <span class="number">0.8526f</span>) + <span class="number">0.9f</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> bounce(t - <span class="number">1.0435f</span>) + <span class="number">0.95f</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法得到以下插值曲线图：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-BounceInterpolator.png" alt=""></p>
<h3 id="AnticipateInterpolator-回荡秋千插值器"><a href="#AnticipateInterpolator-回荡秋千插值器" class="headerlink" title="AnticipateInterpolator 回荡秋千插值器"></a>AnticipateInterpolator 回荡秋千插值器</h3><p>效果：开始的时候向后，然后向前甩</p>
<p>源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个开始向后荡，然后向前荡的插值器。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the change starts backward then flings forward.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnticipateInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mTension;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTension = <span class="number">2.0f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> tension </div><div class="line">     *  绷紧程度，当绷紧程序为0.0f时，也就没有了反向作用力。插值器将退化成一个y=x^3的加速插值器。</div><div class="line">     * &lt;br/&gt;</div><div class="line">     * Amount of anticipation. When tension equals 0.0f, there is</div><div class="line">     *                no anticipation and the interpolator becomes a simple</div><div class="line">     *                acceleration interpolator.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateInterpolator</span><span class="params">(<span class="keyword">float</span> tension)</span> </span>&#123;</div><div class="line">        mTension = tension;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs,</div><div class="line">                com.android.internal.R.styleable.AnticipateInterpolator);</div><div class="line"> </div><div class="line">        mTension =</div><div class="line">                a.getFloat(com.android.internal.R.styleable.AnticipateInterpolator_tension, <span class="number">2.0f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="comment">// a(t) = t * t * ((tension + 1) * t - tension)</span></div><div class="line">        <span class="keyword">return</span> t * t * (((mTension + <span class="number">1</span>) * t) - mTension);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据getInterpolation方法：</p>
<p>当tension为默认值2时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AnticipateInterpolator_1.png" alt=""></p>
<p>当tension为4时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AnticipateInterpolator_2.png" alt=""></p>
<h3 id="AnticipateOvershootInterpolator"><a href="#AnticipateOvershootInterpolator" class="headerlink" title="AnticipateOvershootInterpolator"></a>AnticipateOvershootInterpolator</h3><p>效果：开始的时候向后，然后向前甩一定值后 返回最后的值</p>
<p>源代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个插值器它开始向上推，然后向下荡，荡过最低线。然后再回到最低线。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * An interpolator where the change starts backward then flings forward and overshoots</div><div class="line"> * the target value and finally goes back to the final value.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnticipateOvershootInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mTension;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateOvershootInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTension = <span class="number">2.0f</span> * <span class="number">1.5f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> tension </div><div class="line">     *  anticipation/overshoot的比值。当和tension值为0.0f时，</div><div class="line">     *  也就没有anticipation/overshoot的比值了，插值器退化为一个加速/减速插值器。</div><div class="line">     *  &lt;br/&gt;</div><div class="line">     * Amount of anticipation/overshoot. When tension equals 0.0f,</div><div class="line">     *                there is no anticipation/overshoot and the interpolator becomes</div><div class="line">     *                a simple acceleration/deceleration interpolator.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateOvershootInterpolator</span><span class="params">(<span class="keyword">float</span> tension)</span> </span>&#123;</div><div class="line">        mTension = tension * <span class="number">1.5f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> tension Amount of anticipation/overshoot. When tension equals 0.0f,</div><div class="line">     *                there is no anticipation/overshoot and the interpolator becomes</div><div class="line">     *                a simple acceleration/deceleration interpolator.</div><div class="line">     * <span class="doctag">@param</span> extraTension </div><div class="line">     * 乘以tension的值。例如，在上面构造函数中extraTension的值为1.5f</div><div class="line">     * &lt;br/&gt;</div><div class="line">     * Amount by which to multiply the tension. For instance,</div><div class="line">     *                     to get the same overshoot as an OvershootInterpolator with</div><div class="line">     *                     a tension of 2.0f, you would use an extraTension of 1.5f.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateOvershootInterpolator</span><span class="params">(<span class="keyword">float</span> tension, <span class="keyword">float</span> extraTension)</span> </span>&#123;</div><div class="line">        mTension = tension * extraTension;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnticipateOvershootInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, AnticipateOvershootInterpolator);</div><div class="line"> </div><div class="line">        mTension = a.getFloat(AnticipateOvershootInterpolator_tension, <span class="number">2.0f</span>) *</div><div class="line">                a.getFloat(AnticipateOvershootInterpolator_extraTension, <span class="number">1.5f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">a</span><span class="params">(<span class="keyword">float</span> t, <span class="keyword">float</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t * t * (((s + <span class="number">1</span>) * t) - s);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">o</span><span class="params">(<span class="keyword">float</span> t, <span class="keyword">float</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t * t * (((s + <span class="number">1</span>) * t) + s);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="comment">// a(t, s) = t * t * ((s + 1) * t - s)</span></div><div class="line">                <span class="comment">// o(t, s) = t * t * ((s + 1) * t + s)</span></div><div class="line">        <span class="comment">// f(t) = 0.5 * a(t * 2, tension * extraTension), when t &lt; 0.5</span></div><div class="line">        <span class="comment">// f(t) = 0.5 * (o(t * 2 - 2, tension * extraTension) + 2), when t &lt;= 1.0</span></div><div class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0.5f</span>) <span class="keyword">return</span> <span class="number">0.5f</span> * a(t * <span class="number">2.0f</span>, mTension);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0.5f</span> * (o((t * <span class="number">2.0f</span>) - <span class="number">2.0f</span>, mTension) + <span class="number">2.0f</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当tension为默认值时，曲线图为：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-AnticipateOvershootInterpolator.png" alt=""></p>
<h3 id="CycleInterpolator-正弦周期变化插值器"><a href="#CycleInterpolator-正弦周期变化插值器" class="headerlink" title="CycleInterpolator 正弦周期变化插值器"></a>CycleInterpolator 正弦周期变化插值器</h3><p> 效果：动画循环播放特定的次数，速率改变沿着正弦曲线</p>
<p>源代码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 以指定的周期重复动画。变化率曲线为正弦。</div><div class="line"> * &lt;hr/&gt;</div><div class="line"> * Repeats the animation for a specified number of cycles（周期）. The</div><div class="line"> * rate of change follows a sinusoidal（正弦） pattern.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CycleInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> cycles 要重复的周期数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CycleInterpolator</span><span class="params">(<span class="keyword">float</span> cycles)</span> </span>&#123;</div><div class="line">        mCycles = cycles;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CycleInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a =</div><div class="line">                context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.CycleInterpolator);</div><div class="line"> </div><div class="line">        mCycles = a.getFloat(com.android.internal.R.styleable.CycleInterpolator_cycles, <span class="number">1.0f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)(Math.sin(<span class="number">2</span> * mCycles * Math.PI * input));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCycles;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当cycle值为1时，即变化一周时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-CycleInterpolator%20png.png" alt=""></p>
<h3 id="OvershootInterpolator"><a href="#OvershootInterpolator" class="headerlink" title="OvershootInterpolator"></a>OvershootInterpolator</h3><p>效果：向前甩一定值后再回到原来位置</p>
<p>源代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.view.animation;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * An interpolator where the change flings forward and overshoots the last value</div><div class="line"> * then comes back.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OvershootInterpolator</span> <span class="keyword">implements</span> <span class="title">Interpolator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mTension;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OvershootInterpolator</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTension = <span class="number">2.0f</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> tension Amount of overshoot. When tension equals 0.0f, there is</div><div class="line">     *                no overshoot and the interpolator becomes a simple</div><div class="line">     *                deceleration interpolator.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OvershootInterpolator</span><span class="params">(<span class="keyword">float</span> tension)</span> </span>&#123;</div><div class="line">        mTension = tension;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OvershootInterpolator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs,</div><div class="line">                com.android.internal.R.styleable.OvershootInterpolator);</div><div class="line"> </div><div class="line">        mTension =</div><div class="line">                a.getFloat(com.android.internal.R.styleable.OvershootInterpolator_tension, <span class="number">2.0f</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">        <span class="comment">// _o(t) = t * t * ((tension + 1) * t + tension)</span></div><div class="line">        <span class="comment">// o(t) = _o(t - 1) + 1</span></div><div class="line">        t -= <span class="number">1.0f</span>;</div><div class="line">        <span class="keyword">return</span> (t * t * (((mTension + <span class="number">1</span>) * t) + mTension)) + <span class="number">1.0f</span>;</div><div class="line">        <span class="comment">//plot &#123;(x-1)(x-1)((tension+1)(x-1)+tension)+1,(0&lt;x&lt;=1)&#125;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当tension为默认值2时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-OvershootInterpolator%20_1.png" alt=""></p>
<p>当tension的值为4时，曲线图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Interpolator-OvershootInterpolator_3.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书札记]]></title>
      <url>http://liuguoquan727.github.io/2016/03/18/%E8%AF%BB%E4%B9%A6%E6%9C%AD%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>There is always another way.</p>
<p>You know, people get up everyday, do the same thing, they tell themselves they change their life one day, they never do. I am gonna change my life. —-《城中大盗》</p>
<p>思考的时候，要像外行一样单纯直接，实践的时候则要像专家一样严密细致，并且要以专业知识和方法武装起来的“我做得到”的乐观精神。要记住，独特的、好的创意和好的结果，不管对研究而言，还是对商业运作而言，都不是自己突然冒出来的东西，那一定是刻苦的努力和长期的思考带来的。 —-金出武雄</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客开通记]]></title>
      <url>http://liuguoquan727.github.io/2016/03/15/%E5%8D%9A%E5%AE%A2%E5%BC%80%E9%80%9A/</url>
      <content type="html"><![CDATA[<p>折腾了大半天，终于搭建好自己的个人博客，使用的是Hexo和Github Pages，博客简洁大方，以后就借此平台分享自己的生活。最后感谢Hexo的作者。</p>
<p>纵浪大化中，不喜亦不惧。<br>应尽便须尽，无复独多虑。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象编程之依赖倒置原则]]></title>
      <url>http://liuguoquan727.github.io/2016/03/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>依赖倒置原则英文全称是Dependence Inversion Principle，缩写是DIP。依赖倒置原则指代了一种特定解耦形式，使得高层次的模块不依赖于低层次的模块的实现细节的目的，依赖模块被颠倒了。这到底是什么意思呢？</p>
<p>依赖倒置原则则有以下关键点：</p>
<ul>
<li>高层模块不应该依赖底层模块，两者都应该依赖其抽象；</li>
<li>抽象不应该依赖细节。</li>
<li>细节应该依赖抽象。</li>
</ul>
<p>在Java语言中，抽象就是指接口或抽象类，两者都是不能直接被实例化的；细节就是实现类，实现接口或者继承抽象类而产生的类就是细节，其特点就是，可以直接被实例化，也就是可以加上关键字new产生的对象。<strong>高层模块就是调用端，底层模块就是具体实现类。</strong></p>
<p>依赖倒置原则在Java语言中的表现就是：模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或者抽象类产生的。概况为一句话就是：面向接口编程，或者说是面向抽象编程，这里的抽象只得就是接口或抽象类。面向接口是面向对象的精髓之一。</p>
<p>如果类与类直接依赖于细节，那么他们之间就有直接的耦合，当具体实现需要变化时，意味着需要同时修改依赖者的代码，这限制了系统的可扩展性。</p>
<p>在前面的面向对象编程之开闭原则这一节中，ImageLoader直接依赖于MemoryCache，这个MemoryCache事一个具体实现，而不是一个抽象类或者接口。这就导致了ImageLoader直接依赖了具体的细节，当MemoryCache不能满足ImageLoader而需要被其他缓存实现替换时，此时就必须修改ImageLoader的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    MemoryCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =   mMemoryCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		dowloadImage(url,imageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>随着产品的升级，用户发现MemoryCache以及不能满足需求，用户需要小民的ImageLoader可以将图片同时缓存到内存和SD卡中，或者可以让用户自定义实现缓存。此时，我们的 MemoryCache这个类名不仅不能够表达内存缓存和SD卡缓存的意义，也不能满足功能。另外，用户需要自定义缓存实现时还必须继承自MemoryCache，而用户的缓存实现可不一定与内存缓存有关，这在命名上的限制也让用户体验不好。重构的时候到了！第一种方案是将MemoryCache修改为DoubleCache，然后在DoubleCache中实现具体的缓存功能。我们需要将ImageLoader修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    DoubleCache mDoubleCache = <span class="keyword">new</span> DoubleCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =   mDoubleCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		dowloadImage(url,imageView);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在程序中我们将MemoryCache修改成DoubleCache，然后修改了ImageLoader中缓存类的具体实现，轻轻松松就满足了用户需求。这不还是依赖具体的实现类吗？当用户的需求发生变化时，我们又要通过修改缓存实现类和ImageLoader代码来实现？</p>
<p>针对这些问题，给出的解决方案就要能够让缓存系统更加灵活。一句话概括起来就是：依赖抽象，而不是依赖具体实现。针对图片缓存，建立ImageCache抽象（开闭原则小节所述），该抽象增加了get和put方法用以实现图片的存取。每种缓存实现都必须实现这个接口，并且实现自己的存取方法。当用户需要使用不同的缓存实现时，直接通过依赖注入即可，保证了系统的灵活性。我们来回顾一下相关代码：</p>
<p>ImageCache缓存接口类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 缓存图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ImageLoader类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    ImageCache mImageCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注入缓存实现</div><div class="line">     * <span class="doctag">@param</span> cache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIamgeCache</span><span class="params">(ImageCache cache)</span> </span>&#123;</div><div class="line">        mImageCache = cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =   mImageCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		dowloadImage(url,imageView);</div></pre></td></tr></table></figure>
<p>在这里，我们建立了ImageCache抽象类，并且让ImageLoader依赖于抽象而不是具体细节。当需求发生变化时，只要实现ImageCache类或者继承其他已有的ImageCache子类完成相应的缓存功能，然后将具体的实现类注入到ImageLoader即可实现缓存功能的替换，这就保证的缓存系统的高可扩展性，有了拥抱变化的能力，这就是依赖倒置原则。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象编程之里氏替换原则]]></title>
      <url>http://liuguoquan727.github.io/2016/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>里氏替换原则的英文全称是Liskov Substitution Principle，缩写是LSP。</p>
<p>LSP第一种定义是：如果对每一个类型的为S的对象O1，都有类型为T的对象O2，使得以T定义的所有程序P在所有对象O1都替换成O2时，程序P的行为不会发生变化，那么类型S是类型T的子类型。这不太好理解。</p>
<p>LSP的第二种定义是：所有引用基类的地方必须能透明地使用其子类的对象。通俗的讲就是：只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或者异常，使用者可能根本就不需要知道是父类还是子类，但是，反过来就不行了，有子类出现的地方，父类未必就能适应。因为子类有的东西父类不一定有。</p>
<p>说了这么多，最终总结就两个字：抽象。为了便于理解这个原则，我们写了一个简单示例来描述，先看UML图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-55a69a62200a6871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="里氏替换原则UML图"></p>
<p>再来看看具体的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 窗口类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span>  </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">show</span><span class="params">(View chile)</span> </span>&#123;</div><div class="line">        chile.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 建立视图抽象，测量视图的宽高为公用代码，绘制实现交给具体的子类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> width,<span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Button的具体实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//绘制Button</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * TextView的具体实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//绘制TextV</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述示例中，Window依赖于View，而View定义了一个视图抽象，measure是各个子类共享的方法，子类通过覆写View的draw方法实现各自的功能。任何继承自View的子类都可以设置给Window的show方法，这就是里氏替换原则。通过里氏替换，就可以自定义各自各样的view，然后传递个Window，Window负责组织view，并且将View显示到屏幕上。</p>
<p>里氏替换原则的核心是抽象，抽象又依赖于继承这个特性，在OOP当中，继承的优缺点都相当的明显。优点为：</p>
<ul>
<li>代码重用，减少创建的成本，每个子类拥有父类的方法和属性</li>
<li>子类和父类基本相似，但又与父类有所区别</li>
<li>提高代码的可扩展性,实现父类的方法就可以了，很多开源框架的扩展接口都是通过继承父类完成的。</li>
<li>提高产品或项目的开放性。</li>
</ul>
<p>继承的缺点：</p>
<ul>
<li>继承是侵入性的，只要继承就必须拥有父类的所有属性和方法</li>
<li>可能造成子类代码冗余、灵活性降低，因为子类必须拥有父类的属性和方法</li>
<li>增强了耦合性。当父类的常量、变量和方法被修改时，必须考虑子类的修改，而且在缺乏规范的环境下，这种修好可能带来非常糟糕的结果—大片的代码需要重构。</li>
</ul>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a><strong>结束</strong></h2><p>开闭原则中的示例图片缓存系统也很好地反应了里氏替换原则，即MemoryCache、DiskCache、DoubleCache都可以替换成ImageCache的工作，并保证行为的正确性。实际中，开闭原则和里氏替换原则往往是相互关联的，通过里氏替换来达到扩展开放、修改关闭的效果。然而，这两个原则都强调一个OOP的重要特性–抽象。</p>
<h2 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a><strong>参考书籍</strong></h2><p>《Android源码设计模式》 何红辉、关爱民著</p>
<p>March 17, 2016 11:48 PM</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象编程之开闭原则]]></title>
      <url>http://liuguoquan727.github.io/2016/03/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>开闭原则的英文全称是Open Close Principle，缩写是OCP，它是Java世界里最基础的设计原则，它指导我们如何建立一个稳定的、灵活的系统。开闭原则的定义是：软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是对于修改是封闭的。</p>
<p>勃兰特-梅耶在1988年出版的《面向对象软件构造》一书中提出这一原则—开闭原则。这一想法认为，程序一旦开发完成，程序中一个类的实现只应该因错误而被修改，新的或者改变的特性应该通过新建不同的类实现，新建的类可以通过继承的方式来重用原类的代码。显然梅耶的定义提倡实现继承，已存在的实现类对于修改时封闭的，但是新的类可以通过覆写父类的接口应对变化。</p>
<h2 id="引入其他缓存方式"><a href="#引入其他缓存方式" class="headerlink" title="引入其他缓存方式"></a><strong>引入其他缓存方式</strong></h2><p>说了这么多，下面还是以一个简单示例来说明开闭原则：</p>
<p>在对ImageLoader进行了一次重构之后的ImageLoader职责单一、结构清晰，算是个不错的开始。随着用户的增多，有些问题开始暴露出来：缓存系统是最让大家吐槽的地方，通过内存缓存解决了每次从网络加载图片的问题，但是，Android应用的内存很有限，且具有易失性，即当应用重新启动之后，原来已经加载过的图片将会丢失，这样重启之后及需要重新下载图片！而这又会导致加载缓慢、耗费用户流量的问题。针对以上问题考虑引入<strong>SD卡缓存</strong>，这样下载过的图片就会缓存到本地，即使重启应用也不需要重新下载了，接下来开始实现SD卡缓存。</p>
<p>DiskCache.java类，将图片缓存到SD卡中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.ocp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * SD卡图片缓存</div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_DIR = <span class="string">"/sdcard/cache/"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从缓存中获取图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeFile(CACHE_DIR + url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将图片存入SD卡中</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url,Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">        FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            out = <span class="keyword">new</span> FileOutputStream(CACHE_DIR + url);</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG,<span class="number">100</span>,out);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    out.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MemoryCache类，把图片缓存到内存中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.ocp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.util.LruCache;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理图片缓存</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemoryCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initImageCache</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//计算可使用的最大内存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">        <span class="comment">//取内存的四分之一作为缓存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">4</span>;</div><div class="line"></div><div class="line">        mImageCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将图片存入缓存</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key,Bitmap bitmap)</span> </span>&#123;</div><div class="line">        mImageCache.put(key,bitmap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 取出缓存图片</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mImageCache.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为需要将图片缓存到SD卡中，所有ImageLoader代码有所更新，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    MemoryCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SD卡缓存</div><div class="line">     */</div><div class="line">    DiskCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否使用SD卡缓存</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isUseDiskCache = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =  isUseDiskCache ? mDiskCache.get(url) :  mMemoryCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//没有缓存则提交线程池下载</span></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//将下载的图片存入内存</span></div><div class="line">                mMemoryCache.put(url,bitmap);</div><div class="line">                mDiskCache.put(url,bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置是否用SD卡缓存</div><div class="line">     * <span class="doctag">@param</span> isUseDiskCache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDiskCache</span><span class="params">(<span class="keyword">boolean</span> isUseDiskCache)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isUseDiskCache = isUseDiskCache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上述的代码中可以看到，仅仅新增了一个DiskCache类和往ImageLoader类中加入了少量代码就添加了SD卡缓存的功能，用户可以通过useDiskCache方法来对使用哪种缓存进行设置，例如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ImageLoader mImageLoader = <span class="keyword">new</span> ImageLoader();</div><div class="line"><span class="comment">//使用SD卡缓存</span></div><div class="line">mImageLoader.useDiskCache(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//使用内存缓存</span></div><div class="line">mImageLoader.useDisCache(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>通过useDiskCache方法来让用户设置不同的缓存这个思路是对的，但是会有些明显的问题，就是使用内存缓存时用户不能使用SD卡缓存。类似地，使用SD卡缓存时用户就不能使用内存缓存。</p>
<p>实际上，用户需要这两种缓存的综合，首先缓存优先使用内存缓存，如果内存缓存没有图片再使用SD卡缓存，如果SD卡中也没有图片最后才从网络上获取，这才是最好的缓存策略。</p>
<p>接下来，我们继续重构，新建一个双缓冲类DoubleCache，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.ocp;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 双缓冲。获取图片时先从内存中获取，如果内存中没有缓存该图片，再从SD卡中获取</div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCache</span> </span>&#123;</div><div class="line"></div><div class="line">    MemoryCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line">    DiskCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 先从内存获取图片，没有再从SD卡获取</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将图片缓存到内存和SD卡中</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">        mDiskCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们再来看看最新的ImageLoader类，代码更新也不多：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    MemoryCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SD卡缓存</div><div class="line">     */</div><div class="line">    DiskCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line">    <span class="comment">//双缓存</span></div><div class="line">    DoubleCache mDoubleCache = <span class="keyword">new</span> DoubleCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否使用SD卡缓存</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isUseDiskCache = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">//使用双缓存</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isUseDoubleCache = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断使用哪种缓存</span></div><div class="line">        Bitmap bitmap =  <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (isUseDoubleCache) &#123;</div><div class="line">            bitmap = mDoubleCache.get(url);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUseDiskCache) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bitmap = mMemoryCache.get(url);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//没有缓存则提交线程池下载</span></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//将下载的图片存入内存</span></div><div class="line">                mMemoryCache.put(url,bitmap);</div><div class="line">                mDiskCache.put(url,bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置是否用SD卡缓存</div><div class="line">     * <span class="doctag">@param</span> isUseDiskCache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDiskCache</span><span class="params">(<span class="keyword">boolean</span> isUseDiskCache)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.isUseDiskCache = isUseDiskCache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置是否使用双缓存</div><div class="line">     * <span class="doctag">@param</span> isUseDoubleCache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDoubleCache</span><span class="params">(<span class="keyword">boolean</span> isUseDoubleCache)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.isUseDoubleCache = isUseDoubleCache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时程序越来越灵活了，通过增加短短几行代码就能够完成如此重要的功能。</p>
<p>人们总会把美好的事情讲在前面，最后给你来个“但是”，我们先来分析一下上面的程序：每次在程序中加入新的缓存实现都需要修改ImageLoader类，然后通过一个布尔类型的变量来让用户选择使用哪种缓存，因此，就使得ImageLoader中存在各种if-else判断语句，通过这些判断语句来确定使用哪种缓存。随着大量逻辑的引用，代码变得越来越复杂脆弱，如果一不小心写错某个if条件，势必会花费大量的时间去调试程序，整个ImageLoader类也会显得臃肿。最重要的是，用户不能自己实现缓存注入到ImageLoader类中，可扩展性较差，而可扩展性是框架的最重要的特性之一。</p>
<h2 id="注入方式设置缓存方式"><a href="#注入方式设置缓存方式" class="headerlink" title="注入方式设置缓存方式"></a><strong>注入方式设置缓存方式</strong></h2><p>“软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是对于修改则是封闭的，这就是开放-关闭原则。也就是说，我们应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现”。现在，我们来实现终极解决方案，遵循开闭原则。</p>
<p>首先，我们先画出UML图，如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-41b1c8e7ee643133.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="开闭原则UML图"></p>
<p>然后，实现UML图上的类和接口，先重构ImageLoader类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 缓存图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> bitmap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过重构后，少了if-else语句，没有了各种各样的缓存实现对象、布尔变量，代码确实清晰、简单了很多。需要注意的是，这次重构的ImageCache把它提取成一个图片缓存的接口，用来抽象图片缓存的功能，我们来看看该接口的声明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    ImageCache mImageCache = <span class="keyword">new</span> MemoryCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注入缓存实现</div><div class="line">     * <span class="doctag">@param</span> cache</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIamgeCache</span><span class="params">(ImageCache cache)</span> </span>&#123;</div><div class="line">        mImageCache = cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        Bitmap bitmap =  mImageCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//没有缓存则提交线程池下载</span></div><div class="line">        submitLoadRequest(url, imageView);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">submitLoadRequest</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line"></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//将下载的图片存入内存</span></div><div class="line">                mImageCache.put(url,bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ImageCache接口简单定义了获取、缓存图片两个方法，缓存的可以是图片的url,值是图片的本身。内存缓存、SD卡缓存、爽缓存都实现该接口，我们看看几个缓存的实现：</p>
<p>MemoryCache.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span> <span class="keyword">implements</span> <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemoryCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化LRU缓存</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initImageCache</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//计算可使用的最大内存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">        <span class="comment">//取内存的四分之一作为缓存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">4</span>;</div><div class="line"></div><div class="line">        mMemoryCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMemoryCache.get(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DiskCache.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskCache</span> <span class="keyword">implements</span>  <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_DIR = <span class="string">"/sdcard/cache/"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeFile(CACHE_DIR + url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">        FileOutputStream out = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            out = <span class="keyword">new</span> FileOutputStream(CACHE_DIR + url);</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG,<span class="number">100</span>,out);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    out.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Double.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/3/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCache</span> <span class="keyword">implements</span> <span class="title">ImageCache</span> </span>&#123;</div><div class="line"></div><div class="line">    ImageCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line">    ImageCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">        mDiskCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述重构后的ImageLoader类中增加了一个setImageCache(ImageCache cache)方法，用户可以通过该函数设置缓存实现，也就是通常所说的<strong>依赖注入</strong>。</p>
<p>下面看看用户如何通过使用ImageLoader来设置缓存实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">ImageLoader mImageLoader = <span class="keyword">new</span> ImageLoader();</div><div class="line"></div><div class="line"><span class="comment">//使用内存缓存</span></div><div class="line">mImageLoader.setIamgeCache(<span class="keyword">new</span> MemoryCache());</div><div class="line"></div><div class="line"><span class="comment">//使用SD卡缓存</span></div><div class="line">mImageLoader.setIamgeCache(<span class="keyword">new</span> DiskCache());</div><div class="line"></div><div class="line"><span class="comment">//使用双缓存</span></div><div class="line">mImageLoader.setIamgeCache(<span class="keyword">new</span> DoubleCache());</div><div class="line"></div><div class="line"><span class="comment">//使用自定义的图片缓存实现</span></div><div class="line">mImageLoader.setIamgeCache(<span class="keyword">new</span> ImageCache() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在上述代码中，通过setImageCache(ImageCache cache)方法注入不同的缓存实现，这样不仅能够使ImageLoader更简单、健壮，也使得ImageLoader可课扩展性、灵活性更高。</p>
<p>MemeryCache、DiskCache、DoubleCache缓存图片的具体实现完全不一样，但是，它们有一个特点是，都实现了ImageCache接口。当用户需要自定义缓存实现时，只需要新建一个实现ImageCache接口的类，然后构造该类的对象，并且通过setImageCache(ImageCache cache)注入到ImageLoader中就可以了，这样ImageLoader就实现了千变万化的缓存策略，且扩展这些缓存策略并不会导致ImageLoader类的修改。经过这次重构，ImageLoader在设计模式上基本已经合格了。</p>
<blockquote>
<p>开闭原则指导我们，当软件需要变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。这里的“应该尽量”4个字说明OCP原则并不是说绝对不可以修改原始类的。当确定原来的代码已经“腐化”时，应该尽早的重构，以便让代码恢复带正常的状态，而不是通过继承等方式添加新的代码。因此，在开发过程中需要自己结合具体情况进行考量，是通过修改旧代码还是通过继承使得软件系统更稳当、更灵活，在保证去除“腐化代码”的同时，也保证原有模块的正确性。</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>增加稳定性</li>
<li>可扩展性提高</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象编程之接口隔离原则]]></title>
      <url>http://liuguoquan727.github.io/2016/03/05/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>接口隔离原则英文全称是Interface Segregation Principle，缩写是ISP。</p>
<p>ISP的定义是：客户端不应该依赖它不需要的接口。另一种定义是：类间的依赖关系应该建立在最小的接口上。接口隔离原则将非常庞大、臃肿的接口拆分成更小具体的接口，这样客户讲会只需要知道他们感兴趣的方法。接口隔离原则的目的是系统解开耦合，从而容易重构、更改和重新部署。</p>
<p>接口隔离原则说白了就是,让客户端依赖的接口尽可能的小，这样说可能还有点抽象，我们一一个示例来说明一下。在此之前我们来说一个场景，在Java6以及之前的JDK版本中，有一个非常讨厌的问题，那就是在使用了OutputStream或者其他可关闭的对象之后，我们必须保证它们最终被关闭了，我们的SD卡缓存类中就有这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将图片存入SD卡中</div><div class="line"> * <span class="doctag">@param</span> url</div><div class="line"> * <span class="doctag">@param</span> bitmap</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url,Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">	FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		out = <span class="keyword">new</span> FileOutputStream(CACHE_DIR + url);</div><div class="line">		bitmap.compress(Bitmap.CompressFormat.PNG,<span class="number">100</span>,out);</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				out.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的可读性非常差，各种try…catch嵌套的都是简单的代码，但是会严重影响代码的可读性，并且多层级的大括号很容易将代码写到错误的层级中。我们对这类代码也非常反感，下面来看看如何解决这类问题。</p>
<p>我们可能知道Java中有一个Closeable接口，该接口标识了一个可关闭的对象，它只有一个close方法，我们要讲的FileOutputStream类就实现类就实现了这个接口，实际上还有100多个类实现了这还接口，这意味着，在关闭着100多个类型的对象时，都需要写出像put方法中finally代码段那样的代码。这是非常让人痛苦的，所以我们要把这个问题变得简单，既然都是实现了Closeable接口，那只要我建一个方法统一来关闭这些对象不就可以了吗，于是我们开始写下如下的工具类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloseUtils</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	*关闭Closeable对象</div><div class="line">	**/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeQuietly</span><span class="params">(Closeable closeable)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (closeable != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				closeable.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看看把这段代码运用到上述的put方法中的效果如何：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url,Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">	FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		out = <span class="keyword">new</span> FileOutputStream(CACHE_DIR + url);</div><div class="line">		bitmap.compress(Bitmap.CompressFormat.PNG,<span class="number">100</span>,out);</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		CloseUtils.closeQuietly(out);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码简洁了很多，而且这个工具类可以运用到各类可关闭的对象中，保证了代码的重用性。</p>
<p>CloseUtils的closeQuitely方法的基本原理就是依赖于Closeable抽象而不是具体实现（这不是依赖倒置原则么？），并且建立在最小化依赖原则的基础上，它只需要知道这个对象是可关闭的，其他的一概不关心，也就是这里所介绍的接口隔离原则。</p>
<p>优点：</p>
<ul>
<li>降低耦合性</li>
<li>提高代码的可读性</li>
<li>隐藏实现细节</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象编程之接口迪米特原则]]></title>
      <url>http://liuguoquan727.github.io/2016/03/04/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%8E%A5%E5%8F%A3%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>迪米特原则英文全称为Law of Demeter，缩写是LOD，也称为最少知识原则（Least of Principle）。虽然名字不同，但描述的是同一个原则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用者或者依赖者没有关系，调用者或者依赖者只需要知道它需要的方法即可，其他的可一概不管。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。</p>
<p>迪米特法则还有一个英文解释就是Only talk to your immediate friends，翻译就是：只与直接的朋友通信。什么是最直接的朋友呢？每个对象都必然会与其他对象有耦合关系，两个对象之间的耦合就成为朋友关系，这样关系的类型很多，如组合、聚合、依赖等。</p>
<p>下面我们就以租房为例描述迪米特原则的应用：</p>
<p>在外工作的朋友比较了解，我们经常通过中介找房。我们设定的情况为：我只要求房间的面积和租金，其他的一概不管，中介将符合我要求的房子提供给我就可以。下面我们来看看这个示例：</p>
<p>我先来看看示例的UML图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-a5849edd74e984dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LOD示例"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 房子</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">float</span> area;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">float</span> price;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Room</span><span class="params">(<span class="keyword">float</span> area, <span class="keyword">float</span> price)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.area = area;</div><div class="line">		<span class="keyword">this</span>.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Room [area="</span> + area + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line"></div><div class="line">	List&lt;Room&gt; mRooms = <span class="keyword">new</span> ArrayList&lt;Room&gt;();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Mediator</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			mRooms.add(<span class="keyword">new</span> Room(<span class="number">10</span> + i, (<span class="number">10</span> + <span class="number">1</span>) * <span class="number">200</span>));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Room&gt; <span class="title">getAllRooms</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> mRooms;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 租户</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tenant</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> roomArea;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> roomPrice;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DIFF_PRICE = <span class="number">100.01f</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DIFF_AREA = <span class="number">0.01f</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rentRomm</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">		List&lt;Room&gt; rooms = mediator.getAllRooms();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (Room room : rooms) &#123;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (isSuitable(room)) &#123;</div><div class="line">				System.out.println(<span class="string">"租到合适的房间啦!"</span> + room.toString());</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuitable</span><span class="params">(Room room)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> Math.abs(room.price - roomPrice) &lt; DIFF_PRICE</div><div class="line">				&amp;&amp; Math.abs(room.area - roomArea) &lt; DIFF_AREA;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的代码可以看到，Tenant依赖了Mediator类，而且依赖了Room类，还需要频繁的与Room类打交道。租户类的要求只是通过中介找到一间适合自己的房子罢了，如果把这些检测条件都放在Tenant类中，那么Mediator类的功能就会被弱化，而且导致Tenant与Room的耦合较高，因为Tenant必须知道许多关于Room的细节。当Room变化时Tenant也必须跟着变化。Tenant又与Mediator耦合，这就出现了许多纠缠不清的关系。这个时候我们需要分析谁是真正的“直接朋友”，在我们所说的情况下，显然是Mediator。</p>
<p>既然耦合太严重，我们就需要解耦。首先要明确的是，我们只和我们的朋友通信，就是指Mediator对象。必须将Room相关的操作从Tenant中移除，而这些操作应在属于Mediator。为此，我们进行重构，重构后的UML图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-858c24a4e4552f82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LOD重构后的UML图"></p>
<p>重构后的Mediator、代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line"></div><div class="line">	List&lt;Room&gt; mRooms = <span class="keyword">new</span> ArrayList&lt;Room&gt;();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Mediator</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			mRooms.add(<span class="keyword">new</span> Room(<span class="number">10</span> + i, (<span class="number">10</span> + <span class="number">1</span>) * <span class="number">200</span>));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Room <span class="title">rentOut</span><span class="params">(<span class="keyword">float</span> area,<span class="keyword">float</span> price)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(Room room : mRooms) &#123;</div><div class="line">			<span class="keyword">if</span> (isSuitable(room, price, area)) &#123;</div><div class="line">				<span class="keyword">return</span> room;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">			</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuitable</span><span class="params">(Room room, <span class="keyword">float</span> roomPrice, <span class="keyword">float</span> roomArea)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> Math.abs(room.price - roomPrice) &lt; Tenant.DIFF_PRICE</div><div class="line">				&amp;&amp; Math.abs(room.area - roomArea) &lt; Tenant.DIFF_AREA;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 租户</div><div class="line"> * <span class="doctag">@author</span> liuguoquan</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tenant</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> roomArea;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">float</span> roomPrice;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DIFF_PRICE = <span class="number">100.01f</span>;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DIFF_AREA = <span class="number">0.01f</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rentRomm</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"租到合适的房子了： "</span> + mediator.rentOut(roomArea, roomPrice).toString());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，租户不再需要知道太对关于Room的细节，比如与房东签合同，房东的房产证是不是真的等。当我们通过我们的“朋友”–中介租房后，所有的事情我们都通过与中介沟通就好了。</p>
<p>有点：</p>
<ul>
<li>降低了复杂度</li>
<li>降低了耦合度</li>
<li>增加了稳定性</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象编程之单一职责原则]]></title>
      <url>http://liuguoquan727.github.io/2016/03/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>单一职责的英文名称是Single Responsibility Principle，缩写是SRP。</p>
<p>SRP的定义就是：就一个类而言，应该仅有一个引起它变化的原因。简单说来，一个类中应该是一组相关性很高的函数、数据的封装。单一职责的划分界限并不是总是那么清晰，很多时候需要靠个人经验来界定。当然，最大的问题就是堆职责的定义，什么是类的职责，以及怎么划分类的职责。</p>
<p>接下来以小明的工作过程为示例描述单一职责原则：</p>
<p>小明初入职场，在经历过一周的适应期以及熟悉公司的产品、开发规范后，小民的开发工作就正式开始了。小民的主管是个工作经验丰富的技术专家，对于小民的工作并不是很满意，尤其是小民最薄弱的面向对象设计，而Android开发又是使用Java语言，程序中的抽象、接口、六大原则、23种设计模式等名词把小民弄的晕头转向。于是，小民的主管决定先让小民做一个小项目来锻炼这方面的能力。</p>
<p>在经过一番思考后，主管挑选了使用范围广、难度也适中的图片加载器（ImageLoader）作为小民的训练项目。既然要训练小民的面向对象设计能力，那么久必须考虑到可扩展性、灵活性，而检测这一切是否符合需求的最好途径就是开源。</p>
<p>小民是不服输的，主管的要求很简单，要小民实现图片加载，并且要将图片缓存起来。在分析了需求之后，小民放下心来，胸有成竹，在经历了10分钟的编码之后，小民写下了如下代码：</p>
<p>ImageLoader.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.srp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.util.LruCache;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageLoader</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initImageCache</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//计算可使用的最大内存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">        <span class="comment">//取内存的四分之一作为缓存</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = maxMemory / <span class="number">4</span>;</div><div class="line"></div><div class="line">        mImageCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line"></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>随后，小民将代码托管到GitHub上，伴随着git push命令的完成，小民的ImageLoader 0.1版本就发布了。小民开始幻想着待会儿被主管称赞。</p>
<p>在小民给主管报告了ImageLoader发布消息的几分钟后，主管把小民叫到了会议室，叼了小民一顿：“小民，你的ImageLoader耦合太严重啦！简直就没有设计可言，更不要说是扩展性、灵活性了。所有功能写在一个类里面怎么行呢，这样随着功能的增多，ImageLoader类会越来越大。代码也越来越复杂，图片的加载系统就会越来越弱…”，此时，小民默默吞下了泪水。</p>
<p>主管最后说：“你还是把ImageLoader拆分一下，把各个功能独立出来，让它们满足单一职责原则。”小民敏锐的捕捉到<strong>单一职责原则</strong>这个关键词，他用百度、Google搜索了资料之后，决定对ImageLoader进行一次重构。这次小民认真地先画了一幅UML类图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-cf656887e4f246a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML类图"></p>
<p>ImageLoader修改后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.srp.refactor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片加载类</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    ImageCache mImageCache = <span class="keyword">new</span> ImageCache();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 线程池，线程数量未CPU的数量</div><div class="line">     */</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime()</div><div class="line">            .availableProcessors());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> imageView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(<span class="keyword">final</span> String url, <span class="keyword">final</span> ImageView imageView)</span> </span>&#123;</div><div class="line">        <span class="comment">//首先检查内存是否存在</span></div><div class="line">        Bitmap bitmap = mImageCache.get(url);</div><div class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (imageView.getTag().equals(url)) &#123;</div><div class="line">                    imageView.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//将下载的图片存入内存</span></div><div class="line">                mImageCache.put(url,bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下载图片</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String imageUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">            HttpURLConnection mConnection = (HttpURLConnection) url.openConnection();</div><div class="line">            <span class="keyword">int</span> code = mConnection.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</div><div class="line">                bitmap = BitmapFactory.decodeStream(mConnection.getInputStream());</div><div class="line">            &#125;</div><div class="line">            mConnection.disconnect();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且添加类一个ImageCache类用于图片缓存，具体代码如下:</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.srp.refactor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.util.LruCache;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理图片缓存</div><div class="line"> * Created by liuguoquan on 2016/3/14.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> class ImageCache &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 图片缓存</div><div class="line">     */</div><div class="line">    LruCache&lt;<span class="keyword">String</span>, Bitmap&gt; mImageCache;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> ImageCache() &#123;</div><div class="line">        </div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> initImageCache() &#123;</div><div class="line"></div><div class="line">        <span class="comment">//计算可使用的最大内存</span></div><div class="line">        <span class="keyword">final</span> <span class="built_in">int</span> maxMemory = (<span class="built_in">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">        <span class="comment">//取内存的四分之一作为缓存</span></div><div class="line">        <span class="keyword">final</span> <span class="built_in">int</span> cacheSize = maxMemory / <span class="number">4</span>;</div><div class="line"></div><div class="line">        mImageCache = <span class="keyword">new</span> LruCache&lt;<span class="keyword">String</span>, Bitmap&gt;(cacheSize) &#123;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            <span class="keyword">protected</span> <span class="built_in">int</span> sizeOf(<span class="keyword">String</span> <span class="built_in">key</span>, Bitmap value) &#123;</div><div class="line">                <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将图片存入缓存</div><div class="line">     * @param key</div><div class="line">     * @param bitmap</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>,Bitmap bitmap) &#123;</div><div class="line">        </div><div class="line">        mImageCache.put(<span class="built_in">key</span>,bitmap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 取出缓存图片</div><div class="line">     * @param key</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> Bitmap <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</div><div class="line">        <span class="keyword">return</span> mImageCache.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>综上所述，小民将ImageLoader一拆为二，ImageLoader只负责图片加载的逻辑，而ImageCache只负责处理图片缓存的逻辑，这样ImageLoader的代码量变少了，职责也清晰了；当与缓存相关的逻辑需要改变时，不需要修改ImageLoader类，而图片加载的逻辑需要修改时也不会影响到缓存处理逻辑。</p>
<blockquote>
<p>从上述例子我们知道，单一职责所表达出来的用意就是“单一”两个字。如何划分一个类、一个函数的职责，每个人都有自己的看法，这需要根据个人经验、具体的业务逻辑而定。但是，它也有一些基本的指导原则，例如，<strong>两个完全不一样的功能就不应该方法一个类中，一个类中应该是一组相关性很高的函数、数据的封装。</strong>工程师可以不断地审视自己的代码，根据具体的业务、功能对类进行相应的拆分，这是程序员优化代码迈出的第一步。</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h2><ul>
<li>类的复杂度降低，实现什么职责都有清晰的定义。</li>
<li>复杂性降低，所以可读性提高了。</li>
<li>可读性提高了，所以可维护性提高了</li>
<li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有很大的帮助。</li>
</ul>
<p>##参考资料</p>
<p>《Android源码设计模式》 何红辉、关爱民 著</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 5.x之Toolbar和Palette]]></title>
      <url>http://liuguoquan727.github.io/2016/02/28/Android%205.x%E4%B9%8BToolbar%E5%92%8CPalette/</url>
      <content type="html"><![CDATA[<p>Toolbar是Android5.0后应用的内容的标准工具栏，可以说是ActionBar的升级版，两者不是独立的关系，要使用Toolbar还是得跟ActionBar有关系的。相比ActionBar，Toolbar最明显的一点就是变得很自由，可以随处放置，具体的使用方法和ActionBar很类似。</p>
<p>#1.Toolbar引入</p>
<p>首先还是得引入v7包，Android studio在build.gradle配置如下代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.0.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:palette-v7:23.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来为了显示Toolbar控件，先要将style里的ActionBar去掉:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>设置各个部分属性的图：</p>
<p><img src="http://img.blog.csdn.net/20151202204454385" alt="ALT TEXT"></p>
<p>接下来我们引入Toolbar：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.Toolbar</span></div><div class="line">    android:id=<span class="string">"@+id/toolbar"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"?attr/actionBarSize"</span></div><div class="line">    android:<span class="attribute">background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">    app:popupTheme=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div></pre></td></tr></table></figure>
<p>##2.主布局</p>
<p>在主布局中我们使用DrawerLayout来完成侧滑效果</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.deason.library.mytoobar.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_drawerlayout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">        <span class="comment">&lt;!--内容界面--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/ll_content"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/ic_launcher"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"内容界面"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span>/&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--侧或菜单界面--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/ll_tabs"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@android:color/darker_gray"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/tv_close"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:clickable</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"侧滑界面,点击收回侧滑"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_dialog_email"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>#3.Toolbar自定义Item布局</p>
<p>我们在menu/main.xml中去声明将在Toobar的Menu item,MenuItem的设置与ActionBar类似</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;menu xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    tools:context=<span class="string">"com.deason.library.mytoobar.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/ab_search"</span></div><div class="line">        android:orderInCategory=<span class="string">"80"</span></div><div class="line">        android:title=<span class="string">"搜索"</span></div><div class="line">        app:actionViewClass=<span class="string">"android.support.v7.widget.SearchView"</span></div><div class="line">        app:showAsAction=<span class="string">"ifRoom"</span>/&gt;</div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/action_share"</span></div><div class="line">        android:orderInCategory=<span class="string">"90"</span></div><div class="line">        android:title=<span class="string">"分享"</span></div><div class="line">        app:actionProviderClass=<span class="string">"android.support.v7.widget.ShareActionProvider"</span></div><div class="line">        app:showAsAction=<span class="string">"ifRoom"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;<span class="built_in">item</span></div><div class="line">        android:<span class="built_in">id</span>=<span class="string">"@+id/action_settings"</span></div><div class="line">        android:orderInCategory=<span class="string">"100"</span></div><div class="line">        android:title=<span class="string">"设置"</span></div><div class="line">        app:showAsAction=<span class="string">"never"</span> /&gt;</div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure>
<p>#4.java代码实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mytoobar;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.ColorDrawable;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.MenuItemCompat;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.DrawerLayout;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarDrawerToggle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.graphics.Palette;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.SearchView;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.ShareActionProvider;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</div><div class="line">    <span class="keyword">private</span> ActionBarDrawerToggle mDrawerToggle;</div><div class="line">    <span class="keyword">private</span> Toolbar toolbar;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//是否给左上角图标的左边加上一个返回的图标</span></div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//        getSupportActionBar().setLogo(R.mipmap.ic_launcher);</span></div><div class="line">        </div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Snackbar.make(view, <span class="string">"Replace with your own action"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        toolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line"></div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"searchView"</span>+item.getTitle(),Toast.LENGTH_SHORT).show();</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        initView();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">		<span class="comment">//实现侧滑栏的切换</span></div><div class="line">        mDrawerLayout = (DrawerLayout) findViewById(R.id.id_drawerlayout);</div><div class="line">        mDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>, mDrawerLayout, toolbar, R.string.open, R.string.close);</div><div class="line">        mDrawerToggle.syncState();</div><div class="line">        mDrawerLayout.setDrawerListener(mDrawerToggle);</div><div class="line">        </div><div class="line">        <span class="comment">//关闭抽屉栏</span></div><div class="line"><span class="comment">//        mDrawerLayout.closeDrawer(Gravity.LEFT);</span></div><div class="line">        </div><div class="line">        <span class="comment">//Palette取色器</span></div><div class="line">        Bitmap bitmap = BitmapFactory.decodeResource(getResources(),R.drawable.ic_launcher);</div><div class="line"></div><div class="line">        Palette.from(bitmap).generate(<span class="keyword">new</span> Palette.PaletteAsyncListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGenerated</span><span class="params">(Palette palette)</span> </span>&#123;</div><div class="line">                Palette.Swatch swatch = palette.getVibrantSwatch();</div><div class="line">                </div><div class="line">                <span class="comment">//设置Toolbar颜色</span></div><div class="line">                getSupportActionBar().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(swatch.getRgb()));</div><div class="line">                </div><div class="line">                <span class="comment">//设置系统状态栏颜色</span></div><div class="line">                getWindow().setStatusBarColor(swatch.getRgb());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line"></div><div class="line">        <span class="comment">//在菜单中找到对应控件的item</span></div><div class="line">        MenuItem menuItem = menu.findItem(R.id.ab_search);</div><div class="line">        </div><div class="line">        <span class="comment">//获取SearchView</span></div><div class="line">        SearchView searchView = (SearchView) menuItem.getActionView();</div><div class="line">        </div><div class="line">        searchView.setOnSearchClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"searchView"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        MenuItem shareItem = menu.findItem(R.id.action_share);</div><div class="line">        ShareActionProvider shareActionProvider = (ShareActionProvider)MenuItemCompat.getActionProvider(shareItem);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</div><div class="line">        intent.setType(<span class="string">"image/*"</span>);</div><div class="line">        shareActionProvider.setShareIntent(intent);</div><div class="line">        </div><div class="line">        shareActionProvider.setOnShareTargetSelectedListener(<span class="keyword">new</span> ShareActionProvider.OnShareTargetSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onShareTargetSelected</span><span class="params">(ShareActionProvider source, Intent intent)</span> </span>&#123;</div><div class="line"></div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"onShareTargetSelected:"</span>+ intent.getAction(),Toast.LENGTH_SHORT).show();</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line"></div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"action_settings"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">最后来看看效果:</div><div class="line"></div><div class="line"></div><div class="line">![Toolbar](http:<span class="comment">//img.blog.csdn.net/20160227234641589)</span></div></pre></td></tr></table></figure>
<p>#5.Paletta的应用</p>
<p>Android5.x的Paletta作用是提取图片的颜色，从而让主题能够动态适应当前界面的色调，做到整个App颜色的颜色基调和谐统一。</p>
<p>Android内置了几种提取色调的种类：</p>
<ul>
<li>Vibrant：充满活力的</li>
<li>Vibrant dark 活力黑</li>
<li>Vibrant    light 活力亮</li>
<li>Muted 柔和的</li>
<li>Muted dark 柔和的黑</li>
<li>Muted light 柔和的亮</li>
</ul>
<p>要使用Palette，我们需要引入com.android.support:palette-v7:23.0.1包。</p>
<p>实现提取颜色的步骤：</p>
<ol>
<li>获取一个Bitmap对象</li>
<li>将Bitmap对象传递给Palette，然后调用generate方法</li>
<li>在onGenerated回调中得到图片的色调，最后我们把Toolbar和系统状态栏的背景设置为该图片的色调</li>
</ol>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Palette取色器</span></div><div class="line"><span class="type">Bitmap</span> bitmap = <span class="type">BitmapFactory</span>.decodeResource(getResources(),<span class="type">R</span>.drawable.ic_launcher);</div><div class="line"></div><div class="line"><span class="type">Palette</span>.from(bitmap).generate(<span class="function"><span class="keyword">new</span> <span class="title">Palette</span>.<span class="title">PaletteAsyncListener</span>() &#123;</span></div><div class="line">    @<span class="title">Override</span></div><div class="line">    <span class="title">public</span> <span class="title">void</span> <span class="title">onGenerated</span>(<span class="type">Palette</span> palette) &#123;</div><div class="line"></div><div class="line">		<span class="comment">//这里我们获取的是图片充满活力的黑的色调</span></div><div class="line">        <span class="title">Palette</span>.<span class="title">Swatch</span> <span class="title">swatch</span> = <span class="title">palette</span>.<span class="title">getDarkVibrantSwatch</span>();</div><div class="line">        </div><div class="line">        <span class="comment">//设置Toolbar颜色</span></div><div class="line">        <span class="title">getSupportActionBar</span>().<span class="title">setBackgroundDrawable</span>(new <span class="type">ColorDrawable</span>(swatch.getRgb()));</div><div class="line">        </div><div class="line">        <span class="comment">//设置系统状态栏颜色</span></div><div class="line">        <span class="title">getWindow</span>().<span class="title">setStatusBarColor</span>(swatch.getRgb());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后来看看效果:</p>
<p><img src="http://img.blog.csdn.net/20160227234750966" alt="Toolbar_Paletta"></p>
<p>#参考文章</p>
<p><a href="http://blog.csdn.net/itachi85/article/details/50150747" target="_blank" rel="external"> Android5.x Toolbar和Palette应用解析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Design Support Library之CoordinatorLayout和CollapsingToolbarLayout]]></title>
      <url>http://liuguoquan727.github.io/2016/02/26/Android%20Design%20Support%20Library%E4%B9%8BCoordinatorLayout%E5%92%8CCollapsingToolbarLayout/</url>
      <content type="html"><![CDATA[<p>CoordinatorLayout是Android Design Support Library中比较难的控件，它是用来组织它的子View之间协助的一个父View，它直接继承于ViewGroup。</p>
<p>CoordinatorLayout默认情况下可理解是一个FrameLayout，它的布局方式是一层一层叠加上去的，这里我们来介绍它常用的两种情况。</p>
<p>##1.CoordinatorLayout实现ToolBar的隐藏效果</p>
<p>首先看看效果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-7d3bd2e5b2a4f58e.gif?imageMogr2/auto-orient/strip" alt="CoordinatorLayout实现ToolBar的隐藏效果"></p>
<p>接下来开始实现，首先配置build.gradle</p>
<p>###1.1 build.gradle</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.2.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:23.2.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>com.android.support:design:23.2.0就是我们需要引入的兼容库</p>
<p>###1.2 主界面</p>
<p>主界面跟前面的Android Design Support Library之NavigationView一致，不同之处在于layout=”@layout/app_bar_main”引入的布局实现的不同</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:openDrawer</span>=<span class="string">"start"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span></span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/app_bar_main"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header_main"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/activity_main_drawer"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面我们来看看app_bar_main.xml这个布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> </span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/main_content"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span></div><div class="line">             /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tabs"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:tabIndicatorColor</span>=<span class="string">"#ffffffff"</span></div><div class="line">            <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span>&gt;</div><div class="line">            </div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div><div class="line">        </div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">		//必须设置，<span class="attr">AppBarLayout</span>才能接收到滚动事件</div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>/&gt;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_dialog_email"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>CoordinatorLayout中不应该再设置android:fitsSystemWindows=”true”这个配置，因为外层已经设置好，如果设置会出现不和谐的效果。</p>
<p>Toolbar能隐藏的关键在于app:layout_scrollFlags=”scroll|enterAlways”这个事件，设置滚动事件，属性里面至少启用scroll这个flag，这样view才会滚动出屏幕，否则它将一直固定在头部。</p>
<p>###1.3 Java代码实现</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mycoordinatorlayout;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.NavigationView;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.TabLayout;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.GravityCompat;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.DrawerLayout;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarDrawerToggle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">NavigationView</span>.<span class="title">OnNavigationItemSelectedListener</span> &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> TabLayout mTabLayout;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line"></div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        ActionBarDrawerToggle toggle = <span class="keyword">new</span> ActionBarDrawerToggle(</div><div class="line">                <span class="keyword">this</span>, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);</div><div class="line">        drawer.setDrawerListener(toggle);</div><div class="line">        toggle.syncState();</div><div class="line"></div><div class="line">        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">this</span>);</div><div class="line">        </div><div class="line">        mViewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class="line">        </div><div class="line">        initViewPager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        mTabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class="line"></div><div class="line">        mTabLayout.setSelectedTabIndicatorHeight(<span class="number">10</span>);</div><div class="line"></div><div class="line">        List&lt;String&gt; titles = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        titles.add(<span class="string">"新闻"</span>);</div><div class="line">        titles.add(<span class="string">"财经"</span>);</div><div class="line">        titles.add(<span class="string">"娱乐"</span>);</div><div class="line">        titles.add(<span class="string">"体育"</span>);</div><div class="line">        titles.add(<span class="string">"军事"</span>);</div><div class="line">        titles.add(<span class="string">"科技"</span>);</div><div class="line">        titles.add(<span class="string">"教育"</span>);</div><div class="line">        titles.add(<span class="string">"历史"</span>);</div><div class="line">        titles.add(<span class="string">"文化"</span>);</div><div class="line">        titles.add(<span class="string">"深圳"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i &lt; titles.size();i++) &#123;</div><div class="line">            <span class="comment">//设置TabIndicator文字</span></div><div class="line">            mTabLayout.addTab(mTabLayout.newTab().setText(titles.get(i)));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        List&lt;Fragment&gt; fragments = <span class="keyword">new</span> ArrayList&lt;Fragment&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; titles.size(); i++) &#123;</div><div class="line"></div><div class="line">            fragments.add(<span class="keyword">new</span> TabFragment());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//实例化适配器</span></div><div class="line">        FragmentAdapter mAdapter = <span class="keyword">new</span> FragmentAdapter(getSupportFragmentManager(),fragments,titles);</div><div class="line"></div><div class="line">        <span class="comment">//给ViewPager设置适配器</span></div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line"></div><div class="line">        <span class="comment">//将TabLayout和ViewPager关联起来</span></div><div class="line">        mTabLayout.setupWithViewPager(mViewPager);</div><div class="line"></div><div class="line">        <span class="comment">//给TabLayout设置适配器</span></div><div class="line">       mTabLayout.setTabsFromPagerAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        <span class="keyword">if</span> (drawer.isDrawerOpen(GravityCompat.START)) &#123;</div><div class="line">            drawer.closeDrawer(GravityCompat.START);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.main, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line"></div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,CollapsingActivity.class);</div><div class="line">            startActivity(intent);</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"StatementWithEmptyBody"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle navigation view item clicks here.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (id == R.id.nav_camera) &#123;</div><div class="line">            <span class="comment">// Handle the camera action</span></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_gallery)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_slideshow)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_manage)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_share)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_send)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        drawer.closeDrawer(GravityCompat.START);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他代码如ViewPager、RecyclerView的实现请参考Android Design Support Library之TabLayout一文。</p>
<p>###1.4 效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-7d3bd2e5b2a4f58e.gif?imageMogr2/auto-orient/strip" alt="CoordinatorLayout实现ToolBar的隐藏效果"></p>
<p>##2.CoordinatorLayout+CollapsingToolbarLayout实现Toolbar折叠效果 </p>
<p>首先看看效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-21388cdc3cacbd6d.gif?imageMogr2/auto-orient/strip" alt="CoordinatorLayout+CollapsingToolbarLayout实现Toolbar折叠效果"></p>
<p>要实现折叠效果我们需要引入一个新的布局CollapsingToolbarLayout，它作用是提供了一个可以折叠的Toolbar，它继承至FrameLayout，给它设置layout_scrollFlags，它可以控制包含在CollapsingToolbarLayout中的控件比如mageView、Toolbar在响应layout_behavior事件时作出相应的scrollFlags滚动事件。</p>
<p>###2.1 布局</p>
<p>布局文件用CollapsingToolbarLayout将ImageView和Toolbar包含起来作为一个可折叠的Toolbar，再用AppBarLayout包裹起来作为一个Appbar的整体，当然，AppBarLayout目前必须是第一个嵌套在CoordinatorLayout里面的子view。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/main_content"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:expandedTitleMarginEnd</span>=<span class="string">"64dp"</span></div><div class="line">            <span class="attr">app:expandedTitleMarginStart</span>=<span class="string">"48dp"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">android:src</span>=<span class="string">"@drawable/mao"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span></div><div class="line">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">        &lt;include layout="@layout/content_main" /&gt;</div><div class="line">        </div><div class="line">    --&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span></div><div class="line">		//必须设置，<span class="attr">AppBarLayout</span>才能接收到滚动事件</div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>CollapsingToolbarLayout的几个关键属性需要说明一下：</p>
<ul>
<li><p>app:contentScrim=”?attr/colorPrimary”，用来设置CollapsingToolbarLayout收缩后最顶部的颜色</p>
</li>
<li><p>app:expandedTitleGravity= “left|bottom”，表示将此CollapsingToolbarLayout完全展开后，title所处的位置，默认是left|bottom</p>
</li>
<li><p>app:collapsedTitleGravity= “left”，表示当头部的图片ImageView消失后，此title将回归到ToolBar的位置，默认是left</p>
</li>
<li><p>app:layout_scrollFlags=”scroll|exitUntilCollapsed”，这个属性我们上面讲过用来设置滚动事件，属性里面必须至少启用scroll这个flag，这样这个view才会滚动出屏幕，否则它将一直固定在顶部。这里我们设置的是app:layout_scrollFlags=”scroll|exitUntilCollapsed”这样能实现折叠效果，如果想要隐藏效果我们可以设置app:layout_scrollFlags=”scroll|enterAlways”</p>
</li>
</ul>
<p>我们需要定义AppBarLayout与滚动视图之间的联系，Design Support Library包含了一个特殊的字符串资源@string/appbar_scrolling_view_behavior，它和AppBarLayout.ScrollingViewBehavior相匹配，用来通知AppBarLayout何时发生了滚动事件，这个behavior需要设置在触发事件的view之上，所以我们应该在RecyclerView或者任意支持嵌套滚动的view比如NestedScrollView上添加app:layout_behavior=”@string/appbar_scrolling_view_behavior这个属性，当然AppBarLayout 中的子view需要设置app:layout_scrollFlags这个属性，否则接收到RecyclerView滚动事件，AppBarLayout 也不会有什么变化。</p>
<p>###2.2 Java代码实现</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mycoordinatorlayout;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.<span class="type">CollapsingToolbarLayout</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.<span class="type">AppCompatActivity</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">LinearLayoutManager</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">RecyclerView</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">Toolbar</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CollapsingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">RecyclerView</span> mRecyclerView;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.collapsing_main);</div><div class="line">        </div><div class="line">        <span class="type">Toolbar</span> toolbar = (<span class="type">Toolbar</span>) findViewById(<span class="type">R</span>.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        <span class="type">CollapsingToolbarLayout</span> collapsingToolbarLayout = (<span class="type">CollapsingToolbarLayout</span>) findViewById(<span class="type">R</span>.id.collapsing_toolbar);</div><div class="line">        collapsingToolbarLayout.setTitle(<span class="string">"哆啦A梦"</span>);</div><div class="line"></div><div class="line">        mRecyclerView = (<span class="type">RecyclerView</span>) findViewById(<span class="type">R</span>.id.recyclerView);</div><div class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="type">LinearLayoutManager</span>(<span class="keyword">this</span>, <span class="type">LinearLayoutManager</span>.<span class="type">VERTICAL</span>, <span class="literal">false</span>));</div><div class="line">        mRecyclerView.setAdapter(<span class="keyword">new</span> <span class="type">RecyclerViewAdapter</span>(<span class="keyword">this</span>));</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###2.3 效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-21388cdc3cacbd6d.gif?imageMogr2/auto-orient/strip" alt="CoordinatorLayout+CollapsingToolbarLayout实现Toolbar折叠效果"></p>
<p>##3.参考文章</p>
<p><a href="http://blog.csdn.net/itachi85/article/details/50492695" target="_blank" rel="external"> Android Design Support Library（三）用CoordinatorLayout实现Toolbar隐藏和折叠</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TabLayout实现网易新闻滑动标签效果]]></title>
      <url>http://liuguoquan727.github.io/2016/02/24/Android%20Design%20Support%20Library%E4%B9%8BTabLayout/</url>
      <content type="html"><![CDATA[<p>TabLayout是Android Design Support Library库中的控件。Google在2015年的IO大会上，给我们带来了更加详细的Material Design设计规范，同时也给我们带来了全新的Android Design Support Library，在这个support库中,Google给我们提供了更加规范的MD设计风格的控件。最重要的是，Android Design Support Library可以向下兼容到Android 2.2。</p>
<p>接下来，我们开始熟悉TabLayout的使用，并完成一个类似网易新闻客户端滑动标签的效果，它的滑动标签由Toolbar+TabLayout实现，内容显示由ViewPager+Fragment实现。</p>
<p>#1.配置build.gradle</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:support-v4:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:cardview-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:23.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>com.android.support:design:23.2.0就是我们需要引入的Android Design Support Library，其次我们还引入了RecyclerView和CardView两个Android 5.X的新控件。</p>
<p>#2.主界面的布局</p>
<p>主界面的布局由AppBarLayout、Toolbar和TabLayout，以及ViewPager组成，主界面布局文件activity_main.xml如下:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span></div><div class="line">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tabs"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:tabIndicatorColor</span>=<span class="string">"#ADBE107E"</span></div><div class="line">            <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里用到AppBarLayout和Toolbar，AppBarLayout是Android Design Support Library新加的空间继承自LinearLayout，它用来将Toolbar和TabLayout组合起来成为一个整体。ViewPager用来实现Fragment页面的切换</p>
<p>布局文件中最关键的一点是android.support.design.widget.TabLayout的app:tabMode=”scrollable”，它表示tab标签的模式是可滑动的，如果不设置次模式的话，标签将不可滑动。</p>
<p>#3.主界面的实现</p>
<ol>
<li>实例化TabLayout，给TabLayout标签设置文字</li>
<li>实例化FragmentAdapter，加载Fragment</li>
<li>实例化ViewPager，并设置ViewPager的适配器FragmentAdapter</li>
<li>TabLayout与ViewPager关联</li>
<li>TabLayout设置适配器FragmentAdapter</li>
</ol>
<p>MainActivity.java如下所示</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mytablayout;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.TabLayout;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class MainActivity extends AppCompatActivity &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> TabLayout mTabLayout;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        </div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        mViewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class="line">        initViewPager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> initViewPager() &#123;</div><div class="line"></div><div class="line">        mTabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class="line"></div><div class="line">        List&lt;<span class="keyword">String</span>&gt; titles = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"新闻"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"财经"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"娱乐"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"体育"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"军事"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"科技"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"教育"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"历史"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"文化"</span>);</div><div class="line">        titles.<span class="built_in">add</span>(<span class="string">"校园"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i= <span class="number">0</span>;i &lt; titles.<span class="built_in">size</span>();i++) &#123;</div><div class="line">            <span class="comment">//设置TabIndicator文字</span></div><div class="line">            mTabLayout.addTab(mTabLayout.newTab().setText(titles.<span class="built_in">get</span>(i)));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        List&lt;Fragment&gt; fragments = <span class="keyword">new</span> ArrayList&lt;Fragment&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; titles.<span class="built_in">size</span>(); i++) &#123;</div><div class="line">            </div><div class="line">            fragments.<span class="built_in">add</span>(<span class="keyword">new</span> TabFragment());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//实例化适配器</span></div><div class="line">        FragmentAdapter mAdapter = <span class="keyword">new</span> FragmentAdapter(getSupportFragmentManager(),fragments,titles);</div><div class="line"></div><div class="line">        <span class="comment">//给ViewPager设置适配器</span></div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line"></div><div class="line">        <span class="comment">//将TabLayout和ViewPager关联起来</span></div><div class="line">        mTabLayout.setupWithViewPager(mViewPager);</div><div class="line">        </div><div class="line">        <span class="comment">//给TabLayout设置适配器</span></div><div class="line">        mTabLayout.setTabsFromPagerAdapter(mAdapter);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###3.1 实例化FragmentAdapter</p>
<p>FragmentAdapter.java</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mytablayout;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuguoquan on 2016/2/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt;  mFragments;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt;    mTitles;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FragmentAdapter</span><span class="params">(FragmentManager fm,List&lt;Fragment&gt; fragments,List&lt;String&gt; titles)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        </div><div class="line">        <span class="keyword">this</span>.mFragments = fragments;</div><div class="line">        <span class="keyword">this</span>.mTitles = titles;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mFragments.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mFragments.<span class="title">size</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//Tabs标签名称</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mTitles.<span class="title">get</span><span class="params">(position)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###3.2 TabFragment</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mytablayout;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.<span class="type">Fragment</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">LinearLayoutManager</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">RecyclerView</span>;</div><div class="line"><span class="keyword">import</span> android.view.<span class="type">LayoutInflater</span>;</div><div class="line"><span class="keyword">import</span> android.view.<span class="type">View</span>;</div><div class="line"><span class="keyword">import</span> android.view.<span class="type">ViewGroup</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * A simple &#123;@link Fragment&#125; subclass.</div><div class="line"> */</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TabFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">RecyclerView</span> mRecyclerView;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</div><div class="line">                             <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="comment">// Inflate the layout for this fragment</span></div><div class="line">        <span class="type">View</span> view = inflater.inflate(<span class="type">R</span>.layout.fragment_list,container,<span class="literal">false</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onActivityCreated(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line"></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###4 运行效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-823ac9ef8636d01f.gif?imageMogr2/auto-orient/strip" alt="ALT TEXT"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Design Support Library之NavigationView]]></title>
      <url>http://liuguoquan727.github.io/2016/02/22/Android%20Design%20Support%20Library%E4%B9%8BNavigationView/</url>
      <content type="html"><![CDATA[<p>NavigationView在MD设计中非常重要，之前Google提出使用Drawlayout来实现导航抽屉。这次，在Android Design Support Library中Google官方提供了NavigationView来实现导航菜单界面。</p>
<p>下面，我们开始用NavigationView来实现抽屉菜单界面</p>
<p>##1.配置build.gradle:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.2.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:23.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>com.android.support:design:23.2.0就是我们需要引入的Android Design Support Library。</p>
<p>##2.主界面布局</p>
<p>activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:openDrawer</span>=<span class="string">"start"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span></span></div><div class="line">        <span class="attr">layout</span>=<span class="string">"@layout/app_bar_main"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header_main"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/activity_main_drawer"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>DrawerLayout标签包含了主界面的布局以及抽屉的布局NavigationView标签下的app:headerLayout用于引入抽屉的头部布局，app:menu用于引入抽屉的菜单布局<br>所以上面布局需要引入另外三个布局文件</p>
<p>###app_bar_main.xml</p>
<p>主界面展示的内容:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.deason.library.mynavigationview.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/content_main"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_dialog_email"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>###nav_header_main.xml</p>
<p>抽屉的头布局文件:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"@dimen/nav_header_height"</span></div><div class="line">    android:background=<span class="string">"@drawable/side_nav_bar"</span></div><div class="line">    android:gravity=<span class="string">"bottom"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span></div><div class="line">    android:paddingBottom=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    android:paddingLeft=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    android:paddingRight=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    android:paddingTop=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    android:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=<span class="string">"@+id/imageView"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:paddingTop=<span class="string">"@dimen/nav_header_vertical_spacing"</span></div><div class="line">        android:src=<span class="string">"@android:drawable/sym_def_app_icon"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:paddingTop=<span class="string">"@dimen/nav_header_vertical_spacing"</span></div><div class="line">        android:text=<span class="string">"Android Studio"</span></div><div class="line">        android:textAppearance=<span class="string">"@style/TextAppearance.AppCompat.Body1"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/textView"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:text=<span class="string">"android.studio@android.com"</span> /&gt;</div><div class="line"></div><div class="line">&lt;<span class="regexp">/LinearLayout&gt;</span></div></pre></td></tr></table></figure>
<p>android:background=”@drawable/side_nav_bar”则是设置了头布局的背景颜色，这里使用的是自定义shape来实现</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line">        <span class="attr">android:angle</span>=<span class="string">"135"</span></div><div class="line">        <span class="attr">android:centerColor</span>=<span class="string">"#FFFF00"</span></div><div class="line">        <span class="attr">android:endColor</span>=<span class="string">"#2E7D32"</span></div><div class="line">        <span class="attr">android:startColor</span>=<span class="string">"#81C784"</span></div><div class="line">        <span class="attr">android:type</span>=<span class="string">"linear"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<p>###activity_main_drawer.xml</p>
<p>抽屉的菜单布局文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_camera"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_camera"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Import"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_gallery"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_gallery"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Gallery"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_slideshow"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_slideshow"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Slideshow"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_manage"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_manage"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"Tools"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:title</span>=<span class="string">"Communicate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/nav_share"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_share"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"Share"</span> /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/nav_send"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_menu_send"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"Send"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>##3.Java代码实现</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.deason.library.mynavigationview;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.NavigationView;</div><div class="line"><span class="keyword">import</span> android.support.v4.view.GravityCompat;</div><div class="line"><span class="keyword">import</span> android.support.v4.widget.DrawerLayout;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarDrawerToggle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">NavigationView</span>.<span class="title">OnNavigationItemSelectedListener</span> &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        </div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        </div><div class="line"></div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Snackbar.make(view, <span class="string">"Replace with your own action"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        ActionBarDrawerToggle toggle = <span class="keyword">new</span> ActionBarDrawerToggle(</div><div class="line">                <span class="keyword">this</span>, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);</div><div class="line">        drawer.addDrawerListener(toggle); <span class="comment">//'com.android.support:design:23.2.0'中新增的方法，之版本用drawer.setDrawerListener(toggle)这个方法</span></div><div class="line">        toggle.syncState();</div><div class="line"></div><div class="line">        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">        <span class="comment">//监听侧滑栏item选择事件</span></div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        <span class="keyword">if</span> (drawer.isDrawerOpen(GravityCompat.START)) &#123;</div><div class="line">            drawer.closeDrawer(GravityCompat.START);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 监听抽屉菜单栏的点击事件</div><div class="line">     * <span class="doctag">@param</span> item</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"StatementWithEmptyBody"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="comment">// Handle navigation view item clicks here.</span></div><div class="line">        <span class="keyword">int</span> id = item.getItemId();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (id == R.id.nav_camera) &#123;</div><div class="line">            <span class="comment">// Handle the camera action</span></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_gallery)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_slideshow)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_manage)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_share)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(id == R.id.nav_send)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//关闭侧滑栏</span></div><div class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        drawer.closeDrawer(GravityCompat.START);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##4.效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1014339-2c3d097af7b1ae4c.gif?imageMogr2/auto-orient/strip" alt="抽屉菜单"></p>
<p>##参考文章</p>
<p><a href="http://blog.csdn.net/itachi85/article/details/50434641" target="_blank" rel="external">Android Design Support Library（二）用NavigationView实现抽屉菜单界面</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 5.x之RecyclerView]]></title>
      <url>http://liuguoquan727.github.io/2016/02/20/Android%205.x%E4%B9%8BRecyclerView/</url>
      <content type="html"><![CDATA[<p>RecyclerView是Android官方推出的旨在取代ListView、GridView的控件，可以通过导入support-V7进行使用。据官方介绍，该控件用于在有限的窗口中展示大量数据集，同样能实现此效果的有ListView、GridView。</p>
<p>那么有了ListView、GridView之后为什么还需要RecyclerView这样的控件呢？整体上看RecyclerView架构，它提供了一种插拔式的体验，高度的解耦，异常的灵活，通过设置它提供不同的LayoutManager、ItemDecoration、ItemAnimator来实现各种各样的效果。</p>
<ul>
<li>控制其显示的布局方式，请设置布局管理器LayoutManager</li>
<li>控制Item间的间隔，请实现ItemDecoration</li>
<li>控制Item间增删的动画，请实现ItemAnimator</li>
<li>控制其点击、长按事件，不好意思请自己写</li>
</ul>
<p>下面，我们开始进入RecyclerView的体验之旅</p>
<p>#1.build.gradle</p>
<p>要想使用RecyclerView，首先我们要导入support-V7包，Android Studio中需要的build.gradle文件中加入下面代码自动导入V7包。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.1.1'</span>  <span class="comment">//v7</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:cardview-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:palette-v7:23.1.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#2.RecyclerView实现ListView效果</p>
<ol>
<li>实例化RecyclerView</li>
<li>设置RecyclerView的布局（有ListView、GridView和瀑布流三种效果，水平和垂直两个方向）</li>
<li>设置RecyclerView的Item分割线</li>
<li>设置RecyclerView的Item增删时的动画</li>
<li>实例化一个RecyclerViewAdapter</li>
<li>设置RecyclerView的Adapter</li>
</ol>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mRecyclerView = (RecyclerView) findViewById(R.id.recyclerview);</div><div class="line"><span class="comment">//设置布局管理器</span></div><div class="line">mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="type">LinearLayoutManager</span>(<span class="built_in">this</span>, LinearLayoutManager.VERTICAL, <span class="literal">false</span>)); <span class="comment">//垂直方向的list</span></div><div class="line"><span class="comment">//mRecyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,false)); //水平方向的list</span></div><div class="line"></div><div class="line"><span class="comment">//增加Item分割线，必须在setAdapter方法之前设置</span></div><div class="line">mRecyclerView.addItemDecoration(<span class="keyword">new</span> <span class="type">DividerItemDecoration</span>(<span class="built_in">this</span>, DividerItemDecoration.VERTICAL_LIST));</div><div class="line"></div><div class="line"><span class="comment">//设置增加和删除条目时的动画</span></div><div class="line">mRecyclerView.setItemAnimator(<span class="keyword">new</span> <span class="type">DefaultItemAnimator</span>());</div><div class="line"></div><div class="line">mAdapter = <span class="keyword">new</span> <span class="type">RecyclerViewAdapter</span>(<span class="built_in">this</span>,mDatas);</div><div class="line"></div><div class="line">mRecyclerView.setAdapter(mAdapter);</div></pre></td></tr></table></figure>
<p>##2.1 主界面布局</p>
<p>RecyclerView的类名全称为android.support.v7.widget.RecyclerView</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.example.michael.recyclerviewdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/recyclerview"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_dialog_email"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>##2.2 分割线DividerItemDecoration</p>
<p>DividerItemDecoration是实现的是RecyclerView作为ListView效果时的分割线。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.michael.recyclerviewdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 横向和纵向的分割线</div><div class="line"> * Created by Michael on 2016/2/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</div><div class="line">            android.R.attr.listDivider</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERTICAL_LIST = LinearLayoutManager.VERTICAL;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Drawable mDivider;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOrientation;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DividerItemDecoration</span><span class="params">(Context context, <span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</div><div class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</div><div class="line">        a.recycle();</div><div class="line">        setOrientation(orientation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (orientation != HORIZONTAL_LIST &amp;&amp; orientation != VERTICAL_LIST) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid orientation"</span>);</div><div class="line">        &#125;</div><div class="line">        mOrientation = orientation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</div><div class="line">            drawVertical(c, parent);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            drawHorizontal(c, parent);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            android.support.v7.widget.RecyclerView v = <span class="keyword">new</span> android.support.v7.widget.RecyclerView(parent.getContext());</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top = parent.getPaddingTop();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom = parent.getHeight() - parent.getPaddingBottom();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##2.3 实现Adapter</p>
<p>RecyclerViewAdapter用于RecyclerView作为ListView和GridView效果时Adapter，通过其构造函数传入Context和需要绑定的数据集合。一个基本的Adapter里面有需要实现如下功能：</p>
<ul>
<li>创建RecyclerView.ViewHolder的子类</li>
<li>视图与数据绑定</li>
<li>点击事件回调接口</li>
<li>Item的增加和删除更新</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.michael.recyclerviewdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Michael on 2016/2/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerViewAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDatas;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OnItemClickListener mListener;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 点击事件回调接口</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemLongClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener listener)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewAdapter</span><span class="params">(Context context, List&lt;String&gt; datas)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        mDatas = datas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//实例化ViewHolder</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line"></div><div class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.item_recyclerview, parent, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolder(view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//绑定数据</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> MyViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        System.out.println(position);</div><div class="line"></div><div class="line">        holder.mClickBtn.setText(mDatas.get(position));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">            holder.mClickBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                    <span class="comment">//获取实际的位置</span></div><div class="line">                    <span class="keyword">int</span> pos = holder.getLayoutPosition();</div><div class="line"></div><div class="line">                    mListener.onItemClick(holder.mClickBtn,pos);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            holder.mClickBtn.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                    <span class="keyword">int</span> pos = holder.getLayoutPosition();</div><div class="line"></div><div class="line">                    mListener.onItemLongClick(holder.mClickBtn,pos);</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;  <span class="comment">//屏蔽单击  false点击事件仍会响应</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mDatas.size();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在当前Item之前添加Item</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPreItem</span><span class="params">(String data,<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        mDatas.add(position,data);</div><div class="line">        notifyItemInserted(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在当前Item之后添加Item</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNextItem</span><span class="params">(String data,<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        mDatas.add(position+<span class="number">1</span>,data);</div><div class="line">        notifyItemInserted(position+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除Item</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        mDatas.remove(position);</div><div class="line">        notifyItemRemoved(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">        TextView mClickBtn;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line"></div><div class="line">            mClickBtn = (TextView) itemView.findViewById(R.id.btn_click);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RecyclerView的Item布局item_recycleview.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">    android:background="?android:attr/selectableItemBackground设置点击时水波纹效果 Android5.0以上有效果</div><div class="line">    --&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_click"</span></div><div class="line">        <span class="attr">android:clickable</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"点击"</span>/&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>##2.4 实现RecyclerView</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.michael.recyclerviewdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.DialogInterface;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AlertDialog;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.DefaultItemAnimator;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.StaggeredGridLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> RecyclerViewAdapter mAdapter;</div><div class="line">    <span class="keyword">private</span> StaggeredAdapter mStaggeredAdapter;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDatas;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Snackbar.make(view, <span class="string">"Replace with your own action"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        initView();</div><div class="line">        initData();</div><div class="line">        initEvent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerview);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		</div><div class="line">        mDatas = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i++) &#123;</div><div class="line"></div><div class="line">            mDatas.add(String.valueOf(i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setListView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * ListView效果</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">setListView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//设置布局管理器</span></div><div class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>, LinearLayoutManager.VERTICAL, <span class="keyword">false</span>)); <span class="comment">//垂直方向的list</span></div><div class="line"><span class="comment">//        mRecyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,false)); //水平方向的list</span></div><div class="line"></div><div class="line">        <span class="comment">//增加Item分割线，必须在setAdapter方法之前设置</span></div><div class="line">        mRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>, DividerItemDecoration.VERTICAL_LIST));</div><div class="line"></div><div class="line">        <span class="comment">//设置增加和删除条目时的动画</span></div><div class="line">        mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</div><div class="line"></div><div class="line">        mAdapter = <span class="keyword">new</span> RecyclerViewAdapter(<span class="keyword">this</span>,mDatas);</div><div class="line"></div><div class="line">        mRecyclerView.setAdapter(mAdapter);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initEvent</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//实现RecyclerView的点击事件</span></div><div class="line">        mAdapter.setOnItemClickListener(<span class="keyword">new</span> RecyclerViewAdapter.OnItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"onItemClick: "</span> +position,Toast.LENGTH_SHORT).show();</div><div class="line"></div><div class="line">                AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">                builder.setTitle(<span class="string">"添加Item"</span>);</div><div class="line">                builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line"></div><div class="line">                        mAdapter.addNextItem(<span class="string">"add pre"</span>,position);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                builder.show();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onItemLongClick</span><span class="params">(View view, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"onItemLongClick "</span> + position,Toast.LENGTH_SHORT).show();</div><div class="line"></div><div class="line">                AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">                builder.setTitle(<span class="string">"删除Item"</span>);</div><div class="line">                builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line"></div><div class="line">                        mAdapter.removeItem(position);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                builder.show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line"></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main,menu);</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onCreateOptionsMenu</span><span class="params">(menu)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> R.id.action_settings:</div><div class="line"></div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,CardViewActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##2.5 效果</p>
<p><img src="http://img.blog.csdn.net/20160226170143271" alt="ALT TEXT"></p>
<p>#3.RecyclerView实现GridView效果</p>
<p>RecyclerView实现GridView与实现ListView效果的不同之处有两点：</p>
<ul>
<li>布局管理器为StaggeredGridLayoutManager</li>
<li>Item间隔类为DividerGridItemDecoration</li>
</ul>
<p>##3.1 DividerGridItemDecoration</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.michael.recyclerviewdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.GridLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.StaggeredGridLayoutManager;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * GridView分割线</div><div class="line"> * Created by Michael on 2016/2/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerGridItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//系统theme.xml中,可以自定义</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; android.R.attr.listDivider &#125;;</div><div class="line">    <span class="keyword">private</span> Drawable mDivider;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DividerGridItemDecoration</span><span class="params">(Context context)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</div><div class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, RecyclerView.State state)</span></span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        drawHorizontal(c, parent);</div><div class="line">        drawVertical(c, parent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSpanCount</span><span class="params">(RecyclerView parent)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 列数</span></div><div class="line">        <span class="keyword">int</span> spanCount = -<span class="number">1</span>;</div><div class="line">        RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            spanCount = ((GridLayoutManager) layoutManager).getSpanCount();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            spanCount = ((StaggeredGridLayoutManager) layoutManager)</div><div class="line">                    .getSpanCount();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> spanCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getLeft() - params.leftMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = child.getRight() + params.rightMargin</div><div class="line">                    + mDivider.getIntrinsicWidth();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line"></div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getTop() - params.topMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicWidth();</div><div class="line"></div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLastColum</span><span class="params">(RecyclerView parent, <span class="keyword">int</span> pos, <span class="keyword">int</span> spanCount,</span></span></div><div class="line">                                <span class="keyword">int</span> childCount)</div><div class="line">    &#123;</div><div class="line">        RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ((pos + <span class="number">1</span>) % spanCount == <span class="number">0</span>)<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> orientation = ((StaggeredGridLayoutManager) layoutManager)</div><div class="line">                    .getOrientation();</div><div class="line">            <span class="keyword">if</span> (orientation == StaggeredGridLayoutManager.VERTICAL)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> ((pos + <span class="number">1</span>) % spanCount == <span class="number">0</span>)<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                childCount = childCount - childCount % spanCount;</div><div class="line">                <span class="keyword">if</span> (pos &gt;= childCount)<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLastRaw</span><span class="params">(RecyclerView parent, <span class="keyword">int</span> pos, <span class="keyword">int</span> spanCount,</span></span></div><div class="line">                              <span class="keyword">int</span> childCount)</div><div class="line">    &#123;</div><div class="line">        RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            childCount = childCount - childCount % spanCount;</div><div class="line">            <span class="keyword">if</span> (pos &gt;= childCount)<span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> orientation = ((StaggeredGridLayoutManager) layoutManager)</div><div class="line">                    .getOrientation();</div><div class="line">            <span class="comment">// StaggeredGridLayoutManager 且纵向滚动</span></div><div class="line">            <span class="keyword">if</span> (orientation == StaggeredGridLayoutManager.VERTICAL)</div><div class="line">            &#123;</div><div class="line">                childCount = childCount - childCount % spanCount;</div><div class="line">                <span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">                <span class="keyword">if</span> (pos &gt;= childCount)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            <span class="comment">// StaggeredGridLayoutManager 且横向滚动</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">                <span class="keyword">if</span> ((pos + <span class="number">1</span>) % spanCount == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition,</span></span></div><div class="line">                               RecyclerView parent)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> spanCount = getSpanCount(parent);</div><div class="line">        <span class="keyword">int</span> childCount = parent.getAdapter().getItemCount();</div><div class="line">        <span class="keyword">if</span> (isLastRaw(parent, itemPosition, spanCount, childCount))<span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">        &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLastColum(parent, itemPosition, spanCount, childCount))<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">        &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(),</div><div class="line">                    mDivider.getIntrinsicHeight());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##3.2 实现</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * GridView效果</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">private</span> void setGridView() &#123;</div><div class="line"></div><div class="line">    mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="type">GridLayoutManager</span>(<span class="built_in">this</span>,<span class="number">4</span>));</div><div class="line">    mRecyclerView.addItemDecoration(<span class="keyword">new</span> <span class="type">DividerGridItemDecoration</span>(<span class="built_in">this</span>));</div><div class="line">    mRecyclerView.setItemAnimator(<span class="keyword">new</span> <span class="type">DefaultItemAnimator</span>());</div><div class="line">    mAdapter = <span class="keyword">new</span> <span class="type">RecyclerViewAdapter</span>(<span class="built_in">this</span>,mDatas);</div><div class="line">    mRecyclerView.setAdapter(mAdapter);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line"><span class="keyword">private</span> void setGridView() &#123;</div><div class="line"></div><div class="line">    mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="type">StaggeredGridLayoutManager</span>(<span class="number">4</span>, StaggeredGridLayoutManager.VERTICAL));</div><div class="line">    mRecyclerView.addItemDecoration(<span class="keyword">new</span> <span class="type">DividerGridItemDecoration</span>(<span class="built_in">this</span>));</div><div class="line">    mRecyclerView.setItemAnimator(<span class="keyword">new</span> <span class="type">DefaultItemAnimator</span>());</div><div class="line">    mAdapter = <span class="keyword">new</span> <span class="type">RecyclerViewAdapter</span>(<span class="built_in">this</span>,mDatas);</div><div class="line">    mRecyclerView.setAdapter(mAdapter);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>StaggeredGridLayoutManager构造的第二个参数传一个orientation，如果传入的是StaggeredGridLayoutManager.VERTICAL代表有多少列；那么传入的如果是StaggeredGridLayoutManager.HORIZONTAL就代表有多少行。</p>
<p>##3.3 效果</p>
<p><img src="http://img.blog.csdn.net/20160226170212631" alt="ALT TEXT"></p>
<p>#4.RecyclerView实现瀑布流效果</p>
<p>RecyclerView实现瀑布流效果与实现ListView效果的不同之处有三点：</p>
<ul>
<li>布局管理器为StaggeredGridLayoutManager</li>
<li>Item间隔类为DividerGridItemDecoration</li>
<li>Adapter不同，实现瀑布流需要在adaper写一个随机的高度来控制每个item的高度就可以了，通常这个高度是由服务端返回的数据高度来控制的。</li>
</ul>
<p>##4.1 实现</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 瀑布流效果</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> void setWaterfallView() &#123;</div><div class="line"></div><div class="line">    mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="type">StaggeredGridLayoutManager</span>(<span class="number">4</span>,StaggeredGridLayoutManager.VERTICAL));</div><div class="line">    mRecyclerView.addItemDecoration(<span class="keyword">new</span> <span class="type">DividerGridItemDecoration</span>(<span class="built_in">this</span>));</div><div class="line">    mRecyclerView.setItemAnimator(<span class="keyword">new</span> <span class="type">DefaultItemAnimator</span>());</div><div class="line">    mStaggeredAdapter = <span class="keyword">new</span> <span class="type">StaggeredAdapter</span>(<span class="built_in">this</span>,mDatas);</div><div class="line">    mRecyclerView.setAdapter(mStaggeredAdapter);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>StaggeredGridLayoutManager构造的第二个参数传一个orientation，如果传入的是StaggeredGridLayoutManager.VERTICAL代表有多少列；那么传入的如果是StaggeredGridLayoutManager.HORIZONTAL就代表有多少行。</p>
<p>##4.2 StaggeredAdapter</p>
<p>StaggeredAdapter写一个随机的高度来控制每个item的高度。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">package com.example.michael.recyclerviewdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 实现瀑布流的Adapter,增加一个高度列表，随机生成View的高度</div><div class="line"> * Created by Michael on 2016/2/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> StaggeredAdapter extends RecyclerView.Adapter&lt;StaggeredAdapter.MyViewHolder&gt; &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> List&lt;<span class="keyword">String</span>&gt; mDatas;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; mHeights;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OnItemClickListener mListener;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 点击事件回调接口</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> interface OnItemClickListener &#123;</div><div class="line"></div><div class="line">        <span class="keyword">void</span> onItemClick(View view, <span class="keyword">int</span> <span class="built_in">position</span>);</div><div class="line"></div><div class="line">        <span class="keyword">void</span> onItemLongClick(View view, <span class="keyword">int</span> <span class="built_in">position</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setOnItemClickListener(OnItemClickListener listener) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> StaggeredAdapter(Context context, List&lt;<span class="keyword">String</span>&gt; datas) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        mDatas = datas;</div><div class="line"></div><div class="line">        mHeights = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line"></div><div class="line">		<span class="comment">//生成随机高度</span></div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; mDatas.<span class="built_in">size</span>();i++) &#123;</div><div class="line"></div><div class="line">            mHeights.add((<span class="keyword">int</span>) (<span class="number">100</span> + Math.<span class="built_in">random</span>() * <span class="number">300</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> MyViewHolder onCreateViewHolder(ViewGroup parent, <span class="keyword">int</span> viewType) &#123;</div><div class="line"></div><div class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.item_recyclerview, parent, false);</div><div class="line"></div><div class="line">        <span class="built_in">return</span> <span class="keyword">new</span> MyViewHolder(view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onBindViewHolder(final MyViewHolder holder, final <span class="keyword">int</span> <span class="built_in">position</span>) &#123;</div><div class="line"></div><div class="line">		<span class="comment">//设置Item的高度</span></div><div class="line">        ViewGroup.LayoutParams layoutParams = holder.itemView.getLayoutParams();</div><div class="line">        layoutParams.<span class="built_in">height</span> = mHeights.<span class="built_in">get</span>(<span class="built_in">position</span>);</div><div class="line">        holder.itemView.setLayoutParams(layoutParams);</div><div class="line"></div><div class="line"></div><div class="line">        holder.mClickBtn.setText(mDatas.<span class="built_in">get</span>(<span class="built_in">position</span>));</div><div class="line"></div><div class="line">        <span class="built_in">if</span> (mListener != null) &#123;</div><div class="line"></div><div class="line">            holder.mClickBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                <span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) &#123;</div><div class="line"></div><div class="line">                    <span class="comment">//获取实际的位置</span></div><div class="line">                    <span class="keyword">int</span> pos = holder.getLayoutPosition();</div><div class="line"></div><div class="line">                    mListener.onItemClick(holder.mClickBtn,pos);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            holder.mClickBtn.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                <span class="keyword">public</span> <span class="keyword">boolean</span> onLongClick(View v) &#123;</div><div class="line"></div><div class="line">                    <span class="keyword">int</span> pos = holder.getLayoutPosition();</div><div class="line"></div><div class="line">                    mListener.onItemLongClick(holder.mClickBtn,pos);</div><div class="line"></div><div class="line">                    <span class="built_in">return</span> true;  <span class="comment">//屏蔽单击  false点击事件仍会响应</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> getItemCount() &#123;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> mDatas.<span class="built_in">size</span>();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在当前Item之前添加Item</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addPreItem(<span class="keyword">String</span> data,<span class="keyword">int</span> <span class="built_in">position</span>) &#123;</div><div class="line"></div><div class="line">        mDatas.add(<span class="built_in">position</span>,data);</div><div class="line">        mHeights.add( (<span class="keyword">int</span>) (<span class="number">100</span> + Math.<span class="built_in">random</span>() * <span class="number">300</span>));</div><div class="line">        notifyItemInserted(<span class="built_in">position</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在当前Item之后添加Item</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addNextItem(<span class="keyword">String</span> data,<span class="keyword">int</span> <span class="built_in">position</span>) &#123;</div><div class="line"></div><div class="line">        mDatas.add(<span class="built_in">position</span>+<span class="number">1</span>,data);</div><div class="line">        mHeights.add((<span class="keyword">int</span>) (<span class="number">100</span> + Math.<span class="built_in">random</span>() * <span class="number">300</span>));</div><div class="line">        notifyItemInserted(<span class="built_in">position</span> + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除Item</div><div class="line">     * @param position</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> removeItem(<span class="keyword">int</span> <span class="built_in">position</span>) &#123;</div><div class="line">        mDatas.<span class="built_in">remove</span>(<span class="built_in">position</span>);</div><div class="line">        mHeights.<span class="built_in">remove</span>(<span class="built_in">position</span>);</div><div class="line">        notifyItemRemoved(<span class="built_in">position</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">class</span> MyViewHolder extends RecyclerView.ViewHolder &#123;</div><div class="line"></div><div class="line">        TextView mClickBtn;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> MyViewHolder(View itemView) &#123;</div><div class="line">            super(itemView);</div><div class="line"></div><div class="line">            mClickBtn = (TextView) itemView.findViewById(R.id.btn_click);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##4.3 效果</p>
<p><img src="http://img.blog.csdn.net/20160226170313991" alt="ALT TEXT"></p>
<p>#5.修改分割线</p>
<p>DividerItemDecoration和DividerGridItemDecoration的实现类都是通过读取系统主题中的android.R.attr.listDivider来作为Item间的分割线，并且支持纵向和横向，获取到listDivider熟悉后，该属性的值是个Drawable，在getItemOffsets中，outRect去设置了绘制的范围，onDraw中实现了真正的绘制。</p>
<p>该分割线是系统默认的，你可以在theme.xml文件中找到该属性的使用情况。那么，使用系统的listDivide有什么好处呢？就是方便我们去随意的改变，该属性我们可以直接声明在：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Application theme. --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"AppBaseTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">     <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:listDivider"</span>&gt;</span>@drawable/divider_bg<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后自己写个Drawable即可，下面我们换一种分隔符</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"rectangle"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line">        <span class="attr">android:centerColor</span>=<span class="string">"#ff00ff00"</span></div><div class="line">        <span class="attr">android:endColor</span>=<span class="string">"#ff0000ff"</span></div><div class="line">        <span class="attr">android:startColor</span>=<span class="string">"#ffff0000"</span></div><div class="line">        <span class="attr">android:type</span>=<span class="string">"linear"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"4dp"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="http://img.blog.csdn.net/20150415150026088" alt="ALT TEXT"></p>
<p>#参考资料</p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/45059587#t7" target="_blank" rel="external">Android RecyclerView 使用完全解析 体验艺术般的控件</a><br><a href="http://blog.csdn.net/itachi85/article/details/50036285" target="_blank" rel="external">Android5.x RecyclerView 应用解析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 5.x之CardView]]></title>
      <url>http://liuguoquan727.github.io/2016/02/19/Android%205.x%E4%B9%8BCardView/</url>
      <content type="html"><![CDATA[<p>Android 5.x版本中增加了CardView控件，CardView继承自FrameLayout类，它的功能是实现在一个卡片布局中显示相同的内容，卡片布局可以设置圆角和阴影，还可以布局其他的View。CardView即可作为一般的布局使用，也可以作为RecyclerView的Item使用。</p>
<p>接来下，我们进入CardView学习之旅</p>
<p>#1.build.gradle</p>
<p>首先，和RecyclerView一样，导入v7兼容包</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:cardview-v7:23.1.1'</span> <span class="comment">//cardview</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:23.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:palette-v7:23.1.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#2.CardView</p>
<p>##2.1 布局</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:card_view</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:padding</span>=<span class="string">"5dp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--android:foreground="?android:attr/selectableItemBackground"点击CardView时前景色水波纹效果--&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/cardview"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">        <span class="attr">android:foreground</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">        <span class="attr">card_view:cardCornerRadius</span>=<span class="string">"20dp"</span></div><div class="line">        <span class="attr">card_view:cardElevation</span>=<span class="string">"20dp"</span></div><div class="line">        <span class="attr">card_view:contentPadding</span>=<span class="string">"10dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#585858"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/iv_image"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></div><div class="line">                <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">                <span class="attr">android:src</span>=<span class="string">"@drawable/mao"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/tv_msg"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"123456789"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_click"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>card_view:cardCornerRadius=”20dp”： 设置CardView的圆角半径</p>
<p>card_view:cardElevation=”20dp”： 设置CardView的阴影半径<br>card_view:contentPadding=”10dp”： 设置CardView中子控件和父控件的距离</p>
<p>##2.2 java代码调用</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.michael.recyclerviewdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.<span class="type">AppCompatActivity</span>;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.<span class="type">CardView</span>;</div><div class="line"><span class="keyword">import</span> android.view.<span class="type">View</span>;</div><div class="line"><span class="keyword">import</span> android.widget.<span class="type">Button</span>;</div><div class="line"><span class="keyword">import</span> android.widget.<span class="type">TextView</span>;</div><div class="line"><span class="keyword">import</span> android.widget.<span class="type">Toast</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Michael on 2016/2/25.</div><div class="line"> */</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CardViewActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">CardView</span> mCardView;</div><div class="line">    <span class="keyword">private</span> <span class="type">Button</span> mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_cardview);</div><div class="line"></div><div class="line">        mButton = (<span class="type">Button</span>) findViewById(<span class="type">R</span>.id.btn_click);</div><div class="line">        mCardView = (<span class="type">CardView</span>) findViewById(<span class="type">R</span>.id.cardview);</div><div class="line"></div><div class="line">        mCardView.setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            public void onClick(<span class="type">View</span> v) &#123;</div><div class="line"></div><div class="line">                <span class="type">Toast</span>.makeText(<span class="type">CardViewActivity</span>.<span class="keyword">this</span>, <span class="string">"click"</span>, <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).show();</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//找到CardView中的子View</span></div><div class="line">        <span class="type">TextView</span> mTextMsg = (<span class="type">TextView</span>) mCardView.findViewById(<span class="type">R</span>.id.tv_msg);</div><div class="line">        mTextMsg.setText(<span class="string">"text msg"</span>);</div><div class="line"></div><div class="line">        mCardView.setRadius(<span class="number">10.0</span>f);  <span class="comment">//设置CardView的圆角半径</span></div><div class="line">        mCardView.setCardElevation(<span class="number">10.0</span>f); <span class="comment">//设置CardView的阴影半径</span></div><div class="line">        mCardView.setContentPadding(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>); <span class="comment">//设置CardView的父控件与子控件的距离</span></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##2.3 运行效果</p>
<p><img src="http://img.blog.csdn.net/20160227214617558" alt="cardView"></p>
<p>#参考资料</p>
<p><a href="http://blog.csdn.net/itachi85/article/details/50067127" target="_blank" rel="external">Android5.x CardView 应用解析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 5.x之 Notification]]></title>
      <url>http://liuguoquan727.github.io/2016/02/18/Android%205.x%E4%B9%8B%20Notification/</url>
      <content type="html"><![CDATA[<p>Notification可以让我们在获得消息的时候，在状态栏、锁屏界面来显示相应的消息，如果没有Notification的话，很难想象我们的QQ和微信以及其他应用就没有办法主动通知我们，我们需要时候打开手机检查是否有新的消息到来，而这着实让人不爽。接下来，我们介绍三种Notification，分别是普通Notification，折叠式Notification和悬挂式Notification。</p>
<p>##1.普通Notification</p>
<p>首先，创建Builder对象，创建一个PendingIntent来实现消息点击跳转事件。</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Notification.Builder builder = <span class="keyword">new</span> <span class="type">Notification</span>.Builder(<span class="built_in">this</span>);</div><div class="line">Intent intent = <span class="keyword">new</span> <span class="type">Intent</span>(Intent.ACTION_VIEW, Uri.parse(<span class="string">"https://www.baidu.com/"</span>));</div><div class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="built_in">this</span>,<span class="number">0</span>,intent,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>其次，通过builder给Notification添加不同的属性：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">builder</span><span class="selector-class">.setContentIntent</span>(<span class="selector-tag">pendingIntent</span>);</div><div class="line"><span class="selector-tag">builder</span><span class="selector-class">.setSmallIcon</span>(<span class="selector-tag">R</span><span class="selector-class">.mipmap</span><span class="selector-class">.ic_launcher</span>);</div><div class="line"><span class="selector-tag">builder</span><span class="selector-class">.setLargeIcon</span>(<span class="selector-tag">BitmapFactory</span><span class="selector-class">.decodeResource</span>(<span class="selector-tag">getResources</span>(), <span class="selector-tag">R</span><span class="selector-class">.mipmap</span><span class="selector-class">.ic_launcher</span>));</div><div class="line"><span class="selector-tag">builder</span><span class="selector-class">.setAutoCancel</span>(<span class="selector-tag">true</span>);</div><div class="line"><span class="selector-tag">builder</span><span class="selector-class">.setContentTitle</span>("普通<span class="selector-tag">Notification</span>");</div></pre></td></tr></table></figure>
<p>最后，创建NotifcationManager对象，调用notify发送一个通知</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mManager = (NotificationManager) getSystemService(<span class="built_in">Context</span>.NOTIFICATION_SERVICE)<span class="comment">;</span></div><div class="line">mManager.notify(<span class="number">0</span>, <span class="keyword">builder.build());</span></div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://img.blog.csdn.net/20160312221647150" alt="普通Notification"></p>
<p>##2.折叠式Notification</p>
<p>折叠式Notification是一种自定义视图的Notification，用来显示长文本和一些自定义的布局的场景。它有两种状态，一种是普通状态下的视图（如果不是自定义的话和上面普通通知的视图样式一样）；一种是展开状态下的视图，它需要自定义视图，并且这个自定义视图的显示的进程和我们创建视图的进程不是一个进程，需要使用RemoteViews。</p>
<p>首先，使用RemoteViews创建自定义视图</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用RemoteViews来创建自定义Notification视图</span></div><div class="line">RemoteViews remoteViews = <span class="keyword">new</span> <span class="type">RemoteViews</span>(getPackageName(),R.layout.fold_notification);</div></pre></td></tr></table></figure>
<p>视图的布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#000000"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffffff"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"自定义的视图"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffffff"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"折叠式通知"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其次，把自定义视图赋给Notification</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//赋值给Notification展开时的视图</span></div><div class="line">notification.bigContentView = remoteViews;</div><div class="line">或</div><div class="line"><span class="comment">//赋值给Notification普通状态时的视图</span></div><div class="line">notification.contentView = remoteViews;</div></pre></td></tr></table></figure>
<p>折叠式Notification的完整代码为:</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="type">Notification</span>.<span class="type">Builder</span> builder = <span class="function"><span class="keyword">new</span> <span class="title">Notification</span>.<span class="title">Builder</span>(this);</span></div><div class="line"><span class="title">Intent</span> <span class="title">intent</span> = <span class="title">new</span> <span class="title">Intent</span>(<span class="type">Intent</span>.<span class="type">ACTION_VIEW</span>, <span class="type">Uri</span>.parse("https://www.baidu.com/"));</div><div class="line"><span class="title">PendingIntent</span> <span class="title">pendingIntent</span> = <span class="title">PendingIntent</span>.<span class="title">getActivity</span>(this,<span class="number">0</span>,intent,<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="title">builder</span>.<span class="title">setContentIntent</span>(pendingIntent);</div><div class="line"><span class="title">builder</span>.<span class="title">setSmallIcon</span>(<span class="type">R</span>.mipmap.ic_launcher);</div><div class="line"><span class="title">builder</span>.<span class="title">setLargeIcon</span>(<span class="type">BitmapFactory</span>.decodeResource(getResources(), <span class="title">R</span>.<span class="title">mipmap</span>.<span class="title">ic_launcher</span>));</div><div class="line"><span class="title">builder</span>.<span class="title">setAutoCancel</span>(true);</div><div class="line"><span class="title">builder</span>.<span class="title">setContentTitle</span>("折叠式<span class="type">Notification</span>");</div><div class="line"></div><div class="line"><span class="comment">//用RemoteViews来创建自定义Notification视图</span></div><div class="line"><span class="title">RemoteViews</span> <span class="title">remoteViews</span> = <span class="title">new</span> <span class="title">RemoteViews</span>(getPackageName(),<span class="title">R</span>.<span class="title">layout</span>.<span class="title">fold_notification</span>);</div><div class="line"><span class="title">Notification</span> <span class="title">notification</span> = <span class="title">builder</span>.<span class="title">build</span>();</div><div class="line"><span class="comment">//指定展开的视图</span></div><div class="line"><span class="title">notification</span>.<span class="title">bigContentView</span> = <span class="title">remoteViews</span>;</div><div class="line"></div><div class="line"><span class="title">mManager</span>.<span class="title">notify</span>(<span class="number">1</span>,notification);</div></pre></td></tr></table></figure>
<p>如果不是自定义普通视图的话，折叠式Notification普通状态和普通Notification没有什么区别，效果如下。</p>
<p><img src="" alt="普通Notification"></p>
<p>接着把通知栏往下拉，使折叠式Notification完全展开就会出现自定义视图</p>
<p><img src="http://img.blog.csdn.net/20160312221555540" alt="折叠式Notification"></p>
<p>##3.悬挂式Notification</p>
<p>悬挂式Notification是Android 5.0新加的通知方式，与前两种通知不同的是，悬挂式Notification不需要下拉通知栏就直接显示出来悬挂在屏幕上方并且不会占用用户的焦点因此不会打断用户的操作，过几秒就自动消失。</p>
<p>需要调用setFullScreenIntent来讲Notification变为悬挂式Notification。</p>
<p>悬挂式Notification的代码如下:</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="type">Notification</span>.<span class="type">Builder</span> builder = <span class="function"><span class="keyword">new</span> <span class="title">Notification</span>.<span class="title">Builder</span>(this);</span></div><div class="line"><span class="title">Intent</span> <span class="title">intent</span> = <span class="title">new</span> <span class="title">Intent</span>(<span class="type">Intent</span>.<span class="type">ACTION_VIEW</span>, <span class="type">Uri</span>.parse("https://www.baidu.com/"));</div><div class="line"><span class="title">PendingIntent</span> <span class="title">pendingIntent</span> = <span class="title">PendingIntent</span>.<span class="title">getActivity</span>(this,<span class="number">0</span>,intent,<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="title">builder</span>.<span class="title">setContentIntent</span>(pendingIntent);</div><div class="line"><span class="title">builder</span>.<span class="title">setSmallIcon</span>(<span class="type">R</span>.mipmap.ic_launcher);</div><div class="line"><span class="title">builder</span>.<span class="title">setLargeIcon</span>(<span class="type">BitmapFactory</span>.decodeResource(getResources(), <span class="title">R</span>.<span class="title">mipmap</span>.<span class="title">ic_launcher</span>));</div><div class="line"><span class="title">builder</span>.<span class="title">setAutoCancel</span>(true);</div><div class="line"><span class="title">builder</span>.<span class="title">setContentTitle</span>("悬挂式<span class="type">Notification</span>");</div><div class="line"></div><div class="line"><span class="comment">//设置点击跳转</span></div><div class="line"><span class="title">Intent</span> <span class="title">hangIntent</span> = <span class="title">new</span> <span class="title">Intent</span>(<span class="type">Intent</span>.<span class="type">ACTION_VIEW</span>, <span class="type">Uri</span>.parse("https://www.baidu.com/"));</div><div class="line"><span class="title">hangIntent</span>.<span class="title">setFlags</span>(<span class="type">Intent</span>.<span class="type">FLAG_ACTIVITY_NEW_TASK</span>);</div><div class="line"><span class="comment">//如果描述的PendingIntent已经存在，则在产生新的Intent之前会先取消当前的</span></div><div class="line"><span class="title">PendingIntent</span> <span class="title">hangPendingIntent</span> = <span class="title">PendingIntent</span>.<span class="title">getActivity</span>(this,<span class="number">0</span>,hangIntent,<span class="type">PendingIntent</span>.<span class="type">FLAG_CANCEL_CURRENT</span>);</div><div class="line"><span class="title">builder</span>.<span class="title">setFullScreenIntent</span>(hangPendingIntent,true);</div><div class="line"></div><div class="line"><span class="title">Notification</span> <span class="title">notification</span> = <span class="title">builder</span>.<span class="title">build</span>();</div><div class="line"></div><div class="line"><span class="title">mManager</span>.<span class="title">notify</span>(<span class="number">2</span>,notification);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://img.blog.csdn.net/20160312221613018" alt="折叠式Notification"></p>
<p>##4.Notification的等级</p>
<p>Android5.0加入了一种新的模式Notification的等级，有三种：</p>
<ul>
<li>VISIBILITY_PUBLIC 只有在没有锁屏时会显示通知</li>
<li>VISIBILITY_PRIVATE 任何情况都会显示通知</li>
<li>VISIBILITY_SECRET 在安全锁和没有锁屏的情况下显示通知</li>
</ul>
<p>只需通过Builder的setVisibility方法就可以了</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">builder</span><span class="selector-class">.setVisibility</span>(<span class="selector-tag">Notification</span><span class="selector-class">.VISIBILITY_PUBLIC</span>);</div></pre></td></tr></table></figure>
<p>##参考文章</p>
<p><a href="http://blog.csdn.net/itachi85/article/details/50096609" target="_blank" rel="external"> Android5.x Notification应用解析 </a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程之多线程同步]]></title>
      <url>http://liuguoquan727.github.io/2015/12/26/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      <content type="html"><![CDATA[<p>线程安全就是防止某个对象或者值在多个线程中被修改而导致的数据不一致问题，因此我们就需要通过同步机制保证在同一时刻只有一个线程能够访问到该对象或数据，修改数据完毕之后，再将最新数据同步到主存中，使得其他线程都能够得到这个最新数据。下面我们就来了解Java一些基本的同步机制。</p>
<h1 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h1><p>Java提供了一种稍弱的同步机制即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的。然而，在访问volatile变量时不会执行加锁操作，因此也就不会使线程阻塞，因此volatile变量是一种比synchronized关键字更轻量级的同步机制。</p>
<p>volatile变量对所有的线程都是可见的，对volatile变量所有的写操作都能立即反应到其他线程之中，即volatile变量在各个线程中是一致的。</p>
<p>有一种情况需要注意：volatile的语义不能确保递增（count++）的原子性，除非你能确保只有一个线程对变量执行写操作。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class VolatileTest&#123;</div><div class="line">    </div><div class="line">    public static volatile int  i;</div><div class="line"></div><div class="line">    public static void increase()&#123;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">查看字节码: javap -c -l VolatileTest.class</div><div class="line"></div><div class="line">public class VolatileTest &#123;</div><div class="line">  public static volatile int i;</div><div class="line"> </div><div class="line">  public VolatileTest();</div><div class="line">    Code:</div><div class="line">       0: aload_0       </div><div class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</div><div class="line">       4: return        </div><div class="line">    LineNumberTable:</div><div class="line">      line 1: 0</div><div class="line"> </div><div class="line">  public static void increase();</div><div class="line">    Code:</div><div class="line">       0: getstatic     #2                  // Field i:I, 把i的值取到了操作栈顶,volatile保证了i值此时是正确的. </div><div class="line">       3: iconst_1      </div><div class="line">       4: iadd                              // increase,但其他线程此时可能已经把i值加大了好多</div><div class="line">       5: putstatic     #2                  // Field i:I ,把这个已经out of date的i值同步回主内存中,i值被破坏了.</div><div class="line">       8: return        </div><div class="line">    LineNumberTable:</div><div class="line">      line 6: 0</div><div class="line">      line 7: 8</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>加锁机制即可以确保原子性又可以确保可见性，而volatile变量只能确保可见性。</p>
</blockquote>
<h1 id="内置锁-synchronized"><a href="#内置锁-synchronized" class="headerlink" title="内置锁-synchronized"></a>内置锁-synchronized</h1><p>Java中最常用的同步机制就是synchronized关键字，它是一种基于语言的粗略锁，能够作用于对象、函数、Class。每个对象都只有一个锁，谁能够拿到这个锁谁就得到了访问权限。当synchronized作用于函数时，实际上锁的也是对象，锁定的对象是该函数所在类的对象。而synchronized作用于Class时则锁的是这个Class类，并非某个具体对象。</p>
<h2 id="synchronized同步方法和同步块"><a href="#synchronized同步方法和同步块" class="headerlink" title="synchronized同步方法和同步块"></a>synchronized同步方法和同步块</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line">public class SynchronizedDemo &#123;</div><div class="line">	</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * @param args</div><div class="line">	 */</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		final Test test = new Test();</div><div class="line"></div><div class="line">		new Thread(new Runnable() &#123;</div><div class="line">			</div><div class="line">			@Override</div><div class="line">			public void run() &#123;</div><div class="line">				// TODO Auto-generated method stub</div><div class="line">				test.syncMethod(Thread.currentThread());</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line">		</div><div class="line">		new Thread(new Runnable() &#123;</div><div class="line">			</div><div class="line">			@Override</div><div class="line">			public void run() &#123;</div><div class="line">				// TODO Auto-generated method stub</div><div class="line">				test.syncMethod(Thread.currentThread());</div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line">		</div><div class="line">		new Thread(new Runnable() &#123;</div><div class="line">			</div><div class="line">			@Override</div><div class="line">			public void run() &#123;</div><div class="line">				// TODO Auto-generated method stub</div><div class="line">				test.asyncMethod(Thread.currentThread());</div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Test &#123;</div><div class="line">	</div><div class="line">	public synchronized void syncMethod(Thread thread) &#123;</div><div class="line">		for(int i = 0;i &lt; 3;i++) &#123;</div><div class="line">			System.out.println(thread.getName());</div><div class="line">			try &#123;</div><div class="line">				Thread.sleep(100);</div><div class="line">			&#125; catch (InterruptedException e) &#123;</div><div class="line">				// TODO Auto-generated catch block</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void asyncMethod(Thread thread) &#123;</div><div class="line">		</div><div class="line">		synchronized (this) &#123;</div><div class="line">			</div><div class="line">			for(int i = 0;i &lt; 3;i++) &#123;</div><div class="line">				System.out.println(thread.getName()+2);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">syncMethod和asyncMethod代码块都加锁时结果:</div><div class="line"></div><div class="line">Thread-0</div><div class="line">Thread-0</div><div class="line">Thread-0</div><div class="line">Thread-1</div><div class="line">Thread-1</div><div class="line">Thread-1</div><div class="line">Thread-2</div><div class="line">Thread-2</div><div class="line">Thread-2  #多个线程不能同时访问同一个对象中的synchronized锁的方法或代码块</div><div class="line"></div><div class="line">syncMethod加锁和asyncMethod代码块不加锁时结果:</div><div class="line"></div><div class="line">class Test &#123;</div><div class="line">	</div><div class="line">	public synchronized void syncMethod(Thread thread) &#123;</div><div class="line">		for(int i = 0;i &lt; 3;i++) &#123;</div><div class="line">			System.out.println(thread.getName());</div><div class="line">			try &#123;</div><div class="line">				Thread.sleep(100);</div><div class="line">			&#125; catch (InterruptedException e) &#123;</div><div class="line">				// TODO Auto-generated catch block</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void asyncMethod(Thread thread) &#123;</div><div class="line">		</div><div class="line">		synchronized (this) &#123;</div><div class="line">			</div><div class="line">			for(int i = 0;i &lt; 3;i++) &#123;</div><div class="line">				System.out.println(thread.getName());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Thread-0</div><div class="line">Thread-22</div><div class="line">Thread-22</div><div class="line">Thread-22</div><div class="line">Thread-0</div><div class="line">Thread-0</div><div class="line">Thread-1</div><div class="line">Thread-1</div><div class="line">Thread-1  #其他线程可以访问同一个对象的非同步方法或代码块</div><div class="line"></div><div class="line">syncMethod不加锁和asyncMethod代码块不加锁时结果:</div><div class="line"></div><div class="line">class Test &#123;</div><div class="line">	</div><div class="line">	public void syncMethod(Thread thread) &#123;</div><div class="line">		for(int i = 0;i &lt; 3;i++) &#123;</div><div class="line">			System.out.println(thread.getName());</div><div class="line">			try &#123;</div><div class="line">				Thread.sleep(100);</div><div class="line">			&#125; catch (InterruptedException e) &#123;</div><div class="line">				// TODO Auto-generated catch block</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void asyncMethod(Thread thread) &#123;</div><div class="line">		</div><div class="line">			for(int i = 0;i &lt; 3;i++) &#123;</div><div class="line">				System.out.println(thread.getName()+2);</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Thread-0</div><div class="line">Thread-1</div><div class="line">Thread-22</div><div class="line">Thread-22</div><div class="line">Thread-22</div><div class="line">Thread-0</div><div class="line">Thread-1</div><div class="line">Thread-1</div><div class="line">Thread-0</div></pre></td></tr></table></figure>
<p>synchronized同步方法和同步块锁定的是引用对象，synchronized作用于引用对象是防止其他线程访问同一个对象的synchronized代码块或方法，但可以访问其他非同步代码块或方法。</p>
<h2 id="synchronized同步Class对象和静态方法"><a href="#synchronized同步Class对象和静态方法" class="headerlink" title="synchronized同步Class对象和静态方法"></a>synchronized同步Class对象和静态方法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line">public class SynchronizedDemo &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * @param args</div><div class="line">	 */</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		final Test test = new Test();</div><div class="line"></div><div class="line">		new Thread(new Runnable() &#123;</div><div class="line"></div><div class="line">			@Override</div><div class="line">			public void run() &#123;</div><div class="line">				// TODO Auto-generated method stub</div><div class="line">				Test.syncStaticMethod(Thread.currentThread());</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line"></div><div class="line">		new Thread(new Runnable() &#123;</div><div class="line"></div><div class="line">			@Override</div><div class="line">			public void run() &#123;</div><div class="line">				// TODO Auto-generated method stub</div><div class="line">				Test.syncStaticMethod(Thread.currentThread());</div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line"></div><div class="line">		new Thread(new Runnable() &#123;</div><div class="line"></div><div class="line">			@Override</div><div class="line">			public void run() &#123;</div><div class="line">				// TODO Auto-generated method stub</div><div class="line">				Test.asyncStaticMethod(Thread.currentThread());</div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Test &#123;</div><div class="line"></div><div class="line">	public synchronized static void syncStaticMethod(Thread thread) &#123;</div><div class="line"></div><div class="line">		for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">			System.out.println(thread.getName());</div><div class="line">			try &#123;</div><div class="line">				Thread.sleep(50);</div><div class="line">			&#125; catch (InterruptedException e) &#123;</div><div class="line">				// TODO Auto-generated catch block</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void asyncStaticMethod(Thread thread) &#123;</div><div class="line"></div><div class="line">		synchronized (Test.class) &#123;</div><div class="line">			for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">				System.out.println(thread.getName() + 22);</div><div class="line">				try &#123;</div><div class="line">					Thread.sleep(50);</div><div class="line">				&#125; catch (InterruptedException e) &#123;</div><div class="line">					// TODO Auto-generated catch block</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">syncStaticMethod和asyncStaticMethod代码块都加锁的结果:</div><div class="line"></div><div class="line">Thread-0</div><div class="line">Thread-0</div><div class="line">Thread-0</div><div class="line">Thread-222</div><div class="line">Thread-222</div><div class="line">Thread-222</div><div class="line">Thread-1</div><div class="line">Thread-1</div><div class="line">Thread-1  ##多个线程不能同时访问添加了synchronized锁的代码块和方法。</div><div class="line"></div><div class="line">syncStaticMethod加锁和asyncStaticMethod代码块不加锁的结果:</div><div class="line"></div><div class="line">class Test &#123;</div><div class="line"></div><div class="line">	public synchronized static void syncStaticMethod(Thread thread) &#123;</div><div class="line"></div><div class="line">		for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">			System.out.println(thread.getName());</div><div class="line">			try &#123;</div><div class="line">				Thread.sleep(50);</div><div class="line">			&#125; catch (InterruptedException e) &#123;</div><div class="line">				// TODO Auto-generated catch block</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void asyncStaticMethod(Thread thread) &#123;</div><div class="line"></div><div class="line">			for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">				System.out.println(thread.getName() + 22);</div><div class="line">				try &#123;</div><div class="line">					Thread.sleep(50);</div><div class="line">				&#125; catch (InterruptedException e) &#123;</div><div class="line">					// TODO Auto-generated catch block</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Thread-0</div><div class="line">Thread-222</div><div class="line">Thread-222</div><div class="line">Thread-0</div><div class="line">Thread-0</div><div class="line">Thread-222</div><div class="line">Thread-1</div><div class="line">Thread-1</div><div class="line">Thread-1 ##多个线程可以同时访问非同步的代码块和方法</div><div class="line"></div><div class="line">syncStaticMethod加锁和asyncStaticMethod代码块都不加锁的结果:</div><div class="line"></div><div class="line">class Test &#123;</div><div class="line"></div><div class="line">	public static void syncStaticMethod(Thread thread) &#123;</div><div class="line"></div><div class="line">		for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">			System.out.println(thread.getName());</div><div class="line">			try &#123;</div><div class="line">				Thread.sleep(50);</div><div class="line">			&#125; catch (InterruptedException e) &#123;</div><div class="line">				// TODO Auto-generated catch block</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void asyncStaticMethod(Thread thread) &#123;</div><div class="line"></div><div class="line">			for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">				System.out.println(thread.getName() + 22);</div><div class="line">				try &#123;</div><div class="line">					Thread.sleep(50);</div><div class="line">				&#125; catch (InterruptedException e) &#123;</div><div class="line">					// TODO Auto-generated catch block</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Thread-0</div><div class="line">Thread-1</div><div class="line">Thread-222</div><div class="line">Thread-1</div><div class="line">Thread-0</div><div class="line">Thread-222</div><div class="line">Thread-1</div><div class="line">Thread-0</div><div class="line">Thread-222</div></pre></td></tr></table></figure>
<p>synchronized同步Class对象和静态方法锁的是Class对象，它的作用是防止多个线程同时访问添加了synchronized锁的代码块和方法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>当一个线程正在访问一个对象的synchronized方法，那么其他线程不能访问该对象的其他synchronized方法，因为一个对象只有一把锁，当一个线程获取了该对象的锁之后，其他线程无法获取该对象的锁，所有无法访问该对象的其他synchronized方法。</p>
</li>
<li><p>当一个线程正在访问一个对象的synchronized方法，那么其他线程能访问该对象的非synchronized方法。因为非synchronized方法不需要获取该对象的锁。</p>
</li>
<li><p>如果一个线程A需要访问对象object1的synchronized方法fun1，另外一个线程B需要访问对象object2的synchronized方法fun1，即使object1和object2是同一类型，也不会产生线程安全问题，因为他们访问的是不同的对象，所以不存在互斥问题。</p>
</li>
<li><p>如果一个线程执行一个对象的非static synchronized方法，另一个线程执行这个对象所属类的static synchronized方法，此时不会发生互斥现象，因为访问static synchronized方法占用的是类锁，而访问非static synchronized方法占用的是对象锁，所以不存在互斥现象。</p>
</li>
</ul>
<p>需要注意的是：对于synchronized方法或者synchronized代码块，当出现异常时，JVM会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象。</p>
<h1 id="显示锁-ReentrantLock与Condition"><a href="#显示锁-ReentrantLock与Condition" class="headerlink" title="显示锁-ReentrantLock与Condition"></a>显示锁-ReentrantLock与Condition</h1><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>在JDk 5.0之前，协调共享对象的访问时，只有synchronized和volatile。Java 6.0增加了一种新的机制：ReentrantLock。显示锁ReentrantLock和内置锁synchronized相比，实现了相同的语义，但是具有更高的灵活性。</p>
<p>内置锁synchronized的获取和释放都在同一个代码块中，而显示锁ReentrantLock则可以将锁的获得和释放分开。同时显示锁可以提供轮训锁和定时锁，同时可以提供公平锁或者非公平锁。</p>
<p>ReentrantLock的基本操作如下：</p>
<table>
<thead>
<tr>
<th>函   数</th>
<th>作   用</th>
</tr>
</thead>
<tbody>
<tr>
<td>lock()</td>
<td>获取锁</td>
</tr>
<tr>
<td>tryLock()</td>
<td>尝试获取锁</td>
</tr>
<tr>
<td>tryLock(timeout,Timeunit unit)</td>
<td>在指定时间内尝试获取锁</td>
</tr>
<tr>
<td>unLock()</td>
<td>释放锁</td>
</tr>
<tr>
<td>newCondition</td>
<td>获取锁的Condition</td>
</tr>
</tbody>
</table>
<p>使用ReentrantLock的一般是lock、tryLock与unLock成对出现，需要注意的是，千万不要忘记调用unLock来释放锁，否则会引发死锁等问题。</p>
<p>ReentrantLock的常用形式如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	lock.lock();</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">		<span class="comment">//执行任务</span></div><div class="line"></div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是，lock必须在finally块中释放，否则，如果受保护的代码块抛出异常，锁就有可能永远得不到释放。而使用synchronized同步，JVM将确保锁会获得自动释放，这也是Lock没有完全替代掉synchronized的原因。</p>
</blockquote>
<p>当JVM用synchronized管理锁定请求和释放行为时，JVM在生成线程转储时能够包括锁定信息，这些对调式有非常大的价值，因为它们能标识死锁和其他异常行为的来源。Lock类只是普通的类，JVM不知道具体哪个线程拥有Lock对象。</p>
<h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p>在ReentrantLock类中有一个重要的函数newCondition()，该函数用于获取lock上的一个条件，也就是说Condition是和Lock绑定的。Condition用于实现线程间的通信，它是为了解决Object.wait()、notify()、notifyAll()难以使用的问题。</p>
<p>Condition的基本操作如下所示：</p>
<table>
<thead>
<tr>
<th>方  法</th>
<th>作  用</th>
</tr>
</thead>
<tbody>
<tr>
<td>await()</td>
<td>线程等待</td>
</tr>
<tr>
<td>await(int time,TimeUnit unit)</td>
<td>线程等待特定的时间，超过时间则为超时</td>
</tr>
<tr>
<td>signal()</td>
<td>随机唤醒某个等待线程</td>
</tr>
<tr>
<td>signalAll()</td>
<td>唤醒所有等待中的线程</td>
</tr>
</tbody>
</table>
<h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><p>下面通过ReentrantLock和Condition类实现一个简单的阻塞队列。如果调用take方法时集合中没有数据，那么调用线程阻塞；如果调用put方法时，集合数据已满则调用线程阻塞。但是这两个阻塞条件是不同的，分别为notFull和notEmpty。MyArrayBlockingQueue的实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayBlockingQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 数据数组</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> T[] items;</div><div class="line">	<span class="comment">// 锁</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Lock mLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">	<span class="comment">// 数组满的条件</span></div><div class="line">	<span class="keyword">private</span> Condition notFull = mLock.newCondition();</div><div class="line">	<span class="comment">// 数组空的条件</span></div><div class="line">	<span class="keyword">private</span> Condition notEmpty = mLock.newCondition();</div><div class="line"></div><div class="line">	<span class="comment">// 头部</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> head;</div><div class="line">	<span class="comment">// 尾部</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> tail;</div><div class="line">	<span class="comment">// 数据数量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">		items = (T[]) <span class="keyword">new</span> Object[maxSize];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyArrayBlockingQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">		<span class="keyword">this</span>(<span class="number">10</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</div><div class="line"></div><div class="line">		mLock.lock();</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			<span class="comment">// 如果数据已满,等待</span></div><div class="line">			<span class="keyword">while</span> (count == getCapacity()) &#123;</div><div class="line">				System.out.println(<span class="string">"数据已满，请等待"</span>);</div><div class="line">				notFull.await();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"存入数据"</span>);</div><div class="line"></div><div class="line">			items[tail] = t;</div><div class="line">			<span class="keyword">if</span> (++tail == getCapacity()) &#123;</div><div class="line">				tail = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			++count;</div><div class="line">			<span class="comment">// 唤醒等待数据的线程</span></div><div class="line">			notEmpty.signalAll();</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			mLock.unlock();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">take</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		mLock.lock();</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			<span class="comment">// 如果数组数据为空，则阻塞</span></div><div class="line">			<span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</div><div class="line">				System.out.println(<span class="string">"还没有数据，等待"</span>);</div><div class="line">				notEmpty.await();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"取出数据"</span>);</div><div class="line"></div><div class="line">			T t = items[head];</div><div class="line">			items[head] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (++head == getCapacity()) &#123;</div><div class="line">				head = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			--count;</div><div class="line">			<span class="comment">// 唤醒添加数据的线程</span></div><div class="line">			notFull.signalAll();</div><div class="line">			<span class="keyword">return</span> t;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			mLock.unlock();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> items.length;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">		mLock.lock();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">return</span> count;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			mLock.unlock();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">final</span> MyArrayBlockingQueue&lt;String&gt; mQueue = <span class="keyword">new</span> MyArrayBlockingQueue&lt;&gt;(</div><div class="line">				<span class="number">5</span>);</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> i  = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)</div><div class="line">					mQueue.put(<span class="string">"just"</span>);</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">50</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line"></div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">					</div><div class="line">					mQueue.take();</div><div class="line"></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印</div><div class="line">存入数据</div><div class="line">存入数据</div><div class="line">存入数据</div><div class="line">取出数据</div><div class="line">取出数据</div><div class="line">取出数据</div><div class="line">还没有数据，等待</div><div class="line">存入数据</div><div class="line">存入数据</div><div class="line">存入数据</div><div class="line">取出数据</div><div class="line">取出数据</div><div class="line">取出数据</div><div class="line">还没有数据，等待</div></pre></td></tr></table></figure>
<h1 id="信号量-Semaphore"><a href="#信号量-Semaphore" class="headerlink" title="信号量-Semaphore"></a>信号量-Semaphore</h1><p>Semaphore是一个计数信号量，它的本质是一个“共享锁”。信号量维护一个信号许可集合，线程可以通过调用acquire()来获取信号量的许可。当信号量有可用的许可时，线程能获取该许可；否则线程必须等到，直到有可用的许可为止。线程可以通过release()来释放它所持有的信号量许可。</p>
<p>Semaphore实现的功能类似食堂窗口。例如，食堂只有3个销售窗口，要吃饭的有5个人，那么同时只有3个人买饭菜，每个人占用一个窗口，另外2人只能等待。当前3个人有人离开之后，后续的人才可以占用窗口进行购买。这里的窗口就是我们所说的许可集，这里为3.一个人占用窗口时相当于他调用acquire()获取了许可，当他离开时也就等于调用release()释放了许可，这样后续的人才可以得到许可。下面看看具体的示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</div><div class="line">		<span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) &#123;</div><div class="line">			</div><div class="line">			service.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">				</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						semaphore.acquire();</div><div class="line">						System.out.println(<span class="string">"剩余许可: "</span> + semaphore.availablePermits());</div><div class="line">						Thread.sleep(<span class="number">2000</span>);</div><div class="line">						semaphore.release();</div><div class="line">						</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">剩余许可: <span class="number">0</span></div><div class="line">剩余许可: <span class="number">0</span></div><div class="line">剩余许可: <span class="number">0</span></div><div class="line"></div><div class="line">剩余许可: <span class="number">2</span></div><div class="line">剩余许可: <span class="number">1</span></div></pre></td></tr></table></figure>
<p>上述结果中：前三行是立刻输出的，后两行是等待2秒之后才输出。原因是，信号量的许可集是3个，而消费线程是5个。前3个线程获取了许可之后，信号量的许可就为0。此时后面的线程再调用acquire()就会阻塞，直到前3个线程执行完之后，释放了许可（不需要同时释放许可）后两个线程才能获取许可并且继续执行。</p>
<h1 id="循环栅栏-CyclicBarrier"><a href="#循环栅栏-CyclicBarrier" class="headerlink" title="循环栅栏-CyclicBarrier"></a>循环栅栏-CyclicBarrier</h1><p>CyclicBarrier是一个同步辅助类，允许一组线程互相等待，直到达到某个公共屏障点。因为该barrier在释放等待线程后可以重用，所有称为循环的barrier。</p>
<p>下面看看示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierTest</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">5</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier mCyclicBarrier;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		mCyclicBarrier = <span class="keyword">new</span> CyclicBarrier(SIZE, <span class="keyword">new</span> Runnable() &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				System.out.println(<span class="string">"--满足条件执行特定操作，参与者： "</span>+ mCyclicBarrier.getParties());</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; SIZE;i++) &#123;</div><div class="line">			<span class="keyword">new</span> WorkerThread().start();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				System.out.println(Thread.currentThread().getName() + <span class="string">"等待CyclicBarrier"</span>);</div><div class="line">				<span class="comment">//将mCyclicBarrier的参与者数量加1</span></div><div class="line">				mCyclicBarrier.await();</div><div class="line">				<span class="comment">//mCyclicBarrier的参与者数量加5时，才继续往后执行</span></div><div class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">"继续执行"</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">Thread-<span class="number">1</span>等待CyclicBarrier</div><div class="line">Thread-<span class="number">0</span>等待CyclicBarrier</div><div class="line">Thread-<span class="number">2</span>等待CyclicBarrier</div><div class="line">Thread-<span class="number">3</span>等待CyclicBarrier</div><div class="line">Thread-<span class="number">4</span>等待CyclicBarrier</div><div class="line">--满足条件执行特定操作，参与者： <span class="number">5</span></div><div class="line">Thread-<span class="number">4</span>继续执行</div><div class="line">Thread-<span class="number">3</span>继续执行</div><div class="line">Thread-<span class="number">2</span>继续执行</div><div class="line">Thread-<span class="number">0</span>继续执行</div><div class="line">Thread-<span class="number">1</span>继续执行</div></pre></td></tr></table></figure>
<p>从结果可以看出，只有当有5个线程调用了mCyclicBarrier.await()方法后，后续的任务才会继续执行。上述例子中的5个WorkThread就位之后首先会执行一个Runnable，也就是CyclicBarrier构造函数的第二个参数，该参数也可以省略。执行该Runnable之后才会继续执行下面的任务。CyclicBarrier实际上相当于可以用于多个线程等待，直到某个条件被满足后开始继续执行后续的任务。对于该示例来说，这里的条件也就是有指定个数的线程调用了mCyclicBarrier.await()方法。</p>
<h1 id="闭锁-CountDownLatch"><a href="#闭锁-CountDownLatch" class="headerlink" title="闭锁-CountDownLatch"></a>闭锁-CountDownLatch</h1><p>CountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待，直到条件被满足。</p>
<p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchTest</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LATCH_SIZE = <span class="number">5</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			</div><div class="line">			CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(LATCH_SIZE);</div><div class="line">			</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LATCH_SIZE;i++) &#123;</div><div class="line">				<span class="keyword">new</span> WorkerThread(countDownLatch).start();</div><div class="line">			&#125;</div><div class="line">	</div><div class="line">			System.out.println(<span class="string">"主线程等待"</span>);</div><div class="line">			</div><div class="line">			countDownLatch.await();</div><div class="line">			</div><div class="line">			System.out.println(<span class="string">"主线程继续执行"</span>);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">private</span> CountDownLatch latch;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">WorkerThread</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.latch = latch;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">1000</span>);</div><div class="line">				System.out.println(Thread.currentThread().getName() + <span class="string">"执行操作"</span>);</div><div class="line">				<span class="comment">//将latch的数量减1</span></div><div class="line">				latch.countDown();</div><div class="line">				</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">主线程等待</div><div class="line">Thread-<span class="number">3</span>执行操作</div><div class="line">Thread-<span class="number">1</span>执行操作</div><div class="line">Thread-<span class="number">0</span>执行操作</div><div class="line">Thread-<span class="number">4</span>执行操作</div><div class="line">Thread-<span class="number">2</span>执行操作</div><div class="line">主线程继续执行</div></pre></td></tr></table></figure>
<p>5个WorkThread对象在执行完操作之后会调用CountDownLatch的countDown()函数，当5个WorkThread全都调用了countDown()之后主线程就会被唤醒继续执行任务。</p>
<h1 id="CountDownLatch与CyclicBarrier区别"><a href="#CountDownLatch与CyclicBarrier区别" class="headerlink" title="CountDownLatch与CyclicBarrier区别"></a>CountDownLatch与CyclicBarrier区别</h1><ul>
<li><p>CountDownLatch的作用是允许1或者多个线程等待其他线程完成执行，而CyclicBarrier则是允许N个线程相互等待。</p>
</li>
<li><p>CountDownLatch的计数器无法被重置，CyclicBarrier的计数器可以被重置后使用。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程之多线程和线程池]]></title>
      <url>http://liuguoquan727.github.io/2015/12/26/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<p>线程允许在同一个进程中同时存在多个程序控制流，即通过线程可以实现同时处理多个任务的功能。线程会共享进程范围内的资源，例如内存句柄和文件句柄，但每个线程都有各自的程序计数器、栈以及局部变量。</p>
<h1 id="多线程的实现"><a href="#多线程的实现" class="headerlink" title="多线程的实现"></a>多线程的实现</h1><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>对于Java的多线程来说，我们学习的一般都是Thread和Runnable，通过我们使用如下代码启动一个新的线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startewThread</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">new</span> Thread()&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">			<span class="comment">// 耗时任务</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;.start();</div><div class="line">&#125;</div><div class="line">或者</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startewThread1</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// 耗时任务</span></div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一种是覆写了Thread类中的run方法执行任务；第二种是实现Runnable接口中的run方法执行任务。</p>
<p>那么Thread和Runnable是什么关系呢？</p>
<h2 id="Thread和Runnable的关系"><a href="#Thread和Runnable的关系" class="headerlink" title="Thread和Runnable的关系"></a>Thread和Runnable的关系</h2><p>实际上Thread也是一个Runnable，它实现了Runnable接口，在Thread类中有一个Runnable类型的target字段，代表要被执行在这个子线程的任务。相关代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//要执行的目标任务</span></div><div class="line">    <span class="keyword">private</span> Runnable target;</div><div class="line">	<span class="comment">//线程所属的线程组</span></div><div class="line">    <span class="keyword">private</span> ThreadGroup group;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">()</span> </span>&#123;</div><div class="line">		init(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span> </span>&#123;</div><div class="line">        init(<span class="keyword">null</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span></div><div class="line">                      <span class="keyword">long</span> stackSize, AccessControlContext acc) &#123;</div><div class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name cannot be null"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.name = name.toCharArray();</div><div class="line"></div><div class="line">        Thread parent = currentThread();</div><div class="line">        SecurityManager security = System.getSecurityManager();</div><div class="line">        <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">/* Determine if it's an applet or not */</span></div><div class="line"></div><div class="line">            <span class="comment">/* If there is a security manager, ask the security manager</span></div><div class="line">               what to do. */</div><div class="line">            <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</div><div class="line">                g = security.getThreadGroup();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            /group为<span class="keyword">null</span>则获取当前线程的线程组</div><div class="line">               use the parent thread group. */</div><div class="line">            <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</div><div class="line">                g = parent.getThreadGroup();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* checkAccess regardless of whether or not threadgroup is</span></div><div class="line">           explicitly passed in. */</div><div class="line">        g.checkAccess();</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Do we have the required permissions?</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (isCCLOverridden(getClass())) &#123;</div><div class="line">                security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        g.addUnstarted();</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.group = g;</div><div class="line">        <span class="keyword">this</span>.daemon = parent.isDaemon();</div><div class="line">        <span class="keyword">this</span>.priority = parent.getPriority();</div><div class="line">        <span class="keyword">if</span> (security == <span class="keyword">null</span> || isCCLOverridden(parent.getClass()))</div><div class="line">            <span class="keyword">this</span>.contextClassLoader = parent.getContextClassLoader();</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">this</span>.contextClassLoader = parent.contextClassLoader;</div><div class="line">        <span class="keyword">this</span>.inheritedAccessControlContext =</div><div class="line">                acc != <span class="keyword">null</span> ? acc : AccessController.getContext();</div><div class="line">		<span class="comment">//设置target</span></div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        setPriority(priority);</div><div class="line">        <span class="keyword">if</span> (parent.inheritableThreadLocals != <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">this</span>.inheritableThreadLocals =</div><div class="line">                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</div><div class="line">        <span class="comment">/* Stash the specified stack size in case the VM cares */</span></div><div class="line">        <span class="keyword">this</span>.stackSize = stackSize;</div><div class="line"></div><div class="line">        <span class="comment">/* Set thread ID */</span></div><div class="line">        tid = nextThreadID();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * This method is not invoked for the main method thread or "system"</div><div class="line">         * group threads created/set up by the VM. Any new functionality added</div><div class="line">         * to this method in the future may have to also be added to the VM.</div><div class="line">         *</div><div class="line">         * A zero status value corresponds to state "NEW".</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</div><div class="line"></div><div class="line">        <span class="comment">/* Notify the group that this thread is about to be started</span></div><div class="line">         * so that it can be added to the group's list of threads</div><div class="line">         * and the group's unstarted count can be decremented. */</div><div class="line">        group.add(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//调用native函数启动线程</span></div><div class="line">            start0();</div><div class="line">            started = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!started) &#123;</div><div class="line">                    group.threadStartFailed(<span class="keyword">this</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</div><div class="line">                <span class="comment">/* do nothing. If start0 threw a Throwable then</span></div><div class="line">                  it will be passed up the call stack */</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</div><div class="line">            target.run();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上最终被线程执行的任务是Runnable，而非Thread。Thread 只是对Runnable的包装，并且通过一些状态对Thread进行管理和调度。Runnable的声明如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当启动一个线程时，如果Thread的target不为空，则会在子线程中执行这个target的run方法，否则虚拟机就会执行该线程自身的run方法。</p>
<h1 id="线程的wait、sleep、join和yield"><a href="#线程的wait、sleep、join和yield" class="headerlink" title="线程的wait、sleep、join和yield"></a>线程的wait、sleep、join和yield</h1><p>先通过下面的表格来了解他们的区别：</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>wait</td>
<td>当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时释放了对象的锁，使得其他线程可以访问。用户可以使用notify、notifyAll或指定睡眠时间来唤醒当前等待池中的线程。  注意：wait、notify、notifyAll方法必须放在synchronized block中，否则则会抛出异常。</td>
</tr>
<tr>
<td>sleep</td>
<td>该函数时Thread的静态函数，作用是使调用线程进入睡眠状态。因为sleep()Thread的静态函数，因此它不能改变对象的锁。所以当一个synchronized块中调用sleep方法时，线程虽然休眠了，但是对象的锁并没有被释放，其他线程无法访问这个对象（即使睡着也持有对象锁）</td>
</tr>
<tr>
<td>join</td>
<td>等待目标线程执行完成之后再继续执行</td>
</tr>
<tr>
<td>yield</td>
<td>线程礼让。目标线程由运行状态转换为就绪状态，也就是让出执行权限，让其他线程得以优先执行，但其他线程能否优先执行时未知的。</td>
</tr>
</tbody>
</table>
<h2 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h2><p>下面来看看wait、notify、notifyAll的使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Object lockObject = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">waitAndNotifAll</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"主线程运行"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//创建并启动子线程</span></div><div class="line">		Thread thread = <span class="keyword">new</span> WaitThread();</div><div class="line">		thread.start();</div><div class="line"></div><div class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//必须在synchronized块中</span></div><div class="line">			<span class="keyword">synchronized</span> (lockObject) &#123;</div><div class="line">				System.out.println(<span class="string">"主线程等待"</span>);</div><div class="line">				lockObject.wait();</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//被唤醒后继续执行</span></div><div class="line">		<span class="keyword">long</span> endTime = System.currentTimeMillis() - startTime;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"主线程继续---&gt;等待耗时： "</span> + endTime + <span class="string">"ms"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">synchronized</span> (lockObject) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">3000</span>);</div><div class="line">					<span class="comment">//唤醒正在等待中的线程</span></div><div class="line">					lockObject.notifyAll();</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		waitAndNotifAll();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">运行结果：</div><div class="line"></div><div class="line">主线程运行</div><div class="line">主线程等待</div><div class="line">...</div><div class="line">...</div><div class="line"></div><div class="line">主线程继续---&gt;等待耗时： <span class="number">3001</span>ms</div></pre></td></tr></table></figure>
<p>wait、notify机制通常用于等待机制的实现，当条件未满足时调用wait进入等待状态，一旦条件满足，调用notify或notifyAll唤醒等待的线程继续执行。</p>
<h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p>join函数的原始解释为“Block the cuurent thread(Thread.currentThread()) untile the receiver finishes its execution and dies。意思就是阻塞当前调用join函数的任务所在的线程，直到该任务执行完成后再继续执行所在线程的任务。下面我们来看看一个具体是实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinDemo</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">		joinDemo();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">joinDemo</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"主线程开始执行"</span>);</div><div class="line">		</div><div class="line">		Worker worker1 = <span class="keyword">new</span> Worker(<span class="string">"worker-1"</span>);</div><div class="line">		Worker worker2 = <span class="keyword">new</span> Worker(<span class="string">"worker-2"</span>);</div><div class="line"></div><div class="line">		worker1.start();</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"启动线程1--执行完毕"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//等待worker1任务执行完成</span></div><div class="line">			worker1.join();</div><div class="line">			</div><div class="line">			System.out.println(<span class="string">"启动线程2--执行完毕"</span>);</div><div class="line">			</div><div class="line">			worker2.start();</div><div class="line">			</div><div class="line">			<span class="comment">//等待worker2任务执行完成</span></div><div class="line">			worker2.join();</div><div class="line">			</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"主线程继续执行"</span>);</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"主线程执行完毕"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">			<span class="keyword">super</span>(name);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">3000</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"Work in "</span> + getName());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">主线程开始执行</div><div class="line">启动线程<span class="number">1</span>--执行完毕</div><div class="line">Work in worker-<span class="number">1</span></div><div class="line">启动线程<span class="number">2</span>--执行完毕</div><div class="line">Work in worker-<span class="number">2</span></div><div class="line">主线程继续执行</div><div class="line">主线程执行完毕</div></pre></td></tr></table></figure>
<p>上述代码的逻辑是主线程开始执行、启动线程1、等待线程1执行完毕、启动线程2、等待线程2执行完毕、继续执行主线程任务。</p>
<h2 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>yield函数的官方解释是”Causes the calling Thread to yiled execution time to another Thread that is ready to run”,意思是使调用该函数的线程让出执行时间给其他已就绪状态的线程。</p>
<p>线程的执行是有时间片的，每个线程轮流占用CPU固定的时间，执行周期到了之后就让出执行权给其他线程，而yield函数的功能就是主动让出线程的执行权给其他线程，其他线程能否得到优先权就得看各个线程的状态了。下面来看看一个具体的示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		YieldThread t1 = <span class="keyword">new</span> YieldThread(<span class="string">"thread-1"</span>);</div><div class="line">		YieldThread t2 = <span class="keyword">new</span> YieldThread(<span class="string">"thread-2"</span>);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">YieldThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">			<span class="keyword">super</span>(name);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>;i++) &#123;</div><div class="line">				System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" ; "</span> + <span class="string">"线程优先级为： "</span> + <span class="keyword">this</span>.getPriority()+ <span class="string">"---&gt;"</span> + i);</div><div class="line">				</div><div class="line">				<span class="comment">//当i为2时 调用当前线程yield函数</span></div><div class="line">				<span class="keyword">if</span> (i== <span class="number">2</span>) &#123;</div><div class="line">					Thread.yield();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">thread-<span class="number">1</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">0</span></div><div class="line">thread-<span class="number">2</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">0</span></div><div class="line">thread-<span class="number">2</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">1</span></div><div class="line">thread-<span class="number">2</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">2</span></div><div class="line">thread-<span class="number">1</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">1</span></div><div class="line">thread-<span class="number">1</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">2</span></div><div class="line">thread-<span class="number">2</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">3</span></div><div class="line">thread-<span class="number">2</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">4</span></div><div class="line">thread-<span class="number">1</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">3</span></div><div class="line">thread-<span class="number">1</span> ; 线程优先级为： <span class="number">5</span>---&gt;<span class="number">4</span></div></pre></td></tr></table></figure>
<p>从结果可知，thread-2首先执行到i的值为2，此时让出执行权，thread-1得到执行权运行到i的值为2时让出执行权，thread-2得到执行权执行任务结束，然后thread-1再继续执行任务。</p>
<p>注意：yield仅在一个时间片内有效。</p>
<h2 id="Callable、Future和FutureTask"><a href="#Callable、Future和FutureTask" class="headerlink" title="Callable、Future和FutureTask"></a>Callable、Future和FutureTask</h2><p>除了Runnable之外，Java还有Callable、Future和FutureTask这几个与多线程相关的概念，与Runnable不同的是这个类型都只能运用到线程池中，而Runnable既能运用在Thread中，还能运用在线程池中。</p>
<h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><p>Callable与Runnable的功能大致相似不同的是Callable是一个泛型接口，它有一个泛型参数V，该接口中有一个返回值（类型为V）的Call函数，而Runnable中的run方法不能将结果返回至调用者。Callable的声明如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Computes a result, or throws an exception if unable to do so.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> computed result</div><div class="line">     * <span class="doctag">@throws</span> Exception if unable to compute a result</div><div class="line">     */</div><div class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><p>Future为线程池制定了一个可管理的任务标准。它提供了对Runnable或者Callable任务的执行结果进行取消、查询是否完成、获取结果、设置结果操作，分别对应cancel、isDone、get、set函数。get方法会阻塞，直到任务返回结果。Future的声明如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//取消任务</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断任务是否已经取消</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断任务是否已经完成</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//获取结果，如果任务未完成则等待，直到完成，因此该函数会阻塞</span></div><div class="line">	<span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</div><div class="line"></div><div class="line">	<span class="comment">//获取结果，如果未完成则等待，直到返回结果或timeout，该函数会阻塞</span></div><div class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line">    <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h3><p>Future只是定义了一些规范的接口，而FutureTask则是它的实现类。FutureTask实现了<code>RunnableFuture&lt;V&gt;</code>，而RunnableFuture实现了Runnable又实现了Future<v>这两个接口，因此FutureTask同时具备他们的功能。FutureTask的代码如下：</v></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">	.....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RunnableFuture<v>类的定义</v></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Sets this Future to the result of its computation</div><div class="line">     * unless it has been cancelled.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FutureTask像Thread那样包装Runnable那样对Runnable和<code>Callable&lt;V&gt;</code>进行包装，Runnable与Callable由构造函数注入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">this</span>.callable = callable;</div><div class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Runnable runnable, V result)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.callable = Executors.callable(runnable, result);</div><div class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上述代码可以看出，如果注入的是Runnable则会被Executors.callable()函数转换为Callable类型，即FutureTask最终都是执行Callable类型的任务，该转换函数如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Callable&lt;T&gt; <span class="title">callable</span><span class="params">(Runnable task, T result)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RunnableAdapter&lt;T&gt;(task, result);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Runnable适配器，将Runnable转换为Callable</div><div class="line">*/</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableAdapter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> Runnable task;</div><div class="line">    <span class="keyword">final</span> T result;</div><div class="line">    RunnableAdapter(Runnable task, T result) &#123;</div><div class="line">        <span class="keyword">this</span>.task = task;</div><div class="line">        <span class="keyword">this</span>.result = result;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        task.run();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于FutureTask实现了Runnable，因此它既可以通过Thread包装来执行，也可以提交给ExecuteService来执行，并且还可以通过get()函数来获取执行结果，该函数会阻塞，直到结果返回。因此，FutureTask既是Future、Runnable，又是包装了Callable（Runnable最终也会被转换为Callable），它是这两者的合体。</p>
<p>下面示例演示Runnable、Callable、FutureTask的运用，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTaskDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//线程池</span></div><div class="line">	<span class="keyword">static</span> ExecutorService mExecutor = Executors.newSingleThreadExecutor();</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向线程池提交Runnable对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskRunnable</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//无返回值</span></div><div class="line">		Future&lt;?&gt; future = mExecutor.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				fibc(<span class="number">20</span>);</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"taskRunnable: "</span> + future.get());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向线程池提交Callable对象</div><div class="line">	 * <span class="doctag">@throws</span> ExecutionException </div><div class="line">	 * <span class="doctag">@throws</span> InterruptedException </div><div class="line">	 */	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskCallable</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">		</div><div class="line">		Future&lt;Integer&gt; future = mExecutor.submit(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> fibc(<span class="number">20</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		</div><div class="line">		<span class="comment">//返回值</span></div><div class="line">		Integer result = future.get();</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"taskCallable: "</span> + result);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向线程池提交FutureTask对象</div><div class="line">	 * <span class="doctag">@throws</span> ExecutionException </div><div class="line">	 * <span class="doctag">@throws</span> InterruptedException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskFutureTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">		</div><div class="line">		FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> fibc(<span class="number">20</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		</div><div class="line">		mExecutor.submit(futureTask);</div><div class="line">		</div><div class="line">		Integer result = futureTask.get();</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"taskFutureTask: "</span> + result);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Thread包装FutureTask</div><div class="line">	 * <span class="doctag">@throws</span> InterruptedException</div><div class="line">	 * <span class="doctag">@throws</span> ExecutionException</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskThread</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">		</div><div class="line">		FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				<span class="keyword">return</span> fibc(<span class="number">20</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		</div><div class="line">		<span class="keyword">new</span> Thread(futureTask).start();</div><div class="line">		</div><div class="line">		Integer result = futureTask.get();</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"taskThread: "</span> + result);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 斐波那契数列</div><div class="line">	 * <span class="doctag">@param</span> num</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibc</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> fibc(num - <span class="number">1</span>) + fibc(num - <span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			taskRunnable();</div><div class="line">			taskCallable();</div><div class="line">			taskFutureTask();</div><div class="line">			taskThread();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; </div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">taskRunnable: <span class="keyword">null</span></div><div class="line">taskCallable: <span class="number">6765</span></div><div class="line">taskFutureTask: <span class="number">6765</span></div><div class="line">taskThread: <span class="number">6765</span></div></pre></td></tr></table></figure>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>当我们需要频繁地创建多个线程进行耗时操作时，每次都通过new Thread实现并不是一种好的方式，每次new Thread新建销毁对象性能较差，线程缺乏统一的管理，可能会无限制地创建新的线程，线程之间相互竞争从而占用过多系统资源导致死锁，并且缺乏定期执行、定时执行、线程中断等功能。</p>
<p>Java提供了4中线程池，它能够有效地管理、调度线程，避免过多的资源消耗，它强大到几乎不需要开发人员自定义的程序。它的优点如下：</p>
<ul>
<li>重用存在的线程，减少对象创建、销毁的开销；</li>
<li>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞；</li>
<li>提供定时执行、定期执行、单线程、并发数控制等功能；</li>
</ul>
<p>线程池的原理就是会创建创建多个线程并且对这些线程进行管理，提交给线程的任务 会被线程池指派给其中的线程执行，提供线程池的统一调度、管理。使得多线程的使用更简单、高效。</p>
<p>线程池都实现了ExecutorService接口，该接口定义了线程池需要实现的接口，如submit、execute、shutdown等。它的实现有ThreadPoolExecutor和ScheduledPoolExecutor，ThreadPoolExecutor是运行最多的线程池实现，ScheduledPoolExecutor则用于执行周期性任务。</p>
<h2 id="启动指定数量的线程-ThreadPoolExecutor"><a href="#启动指定数量的线程-ThreadPoolExecutor" class="headerlink" title="启动指定数量的线程-ThreadPoolExecutor"></a>启动指定数量的线程-ThreadPoolExecutor</h2><p>ThreadPoolExecutor的功能是启动指定数量的线程以及将任务添加到一个队列中，并且将任务分发给空闲的线程。</p>
<p>ExecutorService的生命周期包括3中状态：运行、关闭、终止，创建后进入运行状态，调用shutdown()方法时便进入了关闭状态，此时ExecutorService不再接受新的任务，但它继续执行完已经提交的任务，当所有已经提交的任务都执行完后，就变成终止状态。</p>
<p>ThreadPoolExecutor的构造函数如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">						  <span class="keyword">int</span> maximumPoolSize,</div><div class="line">						  <span class="keyword">long</span> keepAliveTime,</div><div class="line">						  TimeUnit unit,</div><div class="line">						  BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">						  ThreadFactory threadFactory,</div><div class="line">						  RejectedExecutionHandler handler)</div></pre></td></tr></table></figure>
<p>下面对参数进行详细说明:</p>
<table>
<thead>
<tr>
<th>参 数 名</th>
<th>作  用</th>
</tr>
</thead>
<tbody>
<tr>
<td>corePoolSize</td>
<td>线程池中所保存的核心线程数。</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>线程池所容纳的最大线程数，当活动线程达到这个数值后，后续的任务将会被阻塞</td>
</tr>
<tr>
<td>keepAliveTime</td>
<td>非核心线程闲置时的超时时间，超出这个时长，非核心线程就会被回收</td>
</tr>
<tr>
<td>unit</td>
<td>用于指定keepAliveTime参数的时间单位，有毫秒、秒、分钟等</td>
</tr>
<tr>
<td>workQueue</td>
<td>线程池中的任务队列，如果线程池的线程数量已经达到核心线程数并且当前所有线程都处于活动状态时，则将新任务放到此队列中等待执行</td>
</tr>
<tr>
<td>threadFactory</td>
<td>线程工厂，为线程池提供创建新线程的功能，通常不需要设置</td>
</tr>
<tr>
<td>handler</td>
<td>拒绝策略，当线程池与workQueue队列都满了的情况下，对新任务采取的处理策略</td>
</tr>
</tbody>
</table>
<p><a href="http://liuguoquan727.github.io/2016/04/25/Android%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/">线程池参数也可以参考这篇文章http://liuguoquan727.github.io/2016/04/25/Android%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/:</a></p>
<p>其中workQueue有下列几个常用的实现：</p>
<ul>
<li>ArrayBlockingQueue</li>
</ul>
<p>基于数组结构的有界队列，此队列按FIFO原则对任务进行排序。如果队列满了还有任务进来，则调用拒绝策略</p>
<ul>
<li>LinkedBlockingQueue</li>
</ul>
<p>基于链表结构的无界队列，此队列按FIFO原则对任务进行排序。因为它是无界的，所以才有此队列后线程池将忽略handler参数。</p>
<ul>
<li>SynchronousQueue</li>
</ul>
<p>直接将任务提交给线程而不是将它加入到队列，实际上该队列是空的。每个插入的操作必须等到另一个调用移除的操作，如果新任务来了线程池没有任何可用线程处理的话，则调用拒绝策略。</p>
<ul>
<li>PriorityBlockingQueue</li>
</ul>
<p>具有优先级的队列的有界队列，可用自定义优先级，默认是按自然排序的。</p>
<p>此外，当线程池与workQueue队列都满了的情况下，对新加任务采取的处理策略也有几个默认实现：</p>
<ul>
<li>AbortPolicy</li>
</ul>
<p>拒绝任务，抛出RejectedExecutionException异常，线程池默认策略</p>
<ul>
<li>CallerRunsPolicy</li>
</ul>
<p>拒绝新任务加入，如果该线程池还没有被关闭，那么将这个新任务执行在调用线程中</p>
<ul>
<li>DiscardOldestPolicy</li>
</ul>
<p>如果执行程序还没有关闭，则将位于工作队列头部的任务删除，然后重试执行程序（如果再次失败，则重复此过程）</p>
<ul>
<li>DiscardPolicy</li>
</ul>
<p>加不进的任务都被抛弃了，同时没有异常抛出</p>
<h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><p>对应Android平台来说，最常使用的就是通过Executors.newFixedThreadPool(int size)函数来启动固定数量的线程池，代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExectorsDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX = <span class="number">10</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			fixedThreadPool(MAX);</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fixedThreadPool</span><span class="params">(<span class="keyword">int</span> size)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">		</div><div class="line">		ExecutorService service = Executors.newFixedThreadPool(size);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; MAX;i++) &#123;</div><div class="line">			</div><div class="line">			<span class="comment">//提交任务</span></div><div class="line">			Future&lt;Integer&gt; task = service.submit(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">					<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">					System.out.println(<span class="string">"执行线程: "</span> + Thread.currentThread().getName());</div><div class="line">					<span class="keyword">return</span> fibc(<span class="number">20</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			</div><div class="line">			<span class="comment">//获取结果</span></div><div class="line">			System.out.println(<span class="string">"第"</span>+i+<span class="string">"次计算结果: "</span> + task.get());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 斐波那契数列</div><div class="line">	 * <span class="doctag">@param</span> num</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibc</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> fibc(num - <span class="number">1</span>) + fibc(num - <span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">1</span></div><div class="line">第<span class="number">0</span>次计算结果: <span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">2</span></div><div class="line">第<span class="number">1</span>次计算结果: <span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">3</span></div><div class="line">第<span class="number">2</span>次计算结果: <span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">1</span></div><div class="line">第<span class="number">3</span>次计算结果: <span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">2</span></div><div class="line">第<span class="number">4</span>次计算结果: <span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">3</span></div><div class="line">第<span class="number">5</span>次计算结果: <span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">1</span></div><div class="line">第<span class="number">6</span>次计算结果: <span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">2</span></div><div class="line">第<span class="number">7</span>次计算结果: <span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">3</span></div><div class="line">第<span class="number">8</span>次计算结果: <span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">1</span></div><div class="line">第<span class="number">9</span>次计算结果: <span class="number">6765</span></div></pre></td></tr></table></figure>
<p>在上述例子中，我们启动了含有3个线程的线程池，调用的是Executors的newFixedThreadPool函数，该函数的实现为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可知它的corePoolSize和MaxnumPoolSize值都是nThreads，并且设置keepAliveTime为0毫秒，最后设置无界任务队列，这样该线程池中就含有固定个数的线程，并且能够容纳无数个任务。</p>
<h3 id="newCacheThreadPool"><a href="#newCacheThreadPool" class="headerlink" title="newCacheThreadPool"></a>newCacheThreadPool</h3><p>有时可能需要任务尽可能快地被执行，这就需要线程池中的线程足够多也就是说此时需要拿空间来换时间，线程越多占用的内存消耗就越大。因此，我们可能需要一种场景，如果来了一个新的任务，并且没有空闲线程可用，此时必须马上创建一个线程来立即执行任务。我们可以通过Executors的newCacheThreadPool函数来实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newCacheThreadPool</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line"></div><div class="line">	ExecutorService service = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; MAX;i++) &#123;</div><div class="line"></div><div class="line">		<span class="comment">//提交任务</span></div><div class="line">		service.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				System.out.println(<span class="string">"执行线程: "</span> + Thread.currentThread().getName() + <span class="string">",结果:"</span> + fibc(<span class="number">20</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">结果打印</div><div class="line"></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">1</span>,结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">2</span>,结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">4</span>,结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">6</span>,结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">8</span>,结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">5</span>,结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">3</span>,结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">7</span>,结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">10</span>,结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">9</span>,结果:<span class="number">6765</span></div></pre></td></tr></table></figure>
<p>从上述结果可以看出，为了保证吞吐量，该线程池为每个任务都创建了一个线程，当然这是在没有线程空闲的情况下创建的新的线程。假设执行前5个任务时都创建了一个线程，执行到底6个任务时刚好前面的第一个任务执行完毕，此时线程1空闲，那么第六个任务就会被执行在第一个线程中，而不是重新创建。</p>
<h2 id="执行周期性任务的线程-ScheduledPoolExecutor"><a href="#执行周期性任务的线程-ScheduledPoolExecutor" class="headerlink" title="执行周期性任务的线程-ScheduledPoolExecutor"></a>执行周期性任务的线程-ScheduledPoolExecutor</h2><p>通过Executors的newScheduledThreadPool函数即可创建定时执行任务的线程池。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newScheduledThreadPool</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException,</span></div><div class="line">		ExecutionException &#123;</div><div class="line"></div><div class="line">	ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="number">4</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 参数2为第一次延迟的时间，参数2为执行周期</span></div><div class="line">	service.scheduleAtFixedRate((<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			System.out.println(<span class="string">"执行线程: "</span> + Thread.currentThread().getName()</div><div class="line">					+ <span class="string">",定时计算 1结果:"</span> + fibc(<span class="number">20</span>));</div><div class="line">		&#125;</div><div class="line">	&#125;), <span class="number">1</span>, <span class="number">2</span>, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">	<span class="comment">// 参数2为第一次延迟的时间，参数2为执行周期</span></div><div class="line">	service.scheduleAtFixedRate((<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">			System.out.println(<span class="string">"执行线程: "</span> + Thread.currentThread().getName()</div><div class="line">					+ <span class="string">",定时计算2结果:"</span> + fibc(<span class="number">30</span>));</div><div class="line">		&#125;</div><div class="line">	&#125;), <span class="number">1</span>, <span class="number">2</span>, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">1</span>,定时计算 <span class="number">1</span>结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">2</span>,定时计算<span class="number">2</span>结果:<span class="number">832040</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">1</span>,定时计算 <span class="number">1</span>结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">3</span>,定时计算<span class="number">2</span>结果:<span class="number">832040</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">1</span>,定时计算 <span class="number">1</span>结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">4</span>,定时计算<span class="number">2</span>结果:<span class="number">832040</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">1</span>,定时计算 <span class="number">1</span>结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">3</span>,定时计算<span class="number">2</span>结果:<span class="number">832040</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">2</span>,定时计算 <span class="number">1</span>结果:<span class="number">6765</span></div><div class="line">执行线程: pool-<span class="number">1</span>-thread-<span class="number">4</span>,定时计算<span class="number">2</span>结果:<span class="number">832040</span></div></pre></td></tr></table></figure>
<p>该线程池有4个线程，我们指定了两个定时任务，因此该线程池中有两个线程来定时执行任务，哪个线程空闲就调度哪个线程来执行任务。</p>
<h1 id="同步集合"><a href="#同步集合" class="headerlink" title="同步集合"></a>同步集合</h1><h2 id="程序中的优化策略-CopyOnWrite"><a href="#程序中的优化策略-CopyOnWrite" class="headerlink" title="程序中的优化策略-CopyOnWrite"></a>程序中的优化策略-CopyOnWrite</h2><p>Copy-On-Write是一种用于程序设计中的优化策略，其基本思路是，从多个线程共享同一个列表，当某个线程想要修改这个列表的元素时，会把列表中的元素复制一份，然后进行修改，修改完成之后再将新的元素设置给这个列表，这是一种延时懒惰策略。这样做的好处是我们可以对CopyOnWrite容器进行并发的读而不需要加锁，因为当前容器不会添加、移除任何元素。所有CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。从JDK1.5起Java并发包提供了两个使用CopyOnWrite机制实现的并发容器，它们是CopyOnWriteArrayList和CopyOnWriteSet。</p>
<p>通过这种写时拷贝的原理可以将读、写分离，使并发场景下对列表的操作效率得到提高，但它的缺点是，在添加、移除元素时占用的内存空间翻了一倍，因此，这是以空间换时间的策略。</p>
<h2 id="提高并发效率-ConcurrentHasMap"><a href="#提高并发效率-ConcurrentHasMap" class="headerlink" title="提高并发效率-ConcurrentHasMap"></a>提高并发效率-ConcurrentHasMap</h2><p>HashTable使用synchronized来保证线程安全，但在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable同步方法时，其他线程访问HashTable的同步方法时，可能会进入阻塞或轮询状态。如线程1使用put进行添加元素，线程2不但不能使用put方法添加元素，并且也不能使用个图方法来获取元素，所以竞争越激烈效率越低。</p>
<p>HashTable在竞争激烈的并发环境下表现出效率低下的原因是因为所有访问HashTable的线程都必须竞争同一把锁。<br>假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHasMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。有些方法需要跨段，如size()和containsValue()，它们可能需要锁定整个表而不仅是某个段，这需要按顺序锁定所有段，操作完毕后，又按顺序释放所有段的锁。</p>
<h2 id="有效的方法-BlockingQueue"><a href="#有效的方法-BlockingQueue" class="headerlink" title="有效的方法-BlockingQueue"></a>有效的方法-BlockingQueue</h2><p>BlockingQueue的重要方法:</p>
<table>
<thead>
<tr>
<th>函 数 名</th>
<th>作   用</th>
</tr>
</thead>
<tbody>
<tr>
<td>add(e)</td>
<td>把元素e添加到队列中，成功返回true，否则抛出异常</td>
</tr>
<tr>
<td>offer(e)</td>
<td>把元素e添加到队列中，成功返回true，否则返回false</td>
</tr>
<tr>
<td>offer(e,time,unit)</td>
<td>把元素e添加到队列中，成功返回true，否则在等待指定的时间之后继续尝试添加，如果失败则返回false</td>
</tr>
<tr>
<td>put(e)</td>
<td></td>
<td>把元素e添加到队列中，如果队列不能容纳，则调用此方法的线程被阻塞直到队列里面有空间再继续添加</td>
</tr>
<tr>
<td>take()</td>
<td></td>
<td>取出队列中的首个元素，若队列为空，则线程进入等待直到队列中新的元素加入为止</td>
</tr>
<tr>
<td>poll(time,unit)</td>
<td>取出并移除队列中的首个元素，如果在指定的时间内没有获取元素，则返回null</td>
</tr>
<tr>
<td>element()</td>
<td></td>
<td>获取队首元素，如果队列为null，那么抛出NoSuchElementException异常</td>
</tr>
<tr>
<td>peek()</td>
<td></td>
<td>获取队首元素，如果队列为空，那么返回null</td>
</tr>
<tr>
<td>remove()</td>
<td></td>
<td>获取并移除队首元素，如果队列为空，那么抛出NoSuchElementException异常</td>
</tr>
</tbody>
</table>
<p>BlockingQueue常用的实现有：</p>
<ul>
<li>ArrayBlockingQueue</li>
<li>LinkedBlockingQueue</li>
<li>LinkedBlockingDequeue</li>
<li>ConcurrentLinkedQueue</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java注解Annotation和依赖注入]]></title>
      <url>http://liuguoquan727.github.io/2015/12/25/Java%E6%B3%A8%E8%A7%A3Annotation%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>标记作用</li>
</ul>
<p>用于告诉编译器一些信息让编译器能够实现基本的编译检查，如@Override、@Deprecated，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编译时动态处理</li>
</ul>
<p>动态生成代码，如ButterKnife、Dagger2</p>
<ul>
<li>运行时动态处理</li>
</ul>
<p>获取注解信息，如Retrofit</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="按功能分类"><a href="#按功能分类" class="headerlink" title="按功能分类"></a>按功能分类</h3><ul>
<li>标准注解</li>
</ul>
<p>是指Java自带的几个注解，Override、Deprecated、SuppressWarnings，分别表示重写方法、不推荐使用（过时的）、忽略某项Warning.</p>
<ul>
<li>元注解</li>
</ul>
<p>元注解是指用来定义注解的注解，JDK1.5定义了四种元注解：@Retention、@Target、@Inherit、@Documented。</p>
<ul>
<li>自定义注解（meta-annotation）</li>
</ul>
<p>自定义注解表示自己根据需要定义的注解，定义时需要用到上面的元注解。</p>
<h3 id="按作用域分类"><a href="#按作用域分类" class="headerlink" title="按作用域分类"></a>按作用域分类</h3><ul>
<li>源码时注解（RetentionPolicy.SOURCE）</li>
<li>编译时注解（RetentionPolicy.CLASS）</li>
<li>运行时注解（RetentionPolicy.RUNTIME）</li>
</ul>
<h2 id="注解相关知识点"><a href="#注解相关知识点" class="headerlink" title="注解相关知识点"></a>注解相关知识点</h2><h3 id="元注解知识点"><a href="#元注解知识点" class="headerlink" title="元注解知识点"></a>元注解知识点</h3><ul>
<li>@Target：指Annotation所修饰的对象范围，通过ElementType取值有8中，如下：</li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>TYPE</td>
<td>类、接口（包括注解类型）或枚举</td>
</tr>
<tr>
<td>FILED</td>
<td>属性</td>
</tr>
<tr>
<td>METHOD</td>
<td>方法</td>
</tr>
<tr>
<td>PARAMETER</td>
<td>参数</td>
</tr>
<tr>
<td>CONSTRUCTOR</td>
<td>构造函数</td>
</tr>
<tr>
<td>LOCAL_VARIABLE</td>
<td>局部变量</td>
</tr>
<tr>
<td>ANNOTATION_TYPE</td>
<td>注解类型</td>
</tr>
<tr>
<td>PACKAGE</td>
<td>包</td>
</tr>
</tbody>
</table>
<ul>
<li>@Retention:指Annotation被保留的时间长短，通过RetentionPolicy取值有3种，如</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>SOURCE</td>
<td>在源文件有效，编译时就会忽略</td>
</tr>
<tr>
<td>CLASS</td>
<td>在Class文件中有效，但JVM将会忽略  如Override、SuppressWarnings等</td>
</tr>
<tr>
<td>RUNTIME</td>
<td>在运行时有效 ，所以它们能在运行时被JVM或其他使用反射机制的代码所读取和使用</td>
</tr>
</tbody>
</table>
<ul>
<li><p>@Documented：是一个标记注解，表明这个注解应该被 javadoc工具记录. 默认情况下,javadoc是不包括注解的. 但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中.</p>
</li>
<li><p>@Inherited：也是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的，默认为false</p>
</li>
</ul>
<h3 id="注解定义格式"><a href="#注解定义格式" class="headerlink" title="注解定义格式"></a>注解定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名 &#123;定义体&#125;</div></pre></td></tr></table></figure>
<h3 id="注解支持的数据类型"><a href="#注解支持的数据类型" class="headerlink" title="注解支持的数据类型"></a>注解支持的数据类型</h3><ol>
<li>8种基本数据类型 int、float、boolean、byte、double、char、long、short  </li>
<li>String、Class、enum、Annotation</li>
<li>以上所有类型的数组</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>自定义注解如果只有一个参数成员，最好把定义体参数名称设为”value”，如@Target</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</div><div class="line">    ElementType[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Annotation自定义"><a href="#Annotation自定义" class="headerlink" title="Annotation自定义"></a>Annotation自定义</h2><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@MethodInfo</span>(</div><div class="line">        author = “trinea.cn+android<span class="meta">@gmail</span>.com”,</div><div class="line">        date = <span class="string">"2014/02/14"</span>,</div><div class="line">        version = <span class="number">2</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"trinea"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MethodInfo Annotation作用为给方法添加相关信息，包括author、date、version</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MethodInfo &#123;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span> <span class="keyword">default</span> "trinea@gmail.com"</span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">date</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">version</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面是MethondInfo的实现部分：</p>
<ol>
<li>通过@interface定义，注解名即为自定义注解名</li>
<li>注解配置参数名为注解类的方法名且<ul>
<li>所有方法没有方法体，没有参数没有修饰符，实际只允许public&amp;abstract修饰符，默认为public，不允许抛出异常</li>
<li>方法返回值只能是基本类型、String、Class、Annotation、Enum或者是它们的一维数组</li>
<li>若只有一个默认属性，可直接用value（）函数，一个属性都没有表示该 Annotation 为 Mark Annotation</li>
</ul>
</li>
<li>可以加default表示默认值</li>
</ol>
<h2 id="Annotation解析"><a href="#Annotation解析" class="headerlink" title="Annotation解析"></a>Annotation解析</h2><h3 id="运行时Annotation解析"><a href="#运行时Annotation解析" class="headerlink" title="运行时Annotation解析"></a>运行时Annotation解析</h3><p>运行时Annotation指@Retention为RUNTIME的Annotation，可手动调用下面常用API解析：</p>
<ul>
<li>method.getAnnotation(AnnotationName.class)</li>
</ul>
<p>表示得到该Target某个Annotation的信息，因为一个Target可以被多个Annotation修饰</p>
<ul>
<li>method.getAnnotations()</li>
</ul>
<p>表示得到该Target所有Annotation</p>
<ul>
<li>method.isAnnotationPresent(AnnotationName.class)</li>
</ul>
<p>表示该Target是否被某个Annotation修饰</p>
<h4 id="Target为METHOND"><a href="#Target为METHOND" class="headerlink" title="@Target为METHOND"></a>@Target为METHOND</h4><p>解析示例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@MethodInfo</span>(</div><div class="line">            author = <span class="string">"trinea.cn+android@gmail.com"</span>,</div><div class="line">            date = <span class="string">"2014/02/14"</span>,</div><div class="line">            version = <span class="number">2</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAppName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"trinea"</span>;</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">    <span class="meta">@MethodInfo</span>(author = <span class="string">"liu.cn+android@gmail.com"</span>,</div><div class="line">            date = <span class="string">"2015/02/14"</span>,</div><div class="line">            version = <span class="number">3</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNewAppName</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="string">"liu"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class&lt;?&gt; clz = Class.forName(<span class="string">"com.michael.java.annotation.App"</span>);</div><div class="line">			</div><div class="line">			<span class="keyword">for</span>(Method method : clz.getMethods()) &#123;</div><div class="line">				</div><div class="line">				MethodInfo methodInfo = method.getAnnotation(MethodInfo.class);</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (methodInfo != <span class="keyword">null</span>) &#123;</div><div class="line">					System.out.println(method.getName());</div><div class="line">					System.out.println(methodInfo.author());</div><div class="line">					System.out.println(methodInfo.date());</div><div class="line">					System.out.println(methodInfo.version());</div><div class="line">					</div><div class="line">					Annotation[] annotations = method.getAnnotations();</div><div class="line">					<span class="keyword">for</span>(Annotation annotation : annotations)&#123;</div><div class="line">						System.out.println(annotation.toString());</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">运行结果：</div><div class="line"></div><div class="line">getAppName</div><div class="line">trinea.cn+android<span class="meta">@gmail</span>.com</div><div class="line"><span class="number">2014</span>/<span class="number">02</span>/<span class="number">14</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">@com</span>.michael.java.annotation.MethodInfo(version=<span class="number">2</span>, author=trinea.cn+android<span class="meta">@gmail</span>.com, date=<span class="number">2014</span>/<span class="number">02</span>/<span class="number">14</span>)</div><div class="line"></div><div class="line">getNewAppName</div><div class="line">liu.cn+android<span class="meta">@gmail</span>.com</div><div class="line"><span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">com</span>.<span class="title">michael</span>.<span class="title">java</span>.<span class="title">annotation</span>.<span class="title">MethodInfo</span></span></div></pre></td></tr></table></figure>
<h4 id="Target为FIELD"><a href="#Target为FIELD" class="headerlink" title="@Target为FIELD"></a>@Target为FIELD</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bind &#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Bind</span>(<span class="number">2</span>)</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">		Class&lt;?&gt; clz = <span class="keyword">new</span> FieldDemo().getClass();</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(Field field : clz.getFields()) &#123;</div><div class="line">			</div><div class="line">			Bind bind = field.getAnnotation(Bind.class);</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (bind != <span class="keyword">null</span>) &#123;</div><div class="line">				System.out.println(field.getName());</div><div class="line">				System.out.println(bind.value());</div><div class="line">				age = bind.value();</div><div class="line">				System.out.println(age);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">运行结果：</div><div class="line"></div><div class="line">age</div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="编译时Annotation解析"><a href="#编译时Annotation解析" class="headerlink" title="编译时Annotation解析"></a>编译时Annotation解析</h3><p>编译时Annotation指@Retention为CLASS的Annotation，由编译器自动解析。步骤为：</p>
<ol>
<li>自定义类继承自AbstractProcessor</li>
<li>重写其中的process函数</li>
</ol>
<p>编译器在编译时自动查找所有继承自AbstractProcessor的类，然后调用它们的process方法去处理</p>
<p>假设MethodInfo的@Retention为CLASS，解析示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123; <span class="string">"com.michael.java.annotation.MethodInfo"</span> &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInfoProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</span> </span>&#123;</div><div class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">        <span class="keyword">for</span> (TypeElement te : annotations) &#123;</div><div class="line">            <span class="keyword">for</span> (Element element : env.getElementsAnnotatedWith(te)) &#123;</div><div class="line">                MethodInfo methodInfo = element.getAnnotation(MethodInfo.class);</div><div class="line">                map.put(element.getEnclosingElement().toString(), methodInfo.author());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SupportedAnnotationTypes 表示这个 Processor 要处理的 Annotation 名字。<br>process 函数中参数 annotations 表示待处理的 Annotations，参数 env 表示当前或是之前的运行环境<br>process 函数返回值表示这组 annotations 是否被这个 Processor 接受，如果接受后续子的 rocessor 不会再对这个 Annotations 进行处理。</p>
<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>如果在Class A中，有Class B的实例，则称Class A对Class B有一个依赖。例如下面类Human中用到一个Father对象，我们就说Human对类Father有一个依赖。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    Father father;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span> </span>&#123;</div><div class="line">        father = <span class="keyword">new</span> Father();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>仔细看这段代码我们会发现存在一些问题：</p>
<ol>
<li>如果现在要改变 father 生成方式，如需要用new Father(String name)初始化 father，需要修改 Human 代码；</li>
<li>如果想测试不同 Father 对象对 Human 的影响很困难，因为 father 的初始化被写死在了 Human 的构造函数中；</li>
<li>如果new Father()过程非常缓慢，单测时我们希望用已经初始化好的 father 对象 Mock 掉这个过程也很困难。</li>
</ol>
<h2 id="依赖注入-1"><a href="#依赖注入-1" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>上面将依赖在构造函数中直接初始化一种Hard init形式，弊端在于两个类不够独立，不方便测试。我们还有另外一种init方式，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    Father father;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">(Father father)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.father = father;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，我们将 father 对象作为构造函数的一个参数传入。在调用 Human 的构造方法之前外部就已经初始化好了 Father 对象。<strong>像这种非自己主动初始化依赖，而通过外部来传入依赖的方式，我们就称为依赖注入。</strong><br>现在我们发现上面 1 中存在的两个问题都很好解决了，简单的说依赖注入主要有两个好处：</p>
<ol>
<li>解耦，将依赖之间解耦。</li>
<li>因为已经解耦，所以方便做单元测试，尤其是 Mock 测试。</li>
</ol>
<h2 id="Java中的依赖注入"><a href="#Java中的依赖注入" class="headerlink" title="Java中的依赖注入"></a>Java中的依赖注入</h2><p>依赖注入的实现有很多途径，而在Java中，使用注解是最常用的。通过在字段的声明前添加@Inject注解进行标记，来实现对依赖对象的自动注入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Inject</span> Father father;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>面这段代码看起来很神奇：只是增加了一个注解，Father 对象就能自动注入了？这个注入过程是怎么完成的？<br>实质上，如果你只是写了一个 @Inject 注解，Father 并不会被自动注入。你还需要使用一个依赖注入框架，并进行简单的配置。现在 Java 语言中较流行的依赖注入框架有 Google Guice、Spring 等，而在 Android 上比较流行的有 RoboGuice、Dagger、Dagger2 等</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java反射Reflection]]></title>
      <url>http://liuguoquan727.github.io/2015/12/24/Java%E5%8F%8D%E5%B0%84Reflection/</url>
      <content type="html"><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><p>Java反射是可以让我们在运行时获取类的函数、属性、父类、接口等Class内部信息的机制。通过反射还可以让我们在运行期实例化对象，调用方法，通过调用get/set方法获取和设置变量的值，即使方法或属性是类私有的也可以通过反射的形式调用，这种“看透Class“的能力被称为内省，这种能力在框架开发中尤为重要。有些情况下，我们要使用的类在运行时才会确定，这个时候我们不能在编译期就使用它，因此只能通过反射的形式来使用在运行时才存在的类（该类符合某种特定规范，例如JDBC），这是反射用得比较多的场景。</p>
<p>还有一个比较常见的场景就是编译时我们对于类的内部信息不可知，必须得到运行时才能获取类的具体信息。比如ORM框架，在运行时才能够获取类中的各个属性，然后通过反射的形式获取其属性名和值，存入数据库，这也是反射比较经典应用场景之一。</p>
<h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>既然反射是操作Class信息的，那么Class又是什么呢？</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/reflection-class%E7%B1%BB.png" alt=""></p>
<p>当我们编写完一个Java项目之后，所有的Java文件都会被编译成一个.class文件，这些Class对象承载了这个类型的父类、接口、构造函数、方法、属性等原始信息，这些class文件在程序运行时会被ClassLoader加载到虚拟机中。当一个类被加载以后，Java虚拟机就会在内存中自动产生一个Class对象。我们通过new的形式创建对象实际上就是通过这些Class来创建，只是这个过程对于我们是不透明而已。</p>
<h1 id="反射Class以及构造对象"><a href="#反射Class以及构造对象" class="headerlink" title="反射Class以及构造对象"></a>反射Class以及构造对象</h1><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><p>在你想检查一个类的信息之前，你首先需要获取类的Class对象。Java中的所有类型包括基本类型，即使是数组都有与之关联的Class类的对象。如果你在编译期知道一个类的名字的话，那么你可以使用如下的方式获取一个类的Class对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Class&lt;String&gt; myClass = String.class;</div><div class="line">System.out.println(myClass);</div><div class="line"></div><div class="line">打印：</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></div></pre></td></tr></table></figure>
<p>如果你已经得到了某个对象，但是你想获取这个对象的Class对象，那么你可以通过下面的方法得到：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String str = <span class="keyword">new</span> String();</div><div class="line">Class&lt;String&gt; myClass = str.getClass();</div><div class="line">System.out.println(myClass);</div><div class="line"></div><div class="line">打印：</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></div></pre></td></tr></table></figure>
<p>如果你在编译期获取不到目标类型，但是你知道它的完整类路径，那么你可以通过如下的形式来获取Class对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; myClass = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	myClass = Class.forName(<span class="string">"java.lang.String"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">	<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div><div class="line">System.out.println(myClass);</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></div></pre></td></tr></table></figure>
<p>在使用Class.forName()方法时，你必须提供一个类的全名，这个全名包括类所在的包的名字。例如String类位于java.lang包中，那么它的完整路径就是java.lang.String。如果在调用Class.forName()方法时，没有在编译路径下（classpath）找到对象的类，那么将会抛出ClassNotFoundException。</p>
<p><strong>方法说明</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 加载指定的Class对象</div><div class="line">*<span class="doctag">@param</span> className 要加载的类的完整路径，例如java.lang.String。</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className)<span class="keyword">throws</span> ClassNotFoundException</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 加载指定的Class对象</div><div class="line">*<span class="doctag">@param</span> className 要加载的类的完整路径，例如java.lang.String。</div><div class="line">*<span class="doctag">@param</span> initialize 是否要初始化该Class对象</div><div class="line">*<span class="doctag">@param</span> loader  指定加载该类的ClassLoader</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String name, <span class="keyword">boolean</span> initialize,ClassLoader loader)<span class="keyword">throws</span> ClassNotFoundException</div></pre></td></tr></table></figure>
<h2 id="通过Class对象构造目标类型的对象"><a href="#通过Class对象构造目标类型的对象" class="headerlink" title="通过Class对象构造目标类型的对象"></a>通过Class对象构造目标类型的对象</h2><p>一旦你拿到Class对象之后，你就可以为所欲为了，但获取Class对象只是第一步，我们需要在执行那些强大的行为之前通过Class对象构造出该类型的对象，然后才能通过该对象释放它的功能。我们知道，在java中要构造对象，必须通过该类的构造函数，那么其实反射也是一样的。但是它们确实是有区别的，通过反射构造对象，我们首先要获取类的Constructor（构造器）对象，然后通过Constructor来创建目标类的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">classForName</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//1.获取Class对象</span></div><div class="line">		Class&lt;?&gt; clz = Class.forName(<span class="string">"com.michael.java.reflection.Student"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//2.通过Class对象获取Constructor，Student构造函数中有一个String参数</span></div><div class="line">		Constructor&lt;?&gt; constructor = clz.getConstructor(String.class);</div><div class="line"></div><div class="line">		<span class="comment">//3.通过Constructor创建Student对象</span></div><div class="line">		Student object = (Student) constructor.newInstance(<span class="string">"michael"</span>);</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"obj: "</span> + object.toString());</div><div class="line">		object.showMyName();</div><div class="line">		object.takeAnExamination();</div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果：</div><div class="line"></div><div class="line">obj:  Student :  michael</div><div class="line">My name is michael</div><div class="line"> takeAnExamination</div></pre></td></tr></table></figure>
<p>通过上述代码，我们就可以在运行时通过完整的类名来构建对象。</p>
<p><strong>获取构造函数方法</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//获取一个公有的构造函数，参数为可变参数，如果构造函数有参数，那么需要将参数的类型传递给getConstructor方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span></span></div><div class="line"></div><div class="line"><span class="comment">//获取目标类所有的公有构造函数</span></div><div class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] <span class="title">getConstructors</span><span class="params">()</span> <span class="keyword">throws</span> SecurityException</div></pre></td></tr></table></figure>
<blockquote>
<p>注意，当你通过反射获取到Constructor、Method、Filed后，在反射调用之前将此对象的accessible标志设置为true，以此来提升反射速度。值为true则指示反射的对象在使用时应该取消Java语言访问检查。值为false则指示反射的对象应该实施Java语言访问检查。例如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//设置Constructor的Accessible</span></div><div class="line">Constructor&lt;?&gt; constructor = clz.getConstructor(String.class);</div><div class="line">constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">Method learnMethod = Student.class.getMethod(<span class="string">"learn"</span>, String.class);</div><div class="line"><span class="comment">//设置Method的Accessible</span></div><div class="line">learnMethod.setAccessible(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.reflection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Examination</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 年级</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mGrade;</div><div class="line">    <span class="keyword">private</span> String age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String aName)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(aName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> grade, String aName)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(aName);</div><div class="line">        mGrade = grade;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">learn</span><span class="params">(String course,<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">        System.out.println(mName + <span class="string">" learn "</span> + course + <span class="string">"--"</span>+ count);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeAnExamination</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">" takeAnExamination "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">" Student :  "</span> + mName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.reflection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    String mName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String aName)</span> </span>&#123;</div><div class="line">        mName = aName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String friendName)</span> </span>&#123;</div><div class="line">        System.out.println(mName + <span class="string">" say hello to "</span> + friendName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showMyName</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"My name is "</span> + mName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">" take breathe "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Examination.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.reflection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Examination</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeAnExamination</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Breathe.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.reflection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Breathe</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="反射获取类中函数"><a href="#反射获取类中函数" class="headerlink" title="反射获取类中函数"></a>反射获取类中函数</h1><h2 id="获取当前类中定义的方法"><a href="#获取当前类中定义的方法" class="headerlink" title="获取当前类中定义的方法"></a>获取当前类中定义的方法</h2><p>要获取当前类中定义的所有方法可以通过Class中的getDeclaredMethods函数，它会获取当前类中的public、default、protected、private的所有方法。<code>getDeclaredMethod(String name, Class...&lt;?&gt; parameterTypes)</code>则是获取某个指定的方法。代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showDeclaredMethods</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	Student student = <span class="keyword">new</span> Student(<span class="string">"Michael"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 获取类中所有方法</span></div><div class="line">	Method[] methods = student.getClass().getDeclaredMethods();</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"方法名: "</span> + method.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		Method learnMethod = student.getClass().getDeclaredMethod(<span class="string">"learn"</span>,</div><div class="line">				String.class, Integer.TYPE);</div><div class="line">		<span class="comment">// 获取方法的参数类型列表</span></div><div class="line">		Class&lt;?&gt;[] paramClasses = learnMethod.getParameterTypes();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (Class&lt;?&gt; clz : paramClasses) &#123;</div><div class="line">			System.out.println(<span class="string">"learn 方法的参数类型: "</span> + clz.getName());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 是否是 private 函数，属性是否是 private 也可以使用这种方式判断</span></div><div class="line">		System.out.println(learnMethod.getName() + <span class="string">" is private method: "</span></div><div class="line">				+ Modifier.isPrivate(learnMethod.getModifiers()));</div><div class="line"></div><div class="line">		<span class="comment">//调用私有learn函数</span></div><div class="line">		learnMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line">		learnMethod.invoke(student, <span class="string">"java---&gt;"</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">运行结果:</div><div class="line"></div><div class="line">方法名: toString</div><div class="line">方法名: learn</div><div class="line">方法名: takeAnExamination</div><div class="line">learn 方法的参数类型: java.lang.String</div><div class="line">learn 方法的参数类型: <span class="keyword">int</span></div><div class="line">learn is <span class="keyword">private</span> method: <span class="keyword">true</span></div><div class="line">Michael learn java---&gt;---<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="获取当前类、父类中定义的公有方法"><a href="#获取当前类、父类中定义的公有方法" class="headerlink" title="获取当前类、父类中定义的公有方法"></a>获取当前类、父类中定义的公有方法</h2><p>要获取当前类以及父类中的所有public方法可以通过Class中的getMethods函数，而getMethod则是获取某个指定的方法。代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMethods</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	Student student = <span class="keyword">new</span> Student(<span class="string">"Michael"</span>);</div><div class="line">	<span class="comment">//获取所有公有方法</span></div><div class="line">	Method[] methods = student.getClass().getMethods();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(Method method : methods)&#123;</div><div class="line">		System.out.println(<span class="string">"公有方法名： "</span> + method.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//通过 getMethod 只能获取公有方法，如果获取私有方法则会抛出异常</span></div><div class="line">		Method method = student.getClass().getMethod(<span class="string">"takeAnExamination"</span>);</div><div class="line"></div><div class="line">		method.invoke(student);</div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">公有方法名： toString</div><div class="line">公有方法名： takeAnExamination</div><div class="line">公有方法名： breathe</div><div class="line">公有方法名： wait</div><div class="line">公有方法名： wait</div><div class="line">公有方法名： wait</div><div class="line">公有方法名： equals</div><div class="line">公有方法名： hashCode</div><div class="line">公有方法名： getClass</div><div class="line">公有方法名： notify</div><div class="line">公有方法名： notifyAll</div><div class="line"> takeAnExamination</div></pre></td></tr></table></figure>
<p><strong>接口说明</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取Class对象中指定的所有函数，不包括从父类继承的函数</span></div><div class="line"><span class="keyword">public</span> Method[] getDeclaredMethods()</div><div class="line"></div><div class="line"><span class="comment">//获取Class对象中指定函数名和参数的函数，参数name表示函数名；参数parameterTypes表示参数类型列表</span></div><div class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></div><div class="line"></div><div class="line"><span class="comment">//获取Class对象中的所有公有函数（包括从父类和接口类继承的函数）</span></div><div class="line"><span class="keyword">public</span> Method[] <span class="title">getMethods</span><span class="params">()</span></div><div class="line"></div><div class="line"><span class="comment">//获取Class对象中指定函数名和参数的公有函数，参数name表示函数名；参数parameterTypes表示参数类型列表</span></div><div class="line"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></div></pre></td></tr></table></figure>
<p>这里需要注意的是 getDeclaredMethod 和 getDeclaredMethods 包含 private、protected、default、public 的函数，并且通过这两个函数获取到的只是在自身中定义的函数，从父类中集成的函数不能够获取到。而 getMethod 和 getMethods 只包含 public 函数，父类中的公有函数也能够获取到。</p>
<h1 id="反射类获取类中的属性"><a href="#反射类获取类中的属性" class="headerlink" title="反射类获取类中的属性"></a>反射类获取类中的属性</h1><h2 id="获取当前类中定义的属性"><a href="#获取当前类中定义的属性" class="headerlink" title="获取当前类中定义的属性"></a>获取当前类中定义的属性</h2><p>要获取当前类中定义的所有属性可以通过Class中的getDeclaredFields函数，它会获取到当前类中的public、protected、private的所有属性，而getDeclaredField则是获取指定的属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showDeclaredFields</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	Student student = <span class="keyword">new</span> Student(<span class="string">"Michael"</span>);</div><div class="line"></div><div class="line">	<span class="comment">//获取当前类的所有属性</span></div><div class="line">	Field[] fields = student.getClass().getDeclaredFields();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(Field field : fields) &#123;</div><div class="line">		System.out.println(<span class="string">"属性名： "</span> + field.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//获取当前类的指定属性</span></div><div class="line">		Field gradeField = student.getClass().getDeclaredField(<span class="string">"mGrade"</span>);</div><div class="line">		<span class="comment">//获取属性值</span></div><div class="line">		System.out.println(<span class="string">"grade is:"</span> + gradeField.getInt(student));</div><div class="line">		<span class="comment">//设置属性值</span></div><div class="line">		gradeField.set(student, <span class="number">10</span>);</div><div class="line">		System.out.println(<span class="string">"grade is:"</span> + gradeField.getInt(student));</div><div class="line"></div><div class="line">		Field ageField = student.getClass().getDeclaredField(<span class="string">"age"</span>);</div><div class="line">		ageField.setAccessible(<span class="keyword">true</span>);</div><div class="line">		System.out.println(<span class="string">"age: "</span> + ageField.get(student));</div><div class="line"></div><div class="line">		ageField.set(student, <span class="string">"26"</span>);</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"age: "</span> + ageField.get(student));</div><div class="line"></div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">属性名： mGrade</div><div class="line">属性名： age</div><div class="line">grade is:<span class="number">0</span></div><div class="line">grade is:<span class="number">10</span></div><div class="line">age: <span class="keyword">null</span></div><div class="line">age: <span class="number">26</span></div></pre></td></tr></table></figure>
<h2 id="获取当前类、父类中定义的公有属性"><a href="#获取当前类、父类中定义的公有属性" class="headerlink" title="获取当前类、父类中定义的公有属性"></a>获取当前类、父类中定义的公有属性</h2><p>要获取当前类以及父类中的所有 public 属性可以通过 Class 中的 getFields 函数，而 getField 则是获取某个指定的属性。代码示例如下 :</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">private static void showFields() &#123;</div><div class="line"></div><div class="line">	Student student = new Student("Michael");</div><div class="line"></div><div class="line">	//获取当前类的所有属性</div><div class="line">	Field[] fields = student.getClass().getFields();</div><div class="line"></div><div class="line">	for(Field field : fields) &#123;</div><div class="line">		System.out.println("属性名： " + field.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	try &#123;</div><div class="line">		//获取当前类的指定属性</div><div class="line">		Field gradeField = student.getClass().getField("mGrade");</div><div class="line">		//获取属性值</div><div class="line">		System.out.println("grade is:" + gradeField.getInt(student));</div><div class="line">		//设置属性值</div><div class="line">		gradeField.set(student, 10);</div><div class="line">		System.out.println("grade is:" + gradeField.getInt(student));</div><div class="line"></div><div class="line">		//getField()方法不能获取私有属性</div><div class="line">		Field ageField = student.getClass().getField("age");</div><div class="line">		//私有属性需调用次函数 JDK 1.8</div><div class="line">		ageField.setAccessible(true);</div><div class="line">		System.out.println("age: " + ageField.get(student));</div><div class="line"></div><div class="line"></div><div class="line">	&#125; catch (Exception e) &#123;</div><div class="line">		// TODO Auto-generated catch block</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">属性名： mGrade</div><div class="line">grade is:0</div><div class="line">grade is:10</div><div class="line">java.lang.NoSuchFieldException: age  ##getField()方法不能获取私有属性</div><div class="line">	at java.lang.Class.getField(Unknown Source)</div><div class="line">	at com.michael.java.reflection.Main.showFields(Main.java:153)</div><div class="line">	at com.michael.java.reflection.Main.main(Main.java:172)</div></pre></td></tr></table></figure>
<p><strong>接口说明</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 Class 对象中指定属性名的属性，参数一为属性名</span></div><div class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getDeclaredField</span> <span class="params">(String name)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 获取该 Class 对象中的所有属性( 不包含从父类继承的属性 )</span></div><div class="line"><span class="keyword">public</span> Method[] <span class="title">getDeclaredFields</span> <span class="params">()</span></div><div class="line"></div><div class="line"><span class="comment">// 获取Class 对象中的指定的公有属性，参数一为属性名</span></div><div class="line"><span class="keyword">public</span> Method <span class="title">getField</span> <span class="params">(String name)</span></div><div class="line"></div><div class="line"><span class="comment">// 获取该 Class 对象中的所有公有属性 ( 包含从父类和接口类集成下来的公有属性 )</span></div><div class="line"><span class="keyword">public</span> Method[] <span class="title">getFields</span> <span class="params">()</span></div></pre></td></tr></table></figure>
<p>这里需要注意的是 getDeclaredField 和 getDeclaredFields 包含 private、protected、default、public 的属性，并且通过这两个函数获取到的只是在自身中定义的属性，从父类中集成的属性不能够获取到。而 getField 和 getFields 只包含 public 属性，父类中的公有属性也能够获取到。</p>
<h1 id="反射获取父类与接口"><a href="#反射获取父类与接口" class="headerlink" title="反射获取父类与接口"></a>反射获取父类与接口</h1><h2 id="获取父类"><a href="#获取父类" class="headerlink" title="获取父类"></a>获取父类</h2><p>获取Class对象的父类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private static void showSuperClass() &#123;</div><div class="line"></div><div class="line">	Student student = new Student("Michael");</div><div class="line">	Class&lt;?&gt; superClass = student.getClass().getSuperclass();</div><div class="line"></div><div class="line">	while(superClass != null) &#123;</div><div class="line">		System.out.println("super class is : " + superClass.getName());</div><div class="line"></div><div class="line">		//再获取父类的上一层父类，知道最后的Object类，Object的父类为null</div><div class="line">		superClass = superClass.getSuperclass();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果:</div><div class="line"></div><div class="line">super class is : com.michael.java.reflection.Person</div><div class="line">super class is : java.lang.Object</div></pre></td></tr></table></figure>
<h2 id="获取接口"><a href="#获取接口" class="headerlink" title="获取接口"></a>获取接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showIntefaces</span><span class="params">()</span> </span>&#123;</div><div class="line">	Student student = <span class="keyword">new</span> Student(<span class="string">"Michael"</span>);</div><div class="line">	Class&lt;?&gt;[] interfaces = student.getClass().getInterfaces();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(Class&lt;?&gt; clz : interfaces) &#123;</div><div class="line">		System.out.println(<span class="string">"Student的接口有: "</span> + clz.getName());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">Student的接口有: com.michael.java.reflection.Examination</div></pre></td></tr></table></figure>
<h1 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h1><p>在框架开发中，注解加反射的组合使用是最为常见形式的。定义注解时我们会通过@Target 指定该注解能够作用的类型，看如下示例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;</div><div class="line">		ElementType.METHOD, ElementType.FIELD, ElementType.TYPE</div><div class="line">&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">static</span> <span class="meta">@interface</span> Test &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述注解的@target 表示该注解只能用在函数上，还有 Type、Field、PARAMETER 等类型，可以参考上述给出的参考资料。通过反射 api 我们也能够获取一个 Class 对象获取类型、属性、函数等相关的对象，通过这些对象的 getAnnotation 接口获取到对应的注解信息。 首先我们需要在目标对象上添加上注解，例如 :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>(tag = <span class="string">"Student class Test Annoatation"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Examination</span> </span>&#123;</div><div class="line">    <span class="comment">// 年级</span></div><div class="line">    <span class="meta">@Test</span>(tag = <span class="string">"mGrade Test Annotation "</span>)</div><div class="line">    <span class="keyword">int</span> mGrade;</div><div class="line"></div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后通过相关的注解函数得到注解信息，如下所示 :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAnnotationInfos</span><span class="params">()</span> </span>&#123;</div><div class="line">	Student student = <span class="keyword">new</span> Student(<span class="string">"mr.simple"</span>);</div><div class="line">	Test classTest = student.getClass().getAnnotation(Test.class);</div><div class="line">	System.out.println(<span class="string">"class Annotatation tag = "</span> + classTest.tag());</div><div class="line"></div><div class="line">	Field field = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		field = student.getClass().getDeclaredField(<span class="string">"mGrade"</span>);</div><div class="line">		Test testAnnotation = field.getAnnotation(Test.class);</div><div class="line">		System.out.println(<span class="string">"属性的 Test 注解 tag : "</span> + testAnnotation.tag());</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class Annotatation tag = Student class Test Annoatation</div><div class="line">属性的 Test 注解 tag : mGrade Test Annotation</div></pre></td></tr></table></figure></p>
<p><strong>接口说明</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取指定类型的注解</span></div><div class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span> </span>;</div><div class="line"><span class="comment">// 获取 Class 对象中的所有注解</span></div><div class="line"><span class="keyword">public</span> Annotation[] getAnnotations() ;</div></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>反射作为 Java 语言的重要特性，在开发中有着极为重要的作用。很多开发框架都是基于反射来实现对目标对象的操作，而反射配合注解更是设计开发框架的主流选择</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合之并发容器LinkedBlockingQueue]]></title>
      <url>http://liuguoquan727.github.io/2015/12/23/Java%E9%9B%86%E5%90%88%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8LinkedBlockingQueue/</url>
      <content type="html"><![CDATA[<p>LinkedBlockingQueue是一个基于已链接节点的、范围任意的阻塞队列的实现。 此队列按 FIFO（先进先出）排序元素。队列的头部 是在队列中时间最长的元素。队列的尾部 是在队列中时间最短的元素。新元素插入到队列的尾部，并且队列检索操作会获得位于队列头部的元素。链接队列的吞吐量通常要高于基于数组的队列， 但是在大多数并发应用程序中，其可预知的性能要低。</p>
<p>可选的容量范围构造方法参数作为防止队列过度扩展的一种方法。如果未指定容量，则它等于 Integer.MAX_VALUE。除非插入节点会使队列超出容量，否则每次插入后会动态地创建链接节点。</p>
<h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<p>LinkedBlockingQueue实现是线程安全的，实现了先进先出等特性，是作为生产者消费者的首选</p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(Integer.MAX_VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">	<span class="keyword">this</span>.capacity = capacity;</div><div class="line">	last = head = <span class="keyword">new</span> Node&lt;E&gt;(<span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueueDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	 <span class="comment">/**</span></div><div class="line">     * </div><div class="line">     * 定义装苹果的篮子</div><div class="line">     * </div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Basket</span> </span>&#123;</div><div class="line">        <span class="comment">// 篮子，能够容纳3个苹果</span></div><div class="line">        BlockingQueue&lt;String&gt; basket = <span class="keyword">new</span> LinkedBlockingQueue&lt;String&gt;(<span class="number">3</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 生产苹果，放入篮子</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">            <span class="comment">// put方法放入一个苹果，若basket满了，等到basket有位置</span></div><div class="line">            basket.put(<span class="string">"An apple"</span>); <span class="comment">//阻塞</span></div><div class="line"> <span class="comment">//           basket.offer("An Apple"); //非阻塞</span></div><div class="line">         &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 消费苹果，从篮子中取走</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">            <span class="comment">// take方法取出一个苹果，若basket为空，等到basket有苹果为止(获取并移除此队列的头部)</span></div><div class="line">            <span class="keyword">return</span> basket.take();  <span class="comment">//阻塞</span></div><div class="line">            <span class="comment">//return basket.poll(); //非阻塞</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义苹果生产者</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String instance;</div><div class="line">        <span class="keyword">private</span> Basket basket;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(String instance, Basket basket)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.instance = instance;</div><div class="line">            <span class="keyword">this</span>.basket = basket;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    <span class="comment">// 生产苹果</span></div><div class="line">                    System.out.println(<span class="string">"生产者准备生产苹果："</span> + instance);</div><div class="line">                    basket.produce();</div><div class="line">                    <span class="comment">// 休眠300ms</span></div><div class="line">                    Thread.sleep(<span class="number">300</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">                System.out.println(<span class="string">"Producer Interrupted"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义苹果消费者</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String instance;</div><div class="line">        <span class="keyword">private</span> Basket basket;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(String instance, Basket basket)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.instance = instance;</div><div class="line">            <span class="keyword">this</span>.basket = basket;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    <span class="comment">// 消费苹果</span></div><div class="line">                    System.out.println(<span class="string">"消费者准备消费苹果："</span> + instance);</div><div class="line">                    System.out.println(<span class="string">"consume: "</span> + basket.consume());</div><div class="line">                    <span class="comment">// 休眠1000ms</span></div><div class="line"><span class="comment">//                    Thread.sleep(1000);</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">                System.out.println(<span class="string">"Consumer Interrupted"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    	</div><div class="line">        LinkedBlockingQueueDemo test = <span class="keyword">new</span> LinkedBlockingQueueDemo();</div><div class="line"></div><div class="line">        <span class="comment">// 建立一个装苹果的篮子</span></div><div class="line">        Basket basket = test.new Basket();</div><div class="line"></div><div class="line">        ExecutorService service = Executors.newCachedThreadPool();</div><div class="line">        Producer producer = test.new Producer(<span class="string">"生产者001"</span>, basket);</div><div class="line"><span class="comment">//        Producer producer2 = test.new Producer("生产者002", basket);</span></div><div class="line"><span class="comment">//        Consumer consumer = test.new Consumer("消费者001", basket);</span></div><div class="line">        service.submit(producer);</div><div class="line"><span class="comment">//        service.submit(producer2);</span></div><div class="line"><span class="comment">//        service.submit(consumer);</span></div><div class="line">        <span class="comment">// 程序运行5s后，所有任务停止</span></div><div class="line"><span class="comment">//        try &#123;</span></div><div class="line"><span class="comment">//            Thread.sleep(1000 * 1);</span></div><div class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></div><div class="line"><span class="comment">//            e.printStackTrace();</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//        service.shutdownNow();</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合之并发容器ConcurrentLinkedQueue]]></title>
      <url>http://liuguoquan727.github.io/2015/12/23/Java%E9%9B%86%E5%90%88%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8ConcurrentLinkedQueue/</url>
      <content type="html"><![CDATA[<p>在并发编程中我们有时候需要使用线程安全的队列。如果我们要实现一个线程安全的队列，有两种实现方式，一种是阻塞式队列，另外一种是非阻塞式队列。使用阻塞算法的队列可以用一个锁（入队和出对用同一把锁）或两个锁（入队和出对用不同的锁）等方式来实现，而非阻塞的实现则可以使用CAS的方式来实现。ConcurrentLinkedQueue是基于非阻塞式来实现的线程安全队列。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ConcurrentLinkedQueue是一个基于链接节点的无界线程安全队列，它采用先进先出的规则对节点进行排序，当我们添加一个元素的时候，它会添加到队列的尾部，当我们获取一个元素的时候，它会返回队列头部的元素。它采用了“wait-free”算法来实现。</p>
<h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentLinkedQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>首先来看看ConcurrentLinkedQueue的类图</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ConcurrentLinkedQueue-%E7%B1%BB%E5%9B%BE.jpg" alt=""></p>
<p>ConcurrentLinkedQueue由head节点和tail节点组成，每个节点（Node）由节点元素（item）和指向下一个节点的引用（next）组成，从而组成一张链表结构的队列。默认情况下head节点存储的元素为空，tail节点等于header节点</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;E&gt; head;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;E&gt; tail;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentLinkedQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">	head = tail = <span class="keyword">new</span> Node&lt;E&gt;(<span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="offer入队列"><a href="#offer入队列" class="headerlink" title="offer入队列"></a>offer入队列</h1><p>入队列就是将新元素添加到队列的尾部，如下图所示</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ConcurrentLinekedQueue-%E9%98%9F%E5%88%97%E5%85%A5%E9%98%9F%E7%BB%93%E6%9E%84%E5%8F%98%E5%8C%96%E5%9B%BE.jpg" alt=""></p>
<ul>
<li>第一步添加元素1。队列更新head节点的next节点为元素1节点。又因为tail节点默认情况下等于head节点，所以它们的next节点都指向元素1节点。</li>
<li>第二步添加元素2。队列首先设置元素1节点的next节点为元素2节点，然后更新tail节点指向元素2节点。</li>
<li>第三步添加元素3，设置tail节点的next节点为元素3节点。</li>
<li>第四步添加元素4，设置元素3的next节点为元素4节点，然后将tail节点指向元素4节点。</li>
</ul>
<p>入队过程主要做两件事情：第一是将入队节点设置成当前队列尾节点的下一个节点。第二是更新tail节点，如果tail节点的next节点不为空，则将入队节点设置成tail节点；如果tail节点的next节点为空，则将入队节点设置成tail的next节点，所以tail节点不总是尾节点。</p>
<p>上面的分析让我们从单线程入队的角度来理解入队过程，但是多个线程同时进行入队情况就变得更加复杂，因为可能会出现其他线程插队的情况。如果有一个线程正在入队，那么它必须先获取尾节点，然后设置尾节点的下一个节点为入队节点，但这时可能有另外一个线程插队了，那么队列的尾节点就会发生变化，这时当前线程要暂停入队操作，然后重新获取尾节点。让我们再通过源码来详细分析下它是如何使用CAS算法来入队的。</p>
<p>源码分析：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">	checkNotNull(e);</div><div class="line">	<span class="comment">//创建一个新节点</span></div><div class="line">	<span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(e);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (Node&lt;E&gt; t = tail, p = t;;) &#123;</div><div class="line">		Node&lt;E&gt; q = p.next;</div><div class="line">		<span class="keyword">if</span> (q == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// p is last node</span></div><div class="line">			<span class="keyword">if</span> (p.casNext(<span class="keyword">null</span>, newNode)) &#123;</div><div class="line">				<span class="comment">// Successful CAS is the linearization point</span></div><div class="line">				<span class="comment">// for e to become an element of this queue,</span></div><div class="line">				<span class="comment">// and for newNode to become "live".</span></div><div class="line">				<span class="keyword">if</span> (p != t) <span class="comment">// hop two nodes at a time</span></div><div class="line">					casTail(t, newNode);  <span class="comment">// Failure is OK.</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// Lost CAS race to another thread; re-read next</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (p == q)</div><div class="line">			<span class="comment">// We have fallen off list.  If tail is unchanged, it</span></div><div class="line">			<span class="comment">// will also be off-list, in which case we need to</span></div><div class="line">			<span class="comment">// jump to head, from which all live nodes are always</span></div><div class="line">			<span class="comment">// reachable.  Else the new tail is a better bet.</span></div><div class="line">			p = (t != (t = tail)) ? t : head;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="comment">// Check for tail updates after two hops.</span></div><div class="line">			p = (p != t &amp;&amp; t != (t = tail)) ? t : q;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="poll出队列"><a href="#poll出队列" class="headerlink" title="poll出队列"></a>poll出队列</h1><p>出队列的就是从队列里返回一个节点元素，并清空该节点对元素的引用。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ConcurrentLinekedQueue-%E9%98%9F%E5%88%97%E5%87%BA%E9%98%9F%E7%BB%93%E6%9E%84%E5%8F%98%E5%8C%96%E5%9B%BE.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">	restartFromHead:</div><div class="line">	<span class="keyword">for</span> (;;) &#123;</div><div class="line">		<span class="keyword">for</span> (Node&lt;E&gt; h = head, p = h, q;;) &#123;</div><div class="line">			E item = p.item;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (item != <span class="keyword">null</span> &amp;&amp; p.casItem(item, <span class="keyword">null</span>)) &#123;</div><div class="line">				<span class="comment">// Successful CAS is the linearization point</span></div><div class="line">				<span class="comment">// for item to be removed from this queue.</span></div><div class="line">				<span class="keyword">if</span> (p != h) <span class="comment">// hop two nodes at a time</span></div><div class="line">					updateHead(h, ((q = p.next) != <span class="keyword">null</span>) ? q : p);</div><div class="line">				<span class="keyword">return</span> item;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> ((q = p.next) == <span class="keyword">null</span>) &#123;</div><div class="line">				updateHead(h, p);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (p == q)</div><div class="line">				<span class="keyword">continue</span> restartFromHead;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				p = q;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合之并发容器CopyOnWriteArrayList]]></title>
      <url>http://liuguoquan727.github.io/2015/12/23/Java%E9%9B%86%E5%90%88%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8CopyOnWriteArrayList/</url>
      <content type="html"><![CDATA[<p>Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后在此基础上进行修改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器，它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我向一个容器中添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后往新的容器里添加元素，添加元素后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素，所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p>
<h2 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>以下代码是向CopyOnWriteArrayList中添加元素add方法的实现，可以发现在添加的时候是需要加锁的，否则多线程写的时候会复制出N个副本出来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">	lock.lock();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		Object[] elements = getArray();</div><div class="line">		<span class="keyword">int</span> len = elements.length;</div><div class="line">		Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</div><div class="line">		newElements[len] = e;</div><div class="line">		setArray(newElements);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		lock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>而读数据的时候不需要加锁，如果读的时候有多个线程正在向CopyOnWriteArrayList添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的CopyOnWriteArrayList。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> get(getArray(), index);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>CopyOnWrite并发容器用于读多写少的并发场景，比如白名单、黑名单、商场类目的访问和更新场景。</p>
<p>使用CopyOnWrite需要注意两件事情：</p>
<ol>
<li>减少扩容开销。根据时间需要初始化CopyOnWriteArrayList的大小，避免写数据时扩容的开销；</li>
<li>使用批量添加。因为每次添加，容器每次都会进行复制，所以减少添加次数，可以减少容器的复制次数。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h3 id="内存占用问题"><a href="#内存占用问题" class="headerlink" title="内存占用问题"></a>内存占用问题</h3><p>因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用CopyOnWrite机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。</p>
<p>　　针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器如ConcurrentHashMap。</p>
<h3 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h3><p>CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</p>
<p>参考文章<a href="http://www.cnblogs.com/dolphin0520/p/3938914.html" target="_blank" rel="external">Java并发编程：并发容器之CopyOnWriteArrayList</a></p>
<p>下面这篇文章验证了CopyOnWriteArrayList和同步容器的性能：<br><a href="http://blog.csdn.net/wind5shy/article/details/5396887" target="_blank" rel="external">http://blog.csdn.net/wind5shy/article/details/5396887</a></p>
<p>下面这篇文章简单描述了CopyOnWriteArrayList的使用:<br><a href="http://blog.csdn.net/imzoer/article/details/9751591" target="_blank" rel="external">http://blog.csdn.net/imzoer/article/details/9751591</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合之并发容器ConcurrentHashMap]]></title>
      <url>http://liuguoquan727.github.io/2015/12/22/Java%E9%9B%86%E5%90%88%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8ConcurrentHashMap/</url>
      <content type="html"><![CDATA[<h1 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a>术语定义</h1><table>
<thead>
<tr>
<th>术语</th>
<th>英文</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>哈希算法</td>
<td>Hash algorithm</td>
<td>是一种将任意内容的输入转换成相同长度输出的加密方式，其输出被称为哈希值</td>
</tr>
<tr>
<td>哈希表</td>
<td>hash table</td>
<td>根据设定的哈希函数和处理冲突方法将一组关键字映射到一个有限的地址区间上，并以关键字在地址区间中的项作为记录在表中的存储位置，这种表称为哈希表或散列，所得存储位置称为哈希地址或散列地址。</td>
</tr>
</tbody>
</table>
<h1 id="线程不安全的HashMap"><a href="#线程不安全的HashMap" class="headerlink" title="线程不安全的HashMap"></a>线程不安全的HashMap</h1><p>因为多线程环境下，使用HashMap进行put操作会引起使循环，导致CPU利用率接近100%，所以在并发情况下不能使用HashMap。</p>
<h1 id="效率低下的HashTable"><a href="#效率低下的HashTable" class="headerlink" title="效率低下的HashTable"></a>效率低下的HashTable</h1><p>HashTable使用synchronized来保证线程安全，但在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable同步方法时，其他线程访问HashTable的同步方法时，可能会进入阻塞或轮询状态。如线程1使用put进行添加元素，线程2不但不能使用put方法添加元素，并且也不能使用个图方法来获取元素，所以竞争越激烈效率越低。</p>
<h1 id="ConcurrentHashMap锁分段技术"><a href="#ConcurrentHashMap锁分段技术" class="headerlink" title="ConcurrentHashMap锁分段技术"></a>ConcurrentHashMap锁分段技术</h1><p>HashTable在竞争激烈的并发环境下表现出效率低下的原因是因为所有访问HashTable的线程都必须竞争同一把锁。</p>
<p>假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHasMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p>
<h1 id="ConcurrentHasMap结构"><a href="#ConcurrentHasMap结构" class="headerlink" title="ConcurrentHasMap结构"></a>ConcurrentHasMap结构</h1><p>先看看ConcurrentHasMap的类图</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ConcurrentHashMap-%E7%B1%BB%E5%9B%BE.jpg" alt=""></p>
<p>ConcurrentHasMap是由Segment数组结构和HashEntry数组结构组成。Segment是一种可重入锁ReentrantLock，在ConcurrentHasMap里扮演锁的角色，HashEntry则用于存储键值对数据。一个ConcurrentHasMap里包含一个Segment数组，Segment的结构和HashMap类似，是一种数组和链表结构，一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构的元素，每个Segment守护着一个HashEntry数组里的元素，当对HashEntry数组的数据进行修改时，必须首先获得它对应的Segment的锁，由于每一个segment写操作只锁定自己的HashEntry数组，所以可能存在多个线程同时写的情况。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ConcurrentHashMap-%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt=""></p>
<h1 id="ConcurrentHasMap源码"><a href="#ConcurrentHasMap源码" class="headerlink" title="ConcurrentHasMap源码"></a>ConcurrentHasMap源码</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>ConcurrentHasMap初始化是通过initialCapacityu、loadFactor、concurrencyLevel几个参数来初始化Segment数组的，段偏移量segmentShift，段掩码segmentMask和每个segment里面的HashEntry数组。</p>
<h3 id="初始化Segment数组"><a href="#初始化Segment数组" class="headerlink" title="初始化Segment数组"></a>初始化Segment数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</div><div class="line"></div><div class="line"><span class="comment">//默认加载因子,加载因子是表示Hsah表中元素的填满的程度.若:加载因子越大,填满的元素越多,好处是,空间利用率高了,但:冲突的机会加大了.反之,加载因子越小,填满的元素越少,好处是:冲突的机会减小了,但:空间浪费多了.</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line"><span class="comment">//默认并发等级</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</div><div class="line"></div><div class="line"><span class="comment">//最大容量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="comment">//最小Segment</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SEGMENT_TABLE_CAPACITY = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">//最大Segment</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEGMENTS = <span class="number">1</span> &lt;&lt; <span class="number">16</span>; <span class="comment">// slightly conservative</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></div><div class="line">						 <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel) &#123;</div><div class="line">	<span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">	<span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)</div><div class="line">		concurrencyLevel = MAX_SEGMENTS;</div><div class="line">	<span class="comment">// Find power-of-two sizes best matching arguments</span></div><div class="line">	<span class="keyword">int</span> sshift = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> ssize = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</div><div class="line">		++sshift;</div><div class="line">		<span class="comment">//Segment数组大小 2的N次方</span></div><div class="line">		ssize &lt;&lt;= <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</div><div class="line">	<span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">		initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">	<span class="keyword">int</span> c = initialCapacity / ssize;</div><div class="line">	<span class="keyword">if</span> (c * ssize &lt; initialCapacity)</div><div class="line">		++c;</div><div class="line">	<span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</div><div class="line">	<span class="keyword">while</span> (cap &lt; c)</div><div class="line">		cap &lt;&lt;= <span class="number">1</span>;</div><div class="line">	<span class="comment">// create segments and segments[0]</span></div><div class="line">	Segment&lt;K,V&gt; s0 =</div><div class="line">		<span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),</div><div class="line">						 (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);</div><div class="line">	Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];</div><div class="line">	UNSAFE.putOrderedObject(ss, SBASE, s0); <span class="comment">// ordered write of segments[0]</span></div><div class="line">	<span class="keyword">this</span>.segments = ss; <span class="comment">//初始化Segment数组</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ssize数组长度是通过concurrencyLevel计算出来的。为了能通过按位与的哈希算法来定位segments数组的索引，必须保证segments的长度是2的N次方，所以必须计算出一个是大于或等于concurrencyLevel的最小2的N次方来作为segments数组的长度。假如concurrencyLevel等于14、15或16.ssize都会等于16，即容器里锁的个数也是16.注意concurrencyLevel的最大大小为65535，意味着segments数组的最大长度为65536，即2^16次方。</p>
<p>segmentShift用于定位参与hash运算的位数，segmentShift等于32减去sshift，sshift等于ssize从1向左移位的次数，在默认情况下concurrencyLevel等于16,1需要向左移动4位，所以sshift等于4，因此segmentShift等于28.<br>segmentMask是哈希运算的掩码，等于ssize-1，即15，掩码的二进制各个位的值都是1。<br>因为ssize的最长度是65536，所以segmentShift的最大值是16，segmentMask的最大值是65535，即2^16 -1，每位都是1.</p>
<h2 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h2><p>Segment的get操作实现非常简单和高效，先获取key的哈希值，然后使用这个哈希值通过哈希运算定位到segment，然后遍历该segment的HashEntry数组找到指定的key。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jdk 1.7</span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">	Segment&lt;K,V&gt; s; <span class="comment">// manually integrate access methods to reduce overhead</span></div><div class="line">	HashEntry&lt;K,V&gt;[] tab;</div><div class="line">	<span class="keyword">int</span> h = hash(key);</div><div class="line">	<span class="comment">//定位Segment</span></div><div class="line">	<span class="keyword">long</span> u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</div><div class="line">	<span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">		(tab = s.table) != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">//遍历HashEntry</span></div><div class="line">		<span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class="line">				 (tab, ((<span class="keyword">long</span>)(((tab.length - <span class="number">1</span>) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class="line">			 e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">			K k;</div><div class="line">			<span class="keyword">if</span> ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class="line">				<span class="keyword">return</span> e.value;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>get操作的高效之处在于整个get过程不需要加锁，除非读到的值是空的才会加锁重读。</p>
<p>jdk1.7中的get方法没有使用锁同步，而是使用轻量级同步volatile原语sun.misc.Unsafe.getObjectVolatile(Object, long)，保证读到的是最新的对象。</p>
<p>jdk1.6中get方法里将要使用的共享变量都定义成volatile，如用于统计当前Segement大小的count字段和用于存储值的HashEntry的value。定义成volatile的变量，能够在线程之间保持可见性，能够被多线程同时读，并且保证不会读到过期的值，但是只能被单线程写（有一种情况可以被多线程写，就是写入的值不依赖于原值），在get操作里只需要读不需要写共享变量count和value，所以可以不用加锁。之所以不会读到过期的值，是根据java内存模型的happen before原则，对volatile字段的写入操作先于读操作，即使两个线程同时修改和获取volatile变量，get操作也能拿到最新的值，这是用volatile替换锁的经典应用场景。</p>
<h2 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">	Segment&lt;K,V&gt; s;</div><div class="line">	<span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">	<span class="keyword">int</span> hash = hash(key);</div><div class="line">	<span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div><div class="line">	<span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          <span class="comment">// nonvolatile; recheck</span></div><div class="line">		 (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="keyword">null</span>) <span class="comment">//  in ensureSegment</span></div><div class="line">		s = ensureSegment(j);</div><div class="line">	<span class="keyword">return</span> s.put(key, hash, value, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果段不为空，那么进入java.util.concurrent.ConcurrentHashMap.Segment.put(K, int, V, boolean)，否则构造段。由此可以看出段的构造是以懒加载的方式，按需构造。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</div><div class="line">	HashEntry&lt;K,V&gt; node = tryLock() ? <span class="keyword">null</span> :</div><div class="line">		scanAndLockForPut(key, hash, value);</div><div class="line">	V oldValue;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		HashEntry&lt;K,V&gt;[] tab = table;</div><div class="line">		<span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</div><div class="line">		HashEntry&lt;K,V&gt; first = entryAt(tab, index);</div><div class="line">		<span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</div><div class="line">			<span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">				K k;</div><div class="line">				<span class="keyword">if</span> ((k = e.key) == key ||</div><div class="line">					(e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class="line">					oldValue = e.value;</div><div class="line">					<span class="keyword">if</span> (!onlyIfAbsent) &#123;</div><div class="line">						e.value = value;</div><div class="line">						++modCount;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				e = e.next;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (node != <span class="keyword">null</span>)</div><div class="line">					node.setNext(first);</div><div class="line">				<span class="keyword">else</span></div><div class="line">					node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class="line">				<span class="keyword">int</span> c = count + <span class="number">1</span>;</div><div class="line">				<span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class="line">					rehash(node);</div><div class="line">				<span class="keyword">else</span></div><div class="line">					setEntryAt(tab, index, node);</div><div class="line">				++modCount;</div><div class="line">				count = c;</div><div class="line">				oldValue = <span class="keyword">null</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		unlock();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进入段中执行最终put的时候，会使用可重入锁进行tryLock可轮询请求锁，如果成功获取锁，那么条目的插入方式和普通hashmap没多大区别。<br>如果此时有其他线程也再对这个段进行更新操作，那么执行scanAndLockForPut进行重试。</p>
<p>重试的处理逻辑:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title">scanAndLockForPut</span><span class="params">(K key, <span class="keyword">int</span> hash, V value)</span> </span>&#123;</div><div class="line">	HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</div><div class="line">	HashEntry&lt;K,V&gt; e = first;</div><div class="line">	HashEntry&lt;K,V&gt; node = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// negative while locating node</span></div><div class="line">	<span class="keyword">while</span> (!tryLock()) &#123;</div><div class="line">		HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></div><div class="line">		<span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="comment">// speculatively create node</span></div><div class="line">					node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</div><div class="line">				retries = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</div><div class="line">				retries = <span class="number">0</span>;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				e = e.next;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</div><div class="line">			lock();</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp;</div><div class="line">				 (f = entryForHash(<span class="keyword">this</span>, hash)) != first) &#123;</div><div class="line">			e = first = f; <span class="comment">// re-traverse if entry changed</span></div><div class="line">			retries = -<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦未获得锁 while (!tryLock()) 则进行重试循环。</p>
<p>第一次重试中retries &lt; 0，如果桶条目不为空，那么遍历桶中条目链表，如果key已经存在，那么直接进入下一个循环，否则构造新条目，进入下一个循环；如果重试次数达到极限，那么使用阻塞同步方法；每隔一次循环，校验下所在桶有没有更新，如果更新了，那么重试次数重置，重新开始。<br>一旦获得锁，直接返回，进行常规的hash put操作。</p>
<p>总的来说，put的同步机制是如果没有其他线程在更新该段，那么直接put。否则轮询请求锁，直至获得锁。</p>
<h1 id="ConcurrentHasMap是弱一致性的迭代器"><a href="#ConcurrentHasMap是弱一致性的迭代器" class="headerlink" title="ConcurrentHasMap是弱一致性的迭代器"></a>ConcurrentHasMap是弱一致性的迭代器</h1><p>java.util.concurrent 集合返回的迭代器称为弱一致的（weakly consistent）迭代器</p>
<p>ConcurrentHashMap与其他并发容器所提供的多线程环境下不会抛出并发修改异常的迭代器是由其返回的弱一致性迭代器决定的，弱一致性迭代器可以容许并发修改。当迭代器创建的时，它会遍历已有元素，并且可以感应到在迭代器被创建后对容器的修改。这种弱一致性在调用那些需要对整个容器进行加锁的方法如size或isEmpty时可能提供不精确的值，因此只有当程序需要在独占访问中加锁时，才不能使用ConcurrentHashMap，而在绝大多数情况下ConcurrentHashMap可以带来更好的伸缩性。</p>
<p>参考文章</p>
<p><a href="http://blog.csdn.net/chjttony/article/details/46608271" target="_blank" rel="external">《Java并发编程实践》笔记2——基础同步类</a></p>
<p><a href="http://ifeve.com/concurrenthashmap/" target="_blank" rel="external">聊聊并发（4）：深入分析ConcurrentHashMap</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合之LinkedhashMap]]></title>
      <url>http://liuguoquan727.github.io/2015/12/20/Java%E9%9B%86%E5%90%88%E4%B9%8BLinkedHashMap/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>LinkedHashMap是HashMap的一个子类，它在HashMap的基础上维持了一个双向链表（hash表+双向链表），在遍历的时候可以使用插入顺序（先进先出），或者是最近最少使用（LRU）的顺序。</p>
<p>LinkedHashMap是key键有序的一种集合，使用双向链表来保证key的顺序。</p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>一般来说，如果需要使用的Map中的key无序，选择HashMap；如果要求key有序，则选择TreeMap。<br>但是选择TreeMap就会有性能问题，因为TreeMap的get操作的时间复杂度是O(log(n))的，相比于HashMap的O(1)还是差不少的，LinkedHashMap的出现就是为了平衡这些因素，使得能够以O(1)时间复杂度增加查找元素，又能够保证key的有序性。</p>
<p>此外，LinkedHashMap提供了两种key的顺序：</p>
<ul>
<li>访问顺序（access order）。可以使用这种顺序实现LRU（Least Recently Used）缓存</li>
<li>插入顺序（insertion orde）。同一key的多次插入，并不会影响其顺序</li>
</ul>
<h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div></pre></td></tr></table></figure>
<p>从定义可以看到LinkedHashMap继承于HashMap，且实现了Map接口。这也就意味着HashMap的一些优秀因素可以被继承下来，比如hash寻址，使用链表解决hash冲突等实现的快速查找，对于HashMap中一些效率较低的内容，比如容器扩容过程，遍历方式，LinkedHashMap是否做了一些优化呢。继续看代码吧。</p>
<h1 id="底层存储"><a href="#底层存储" class="headerlink" title="底层存储"></a>底层存储</h1><p>LinkedHashMap是基于HashMap，并在其基础上维持了一个双向链表，也就是说LinkedHashMap是一个hash表（数组+单向链表） +双向链表的实现，到底实现方式是怎么样的，来看一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//双向链表的头结点</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header ;</div><div class="line"></div><div class="line"><span class="comment">//true 表示最近较少使用顺序，false表示插入顺序</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</div></pre></td></tr></table></figure>
<p>下面来看看Entry这个节点类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * LinkedHashMap entry.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="comment">// These fields comprise the doubly linked list used for iteration.</span></div><div class="line">        <span class="comment">// 双向链表的上一个节点before和下一个节点after</span></div><div class="line">        Entry&lt;K,V&gt; before, after ;</div><div class="line"> </div><div class="line">       <span class="comment">// 构造方法直接调用父类HashMap的构造方法（super）</span></div><div class="line">       Entry( <span class="keyword">int</span> hash, K key, V value, HashMap.Entry&lt;K,V&gt; next) &#123;</div><div class="line">            <span class="keyword">super</span>(hash, key, value, next);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 从链表中删除当前节点的方法</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 改变当前节点前后两个节点的引用关系，当前节点没有被引用后，gc可以回收</span></div><div class="line">            <span class="comment">// 将上一个节点的after指向下一个节点</span></div><div class="line">            before.after = after;</div><div class="line">            <span class="comment">// 将下一个节点的before指向前一个节点</span></div><div class="line">            after.before = before;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 在指定的节点前加入一个节点到链表中（也就是加入到链表尾部）</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> </span>&#123;</div><div class="line">            <span class="comment">// 下面改变自己对前后的指向</span></div><div class="line">            <span class="comment">// 将当前节点的after指向给定的节点（加入到existingEntry前面嘛）</span></div><div class="line">            after  = existingEntry;</div><div class="line">            <span class="comment">// 将当前节点的before指向给定节点的上一个节点</span></div><div class="line">            before = existingEntry.before ;</div><div class="line"> </div><div class="line">            <span class="comment">// 下面改变前后最自己的指向</span></div><div class="line">            <span class="comment">// 上一个节点的after指向自己</span></div><div class="line">            before.after = <span class="keyword">this</span>;</div><div class="line">            <span class="comment">// 下一个几点的before指向自己</span></div><div class="line">            after.before = <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// 当向Map中获取查询元素或修改元素（put相同key）的时候调用这个方法</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">            LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</div><div class="line">            <span class="comment">// 如果accessOrder为true，也就是使用最近较少使用顺序</span></div><div class="line">            <span class="keyword">if</span> (lm.accessOrder ) &#123;</div><div class="line">                lm. modCount++;</div><div class="line">                <span class="comment">// 先删除，再添加，也就相当于移动了</span></div><div class="line">                <span class="comment">// 删除当前元素</span></div><div class="line">                remove();</div><div class="line">                <span class="comment">// 将当前元素加入到header前（也就是链表尾部）</span></div><div class="line">                addBefore(lm. header);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// 当从Map中删除元素的时候调动这个方法</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">            remove();</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到Entry继承了HashMap中的Entry，但是LinkedHashMap中的Entry多了两个属性指向上一个节点的before和指向下一个节点的after，也正是这两个属性组成了一个双向链表。等等。。。Entry还有一个继承下来的next属性，这个next是单向链表中用来指向下一个节点的，怎么回事嘛，怎么又是单向链表又是双向链表呢，都要晕了对不对，其实想的没错，这里的节点即是Hash表中的单向链表中的一个节点，它又是LinkedHashMap维护的双向链表中的一个节点。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/LinkedHashMap.png" alt=""></p>
<p>注：黑色箭头指向表示单向链表的next指向，红色箭头指向表示双向链表的before指向，蓝色箭头指向表示双向链表的after指向。另外LinkedHashMap种还有一个header节点是不保存数据的，这里没有画出来。</p>
<p>从上图可以看出LinkedHashMap仍然是一个Hash表，底层由一个数组组成，而数组的每一项都是个单向链表，由next指向下一个节点。但是LinkedHashMap所不同的是，在节点中多了两个属性before和after，由这两个属性组成了一个双向循环链表（你怎么知道是循环，下面在说喽），而由这个双向链表维持着Map容器中元素的顺序。看下Entry中的recordRemoval方法，该方法将在节点被删除时候调用，Hash表中链表节点被正常删除后，调用该方法修正由于节点被删除后双向链表的前后指向关系，从这一点来看，LinkedHashMap比HashMap的add、remove、set等操作要慢一些（因为要维护双向链表 ）。</p>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 构造一个指定初始容量和加载因子的LinkedHashMap，默认accessOrder为false</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">( <span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor);</div><div class="line">        accessOrder = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构造一个指定初始容量的LinkedHashMap，默认accessOrder为false</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">( <span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(initialCapacity);</div><div class="line">        accessOrder = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构造一个使用默认初始容量(16)和默认加载因子(0.75)的LinkedHashMap，默认accessOrder为false</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        accessOrder = <span class="keyword">false</span>;  <span class="comment">//默认false</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构造一个指定map的LinkedHashMap，所创建LinkedHashMap使用默认加载因子(0.75)和足以容纳指定map的初始容量，默认accessOrder为false 。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(m);</div><div class="line">        accessOrder = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构造一个指定初始容量、加载因子和accessOrder的LinkedHashMap</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">( <span class="keyword">int</span> initialCapacity,</span></span></div><div class="line">                      <span class="keyword">float</span> loadFactor,</div><div class="line">                         <span class="keyword">boolean</span> accessOrder) &#123;</div><div class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor);</div><div class="line">        <span class="keyword">this</span>.accessOrder = accessOrder;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重写了HashMap的init方法</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 初始化话header，将hash设置为-1，key、value、next设置为null</span></div><div class="line">        header = <span class="keyword">new</span> Entry&lt;K,V&gt;(-<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="comment">// header的before和after都指向header自身</span></div><div class="line">        header.before = header. after = header ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><p>LinkedHashMap没有重写HashMap的put方法，只是重写了HashMap被put调用的addEntry方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">( <span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">	<span class="comment">// 调用createEntry方法创建一个新的节点</span></div><div class="line">	createEntry(hash, key, value, bucketIndex);</div><div class="line"></div><div class="line">	<span class="comment">// Remove eldest entry if instructed, else grow capacity if appropriate</span></div><div class="line">	<span class="comment">// 取出header后的第一个节点（因为header不保存数据，所以取header后的第一个节点）</span></div><div class="line">	Entry&lt;K,V&gt; eldest = header.after ;</div><div class="line">	<span class="comment">// 判断是容量不够了是要删除第一个节点还是需要扩容</span></div><div class="line">	<span class="keyword">if</span> (removeEldestEntry(eldest)) &#123;</div><div class="line">		<span class="comment">// 删除第一个节点（可实现FIFO、LRU策略的Cache）</span></div><div class="line">		removeEntryForKey(eldest. key);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// 和HashMap一样进行扩容</span></div><div class="line">		<span class="keyword">if</span> (size &gt;= threshold)</div><div class="line">			resize(<span class="number">2</span> * table.length );</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * This override differs from addEntry in that it doesn't resize the</div><div class="line"> * table or remove the eldest entry.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">( <span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">	<span class="comment">// 下面三行代码的逻辑是，创建一个新节点放到单向链表的头部</span></div><div class="line">	<span class="comment">// 取出数组bucketIndex位置的旧节点 </span></div><div class="line">	HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];</div><div class="line">	<span class="comment">// 创建一个新的节点，并将next指向旧节点</span></div><div class="line">   Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, old);</div><div class="line">	<span class="comment">// 将新创建的节点放到数组的bucketIndex位置</span></div><div class="line">	table[bucketIndex] = e;</div><div class="line"></div><div class="line">	<span class="comment">// 维护双向链表，将新节点添加在双向链表header前面（链表尾部）</span></div><div class="line">	e.addBefore( header);</div><div class="line">	<span class="comment">// 计数器size加1</span></div><div class="line">	size++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 默认返回false，也就是不会进行元素删除了。如果想实现cache功能，只需重写该方法</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，在添加方法上，比HashMap中多了两个逻辑，一个是当Map容量不足后判断是删除第一个元素，还是进行扩容，另一个是维护双向链表。而在判断是否删除元素的时候，我们发现removeEldestEntry这个方法竟然是永远返回false，原来想要实现Cache功能，需要自己继承LinkedHashMap然后重写removeEldestEntry方法，这里默认提供的是容器的功能。</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>LinkedHashMap没有重写remove方法，只是在实现了Entry类的recordRemoval方法，该方法是HashMap的提供的一个回调方法，在HashMap的remove方法进行回调，而LinkedHashMap中recordRemoval的主要当然是要维护双向链表了，返回上面去看下Entry类的recordRemoval方法吧。</p>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>LinkedHashMap重写了get方法，但是的确复用了HashMap中的getEntry方法，LinkedHashMap是在get方法中指加入了调用recoreAccess方法的逻辑，recoreAccess方法的目的当然也是维护双向链表了，具体逻辑返回上面去看下Entry类的recoreAccess方法吧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)getEntry(key);</div><div class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        e.recordAccess( <span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> e.value ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="是否包含"><a href="#是否包含" class="headerlink" title="是否包含"></a>是否包含</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">	<span class="comment">// Overridden to take advantage of faster iterator</span></div><div class="line">	<span class="comment">// 遍历双向链表，查找指定的value</span></div><div class="line">	<span class="keyword">if</span> (value==<span class="keyword">null</span>) &#123; </div><div class="line">		<span class="keyword">for</span> (Entry e = header .after; e != header; e = e.after )</div><div class="line">			<span class="keyword">if</span> (e.value ==<span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> (Entry e = header .after; e != header; e = e.after )</div><div class="line">			<span class="keyword">if</span> (value.equals(e.value ))</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LinkedHashMap对containsValue进行了重写，我们在HashMap中说过，HashMap的containsValue需要遍历整个hash表，这样是十分低效的。而LinkedHashMap中重写后，不再遍历hash表，而是遍历其维护的双向链表，这样在效率上难道就有所改善吗？我们分析下：hash表是由数组+单向链表组成，而由于使用hash算法，可能会导致散列不均匀，甚至数组的有些项是没有元素的（没有hash出对应的散列值），而LinkedHashMap的双向链表呢，是不存在空项的，所以LinkedHashMap的containsValue比HashMap的containsValue效率要好一些。</p>
<h1 id="自定义LruCache"><a href="#自定义LruCache" class="headerlink" title="自定义LruCache"></a>自定义LruCache</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.michael.java.construct;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LruCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2725884916293330545L</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAX_CAPACITY = <span class="number">1024</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> maxCapacity;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(DEFAULT_MAX_CAPACITY, DEFAULT_LOAD_FACTOR, accessOrder);</div><div class="line">		<span class="keyword">this</span>.maxCapacity = DEFAULT_MAX_CAPACITY;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> capacity,<span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(DEFAULT_MAX_CAPACITY, DEFAULT_LOAD_FACTOR, accessOrder);</div><div class="line">		<span class="keyword">this</span>.maxCapacity = capacity;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(</span></span></div><div class="line">			java.util.Map.Entry&lt;String, Object&gt; eldest) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.size() &gt; maxCapacity;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		LruCache cache = <span class="keyword">new</span> LruCache(<span class="number">5</span>, <span class="keyword">true</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">6</span>;i++) &#123;</div><div class="line">			cache.put(<span class="string">"k"</span>+i, <span class="string">"v"</span>+i);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"size: "</span> + cache.size());</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry : cache.entrySet()) &#123;</div><div class="line">			System.out.println(entry.getKey() + <span class="string">" = "</span> + entry.getValue());</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"------------"</span>);</div><div class="line">		System.out.println(<span class="string">"k3 = "</span> + cache.get(<span class="string">"k3"</span>));</div><div class="line">		System.out.println(<span class="string">"------------"</span>);</div><div class="line">		</div><div class="line">		cache.put(<span class="string">"k6"</span>, <span class="string">"v6"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry : cache.entrySet()) &#123;</div><div class="line">			System.out.println(entry.getKey() + <span class="string">" = "</span> + entry.getValue());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">size: <span class="number">5</span></div><div class="line">k1 = v1</div><div class="line">k2 = v2</div><div class="line">k3 = v3</div><div class="line">k4 = v4</div><div class="line">k5 = v5</div><div class="line">------------</div><div class="line">k3 = v3</div><div class="line">------------</div><div class="line">k2 = v2</div><div class="line">k4 = v4</div><div class="line">k5 = v5</div><div class="line">k3 = v3</div><div class="line">k6 = v6</div></pre></td></tr></table></figure>
<p>序列中的第一个元素时最近使用最少的元素</p>
<p>参考文章：</p>
<p><a href="http://www.importnew.com/17561.html" target="_blank" rel="external">给jdk写注释系列之jdk1.6容器(5)-LinkedHashMap源码解析</a></p>
<p><a href="http://liujiacai.net/blog/2015/09/12/java-linkedhashmap/" target="_blank" rel="external">Java LinkedHashMap源码解析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合之TreeMap]]></title>
      <url>http://liuguoquan727.github.io/2015/12/19/Java%E9%9B%86%E5%90%88%E4%B9%8BTreeMap/</url>
      <content type="html"><![CDATA[<p>TreeMap是基于红黑树结构的一种Map，要分析TreeMap的实现首先要了解红黑树这种数据结构。</p>
<h1 id="二叉树、红黑树简介"><a href="#二叉树、红黑树简介" class="headerlink" title="二叉树、红黑树简介"></a>二叉树、红黑树简介</h1><p>先简单总结一下数组，链表，Hash表以及树的优缺点:</p>
<ul>
<li><p>数组</p>
<ul>
<li>优点：随机访问效率高（根据下标查询）；搜索效率较高（可使用折半方法）</li>
<li>缺点：内存连续且固定，存储效率低；插入和删除效率低（可能会进行数组扩容或者拷贝）</li>
</ul>
</li>
<li><p>链表</p>
<ul>
<li>优点：不要求连续内存，存储效率高；插入和删除效率高（只需要改变指针指向）</li>
<li>缺点：不支持随机访问；搜索效率低（需要遍历）</li>
</ul>
</li>
<li><p>哈希表</p>
<ul>
<li>优点：搜索效率高；增删效率高</li>
<li>缺点：内存利用率低（基于数组）；存在散列冲突</li>
</ul>
</li>
<li><p>二叉树</p>
<ul>
<li>优点：查询效率高；增删效率高；存储效率高；</li>
<li>缺点：算法复杂</li>
</ul>
</li>
</ul>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树的特点：</p>
<ul>
<li>若左子树不为空，则左子树上所有结点的值均小于它的根结点的值</li>
<li>若右子树不为空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>左右子树也分别为二叉查找树</li>
<li>没有键值相等的节点</li>
</ul>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/treemap-%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="二叉树"></p>
<p>按照二叉查找树存储的数据，对元素的搜索效率是非常高的，比如上图中如果要查找值为48的节点，只需要遍历4个节点就能完成。理论上，一颗平衡的二叉查找树的任意节点平均查找效率为树的高度h，即O(lgn)。但是如果二叉查找树的失去平衡（元素全在一侧），搜索效率就退化为O(n)，因此二叉查找树的平衡是搜索效率的关键所在。而红黑树就是靠红黑规则来维持二叉查找树的平衡性。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/treemap-%E5%A4%B1%E5%8E%BB%E5%B9%B3%E8%A1%A1%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="失去平衡的二叉树"></p>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树的红黑规则：</p>
<ul>
<li>节点是红色或黑色</li>
<li>根节点是黑色</li>
<li>每个叶子节点（NIL节点，空节点）是黑色的</li>
<li>每个红色节点的两个子节点都是黑色（从每个叶子到根的所有路径上不能有两个连续的红色节点）</li>
<li>从任意节点到其每个叶子的所有路径都包含相同数目的黑色节点</li>
</ul>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/treemap-%E7%BA%A2%E9%BB%91%E6%A0%91.png" alt="s"></p>
<p>第5条规则到底是什么情况，下面简单解释下，比如图中红8到1左边的叶子节点的路径包含两个黑色节点，到6下面的叶子节点的路径也包含两个黑色节点。</p>
<p>但是在在添加或删除节点后，红黑树就发生了变化，可能不再满足上面的5个特性，为了保持红黑树的以上特性，就有了三个动作：左旋、右旋、着色。</p>
<p>下面来看下什么是红黑树的左旋和右旋：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/treemap-%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B7%A6%E6%97%8B.jpg" alt=""></p>
<p>对x进行左旋，意味着将x变成一个左节点。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/treemap-%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%B3%E6%97%8B.jpg" alt=""></p>
<p>对y进行右旋，意味着将y变成一个右节点。</p>
<h1 id="TreeMap签名"><a href="#TreeMap签名" class="headerlink" title="TreeMap签名"></a>TreeMap签名</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">       <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">       <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<blockquote>
<p>HashMap是无序的，TreeMap是有序的</p>
</blockquote>
<h2 id="接口NavigableMap"><a href="#接口NavigableMap" class="headerlink" title="接口NavigableMap"></a>接口NavigableMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">SortedMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div></pre></td></tr></table></figure>
<p>发现NavigableMap继承了SortedMap，说明这个Map是有序的。这个顺序一般是指由Comparable接口提供的keys自然序，或者也可以在窗口SortedMap时，指定一个Comparator来决定。</p>
<h2 id="Comparator和Comparable的区别"><a href="#Comparator和Comparable的区别" class="headerlink" title="Comparator和Comparable的区别"></a>Comparator和Comparable的区别</h2><ul>
<li>Comparable一般表示类的自然序，比如定义一个Student类，学号为默认排序</li>
<li>Comparator一般表示类在某种场合下的特殊分类，需要定制化排序。比如现在想按照Student类的age来排序。</li>
</ul>
<p>插入SortedMap中的key的类都必须继承Comparable类（或指定一个comparator），这样才能确定如何比较（通过k1.compareTo(k2)或comparator.compare(k1, k2)）两个key，否则，在插入时，会报ClassCastException的异常。</p>
<p>此外，SortedMap中key的顺序性应该与equals方法保持一致。也就是说k1.compareTo(k2)或comparator.compare(k1, k2)为true时，k1.equals(k2)也应该为true。</p>
<p>介绍完了SortedMap，再来回到我们的NavigableMap上面来。<br>NavigableMap是JDK1.6新增的，在SortedMap的基础上，增加了一些“导航方法”（navigation methods）来返回与搜索目标最近的元素。例如下面这些方法：</p>
<ul>
<li>lowerEntry，返回所有比给定Map.Entry小的元素</li>
<li>floorEntry，返回所有比给定Map.Entry小或相等的元素</li>
<li>ceilingEntry，返回所有比给定Map.Entry大或相等的元素</li>
<li>higherEntry，返回所有比给定Map.Entry大的元素</li>
</ul>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>红黑树的算法还没有理解深刻，暂时挖个坑</p>
<p>因为红黑树是平衡的二叉搜索树，所以其put（包含update操作）、get、remove的时间复杂度都为log(n)</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>TreeMap的key是有序的，增删改查操作的时间复杂度为O(log(n))，为了保证红黑树平衡，在必要时会进行旋转</li>
<li>HashMap的key是无序的，增删改查操作的时间复杂度为O(1)，为了做到动态扩容，在必要时会进行resize。</li>
</ul>
<p>参考文章:</p>
<p><a href="http://www.importnew.com/17605.html" target="_blank" rel="external">给jdk写注释系列之jdk1.6容器(7)-TreeMap源码解析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合之HashMap]]></title>
      <url>http://liuguoquan727.github.io/2015/12/19/Java%E9%9B%86%E5%90%88%E4%B9%8BHashMap/</url>
      <content type="html"><![CDATA[<h1 id="签名（Signature）"><a href="#签名（Signature）" class="headerlink" title="签名（Signature）"></a>签名（Signature）</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">       <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">       <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></div></pre></td></tr></table></figure>
<p>可以看到HashMap实现了：</p>
<ul>
<li>接口Cloneable，用于表明HashMap对象会重写<code>java.lang.Object.clone()</code>方法，HashMap实现的是浅拷贝</li>
<li>接口Serializable：表明HashMap对象可以被序列化</li>
</ul>
<h1 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h1><p>Map接口里包含的成员方法不外乎是“增删改查”，Map虽然并不是Collection，但它提供了三种“集合视角”，与下面三个方法一一对应：</p>
<ul>
<li><code>Set&lt;key&gt; keySet()</code>，提供key的集合视角</li>
<li><code>Collection&lt;V&gt; values()</code>，提供value的集合视角</li>
<li><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>,提供key-value键值对的集合视角</li>
</ul>
<h1 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h1><h2 id="哈希表（hash-table）"><a href="#哈希表（hash-table）" class="headerlink" title="哈希表（hash table）"></a>哈希表（hash table）</h2><p>HashMap是一种基于哈希表实现的Map，哈希表是一种通用的数据结构，其概念是：key经过hash函数作用后得到一个槽（buckets）的索引（index），槽中保存着我们想要获取的值，如下图所示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/hashmap-%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="hash table"></p>
<blockquote>
<p>一些不同的key经过同一hash函数后可能产生相同的索引，也就会产生冲突，所以利用哈希表这种数据结构实现具体类时，需要注意两个问题：</p>
<ul>
<li>设计一个好的hash函数，使冲突尽可能的减少</li>
<li>需要解决发生冲突后的处理</li>
</ul>
</blockquote>
<h2 id="HashMap的特点"><a href="#HashMap的特点" class="headerlink" title="HashMap的特点"></a>HashMap的特点</h2><ul>
<li>线程非安全，并且允许key与value都为null值，HashTable与之相反，为线程安全，key与value都不允许null值</li>
<li>不保证其内部元素的顺序，而且随着时间的推移，同一元素的位置也可能改变（resize的情况）</li>
<li>put、get操作的时间复杂度为O（1）</li>
<li>遍历其集合视角的时间复杂度与其容量和现有元素的大小成正比，如果遍历的性能要求很高，不要把capacity设置的过高或者把平衡因子设置的过低。</li>
<li>由于HashMap是线程非安全的，意味着如果有多个线程同时对同一HashMap试图做迭代时有结构上的改变（添加、删除entry，只改变entry的value值不算结构改变），那么会报ConcurrentModificationException异常，专业术语叫fail-fast，尽早报错对应多线程程序来说是很有必要的。</li>
<li><code>Map m = Collections.synchronizedMap(new HashMap(...))</code>;通过这种方式可以得到一个线程安全的Map。</li>
</ul>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>HashMap遵循集合框架的约束，提供一个参数为空的构造函数与有一个参数且参数类型为Map的构造函数。除此之外，还提供了两个构造函数，用于设置HashMap的容量（capacity）和平衡因子（loadFactor）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,</div><div class="line">				  DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</div><div class="line">	inflateTable(threshold);</div><div class="line"></div><div class="line">	putAllForCreate(m);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">	<span class="comment">//初始容量和加载因子合法校验</span></div><div class="line">	<span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">										   initialCapacity);</div><div class="line">	<span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">		initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">	<span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">										   loadFactor);</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">	threshold = initialCapacity;</div><div class="line">	init();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>容量与平衡因子都有个默认值，并且容量有个最大值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 默认初始容量为16，必须为2的指数倍</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 最大容量为2的30次方</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 默认加载因子为0.75f</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Entry数组，长度必须为2的n次幂</span></div><div class="line">    <span class="keyword">transient</span> Entry[] table;</div><div class="line"></div><div class="line">	<span class="comment">// 已存储元素的数量</span></div><div class="line">	<span class="keyword">transient</span> <span class="keyword">int</span> size ;</div><div class="line"></div><div class="line">	<span class="comment">// 下次扩容的临界值，size&gt;=threshold就会扩容，threshold等于capacity*load factor</span></div><div class="line">	<span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line">	<span class="comment">// 加载因子</span></div><div class="line">	<span class="keyword">final</span> <span class="keyword">float</span> loadFactor ;</div></pre></td></tr></table></figure>
<p>可以看到，默认的平衡因子为0.75，这是权衡了时间复杂度与空间复杂度之后的最好取值（官方说法），过高的因子会降低存储空间但是查找的时间就会增加。</p>
<p>此外，我们注意到容量必须为2的指数被（默认16），这是为什么呢？解答这个问题，需要了解HashMap中哈希函数的设计原理</p>
<h2 id="哈希函数的设计原理"><a href="#哈希函数的设计原理" class="headerlink" title="哈希函数的设计原理"></a>哈希函数的设计原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> h = hashSeed;</div><div class="line">	<span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</div><div class="line">		<span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	h ^= k.hashCode();</div><div class="line"></div><div class="line">	<span class="comment">// This function ensures that hashCodes that differ only by</span></div><div class="line">	<span class="comment">// constant multiples at each bit position have a bounded</span></div><div class="line">	<span class="comment">// number of collisions (approximately 8 at default load factor).</span></div><div class="line">	h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line">	<span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns index for hash code h.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">	<span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></div><div class="line">	<span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在哈希表容量为length的情况下，为了使key都能在冲突最小的情况下映射到[0,length)的索引（index）内，HasMap让length为2的指数倍，然后用`hashCode(key) &amp; (length -1)的方法得到索引。</p>
<blockquote>
<p>因为length为2的指数倍，所以length-1所对应的二进制位都为1，然后与hashCode(key)坐与运算，即可得到[0,length)内的索引。</p>
</blockquote>
<p>但是这里有个问题，如果HashCode（key)的值大于length的值，举个例子：</p>
<blockquote>
<p>Java中对象的哈希值都是32位整数，而HashMap的默认大小为16，那么如果有两个对象的哈希值为：0xABAB0000与0xBABA0000，它们的后四位都是一样，那么与16异或后得到结果都是一样的为0，也就是产生了冲突。</p>
</blockquote>
<p>造成冲突的原因关键在于16限制了只能用低位来计算，高位直接舍弃了，所以我们需要额外的哈希函数而不只是简单的对象的hashCode方法了。具体来说就是HashMap中hash（）函数所实现的功能了。</p>
<blockquote>
<p>首先有个随机的hashSeed来降低冲突发生的几率<br>然后如果是字符串。则用了sun.misc.Hashing.stringHash32((String) k)来获取索引值<br>最后通过一系列的无符号右移操作，来把高位与地位进行异或操作，来降低冲突发生的几率。</p>
</blockquote>
<p>右移的偏移量20,12,7是怎么来的呢？因为Java中对象的哈希值是32位的，所以这几个数应该就是把高位与地位做异或运算，至于这几个数是如何选取的，就不清楚了。</p>
<h2 id="HashMap-Entry"><a href="#HashMap-Entry" class="headerlink" title="HashMap.Entry"></a>HashMap.Entry</h2><p>HashMap中存放的是HashMap.Entry对象，它继承自Map.Entry，其比较重要的构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">final</span> K key;</div><div class="line">	V value;</div><div class="line">	Entry&lt;K,V&gt; next; <span class="comment">//指向下一个节点</span></div><div class="line">	<span class="keyword">int</span> hash;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Creates new entry.</div><div class="line">	 */</div><div class="line">	Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</div><div class="line">		value = v;</div><div class="line">		next = n;</div><div class="line">		key = k;</div><div class="line">		hash = h;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> key;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</div><div class="line">		V oldValue = value;</div><div class="line">		value = newValue;</div><div class="line">		<span class="keyword">return</span> oldValue;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Map.Entry e = (Map.Entry)o;</div><div class="line">		Object k1 = getKey();</div><div class="line">		Object k2 = e.getKey();</div><div class="line">		<span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</div><div class="line">			Object v1 = getValue();</div><div class="line">			Object v2 = e.getValue();</div><div class="line">			<span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//用key的hash值与value的hash值与运算的结果作为Entry的hash值</span></div><div class="line">		<span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 当向HashMap中添加元素时调用这个方法，这里没有实现是供子类回调</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 当从HashMap中删除元素时调用这个方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，Entry实现了单向链表的功能，用next成员变量来级联起来。也就是说HashMap的底层结构是一个数组，而数组的元素是一个单向链表。</p>
<p>介绍完Entry，下面介绍一个重要的成员变量</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//HashMap内部维护一个数组类型的<span class="keyword">Entry</span>变量table，用来保存添加进来的<span class="keyword">Entry</span>对象</div><div class="line">transient <span class="keyword">Entry</span>&lt;K,V&gt;[] table = (<span class="keyword">Entry</span>&lt;K,V&gt;[]) EMPTY_TABLE;</div></pre></td></tr></table></figure>
<p>Entry是单链表，怎么这里又需要个数组类型的tabl呢？其实这是解决冲突的一个方式：链地址法（开散列法），效果如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/hashmap-%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.gif" alt=""></p>
<p>就是相同索引值的Entry会以单向链表的形式存在。<br>HashMap采用将相同的散列值存储到一个链表中，也就是说在一个链表中的元素他们的散列值绝对是相同的。</p>
<h2 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h2><p>因为put操作有可能需要对HashMap进行resize，所以实现较复杂</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</div><div class="line">    <span class="comment">//辅助函数，用于填充HashMap到指定的capacity</span></div><div class="line">    <span class="comment">// Find a power of 2 &gt;= toSize</span></div><div class="line">    <span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);</div><div class="line">    <span class="comment">//threshold为resize的阈值，超过后HashMap会进行resize，内容的entry会进行rehash</span></div><div class="line">    threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</div><div class="line">    table = <span class="keyword">new</span> Entry[capacity];</div><div class="line">    initHashSeedAsNeeded(capacity);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Associates the specified value with the specified key in this map.</div><div class="line"> * If the map previously contained a mapping for the key, the old</div><div class="line"> * value is replaced.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</div><div class="line">        inflateTable(threshold);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> putForNullKey(value);</div><div class="line">		</div><div class="line">	<span class="comment">//使用key的hashCode计算key对应的hash值</span></div><div class="line">    <span class="keyword">int</span> hash = hash(key);</div><div class="line">	</div><div class="line">	<span class="comment">//通过key的哈希值查找在数组中的index位置</span></div><div class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">    <span class="comment">//这里的循环是关键</span></div><div class="line">    <span class="comment">//当新增的key所对应的索引i，对应table[i]中已经有值时，进入循环体</span></div><div class="line">	<span class="comment">//取出数组index位置的链表，遍历链表查看是否已经存在相同的key</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="comment">//判断是否存在本次插入的key，如果存在用本次的value替换之前oldValue，相当于update操作</span></div><div class="line">        <span class="comment">//并返回之前的oldValue</span></div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">            V oldValue = e.value;</div><div class="line">            e.value = value;</div><div class="line">            e.recordAccess(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果本次新增key之前不存在于HashMap中，modCount加1，说明结构改变了</span></div><div class="line">    modCount++;</div><div class="line">	<span class="comment">//在数组i位置处添加一个新的链表节点</span></div><div class="line">    addEntry(hash, key, value, i);</div><div class="line">	<span class="comment">//没有相同key的情况，返回null</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">		<span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</div><div class="line">			V oldValue = e.value;</div><div class="line">			e.value = value;</div><div class="line">			e.recordAccess(<span class="keyword">this</span>);</div><div class="line">			<span class="keyword">return</span> oldValue;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	modCount++;</div><div class="line">	addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    <span class="comment">//如果增加一个元素会后，HashMap的大小超过阈值，需要resize</span></div><div class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</div><div class="line">        <span class="comment">//增加的幅度是之前的1倍</span></div><div class="line">        resize(<span class="number">2</span> * table.length);</div><div class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</div><div class="line">        bucketIndex = indexFor(hash, table.length);</div><div class="line">    &#125;</div><div class="line">    createEntry(hash, key, value, bucketIndex);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    <span class="comment">//首先得到该索引处的冲突链Entries，第一次插入bucketIndex位置时冲突链为null，也就是e为null</span></div><div class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">    <span class="comment">//然后把新的Entry添加到冲突链的开头，也就是说，后插入的反而在前面（第一次还真没看明白）</span></div><div class="line">    <span class="comment">//table[bucketIndex]为新加入的Entry，是bucketIndex位置的冲突链的第一个元素</span></div><div class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</div><div class="line">    size++;</div><div class="line">&#125;</div><div class="line"><span class="comment">//下面看看HashMap是如何进行resize，庐山真面目就要揭晓了😊</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</div><div class="line">    Entry[] oldTable = table;</div><div class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</div><div class="line">    <span class="comment">//如果已经达到最大容量，那么就直接返回</span></div><div class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class="line">        threshold = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">	<span class="comment">//使用新的容量创建一个新的链表数组</span></div><div class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</div><div class="line">    <span class="comment">//initHashSeedAsNeeded(newCapacity)的返回值决定了是否需要重新计算Entry的hash值</span></div><div class="line">	<span class="comment">//将当前数组的元素移动到新的数组</span></div><div class="line">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</div><div class="line">	<span class="comment">//将当前数组的引用指向新的数组</span></div><div class="line">    table = newTable;</div><div class="line">	<span class="comment">//重新计算临界值</span></div><div class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Transfers all entries from current table to newTable.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</div><div class="line">    <span class="comment">//遍历当前的table，将里面的元素添加到新的newTable中</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</div><div class="line">            Entry&lt;K,V&gt; next = e.next;</div><div class="line">            <span class="keyword">if</span> (rehash) &#123;</div><div class="line">                e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</div><div class="line">            e.next = newTable[i];</div><div class="line">            <span class="comment">//最后这两句用了与put放过相同的技巧</span></div><div class="line">            <span class="comment">//将后插入的反而在前面</span></div><div class="line">            newTable[i] = e;</div><div class="line">            e = next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize the hashing mask value. We defer initialization until we</div><div class="line"> * really need it.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">initHashSeedAsNeeded</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> currentAltHashing = hashSeed != <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> useAltHashing = sun.misc.VM.isBooted() &amp;&amp;</div><div class="line">            (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</div><div class="line">    <span class="comment">//这里说明了，在hashSeed不为0或满足useAltHash时，会重算Entry的hash值</span></div><div class="line">    <span class="comment">//至于useAltHashing的作用可以参考下面的链接</span></div><div class="line">    <span class="comment">// http://stackoverflow.com/questions/29918624/what-is-the-use-of-holder-class-in-hashmap</span></div><div class="line">    <span class="keyword">boolean</span> switching = currentAltHashing ^ useAltHashing;</div><div class="line">    <span class="keyword">if</span> (switching) &#123;</div><div class="line">        hashSeed = useAltHashing</div><div class="line">            ? sun.misc.Hashing.randomHashSeed(<span class="keyword">this</span>)</div><div class="line">            : <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> switching;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Map中的元素越多，hash冲突的几率也就越大，数组长度是固定的，所以导致链表越来越长，那么查询的效率当然也就越地下了。HasMap的扩容resize，需要将所有的元素重新计算后，一个个重新排列到新的数组中去，这是非常低效的，和ArrayList一样，在可预知容量大小的情况下，提前预设容量会减少HashMap的扩容，提高性能。</p>
</blockquote>
<h2 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="comment">//单独处理key为null的情况</span></div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> getForNullKey();</div><div class="line">    Entry&lt;K,V&gt; entry = getEntry(key);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//key为null的Entry用于放在table[0]中，但是在table[0]冲突链中的Entry的key不一定为null</span></div><div class="line">    <span class="comment">//所以需要遍历冲突链，查找key是否存在</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> e.value;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</div><div class="line">    <span class="comment">//首先定位到索引在table中的位置</span></div><div class="line">    <span class="comment">//然后遍历冲突链，查找key是否存在</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class="line">         e != <span class="keyword">null</span>;</div><div class="line">         e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="remove操作"><a href="#remove操作" class="headerlink" title="remove操作"></a>remove操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; e = removeEntryForKey(key);</div><div class="line">    <span class="comment">//可以看到删除的key如果存在，就返回其所对应的value</span></div><div class="line">    <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</div><div class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">    <span class="comment">//这里用了两个Entry对象，相当于两个指针，为的是防治冲突链发生断裂的情况</span></div><div class="line">    <span class="comment">//这里的思路就是一般的单向链表的删除思路</span></div><div class="line">    Entry&lt;K,V&gt; prev = table[i];</div><div class="line">    Entry&lt;K,V&gt; e = prev;</div><div class="line">    <span class="comment">//当table[i]中存在冲突链时，开始遍历里面的元素</span></div><div class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; next = e.next;</div><div class="line">        Object k;</div><div class="line">		<span class="comment">//如果hash值和key都相等则认为相等</span></div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line">            modCount++;</div><div class="line">            size--;</div><div class="line">            <span class="keyword">if</span> (prev == e) <span class="comment">//当冲突链只有一个Entry时</span></div><div class="line">                table[i] = next;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                prev.next = next;</div><div class="line">            e.recordRemoval(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">        &#125;</div><div class="line">        prev = e;</div><div class="line">        e = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> e;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般而言，认为HashMap的这四种操作时间复杂度O（1），因为它hash函数性质较好，保证了冲突发生的几率较小。</p>
<blockquote>
<p>从删除和查找操作可以看出，在根据key查找元素的时候，还是需要通过遍历，但是由于已经通过hash函数对key散列，要遍历的只是发生冲突后生成的链表，这样遍历的结果就已经少很多了，比完全遍历效率提升了N倍。</p>
</blockquote>
<h2 id="fast-fail的HashIterator"><a href="#fast-fail的HashIterator" class="headerlink" title="fast-fail的HashIterator"></a>fast-fail的HashIterator</h2><p>集合类用Iterator类来遍历其包含的元素，接口Enumeration以及不推荐使用。相比Enumeration，Iterator有下面两个优势：</p>
<ul>
<li>Iterator允许调用者在遍历集合类时删除集合类中包含的元素</li>
<li>比Enumeration命名更简单</li>
</ul>
<p>HashMap中提供的三种集合视角，底层都是用HashIterator是实现的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></div><div class="line">    <span class="comment">//在初始化Iterator实例时，纪录下当前的修改次数</span></div><div class="line">    <span class="keyword">int</span> expectedModCount;   <span class="comment">// For fast-fail</span></div><div class="line">    <span class="keyword">int</span> index;              <span class="comment">// current slot</span></div><div class="line">    Entry&lt;K,V&gt; current;     <span class="comment">// current entry</span></div><div class="line">    HashIterator() &#123;</div><div class="line">        expectedModCount = modCount;</div><div class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></div><div class="line">            Entry[] t = table;</div><div class="line">            <span class="comment">//遍历HashMap的table，依次查找元素</span></div><div class="line">            <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</div><div class="line">                ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//在访问下一个Entry时，判断是否有其他线程有对集合的修改</span></div><div class="line">        <span class="comment">//说明HashMap是线程非安全的</span></div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        Entry&lt;K,V&gt; e = next;</div><div class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</div><div class="line">            Entry[] t = table;</div><div class="line">            <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</div><div class="line">                ;</div><div class="line">        &#125;</div><div class="line">        current = e;</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        Object k = current.key;</div><div class="line">        current = <span class="keyword">null</span>;</div><div class="line">        HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</div><div class="line">        expectedModCount = modCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextEntry().value;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextEntry().getKey();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextEntry();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>从源码可知，保存Entry的table数组为transient的，也就是说在进行序列化时并不会包含该成员，这是为什么呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</div></pre></td></tr></table></figure>
<p>为了解答这个问题，我们需要明确下面事实：Object.hasCode方法对于一个类的两个实例返回的是不同的哈希值。</p>
<p>我们可以试想下面的场景：</p>
<blockquote>
<p>我们在机器A上算出对象A的哈希值与索引，然后把它插入到HashMap中，然后把该HashMap序列化后，在机器B上重新算出对象的哈希值与索引，这与机器A上算出的是不一样的，所以我们在机器B上get对象A时，会得到错误的结果。<br>所以说，当序列化一个HashMap对象时，保存Entry的table是不需要序列化进来的，因为它在另一台机器上是错误的。<br>因为这个原因，HashMap重写了writeObject和readObject方法</p>
</blockquote>
<h1 id="HashMap遍历"><a href="#HashMap遍历" class="headerlink" title="HashMap遍历"></a>HashMap遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++ ) &#123;</div><div class="line">			</div><div class="line">			map.put(<span class="string">"name"</span>+i, <span class="string">"liuguoquan"</span>+i);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line"></div><div class="line">		<span class="keyword">long</span> start = System.nanoTime();</div><div class="line">		<span class="comment">//键的集合</span></div><div class="line">		Set&lt;String&gt; set = map.keySet();</div><div class="line">		Iterator&lt;String&gt; iterator = set.iterator();</div><div class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">			String key = (String) iterator.next();</div><div class="line">			String value = map.get(key);</div><div class="line">			System.out.println(key + <span class="string">" = "</span> + value);</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">long</span> end = System.nanoTime();</div><div class="line">		System.out.println(<span class="string">"keySet(): "</span> + (end - start)+<span class="string">"纳秒"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//foreach keyset</span></div><div class="line">		start = System.nanoTime();</div><div class="line">		<span class="keyword">for</span>(String key : map.keySet()) &#123;</div><div class="line">			String value = map.get(key);</div><div class="line">			System.out.println(key + <span class="string">" = "</span> + value);</div><div class="line">		&#125;</div><div class="line">		end = System.nanoTime();</div><div class="line">		System.out.println(<span class="string">"for keySet(): "</span> + (end - start)+<span class="string">"纳秒"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//Entry集合 效率较高</span></div><div class="line">		start = System.nanoTime();</div><div class="line">		Set&lt;Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</div><div class="line">		Iterator&lt;Entry&lt;String, String&gt;&gt; it = entrySet.iterator();</div><div class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">			Map.Entry&lt;String, String&gt; entry = (Map.Entry&lt;String, String&gt;) it</div><div class="line">					.next();</div><div class="line">			String key = entry.getKey();</div><div class="line">			String value = entry.getValue();</div><div class="line">			System.out.println(key + <span class="string">" = "</span> + value);</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		end = System.nanoTime();</div><div class="line">		System.out.println(<span class="string">"entrySet(): "</span>+ (end - start)+<span class="string">"纳秒"</span>);</div><div class="line">		</div><div class="line">		start = System.nanoTime();</div><div class="line">		<span class="comment">//foreach entry </span></div><div class="line">		<span class="keyword">for</span>(Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</div><div class="line">			String key = entry.getKey();</div><div class="line">			String value = entry.getValue();</div><div class="line">			System.out.println(key + <span class="string">" = "</span> + value);</div><div class="line">		&#125;</div><div class="line">		end = System.nanoTime();</div><div class="line">		System.out.println(<span class="string">"for entrySet(): "</span>+ (end - start)+<span class="string">"纳秒"</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">name3 = liuguoquan3</div><div class="line">name2 = liuguoquan2</div><div class="line">name1 = liuguoquan1</div><div class="line">name0 = <span class="function">liuguoquan0</span></div><div class="line"><span class="title">keySet</span><span class="params">()</span>: 403136纳秒</div><div class="line">name3 = liuguoquan3</div><div class="line">name2 = liuguoquan2</div><div class="line">name1 = liuguoquan1</div><div class="line">name0 = <span class="function">liuguoquan0</span></div><div class="line"><span class="keyword">for</span> <span class="title">keySet</span><span class="params">()</span>: 84675纳秒</div><div class="line">name3 = liuguoquan3</div><div class="line">name2 = liuguoquan2</div><div class="line">name1 = liuguoquan1</div><div class="line">name0 = <span class="function">liuguoquan0</span></div><div class="line"><span class="title">entrySet</span><span class="params">()</span>: 109194纳秒</div><div class="line">name3 = liuguoquan3</div><div class="line">name2 = liuguoquan2</div><div class="line">name1 = liuguoquan1</div><div class="line">name0 = <span class="function">liuguoquan0</span></div><div class="line"><span class="keyword">for</span> <span class="title">entrySet</span><span class="params">()</span>: 69850纳秒</div></pre></td></tr></table></figure>
<p>从上面的结果来看：</p>
<ul>
<li>HashMap遍历，如果既需要可以也需要value,直接用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</div><div class="line">	String key = entry.getKey();</div><div class="line">	String value = entry.getValue();</div><div class="line">	System.out.println(key + <span class="string">" = "</span> + value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果只是遍历key而无需value的话，可以直接用<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(String key : map.keySet()) &#123;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>参考文章：</p>
<p><a href="http://www.importnew.com/17559.html" target="_blank" rel="external">给jdk写注释系列之jdk1.6容器(4)-HashMap源码解析</a></p>
<p><a href="http://liujiacai.net/blog/2015/09/03/java-hashmap/" target="_blank" rel="external">Java HashMap 源码解析</a></p>
<p><a href="http://www.importnew.com/16301.html" target="_blank" rel="external">HashMap的实现原理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合之ArrayList和LinkedList]]></title>
      <url>http://liuguoquan727.github.io/2015/12/18/Java%E9%9B%86%E5%90%88%E4%B9%8BArrayList%E5%92%8CLinkedList/</url>
      <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ArrayList是 Java 集合框架中使用最为普遍的集合类之一。ArrayList 是一种 List 实现，允许包括null在内的所有元素，它的内部用一个动态数组来存储元素，因此 ArrayList 能够在添加和移除元素的时候进行动态的扩展和缩减。</p>
<p>ArrayList有容量限制。超出限制时会增加50%容量，用System.arraycopy()复制到新的数组，因此最好能给出数组大小的预估值。默认第一次插入元素时创建大小为10的数组。</p>
<p>ArrayList按数组下标访问元素–get(i)/set(i,e) 的性能很高，这是数组的基本优势。</p>
<p>ArrayList直接在数组末尾加入元素–add(e)的性能也高，但如果按下标插入、删除元素–add(i,e), remove(i), remove(e)，则要用System.arraycopy()来移动部分受影响的元素，性能就变差了，这是基本劣势。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">	<span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</div><div class="line">	<span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h2 id="ArrayList实现"><a href="#ArrayList实现" class="headerlink" title="ArrayList实现"></a>ArrayList实现</h2><p>对应ArrayList而言，它实现List接口、底层使用数组保存所有元素，其操作基本上都是对数组的操作。下面我们来分析ArrayList的源码：</p>
<h3 id="底层数组实现"><a href="#底层数组实现" class="headerlink" title="底层数组实现"></a>底层数组实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</div></pre></td></tr></table></figure>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>ArrayList提供了三种方式的构造器：</p>
<ol>
<li>构造一个默认初始容量为10的空列表；</li>
<li>构造一个指定初始容量的空列表；</li>
<li>构造一个包含指定collection集合的元素的列表，这些元素按照该collection的迭代器返回它们的顺序排列的。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//指定初始容量的空列表</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>();</div><div class="line">	<span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">										   initialCapacity);</div><div class="line">	<span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始容量为10的空列表.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>();</div><div class="line">	<span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">	elementData = c.toArray();</div><div class="line">	size = elementData.length;</div><div class="line">	<span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">	<span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">		elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>ArrayList提供了set、add、addAll这些方法添加元素</p>
<h4 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用指定的元素替代此列表中指定位置上的元素，并返回以前位于该位置上的元素。  </span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;  </div><div class="line">    RangeCheck(index);  </div><div class="line">  </div><div class="line">    E oldValue = (E) elementData[index];  </div><div class="line">    elementData[index] = element;  </div><div class="line">    <span class="keyword">return</span> oldValue;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将指定的元素添加到此列表的尾部。  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;  </div><div class="line">    ensureCapacity(size + <span class="number">1</span>);   </div><div class="line">    elementData[size++] = e;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// 将指定的元素插入此列表中的指定位置。  </span></div><div class="line"><span class="comment">// 如果当前位置有元素，则向右移动当前位于该位置的元素以及所有后续元素（将其索引加1）。  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size);  </div><div class="line">    <span class="comment">// 如果数组长度不足，将进行扩容。  </span></div><div class="line">    ensureCapacity(size+<span class="number">1</span>);  <span class="comment">// Increments modCount!!  </span></div><div class="line">    <span class="comment">// 将 elementData中从Index位置开始、长度为size-index的元素拷贝到从下标为index+1位置开始的新的elementData数组中。即将当前位于该位置的元素以及所有后续元素右移一个位置。  </span></div><div class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);  </div><div class="line">    elementData[index] = element;  </div><div class="line">    size++;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="addAll"><a href="#addAll" class="headerlink" title="addAll()"></a>addAll()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 按照指定collection的迭代器所返回的元素顺序，将该collection中的所有元素添加到此列表的尾部。  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;  </div><div class="line">    Object[] a = c.toArray();  </div><div class="line">    <span class="keyword">int</span> numNew = a.length;  </div><div class="line">    ensureCapacity(size + numNew);  <span class="comment">// Increments modCount  </span></div><div class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);  </div><div class="line">    size += numNew;  </div><div class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 从指定的位置开始，将指定collection中的所有元素插入到此列表中。  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(  </div><div class="line">            <span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);  </div><div class="line">  </div><div class="line">    Object[] a = c.toArray();  </div><div class="line">    <span class="keyword">int</span> numNew = a.length;  </div><div class="line">    ensureCapacity(size + numNew);  <span class="comment">// Increments modCount  </span></div><div class="line">  </div><div class="line">    <span class="keyword">int</span> numMoved = size - index;  </div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)  </div><div class="line">        System.arraycopy(elementData, index, elementData, index + numNew, numMoved);  </div><div class="line">  </div><div class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);  </div><div class="line">    size += numNew;  </div><div class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="读取元素"><a href="#读取元素" class="headerlink" title="读取元素"></a>读取元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回此列表中指定位置上的元素。  </span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">    RangeCheck(index);  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> (E) elementData[index];  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 移除此列表中指定位置上的元素。  </span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">    RangeCheck(index);  </div><div class="line">  </div><div class="line">    modCount++;  </div><div class="line">    E oldValue = (E) elementData[index];  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;  </div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)  </div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);  </div><div class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work  </span></div><div class="line">  </div><div class="line">    <span class="keyword">return</span> oldValue;  </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// 移除此列表中首次出现的指定元素（如果存在）。这是应为ArrayList中允许存放重复的元素。  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;  </div><div class="line">    <span class="comment">// 由于ArrayList中允许存放null，因此下面通过两种情况来分别处理。  </span></div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)  </div><div class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="comment">// 类似remove(int index)，移除列表中指定位置上的元素。  </span></div><div class="line">                fastRemove(index);  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">            &#125;  </div><div class="line">&#125; <span class="keyword">else</span> &#123;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)  </div><div class="line">        <span class="keyword">if</span> (o.equals(elementData[index])) &#123;  </div><div class="line">            fastRemove(index);  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：从数组中移除元素的操作，也会导致被移除的元素以后的所有元素的向左移动一个位置。</p>
<h3 id="调整数组容量"><a href="#调整数组容量" class="headerlink" title="调整数组容量"></a>调整数组容量</h3><p>每次向ArrayList中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity()来实现。在实际添加大量元素前，我们也可以使用该方法手动增加ArrayList的容量，以减少递增式再分配的数量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">	<span class="comment">//是否是默认容量</span></div><div class="line">	<span class="keyword">int</span> minExpand = (elementData != EMPTY_ELEMENTDATA) ? <span class="number">0</span> : DEFAULT_CAPACITY;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</div><div class="line">		<span class="comment">//扩容</span></div><div class="line">		ensureExplicitCapacity(minCapacity);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">	modCount++;</div><div class="line"></div><div class="line">	<span class="comment">//判断是否大于当前容量</span></div><div class="line">	<span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">		grow(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">	<span class="comment">//扩展容量为当前容量的一半</span></div><div class="line">	<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//新容量小于最小容量要求</span></div><div class="line">	<span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">		newCapacity = minCapacity;</div><div class="line">	<span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">		newCapacity = hugeCapacity(minCapacity);</div><div class="line">	<span class="comment">//</span></div><div class="line">	elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上述代码可以看出，数组进行扩容时，会将老数组中的元素拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素有多少时，要在构造ArrayList实例时就指定其容量大小，以避免数组扩容的发送。或者根据实际需求，通过调用ensureCapacity()方法手动增加ArrayList实例的容量。</p>
<p>ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能，可以通过trimToSize方法来实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;  </div><div class="line">    modCount++;  </div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;  </div><div class="line">    <span class="keyword">if</span> (size &lt; oldCapacity) &#123;  </div><div class="line">        elementData = Arrays.copyOf(elementData, size);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Fail-Fast机制"><a href="#Fail-Fast机制" class="headerlink" title="Fail-Fast机制"></a>Fail-Fast机制</h3><p>ArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会抛出失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.modCount != l.modCount)</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ArrayList遍历"><a href="#ArrayList遍历" class="headerlink" title="ArrayList遍历"></a>ArrayList遍历</h2><p>有三种方法可以遍历ArrayList数组，分别是for、foreach、Iterator。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			list.add(<span class="string">"liu"</span> + i);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// for循环  优先用这种方式</span></div><div class="line">		<span class="keyword">int</span> len = list.size();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">			System.out.println(<span class="string">"for: "</span> + list.get(i));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// foreach语句</span></div><div class="line">		<span class="keyword">for</span> (String str : list) &#123;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"foreach: "</span> + str);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 显示调用集合迭代器</span></div><div class="line">		Iterator&lt;String&gt; it = list.iterator();</div><div class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">			System.out.println(<span class="string">"iterator while: "</span> + it.next());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext();) &#123;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"iterator for: "</span> + iterator.next());</div><div class="line"></div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><p>LinkedList是一种基于链表结构的一中List，具体是基于双向循环列表设计的。</p>
<h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h2 id="LinkedList实现"><a href="#LinkedList实现" class="headerlink" title="LinkedList实现"></a>LinkedList实现</h2><h3 id="底层存储"><a href="#底层存储" class="headerlink" title="底层存储"></a>底层存储</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;  <span class="comment">//元素数量</span></div><div class="line"></div><div class="line"><span class="keyword">transient</span> Node&lt;E&gt; first; <span class="comment">//链表的头结点</span></div><div class="line"></div><div class="line"><span class="keyword">transient</span> Node&lt;E&gt; last; <span class="comment">//链表的尾结点</span></div></pre></td></tr></table></figure>
<p>Node表示链表的节点对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    E item; <span class="comment">//当前存储元素</span></div><div class="line">    Node&lt;E&gt; next; <span class="comment">//下一个元素节点</span></div><div class="line">    Node&lt;E&gt; prev; <span class="comment">//上一个元素节点</span></div><div class="line"></div><div class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.item = element;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">        <span class="keyword">this</span>.prev = prev;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Node是LinkedList的内部类，其中定义了当前存储的元素，以及该元素的上一个元素和下一个元素。</p>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* 构造一个空链表</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 构造一个包含指定 collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>();</div><div class="line">	addAll(c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="add-1"><a href="#add-1" class="headerlink" title="add()"></a>add()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//添加到链表末尾</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">	linkLast(e);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在指定位置添加元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">	checkPositionIndex(index);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (index == size)</div><div class="line">		linkLast(element);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		linkBefore(element, node(index));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="addAll-1"><a href="#addAll-1" class="headerlink" title="addAll()"></a>addAll()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//添加一个集合</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> addAll(size, c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//在指定位置添加一个集合</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">	checkPositionIndex(index);</div><div class="line"></div><div class="line">	Object[] a = c.toArray();</div><div class="line">	<span class="keyword">int</span> numNew = a.length;</div><div class="line">	<span class="keyword">if</span> (numNew == <span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	Node&lt;E&gt; pred, succ;</div><div class="line">	<span class="keyword">if</span> (index == size) &#123;</div><div class="line">		succ = <span class="keyword">null</span>;</div><div class="line">		pred = last;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		succ = node(index);</div><div class="line">		pred = succ.prev;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (Object o : a) &#123;</div><div class="line">		<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</div><div class="line">		Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</div><div class="line">		<span class="keyword">if</span> (pred == <span class="keyword">null</span>)</div><div class="line">			first = newNode;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			pred.next = newNode;</div><div class="line">		pred = newNode;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</div><div class="line">		last = pred;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		pred.next = succ;</div><div class="line">		succ.prev = pred;</div><div class="line">	&#125;</div><div class="line">`</div><div class="line">	size += numNew;</div><div class="line">	modCount++;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">			<span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</div><div class="line">				unlink(x);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">			<span class="keyword">if</span> (o.equals(x.item)) &#123;</div><div class="line">				unlink(x);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</div><div class="line">	<span class="comment">// assert x != null;</span></div><div class="line">	<span class="keyword">final</span> E element = x.item;</div><div class="line">	<span class="keyword">final</span> Node&lt;E&gt; next = x.next;</div><div class="line">	<span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</div><div class="line">		first = next;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		prev.next = next;</div><div class="line">		x.prev = <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</div><div class="line">		last = prev;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		next.prev = prev;</div><div class="line">		x.next = <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	x.item = <span class="keyword">null</span>;</div><div class="line">	size--;</div><div class="line">	modCount++;</div><div class="line">	<span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">	checkElementIndex(index);</div><div class="line">	<span class="comment">//查找index对应的节点</span></div><div class="line">	Node&lt;E&gt; x = node(index);</div><div class="line">	E oldVal = x.item;</div><div class="line">	<span class="comment">//替换旧元素</span></div><div class="line">	x.item = element;</div><div class="line">	<span class="keyword">return</span> oldVal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">	checkElementIndex(index);</div><div class="line">	<span class="keyword">return</span> node(index).item;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">	<span class="comment">// assert isElementIndex(index);</span></div><div class="line"></div><div class="line">	<span class="comment">// 二分法</span></div><div class="line">	<span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</div><div class="line">		Node&lt;E&gt; x = first;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</div><div class="line">			x = x.next;</div><div class="line">		<span class="keyword">return</span> x;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		Node&lt;E&gt; x = last;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</div><div class="line">			x = x.prev;</div><div class="line">		<span class="keyword">return</span> x;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基于双向循环链表实现的LinkedList，通过索引Index的操作时低效的，index所对应的元素越靠近中间所费时间越长。而向链表两端插入和删除元素则是非常高效的（如果不是两端的话，都需要对链表进行遍历查找）。</p>
<h1 id="ArrayList-vs-LinkedList"><a href="#ArrayList-vs-LinkedList" class="headerlink" title="ArrayList vs LinkedList"></a>ArrayList vs LinkedList</h1><ul>
<li>ArrayList底层实现是数组，LinkedList实现是链表</li>
<li>ArrayList的查找效率高于LinkedList</li>
<li>LinkedList的增删效率高于ArrayList</li>
</ul>
<p>ArrayList操作：</p>
<ul>
<li>查询操作的时间复杂度是O(1)</li>
<li>增删操作的时间复杂度是O(n)</li>
</ul>
<p>LinkedList：</p>
<ul>
<li>查询操作的时间复杂度是O(n)</li>
<li>增删操作的时间复杂度是O(1)</li>
</ul>
<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="ArrayList的大小是如何自动增加的？"><a href="#ArrayList的大小是如何自动增加的？" class="headerlink" title="ArrayList的大小是如何自动增加的？"></a>ArrayList的大小是如何自动增加的？</h2><p>当我们试图在ArrayList中增加一个对象时，首先会检查ArrayList的容量，已确保已存在的数组中有足够的容量来存储新的对象。如果没有足够容量的话，就会新建一个长度更长的数组（长度是原数组长度的1.5倍），然后使用Arrays.copyOf()方法将旧的数组赋值到新的数组中去，并将现有的数组引用指向新的数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;  </div><div class="line">    ensureCapacity(size + <span class="number">1</span>);   </div><div class="line">    elementData[size++] = e;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">	modCount++;</div><div class="line"></div><div class="line">	<span class="comment">//判断是否大于当前容量</span></div><div class="line">	<span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">		grow(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">	<span class="comment">//扩展容量为当前容量的一半</span></div><div class="line">	<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//新容量小于最小容量要求</span></div><div class="line">	<span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">		newCapacity = minCapacity;</div><div class="line">	<span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">		newCapacity = hugeCapacity(minCapacity);</div><div class="line">	<span class="comment">//返回一个新的数组对象，包括原数组中的内容</span></div><div class="line">	elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="什么情况下使用ArrayList？什么情况下使用LinkedList？"><a href="#什么情况下使用ArrayList？什么情况下使用LinkedList？" class="headerlink" title="什么情况下使用ArrayList？什么情况下使用LinkedList？"></a>什么情况下使用ArrayList？什么情况下使用LinkedList？</h2><p>多数情况下，当你遇到访问元素比插入或删除元素操作更频繁的时候，你应该使用ArrayList。当你遇到插入或者删除元素操作更加频繁，或者根本不需要访问元素的时候，你应该使用LinkedList。主要原因在于，在ArrayList中访问元素的最糟糕的时间复杂度为1，而在LinkedList中可能就是n；在LinkedList中插入和删除的时间复杂度为1，而在ArrayList中可能就是n。</p>
<h2 id="当传递ArrayList到某个方法中，或者某个方法返回ArrayList，什么时候要考虑安全隐患？如何修护安全违规这个问题？"><a href="#当传递ArrayList到某个方法中，或者某个方法返回ArrayList，什么时候要考虑安全隐患？如何修护安全违规这个问题？" class="headerlink" title="当传递ArrayList到某个方法中，或者某个方法返回ArrayList，什么时候要考虑安全隐患？如何修护安全违规这个问题？"></a>当传递ArrayList到某个方法中，或者某个方法返回ArrayList，什么时候要考虑安全隐患？如何修护安全违规这个问题？</h2><p>当ArrayList被当做参数传递到某个方法中，如果ArrayList在没有被复制的情况下直接被分配给成员变量，那么久可能发生这种情况，即当原始的ArrayList被改变时，传递到这个方法的数组也会改变。下面来看看实例：</p>
<p>安全隐患的情况：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; mList;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">			list.add(<span class="string">"liu"</span> + i);</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		setList(list);</div><div class="line">		</div><div class="line">		<span class="comment">//改变成员变量</span></div><div class="line">		mList.set(<span class="number">0</span>, <span class="string">"lee"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(String str : mList) &#123;</div><div class="line">			System.out.println(<span class="string">"mList: "</span>+str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(String str : list) &#123;</div><div class="line">			System.out.println(<span class="string">"list: "</span> + str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(list == mList);</div><div class="line">		</div><div class="line">		<span class="comment">//改变原数组</span></div><div class="line">		list.set(<span class="number">0</span>, <span class="string">"Zhang"</span>);</div><div class="line">		<span class="keyword">for</span>(String str : mList) &#123;</div><div class="line">			System.out.println(<span class="string">"mList: "</span>+str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(String str : list) &#123;</div><div class="line">			System.out.println(<span class="string">"list: "</span> + str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(list == mList);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</div><div class="line">		mList = list;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印:</div><div class="line"></div><div class="line">mList: lee</div><div class="line">mList: liu1</div><div class="line">mList: liu2</div><div class="line">list: lee</div><div class="line">list: liu1</div><div class="line">list: liu2</div><div class="line"><span class="keyword">true</span></div><div class="line">mList: Zhang</div><div class="line">mList: liu1</div><div class="line">mList: liu2</div><div class="line">list: Zhang</div><div class="line">list: liu1</div><div class="line">list: liu2</div><div class="line"><span class="keyword">true</span></div></pre></td></tr></table></figure>
<p>从结果可以看出，原数组和成员变量数组同时发送改变，这是因为在setList()方法中是将数组的引用赋值给了成员变量。</p>
<p>修复安全隐患后的代码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; mList;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">			list.add(<span class="string">"liu"</span> + i);</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		setList(list);</div><div class="line">		</div><div class="line">		<span class="comment">//改变成员变量</span></div><div class="line">		mList.set(<span class="number">0</span>, <span class="string">"lee"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(String str : mList) &#123;</div><div class="line">			System.out.println(<span class="string">"mList: "</span>+str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(String str : list) &#123;</div><div class="line">			System.out.println(<span class="string">"list: "</span> + str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(list == mList);</div><div class="line">		</div><div class="line">		<span class="comment">//改变原数组</span></div><div class="line">		list.set(<span class="number">0</span>, <span class="string">"Zhang"</span>);</div><div class="line">		<span class="keyword">for</span>(String str : mList) &#123;</div><div class="line">			System.out.println(<span class="string">"mList: "</span>+str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(String str : list) &#123;</div><div class="line">			System.out.println(<span class="string">"list: "</span> + str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(list == mList);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</div><div class="line">			mList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">//创建新的对象,并复制个mList</span></div><div class="line">			mList = <span class="keyword">new</span> ArrayList&lt;String&gt;(list);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印:</div><div class="line"></div><div class="line">mList: lee</div><div class="line">mList: liu1</div><div class="line">mList: liu2</div><div class="line">list: liu0</div><div class="line">list: liu1</div><div class="line">list: liu2</div><div class="line"><span class="keyword">false</span></div><div class="line">mList: lee</div><div class="line">mList: liu1</div><div class="line">mList: liu2</div><div class="line">list: Zhang</div><div class="line">list: liu1</div><div class="line">list: liu2</div><div class="line"><span class="keyword">false</span></div></pre></td></tr></table></figure>
<p>从结果可以看出，现在原数组和成员变量mList相互独立，改变自己的同时不会改变对方的数组内容。</p>
<blockquote>
<p>数组[]也是如此</p>
</blockquote>
<h2 id="如何复制一个ArrayList到另一个ArrayList中去"><a href="#如何复制一个ArrayList到另一个ArrayList中去" class="headerlink" title="如何复制一个ArrayList到另一个ArrayList中去?"></a>如何复制一个ArrayList到另一个ArrayList中去?</h2><ol>
<li>使用clone()方法，</li>
<li>使用ArrayList构造方法，</li>
<li>使用Collection的copy方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">			list.add(<span class="string">"liu"</span> + i);</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		</div><div class="line">		<span class="comment">//clone()</span></div><div class="line">		ArrayList&lt;String&gt; list1 = (ArrayList&lt;String&gt;) list.clone();</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(String str : list1) &#123;</div><div class="line">			System.out.println(<span class="string">"list1: "</span>+str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(list1 == list);</div><div class="line">		</div><div class="line">		<span class="comment">//构造方法</span></div><div class="line">		ArrayList&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;(list);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(String str : list2) &#123;</div><div class="line">			System.out.println(<span class="string">"list2: "</span>+str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(list2 == list);</div><div class="line">		</div><div class="line">		<span class="comment">//</span></div><div class="line">		ArrayList&lt;String&gt; list3 = <span class="keyword">new</span> ArrayList&lt;String&gt;(list.size());</div><div class="line">		list3.add(<span class="string">"1"</span>);</div><div class="line">		list3.add(<span class="string">"2"</span>);</div><div class="line">		list3.add(<span class="string">"3"</span>);</div><div class="line">		</div><div class="line">		Collections.copy(list3, list);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(String str : list3) &#123;</div><div class="line">			System.out.println(<span class="string">"list3: "</span>+str);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(list3 == list);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">结果打印：</div><div class="line"></div><div class="line">list1: liu0</div><div class="line">list1: liu1</div><div class="line">list1: liu2</div><div class="line"><span class="keyword">false</span></div><div class="line">list2: liu0</div><div class="line">list2: liu1</div><div class="line">list2: liu2</div><div class="line"><span class="keyword">false</span></div><div class="line">list3: liu0</div><div class="line">list3: liu1</div><div class="line">list3: liu2</div><div class="line"><span class="keyword">false</span></div></pre></td></tr></table></figure>
<h2 id="在索引中ArrayList的增加或者删除某个对象的运行过程？效率很低吗？解释一下为什么？"><a href="#在索引中ArrayList的增加或者删除某个对象的运行过程？效率很低吗？解释一下为什么？" class="headerlink" title="在索引中ArrayList的增加或者删除某个对象的运行过程？效率很低吗？解释一下为什么？"></a>在索引中ArrayList的增加或者删除某个对象的运行过程？效率很低吗？解释一下为什么？</h2><p>在ArrayList中增加或删除元素的时候要调用System.arrayCopy()这个数值拷贝函数，每次增加或删除元素都要进行数组的拷贝操作，相对效率较低。如果遇到频繁插入或删除操作的时候，可以考虑使用LinkedList来代替。</p>
<p>在ArrayList的某个索引i处添加元素：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    rangeCheckForAdd(index);</div><div class="line"></div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</div><div class="line">                     size - index);</div><div class="line">    elementData[index] = element;</div><div class="line">    size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ArrayList的某个索引i处删除元素：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    rangeCheck(index);</div><div class="line"></div><div class="line">    modCount++;</div><div class="line">    E oldValue = elementData(index);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                         numMoved);</div><div class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合之Arrays和Collections]]></title>
      <url>http://liuguoquan727.github.io/2015/12/18/Java%E9%9B%86%E5%90%88%E4%B9%8BArrays%E5%92%8CCollections/</url>
      <content type="html"><![CDATA[<h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>java.util.Arrays</p>
<p><a href="http://www.apihome.cn/api/java/Arrays.html" target="_blank" rel="external">Arrays详细介绍</a></p>
<p>Array是Java特有的数组。在你知道所要处理数据元素个数的情况下非常好用。java.util.Arrays 包含了许多处理数据的实用方法：</p>
<p>Arrays.asList：可以从 Array 转换成 List。可以作为其他集合类型构造器的参数。</p>
<p>Arrays.binarySearch：在一个已排序的或者其中一段中快速查找。</p>
<p>Arrays.copyOf：如果你想扩大数组容量又不想改变它的内容的时候可以使用这个方法。</p>
<p>Arrays.copyOfRange：可以复制整个数组或其中的一部分。</p>
<p>Arrays.deepEquals、Arrays.deepHashCode：Arrays.equals/hashCode的高级版本，支持子数组的操作。</p>
<p>Arrays.equals：如果你想要比较两个数组是否相等，应该调用这个方法而不是数组对象中的 equals方法（数组对象中没有重写equals()方法，所以这个方法之比较引用而不比较内容）。这个方法集合了Java 5的自动装箱和无参变量的特性，来实现将一个变量快速地传给 equals() 方法——所以这个方法在比较了对象的类型之后是直接传值进去比较的。</p>
<p>Arrays.fill：用一个给定的值填充整个数组或其中的一部分。</p>
<p>Arrays.hashCode：用来根据数组的内容计算其哈希值（数组对象的hashCode()不可用）。这个方法集合了Java 5的自动装箱和无参变量的特性，来实现将一个变量快速地传给 Arrays.hashcode方法——只是传值进去，不是对象。</p>
<p>Arrays.sort：对整个数组或者数组的一部分进行排序。也可以使用此方法用给定的比较器对对象数组进行排序。</p>
<p>Arrays.toString：打印数组的内容。</p>
<p>如果想要复制整个数组或其中一部分到另一个数组，可以调用 System.arraycopy方法。此方法从源数组中指定的位置复制指定个数的元素到目标数组里。这无疑是一个简便的方法。（有时候用 ByteBuffer bulk复制会更快。可以参考这篇文章）.</p>
<p>最后，所有的集合都可以用T[] Collection.toArray( T[] a ) 这个方法复制到数组中。通常会用这样的方式调用：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span> coll.toArray( <span class="keyword">new</span> T[ coll.<span class="built_in">size</span>() ] );</div></pre></td></tr></table></figure></p>
<p>这个方法会分配足够大的数组来储存所有的集合，这样 toArray 在返回值时就不必再分配空间了。</p>
<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><p>java.util.Collections</p>
<p><a href="http://www.apihome.cn/api/java/Collections.html" target="_blank" rel="external">Collections详细介绍</a></p>
<p>就像有专门的java.util.Arrays来处理数组，Java中对集合也有java.util.Collections来处理。</p>
<p>第一组方法主要返回集合的各种数据：</p>
<p>Collections.checkedCollection / checkedList / checkedMap / checkedSet / checkedSortedMap / checkedSortedSet：检查要添加的元素的类型并返回结果。任何尝试添加非法类型的变量都会抛出一个ClassCastException异常。这个功能可以防止在运行的时候出错。//fixme</p>
<p>Collections.emptyList / emptyMap / emptySet ：返回一个固定的空集合，不能添加任何元素。</p>
<p>Collections.singleton / singletonList / singletonMap：返回一个只有一个入口的 set/list/map 集合。</p>
<p>Collections.synchronizedCollection / synchronizedList / synchronizedMap / synchronizedSet / synchronizedSortedMap / synchronizedSortedSet：获得集合的线程安全版本（多线程操作时开销低但不高效，而且不支持类似put或update这样的复合操作）</p>
<p>Collections.unmodifiableCollection / unmodifiableList / unmodifiableMap / unmodifiableSet / unmodifiableSortedMap / unmodifiableSortedSet：返回一个不可变的集合。当一个不可变对象中包含集合的时候，可以使用此方法。</p>
<p>第二组方法中，其中有一些方法因为某些原因没有加入到集合中：</p>
<p>Collections.addAll：添加一些元素或者一个数组的内容到集合中。</p>
<p>Collections.binarySearch：和数组的Arrays.binarySearch功能相同。</p>
<p>Collections.disjoint：检查两个集合是不是没有相同的元素。</p>
<p>Collections.fill：用一个指定的值代替集合中的所有元素。</p>
<p>Collections.frequency：集合中有多少元素是和给定元素相同的。</p>
<p>Collections.indexOfSubList / lastIndexOfSubList：和String.indexOf(String) / lastIndexOf(String)方法类似——找出给定的List中第一个出现或者最后一个出现的子表。</p>
<p>Collections.max / min：找出基于自然顺序或者比较器排序的集合中，最大的或者最小的元素。</p>
<p>Collections.replaceAll：将集合中的某一元素替换成另一个元素。</p>
<p>Collections.reverse：颠倒排列元素在集合中的顺序。如果你要在排序之后使用这个方法的话，在列表排序时，最好使用Collections.reverseOrder比较器。</p>
<p>Collections.rotate：根据给定的距离旋转元素。</p>
<p>Collections.shuffle：随机排放List集合中的节点，可以给定你自己的生成器——例如java.util.Random / java.util.ThreadLocalRandom or java.security.SecureRandom。</p>
<p>Collections.sort：将集合按照自然顺序或者给定的顺序排序。</p>
<p>Collections.swap：交换集合中两个元素的位置（多数开发者都是自己实现这个操作的）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架简介]]></title>
      <url>http://liuguoquan727.github.io/2015/12/18/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>Java集合代表了一组对象。Java中的集合框架定义了一套规范，用来表示、操作集合，使具体操作与实现细节解耦。</p>
<h1 id="两大基类Collection与Map"><a href="#两大基类Collection与Map" class="headerlink" title="两大基类Collection与Map"></a>两大基类Collection与Map</h1><p>在集合框架的类继承体系中，最顶层有两个接口：</p>
<ul>
<li>Collection表示一组纯数据</li>
<li>Map表示一组key-value键值对</li>
</ul>
<p>一般继承自Collection或Map的集合类，会提供两个标准的构造函数：</p>
<ul>
<li>没有参数的构造函数，创建一个空的集合类，如ArrayList()</li>
<li>有一个类型与基类（Collection或Map）相同的构造函数，创建一个与给定参数具有相同元素的新集合类，如ArrayList(Collection&lt;? extends E&gt; c)</li>
</ul>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>先看看常用的Collection集合类</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Collection.png" alt="Collection"></p>
<p>Collection类主要有三个接口：</p>
<ul>
<li>Set表示不允许有重复元素的集合</li>
<li>List表示允许有重复元素的集合</li>
<li>Queue主要用于存储数据而不是处理数据</li>
</ul>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>下图为常用的Map集合类</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/Map.png" alt="Map"></p>
<p>Map并不是一个真正意义上的集合，但是这个接口提供了三种“集合视角”，使得可以像操作集合一样操作他们。具体如下：</p>
<ul>
<li>把Map的内容看成key的集合</li>
<li>把Map的内容看成value的集合</li>
<li>把Map的内容看成key-value映射的集合</li>
</ul>
<h1 id="Java集合与数据结构"><a href="#Java集合与数据结构" class="headerlink" title="Java集合与数据结构"></a>Java集合与数据结构</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>特点：可以随机访问，查询效率较高，增删效率较低、内存固定</p>
<p>Java集合：ArrayList、Vector</p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>特点：插入和删除效率高，查询效率低</p>
<p>Java集合：LinkedList、LinkedHashMap、LinkedHashSet</p>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>特点：查找效率高，插入和删除较快，内存固定，存在散列冲突。</p>
<p>Java集合：HashMap、HashSet、HashTable、LinkedHashMap、LinkedHashSet</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>特点：插入、删除效率高，对最大项、最小项存储快，其他项存取较慢。</p>
<p>Java集合：PriorityQueue（二叉堆实现的优先队列）</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>特点：先进后出（FILO）</p>
<p>Java集合：Stack</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>特点：先进先出（FIFO）</p>
<p>Java集合：ArrayDeque（双端队列）、LinkedList（双端队列）</p>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>特点：查询、删除、插入都比较快，但算法复杂</p>
<p>Java集合：TreeMap（红黑树）、TreeSet（红黑树）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Http协议详解]]></title>
      <url>http://liuguoquan727.github.io/2015/12/18/Http%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>HTTP是一种应用层协议，它通过TCP实现了可靠的数据传输，能够保证数据的完整性、正确性，而TCP对于数据传输控制的优点也能够体现在HTTP上，使得HTTP的数据传输吞吐量、效率得到保证。</p>
<p>对于移动开发来说，网络应用基本上都是C/S架构，也就是客户端/服务器架构。客户端通过向服务器发起特定的请求，服务器返回结果，客户端解析结果，再将结果展示在UI上。客户端与服务器的交互如下所示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/http-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E4%BA%A4%E4%BA%92.png" alt=""></p>
<p>详细的交互流程有如下几步：</p>
<ol>
<li>客户端执行网络请求，从URL解析出服务器的主机名。</li>
<li>将服务器的主机名转换成服务器的IP地址。</li>
<li>将端口号从URL中解析出来</li>
<li>建立一条客户端与Web服务器的TCP连接；</li>
<li>客户端通过输出流向服务器发送一条HTTP请求；</li>
<li>服务器向客户端返回一条HTTP响应报文；</li>
<li>客户端从输入流获取报文；</li>
<li>客户端解析报文，关闭连接；</li>
<li>客户端将结果显示在UI上；</li>
</ol>
<h1 id="HTTP请求方式"><a href="#HTTP请求方式" class="headerlink" title="HTTP请求方式"></a>HTTP请求方式</h1><p>HTTP提供了几种请求方式，每种请求方式都有不同的作用。被大家熟知的请求方式有7种GET、POST、DELETE、PUT、HEAD、TRACE、OPTIONS。其中PUT、DELETE、POST、GET分别对应着增、删、该、查4个操作，也是客户端运用最多的4个请求。</p>
<h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><p>GET的作用是获取服务器的某个资源。下图提供一个例子，客户端用GET方法发起一次HTTP请求，然后服务端将对应的资源返回客户端。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/http-Get%E8%AF%B7%E6%B1%82.png" alt=""></p>
<p>需要注意的是：GET请求的参数都需要放到请求的URL中，第一个参数之前有一个？，参数的格式为：参数名=参数值。参数之间通过“&amp;”连接。</p>
<h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>POST起初是用来向服务器传递数据的。POST请求通常会用来提交HTML的表单。表单中填好的数据会被传输给服务器，然后由服务器对这些数据进行处理。下图显示一个用POST请求的执行流程。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/http-POST%E8%AF%B7%E6%B1%82.png" alt=""></p>
<h2 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h2><p>与GET从服务器读取资源相反，PUT方法会向服务器写入资源。有些发布系统允许用户创建Web页面，并用PUT直接将其传输到Web服务器上。如下图所示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/http-PUT%E8%AF%B7%E6%B1%82.png" alt=""></p>
<p>PUT方法的语义就是让服务器用请求的主题部分来创建一个由所请求的URL命名的新文档，如果那个URL已经存在的话，就用这个资源来替代它。</p>
<h2 id="DELETE请求"><a href="#DELETE请求" class="headerlink" title="DELETE请求"></a>DELETE请求</h2><p>DELETE方法所做的事情就是请服务器删除请求URL所指定的资源。但是，客户端无法保证删除操作一定会被执行。因为，HTTP规范允许服务器在不通知客户端的情况下撤销请求。</p>
<p>DELETE方式与GET请求一样，参数都需要放在请求的URL中。下图显示了一个DELETE方法实例。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/http-DELETE%E8%AF%B7%E6%B1%82.png" alt=""></p>
<h2 id="HEAD请求"><a href="#HEAD请求" class="headerlink" title="HEAD请求"></a>HEAD请求</h2><p>HEAD方法与GET方法的行为很类似，但服务器在响应中只返回首部。不会返回实体的主体部分，这就允许客户端在未获取实际资源的情况下，对资源的首部进行检查。使用HEAD可以在不获取资源的情况下了解资源的情况（比如，判断其类型）；通过查看响应中的状态码，看看某个对象是否存在；通过查看首部，测试资源是否被修改了。服务器开发者必须确保返回的首部与GET请求所返回的首部完全相同。遵循HTTP/1.1规范，就必须实现HEAD方法。如下图所示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/http-HEAD%E8%AF%B7%E6%B1%82.png" alt=""></p>
<h2 id="TRACE请求"><a href="#TRACE请求" class="headerlink" title="TRACE请求"></a>TRACE请求</h2><p>客户端发起一个请求时，这个请求可能要穿越防火墙、代理、网关或其他一些应用程序。每个中间节点都可能会修改原始的HTTP请求。TRACE方法运行客户端在最终将请求发送给服务器时，看看它变成了什么样子。</p>
<p>TRACE请求会在目的服务端发起一个“环回”诊断。行程最后一站的服务器会弹回一条TRACE响应，并在响应主体中携带它收到的原始请求报文。这样客户端就可以查看在所有中间HTTP应用程序组成的请求/响应链上，原始报文是否以及如何被毁坏或修改过，如下图所示。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/http-TRACE%E8%AF%B7%E6%B1%82.png" alt=""></p>
<p>TRACE方法主要用于诊断，也就是说，用于验证请求是否如愿穿过了请求/响应链。</p>
<h2 id="OPTIONS请求"><a href="#OPTIONS请求" class="headerlink" title="OPTIONS请求"></a>OPTIONS请求</h2><p>OPTIONS方法请求Web服务器告知其支持的各种功能。可以询问服务器通常支持哪些方法，或者对某些特殊资源支持哪些方法（有些服务器可能只支持对一种特殊类型的对象使用特定的操作）这为客户端应用程序提供了一种手段，使其不用实际访问那些资源就能判定访问各种资源最优方式）。如下图所示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/http-OPTIONS%E8%AF%B7%E6%B1%82.png" alt=""></p>
<h1 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h1><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><p>通常一个HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据4个部分组成。下图为请求报文的一般格式。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/http-%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.jpg" alt=""></p>
<ul>
<li><strong>起始行</strong></li>
</ul>
<p>报文的第一行就是起始行，在请求报文中用来说明要以说明方式做什么请求，而在响应报文中初略说明了报文的执行结果。</p>
<ul>
<li><strong>首部字段</strong></li>
</ul>
<p>起始行后面有零个或多个首部字段。每个首部字段都包含一个名字和一个值，为了便于解析，两者之间用冒号（如Connection：keep-Alive）来分隔。首部以一个空行结束。添加一个首部字段和添加新行一样简单。</p>
<ul>
<li><strong>主体</strong></li>
</ul>
<p>首部字段的空行之后就是可选的报文主体了，其中包含了所以类型的数据。请求主体中包括了要发送给Web服务器的数据；响应主体中装载了要返回给客户端的数据。起始行和首部都是结构化的文本形式，而主体则可以包含任意的二进制数据（如图片、视频、音轨、软件程序）。当然，主体中也可以包含文本。</p>
<h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><p>HTTP响应也由3个部分组成，分别是：状态行、消息报头、响应正文。如下所示，HTTP响应的格式与请求的格式十分类似：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">状态行</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">响应报文header</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">空行</span>&gt;</span></div><div class="line">[响应报文内容]</div></pre></td></tr></table></figure>
<p>在响应报文中第一行用状态信息代替了请求信息。状态行通过提供一个状态码来说明所请求的资源情况。<br>状态行格式：<br>  HTTP-Version Status-Code Reason-Phrase CRLF</p>
<p>HTTP-Version表示服务器HTTP协议的版本；<br>Status-Code表示服务器发回的响应状态代码；<br>Reason-Phrase表示状态代码的文本描述；</p>
<p>状态码由三位数字组成，第一个数字定义了响应的类别，且有5中可能取值。</p>
<table>
<thead>
<tr>
<th>取值范围</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>100~199</td>
<td>指示信息。表示请求已接收，继续处理</td>
</tr>
<tr>
<td>200~299</td>
<td>请求成功。表示请求已被成功接收理解</td>
</tr>
<tr>
<td>300~399</td>
<td>重定向。要完成请求必须进行更进一步的操作</td>
</tr>
<tr>
<td>400~499</td>
<td>客户端错误。请求有语法错误或请求无法实现</td>
</tr>
<tr>
<td>500~599</td>
<td>服务器端错误。服务器未能实现合法的请求</td>
</tr>
</tbody>
</table>
<p>常见状态代码、状态描述的说明如下：</p>
<ul>
<li>200 OK:客户端请求成功</li>
<li>202 Accepted 服务器已接收请求，但尚未处理。</li>
<li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解</li>
<li>401 Unauthorized：请求未授权，这个状态码必须和WWW-Authenticate报头域一起使用。</li>
<li>403 Forbidden：服务器收到请求，但是拒绝提供服务。</li>
<li>404 Not Found：请求资源不存在，举个例子：输入了错误的URL。</li>
<li>408 Request Timeout 请求超时</li>
<li>500 Internal Server Error：服务器发生不可预期的错误。</li>
<li>502 Bad Gateway 错误的网关</li>
<li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP/1.1 200 OK</li>
<li>504 网关超时</li>
</ul>
<p>下面是一个GET去请求的Response返回示例：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</div><div class="line"><span class="symbol">Date:</span>Sat, <span class="number">31</span> Dec <span class="number">2005</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> GMT</div><div class="line">Content-Type: text/html;charset=utf<span class="number">-8</span></div><div class="line">Content-Length: <span class="number">122</span></div><div class="line"></div><div class="line"><span class="params">&lt;html&gt;</span></div><div class="line">	<span class="params">&lt;head&gt;</span></div><div class="line">		<span class="params">&lt;title&gt;</span>开发技术前线<span class="params">&lt;/title&gt;</span></div><div class="line">	<span class="params">&lt;/head&gt;</span></div><div class="line">	</div><div class="line">	<span class="params">&lt;body&gt;</span></div><div class="line">	<span class="params">&lt;/body&gt;</span></div><div class="line"><span class="params">&lt;/html&gt;</span></div></pre></td></tr></table></figure>
<h2 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h2><p>请求头部由键值对组成，每行一对，关键字和值用英文冒号“：”分隔。HTTP规范定义了几种首部字段，应用程序也可以随意发明自己所用的头部。HTTP首部可以分为以下几类，如表所示：</p>
<table>
<thead>
<tr>
<th>首部类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>通用首部</td>
<td>既可以出现在请求报文中，也可以出现在响应报文中</td>
</tr>
<tr>
<td>请求首部</td>
<td>提供更多有关请求的信息</td>
</tr>
<tr>
<td>响应首部</td>
<td>提供更多有关响应的信息</td>
</tr>
<tr>
<td>实体首部</td>
<td>描述主体的长度和内容，或者资源自身</td>
</tr>
<tr>
<td>扩展首部</td>
<td>HTTP规范中没有定义的新首部</td>
</tr>
</tbody>
</table>
<p>请求头部通知服务器关于客户端请求的信息，典型的请求头有。</p>
<ul>
<li>Content-Type：请求数据的格式</li>
<li>Content-Length：消息长度</li>
<li>Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机</li>
<li>User-Agent：发出请求的浏览器类型，可以自行设置</li>
<li>Accept：客户端可识别的内容类型列表</li>
<li>Accept-Encoding：客户端可识别的数据编码</li>
<li>Connection：允许客户端和服务器指定与请求/响应连接有关的选项，例如设置为Keep-Alive则表示保持连接</li>
<li>Transfer-Encoding：告知接收端为了保证报文的可靠传输，对报文采用了什么编码方式。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP（五）TCP协议详解]]></title>
      <url>http://liuguoquan727.github.io/2015/12/17/TCP-IP5TCP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>TCP协议是面向有连接的协议，它具有丢包重发和流量控制的功能，这是它区别UDP协议最大的特点。</p>
<h1 id="数据包重发"><a href="#数据包重发" class="headerlink" title="数据包重发"></a>数据包重发</h1><h2 id="数据发送"><a href="#数据发送" class="headerlink" title="数据发送"></a>数据发送</h2><p>丢包重发的前提是发送方能够知道接收方是否成功的接收了消息。所以，在TCP协议中，接收端会给发送端返回一个消息，也叫确认应答（ACK），这表示接收方已经收到了数据包。</p>
<p>根据上一节对TCP首部的分析得知：ACK的值和下次发送数据包的序列号相等。因此ACK也可以理解为：“发送方，下次你从这个位置开始发送！“。下图表示了数据发送与确认应答的过程：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcp_ack%E7%A1%AE%E8%AE%A4.png" alt=""></p>
<p>由于各种原因，数据包和ACK应答包都有可能丢失，在这种情况下，发送方如果在一段时间内没有收到ACK，就会重发数据：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcp_%E9%87%8D%E5%8F%91%E6%95%B0%E6%8D%AE.png" alt=""></p>
<p>即使网络正常，由于延迟的存在，接收方也有可能收到重复的数据包，因此接收方通过TCP首部中的SYN判断这个数据包是否曾经接收过。如果已经接收，就会丢弃该数据包。</p>
<h2 id="重传超时时间（RTO）"><a href="#重传超时时间（RTO）" class="headerlink" title="重传超时时间（RTO）"></a>重传超时时间（RTO）</h2><p>如果发送方等待一段时间后，还是没有收到 ACK 确认，就会启动超时重传。这个等待的时间被称为重传超时时间(RTO，Retransmission TimeOut)。RTO 的值具体是多久呢？</p>
<p>首先，RTO 的值不是固定的，它是一个动态变化的时间。这个时间总是略大于连接往返时间（RTT，Round Trip Time）。这个设定可以这样理解：“数据发送给对方，再返回到我这里，假设需要 10 秒，那我就等待 12秒，如果超过 12 秒，那估计就是回不来了。”</p>
<p>RTT 是动态变化的，因为谁也不知道网络下一时刻是否拥堵。而当前的 RTO 需要根据未来的 RTT 估算得出。RTO 不能估算太大，否则会多等待太多时间；也不能太小，否则会因为网络突然变慢而将不该重传的数据进行重传。</p>
<h2 id="TCP窗口"><a href="#TCP窗口" class="headerlink" title="TCP窗口"></a>TCP窗口</h2><p>按照之前的理论，在数据包发出后，直至 ACK 确认返回以前，发送端都无法发送数据，而且包的往返时间越长，网络利用效率和通信性能就越低。前两张图片形象的解释了这一点。</p>
<p>为了解决这个问题，TCP 使用了“窗口”这个概念。窗口具有大小，它表示无需等待确认应答就可以继续发送数据包的最大数量。比如窗口大小为 4 时，数据发送的示意图如下：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcp_%E7%AA%97%E5%8F%A3.png" alt=""></p>
<p>不等确认就连续发送若干个数据包会不会有问题呢？我们首先来看数据包丢失问题。</p>
<p>我们知道 TCP 首部中的 ACK 字段表示接收方已经收到数据的最后位置。因此，接收方成功接收到了 1-1000 字节的数据后，它会发送一个 ACK = 1001 的确认包。假设 1001-2000 字节的数据包丢失了，由于窗口长度比较大，发送方会继续发送 2001-3000 字节的数据包。接收端并不会返回这个数据包的确认，因为它最后收到的数据还是 1-1000 字节的数据包。</p>
<p>因此，接收端返回的数据包的 ACK 依然是 1001。这表示：“喂，发数据的，别往后发了，你第 1001 字节开始的数据还没来呢”。可以想见，发送端以后每次发送数据包得到的确认中，ACK 的值都是 1001。当连续收到三次确认之后，发送方会意识到：“对方还没有接收到数据，这个包需要重传”。</p>
<p>因此，引入窗口的概念后，被发送的数据不能立刻丢弃，需要缓存起来以备将来需要重发。</p>
<p>利用窗口发送数据的过程可以用下图表示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcp_%E7%AA%97%E5%8F%A3.png" alt=""></p>
<p>果是数据包没有丢失，但是确认包丢失了呢？这就是窗口最擅长处理的问题了。假设发送发收到的确认包中的 ACK 第一次是 1001，第二次是 4001。那么我们完全可以相信中间的两个包是成功被接收的。因为如果有没接收到的包，接收方是不会增加 ACK 的。</p>
<p>在这种情况下，如果不使用窗口，发送方就需要重传第二、三个数据包，但是有了窗口的概念后，发送方就省略了两次重传。因此使用窗口实际上可以理解为“空间换时间”。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcp_%E6%9F%90%E4%BA%9B%E7%A1%AE%E8%AE%A4%E5%8C%85%E4%B8%A2%E5%A4%B1%E6%97%B6%E4%B8%8D%E7%94%A8%E9%87%8D%E5%8F%91.png" alt=""></p>
<h1 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h1><h2 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h2><p>如果窗口过大，会导致接收方的缓存区数据溢出。这时候本该被接收的数据反而丢弃了，就会导致无意义的重传。因此，窗口大小是一个可以改变的值，它由接收端主机控制，附加在 TCP 首部的“窗口大小”字段中。</p>
<h2 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h2><p>在连接建立的初期，如果窗口比较大，发送方可能会突然发送大量数据，导致网络瘫痪。因此，在通信一开始时，TCP 会通过慢启动算法得出窗口的大小，对发送数据量进行控制。</p>
<p>流量控制是由发送方和接收方共同控制的。刚刚我们介绍了接收方会把自己能够承受的最大窗口长度写在 TCP 首部中，实际上在发送方这里，也存在流量控制，它叫拥塞窗口。TCP 协议中的窗口是指发送方窗口和接收方窗口的较小值。</p>
<p>慢启动过程如下：</p>
<ol>
<li>通信开始时，发送方的拥塞窗口大小为 1。每收到一个 ACK 确认后，拥塞窗口翻倍。</li>
<li>由于指数级增长非常快，很快地，就会出现确认包超时。</li>
<li>此时设置一个“慢启动阈值”，它的值是当前拥塞窗口大小的一半。</li>
<li>同时将拥塞窗口大小设置为 1，重新进入慢启动过程。</li>
<li>由于现在“慢启动阈值”已经存在，当拥塞窗口大小达到阈值时，不再翻倍，而是线性增加。</li>
<li>随着窗口大小不断增加，可能收到三次重复确认应答，进入“快速重发”阶段。</li>
<li>这时候，TCP 将“慢启动阈值”设置为当前拥塞窗口大小的一半，再将拥塞窗口大小设置成阈值大小（也有说加 3）。</li>
<li>拥塞窗口又会线性增加，直至下一次出现三次重复确认应答或超时。</li>
</ol>
<p>以上过程可以用下图概括：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcp_%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP（四）TCP与UDP协议]]></title>
      <url>http://liuguoquan727.github.io/2015/12/17/TCP-IP4TCP%E4%B8%8EUDP%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<p>传输层位于OSI七层模型的第四层，传输层的主要作用是实现应用程序之间的通信。网络层主要是保证不同数据链路下数据的可达性，至于如何传输数据则是由传输层负责。</p>
<h1 id="传输层协议简介"><a href="#传输层协议简介" class="headerlink" title="传输层协议简介"></a>传输层协议简介</h1><p>常见的传输层协议主要有TCP协议和UDP协议。</p>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP协议是面向有连接的协议，也就是说在使用TCP协议传输数据之前一定要在发送方和接收方之间建立连接。一般情况下建立连接需要三步，关闭连接需要四步。</p>
<p>建立TCP连接后，由于有数据重传、流量控制等功能，TCP协议能够正确处理丢包问题，保证接收方能够收到数据，与此同时还能够有效利用网络带宽。然而TCP协议中定义了很多复杂的规范，因此效率不如UDP协议，不适合实时的视频和音频传输。</p>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP协议是面向无连接的协议，它只会把数据传递给接收端，但是不保证接收端是否真正收到了数据。这种特性适合多播、实时的视频和音频传输，因为个别数据包的丢失并不会影响视频和音频的整体效果。</p>
<h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>IP协议中的两大关键要素是源IP地址和目标IP地址。传输层新增了三个要素：源端口号、目标端口号和协议号。</p>
<p>端口号用于区分同一台主机上不同的应用程序。假设你打开了两个浏览器，浏览器A发出的请求不会被浏览器B接收，就是因为A和B具有不要的端口号。</p>
<p>协议号用于区分使用的是TCP还是UDP。</p>
<p>所以：源IP地址、目标IP地址、源端口号、目标端口号和协议号这五个信息只要有一个不同，都被认为是不同的通信。</p>
<h1 id="UDP首部"><a href="#UDP首部" class="headerlink" title="UDP首部"></a>UDP首部</h1><p>UDP协议的特点就是简单，它的首部如下图所示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/trans-udp%E9%A6%96%E9%83%A8.png" alt="udp"></p>
<ul>
<li>包长度表示UDP首部长度和UDP数据长度之和</li>
<li>校验和用来判断数据在传输过程中是否丢失。</li>
</ul>
<h1 id="TCP首部"><a href="#TCP首部" class="headerlink" title="TCP首部"></a>TCP首部</h1><p>TCP首部要复杂得多。解析这个首部的时间也相应的增加，这也是导致TCP连接的效率低于UDP的原因之一。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/trans-tcp%E9%A6%96%E9%83%A8.png" alt="tcp"></p>
<p>关键字段解释如下：</p>
<ul>
<li><p>序列号：它表示发送数据的位置，假设当前的序列号为s，发送数据长度为I，则下次发送数据的序列号为S + I。在建立连接时通常由计算机生成一个随机数作为序列号的初始值。</p>
</li>
<li><p>确认应答号：它等于下一次应该接收到的数据的序列号。假设当前的序列号为s，发送数据长度为I，则接收端返回的确认应答号为S + I。发送端接收到这个确认应答后，可以认为这个位置以前所有的数据都已被正常接收。</p>
</li>
<li><p>数据偏移：TCP首部的长度，单位为4个字节。如果没有可选字段，那么这里的值就是5，表示TCP首部的长度为20字节。</p>
</li>
<li><p>控制位：长度为8bit，分别有8个控制标志，依次是CWR、ECE、URG、ACK、PSH、RST、SYN和FIN</p>
<ul>
<li>CWR</li>
<li>ECE</li>
<li>URG</li>
<li>ACK:改位为1时，确认应答的字段变为有效。TCP规定除了最初建立连接时的SYN包之外改位必须设置为1</li>
<li>PSH</li>
<li>RST</li>
<li>SYN：用于建立连接。SYN为1表示希望建立连接</li>
<li>FIN：为1时，表示希望断开连接</li>
</ul>
</li>
<li><p>窗口大小：用于表示从应答号开始能够接收多少个字节。如果窗口为0，可以发送窗口探测</p>
</li>
<li><p>紧急指针：仅仅在URG控制位为1时有效。表示紧急数据的末尾在TCP数据部分中的位置，通常在暂时中断通信时使用（比如Ctrl + C）</p>
</li>
</ul>
<h1 id="TCP握手"><a href="#TCP握手" class="headerlink" title="TCP握手"></a>TCP握手</h1><p>TCP是面向连接的协议，连接在每次通信前被建立，通信结束时被关闭。了解TCP连接建立和关闭的过程通常是考察的重点。TCP连接的建立和关闭过程可用下图表示：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/trans-tcp%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E5%92%8C%E5%85%B3%E9%97%AD.png" alt=""></p>
<h2 id="三次握手建立连接"><a href="#三次握手建立连接" class="headerlink" title="三次握手建立连接"></a>三次握手建立连接</h2><ol>
<li>客户端请求连接SYN</li>
<li>服务端确认客户端连接请求</li>
<li>客户端确认服务端已收到连接请求，建立连接开始通信</li>
</ol>
<h2 id="为什么是三次握手"><a href="#为什么是三次握手" class="headerlink" title="为什么是三次握手"></a>为什么是三次握手</h2><p>三次握手的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”</p>
<p>这是因为在网络请求时，我们时刻要注意“网络是不可靠的，数据包是可能丢失的”。假设没有第三次确认的情况下，客户端向服务端发送SYN，请求建立连接。由于延迟，服务端没有及时收到这个包。于是客户端重新发送一个SYN包。</p>
<p>假设服务端接收到了第二个SYN包，建立了通信，一段时间后通信结束，连接被关闭。这是最初被发送的SYN包抵达服务端，服务端又会发送一次ACK确认。由于两次握手就建立连接，此时的服务端就会建立一个新的连接，然而客户端认为没有请求建立连接，所以就不会向服务端发送数据，从而导致服务端建立一个空连接，浪费资源。</p>
<h2 id="ACK确认包丢失怎么办？"><a href="#ACK确认包丢失怎么办？" class="headerlink" title="ACK确认包丢失怎么办？"></a>ACK确认包丢失怎么办？</h2><p>三次握手其实解决了第二步的数据包丢失的问题，那么第三步的ACK确认包丢失后，TCP协议是如何处理的呢？</p>
<p>按照TCP协议处理丢包的一般方法，服务端会重新向客户端发送数据包，直至收到ACK确认为止。但实际上这种做法有可能遭到SYN泛洪攻击。泛洪攻击，是指发送方伪造多个IP地址，模拟三个握手的过程。当服务器返回ACK后，攻击方故意不确认，从而使得服务器不断重发，由于服务器长时间出于半连接状态，最后消耗过多的CPU和内存资源导致死机。</p>
<p>正确的处理方法是服务端发送RST报文，进入CLOSE状态。这个RST数据包的TCP首部中，控制位中的RST设置为1.这表示连接信息全部初始化，原有的TCP通信不能继续进行。客户端如果还想重新建立TCP连接，就必须重新开始第一次握手。</p>
<p>##　四次握手关闭连接</p>
<ol>
<li>客户端发送FIN通知服务端 客户端要关闭连接</li>
<li>服务端发送ACK确认客户端关闭连接</li>
<li>服务端发送FIN通知客户端 服务端要关闭连接</li>
<li>客户端发送ACK确认服务端关闭连接</li>
</ol>
<p>由于连接是双向的，所以双方都要主动关闭自己这一侧的连接。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP（三）IP协议相关技术]]></title>
      <url>http://liuguoquan727.github.io/2015/12/17/TCP-IP3IP%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<p>IP协议旨在让最终目标主机收到数据包，但是在这一过程中仅仅有IP是无法实现通信的。必须还有能够解析主机名称和MAC地址的功能，以及数据包在发送过程中异常情况处理的功能。本文主要介绍作为IP的辅助和扩展规范的DNS、ARP、ICMP、NAT等协议。</p>
<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><p>全称Domain Name System，域名系统</p>
<p>IP地址用于识别通信双方的地址，但它是一串长数字，比方便记忆，人们希望主机有自己的名字，这个名字是唯一的，而且容易记住，于是诞生了“域名”的概念。域名是一种为了识别主机名称和机构名的具有分层的名称，比如在域名neu.edu.cn中，neu是主机名，edu和cn是不同层次下的机构名。</p>
<p>域名和IP地址都可以唯一对应一台主机，DNS的作用就是将域名转换成不容易记住的IP地址。</p>
<p>域名是分层的，每层都有自己的DNS服务器用于处理DNS解析的请求，这样的好处在于每层的服务器不用关注过多的信息，它只要知道自己这一层下的域名服务器信息即可。以解析域名：www.itetf.org为例：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ip-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" alt=""></p>
<p>根服务器其实并不知道www.itetf.org的IP地址，但是它知道itetf.org域名服务器的地址，所有它把这条查询请求转发给itetf.org域名服务器。DNS请求被逐层下发，直到找到对应的IP地址为止。</p>
<h1 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h1><p>全称Address Resolution Protocol，地址解析协议</p>
<p>ARP协议用于通用目标IP地址，定位下一个接收数据包的网络设备的MAC地址。如果目标主机处于同一个数据链路上，那么可以直接得到目标主机的MAC地址，否则会得到下一跳路由器的MAC地址。</p>
<p>ARP协议的工作原理可以分为两部分：ARP请求和ARP响应。首先，源主机会通过广播发送一个ARP请求包：“我要与IP地址为XX的主机通话，谁知道它的MAC地址？”。</p>
<p>下图表示ARP协议的工作机制：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ip-arp.png" alt="ARP"></p>
<p>根据ARP可以动态地进行地址解析，因此，在TCP/IP的网络构造中和网络通信中无需事先知道MAC地址究竟是什么，只要有IP地址即可。</p>
<p>如果每发送一个IP数据报都要进行一个ARP请求以确定MAC地址，那将会造成不必要的网络流量，因此通常的做法是把获取到的MAC地址缓存一段时间。一般来说，发送过一次IP数据包的主机，继续发送多次IP数据包的可能性比较高。因此这种缓存能够有效地减少ARP包的发送。当下一次发送ARP请求或超过一定时间后，缓存都会失效，这保证了即使MAC地址与IP地址对应的关系发送了变化，数据包依然能够被正确的发往目标地址。</p>
<p>MAC地址和IP地址看上起功能相似（都用于唯一区分主机），但是两者缺一不可。如果只有IP地址，虽然可以跳过ARP，直接在链路上发一个广播，但是这仅适应于通信双方处于同一个数据链路情况。如果双方处于不同的数据链路，数据报无法穿透中间的路由器。正因为MAC地址缺一不可，所以才产生了ARP这样的协议将两者关联起来。</p>
<h1 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h1><p>全称：Internet Control Message Protocol，Internet控制报文协议。</p>
<p>ICMP的主要功能：确认IP包是否成功送达目标地址，通知在发送过程中IP包被废弃的具体原因，改善网络等设置。有了这些功能以后，就可以获得网络是否正常、设置是否有误以及设备有何异常等信息，从而便于进行网络上的问题诊断。</p>
<h1 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h1><p>全称：Network Address Traslator，网络地址转换</p>
<p>NAT是一种用于将局域网中的私有地址转换成全局IP地址的技术。</p>
<p>在连接上路由器的时候，如果检查一下设备的IP地址，你会发现都是类似于192.168.1.1这样局域网的IP地址。那不同网段中，IP地址都是192.168.1.1的主机该如何通信呢？</p>
<p>下图描述了NAT的工作原理：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ip-nat%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="nat"></p>
<p>局域网中IP地址为10.0.0.10的主机向全局IP地址163.221.120.9发送数据。NAT路由器将数据包的源地址修改成自己的全局IP地址：202.244.174.37。同理，接收数据时，路由器把目标地址202.244.174.37翻译成内网地址：10.0.0.10。</p>
<p>路由器只有一个对外的全局IP地址，如果有多个内网主机都向外部通讯怎么办呢？这时就要使用NAPT技术，它和NAT从原理上类似，但它可以转换TCP和UDP端口号。</p>
<p>使用NAPT技术时，不同的内网IP被转换成同一个公共IP地址，也就是路由器对外显示的全局IP地址，但是被附加不同的端口号以示区分：如下图所示</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ip-napt%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="napt"></p>
<p>不管是NAT还是NAPT，都需要路由器内部维护一张自动生成的地址转换表。以TCP为例，建立TCP连接首次握手的SYN包发出时会生成这个表，关闭连接时会发生FIN包，收到这个包的应答时转换表被删除。</p>
<h1 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h1><p>全称：Dynamic Host Configuration Protocol，动态主机配置协议</p>
<p>DHCP的主要用途是实现自动设置IP地址、统一管理IP地址分配。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP（二）IP协议]]></title>
      <url>http://liuguoquan727.github.io/2015/12/17/TCP-IP2IP%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<p>IP协议属于TCP/IP网络模型的第三层-网络层，它的主要作用是实现终端节点之间的通信。IP协议是网络层的一个重要协议，网络层中还有ARP协议（获取MAC地址）和ICMP协议（数据发送异常通知）。</p>
<p>数据链路层的作用在于实现同一中数据链路下的包传递，而网络层则可以实现跨越不同数据链的包传递。比如主机A通过WI-FI连接到路由器B，路由器B通过以太网连接到路由器C，而路由器C又通过WI-FI与主机D保持连接，这时主机A向D发送的数据包就依赖于网络层进行传输。</p>
<p>IP大致分为三大作用模块：IP寻址、路由以及IP分包和组包</p>
<h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><p>IP地址是一种在网络层用于识别通信对端信息的地址，它有别于数据链路层中的MAC地址，后者用于标识同一链路下不同的计算机。</p>
<p>IP地址由32为正整数表示，为了直观的表示，我们把它分成4个部分，每个部分由8位整数组成，对应十进制的范围就是0-255。比如172.20.1.1可以表示为：10101100 00010100 00000001 00000001.转换规则很简单，就是分别把四个部分的十进制（0-255）与8位二进制数进行转换。</p>
<p>从功能上看，IP地址由两部分组成：网络标识和主机标识。</p>
<ul>
<li>网络标识用于区分不同的网段，相同段内的主机必须拥有相同的网络标识，不同段内的主机不能拥有相同的网络标识。</li>
<li>主机标识用于区分同一网段下不同的主机，它不能在同一网段内重复出现。</li>
</ul>
<p>32为IP地址被分为两个部分，到底前多少为是网络标识呢？一般有两种方法表示：IP地址分类、子网掩码</p>
<h2 id="IP分类"><a href="#IP分类" class="headerlink" title="IP分类"></a>IP分类</h2><p>IP地址分为四个级别，分为A类、B类、C类和D类。分类的依据是IP地址的前四位。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ip%E5%9C%B0%E5%9D%80-ip%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E7%B1%BB.png" alt=""></p>
<ul>
<li>A类地址</li>
</ul>
<p>A类IP地址是第一位是0的地址。从第1位到第8位是A类IP地址的网络标识，用十进制标识的0.0.0.0~127.0.0.0是A类IP地址的理论范围。A类地址的后24位相当于主机标识。因此一个网段内可容纳的主机地址上线为2的24次方个。</p>
<ul>
<li>B类地址</li>
</ul>
<p>B类IP地址是前两位为“10”的地址。B类地址的前16位是网络标识，用十进制标识的话是128.0.0.0~191.255.0.0是B类地址的范围。B类地址的后16位是主机标识，因此一个网段可容纳主机地址上限为65534个。</p>
<ul>
<li>C类地址</li>
</ul>
<p>C类IP地址是前三位是“110”的地址。C类地址的前24位是网络标识，用十进制标识的话192.0.0.0~223.255.255.0是C类地址的范围。C类地址的后8位是主机标识，因此一个网段可容纳主机地址上限为254个。</p>
<ul>
<li>D类地址</li>
</ul>
<p>D类IP地址是前四位是“1110”的地址。D类地址的前32位是网络标识。用十进制表示的话224.0.0.0~239.255.255.255是D类地址的网络地址，D类地址没有主机标识，因此常用于多播。</p>
<ul>
<li>关于分配IP主句地址的注意事项</li>
</ul>
<p>在分配IP地址时关于主机标识有一点需要注意，即要用比特位表示主机地址时，不可以全部为0或者全部为1.因为全部为0只有在表示对应的网络地址或IP地址不可或知的情况下才使用，而全部为1的主机地址通常作为广播地址。</p>
<p>因为在分配过程中，应该去掉这两种情况，这也是为什么C类地址每个网段最多只能有254（2^8 - 2）个主机地址的原因。</p>
<h2 id="广播地址"><a href="#广播地址" class="headerlink" title="广播地址"></a>广播地址</h2><p>广播地址用于在同一个链路中相互连接的主机之间发送数据的发送端IP地址中的主机地址部分全部设置为1，就是广播地址。例如把172.20.0.0用二进制表示如下：<br>10101100.00010100.00000000.00000000<br>将这个地址的主机部分全部改为1，形成广播地址：<br>10101100.00010100.11111111.11111111<br>再将这个地址用十进制表示，则为172.20.255.255</p>
<p>广播分为本地广播和直接广播</p>
<ul>
<li>本地广播</li>
</ul>
<p>在本网络内的广播叫做本地广播。例如网络地址为192.168.0.4的情况下，广播地址是192.168.0.255.因为这个广播地址的IP包会被路由器屏蔽，所以不会到达192.168.0.4以外（如192.168.1.4）的其他链路上。</p>
<ul>
<li>直接广播</li>
</ul>
<p>在不同网络之间的广播叫做直接广播。例如网络地址192.168.0.4的主机地址想192.168.1.255的目标地址发送IP包。收到这个包的路由器，将数据转发给192.168.1.0，从而使得所以192.168.1.1~192.168.1.254的主机都能收到这个包。</p>
<h2 id="IP多播"><a href="#IP多播" class="headerlink" title="IP多播"></a>IP多播</h2><p>多播用于将数据包发送给特定组内的所有主机。由于其直接使用IP协议，因此是不可靠的传输。</p>
<p>多播使用D类地址。因此，如果IP地址的前四位是“1110”，就可以认为是多播地址，而剩下的28位可以成为多播的组编号。</p>
<h2 id="子网编码"><a href="#子网编码" class="headerlink" title="子网编码"></a>子网编码</h2><p>一个IP地址有两种识别码：一是IP地址本身，而是表示网络部分的子网掩码。子网掩码用二进制表示的话也是一个32位的数字。它对应IP地址网络标识部分的位全部为“1”，对应IP地址主机标识的部分则全部为“0”。由此，一个IP地址可以不再受限于自己的类别，而是可以用这样的子网掩码自由地定位自己的网络标识长度。当然，子网掩码必须是IP地址的首位开始连续的“1”。</p>
<p>以IP地址172.20.100.52为例，它本来是一个B类IP地址（前16位是网络标识），但通过子网掩码，它可以扩展为前26位是网络标识的IP地址，其中定义类10位子网掩码，如图所示。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/ip%E5%9C%B0%E5%9D%80-%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.jpg" alt=""></p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="路由控制表"><a href="#路由控制表" class="headerlink" title="路由控制表"></a>路由控制表</h2><p>发送数据包时所使用的地址是网络层的地址，即IP地址。然而仅仅有IP地址还不足以实现将数据包发送到对端目标地址，在数据发送过程中还需类似于“指明路由器或主机”的信息，以便真正发往目标地址。保存这种信息的就是路由控制表（Routing Table）。实现IP通信的主机和路由器都必须持有一张这样的表，它们也正是在这个表格的基础上才得以进行数据包发送的。</p>
<p>路由控制表的形成方式有两种：一种是管理员手动设置，另一种是路由器与其他路由器相互交换信息时自动刷新。前者也叫静态路由控制，而后者叫做动态路由控制。为了让动态路由及时刷新路由表，在网络上互连的路由器之间必须设置好路由协议，保证正常读取路由控制信息。</p>
<p>IP协议始终认为路由表是正确的。然而，IP本身并没有定义制作路由控制表的协议。即IP没有制作路由控制表的机制。该表是由一个叫做“路由协议”的协议制作而成。</p>
<h2 id="路由控制"><a href="#路由控制" class="headerlink" title="路由控制"></a>路由控制</h2><p>路由器中保存着路由控制表，它在路由控制表中查找目标IP地址对应的下一个路由器地址。</p>
<p>IP地址的网络地址部分用于进行路由控制，如下图所示</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/%E8%B7%AF%E7%94%B1-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6%E8%A1%A8%E4%B8%8EIP%E5%8C%85%E5%8F%91%E9%80%81.png" alt=""></p>
<p>主机A的地址是10.1.1.30，要把数据发往地址为10.1.2.10的主机。在主机A的路由表中，保存了两个字段，由于目标地址10.1.2.10与10.1.1.0/24段不匹配，所以它被发往默认路由10.1.1.1也就是图中路由器1的IP地址。</p>
<p>路由器1继续在它自己的路由控制表中查找目标地址10.1.2.10，它发现目标地址属于10.1.2.0/24这一段，因此将数据转发至下一个路由器10.1.0.2，也就是路由器2的左侧网卡IP地址</p>
<p>路由器在自己的路由控制表中查找目标地址10.1.2.10，根据表中记录将数据发往10.1.2.1接口，也就是路由器右侧网卡的IP地址，主机B检查目标IP地址和自己相同，于是接收数据。</p>
<h2 id="环路"><a href="#环路" class="headerlink" title="环路"></a>环路</h2><p>上图中，假设主机A向一个不存在的IP地址发送数据，并且路由器1、2、3设置的默认路由形成了一个循环，那么数据将在网络中不断转发最终导致网络拥堵，这个问题将在下文分析IP首部时得到解决。</p>
<h2 id="IP报文分割与重组"><a href="#IP报文分割与重组" class="headerlink" title="IP报文分割与重组"></a>IP报文分割与重组</h2><p>在数据链路层中，我们已经提到过不同的数据链路有不同的最大传输单元（MTU）。因此IP协议的一个任务是对数据进行分片和重组，分片由发送端主机和路由器负责，重组由接收端主机负责。</p>
<h3 id="路径MTU发现"><a href="#路径MTU发现" class="headerlink" title="路径MTU发现"></a>路径MTU发现</h3><p>分片会加重路由器的负担，因此只要条件允许，我们都不希望路由器对IP数据包进行分片处理。另外，如果一个分片丢失，整个IP数据报都会作废。</p>
<p>解决以上问题的技术是“路径MTU发现”。主机首先获取整个路径中所有数据链路的最小MTU，并按照整个大小将数据分片。因此传输过程中的任何一个路由器都不用进行分片工作。</p>
<p>为了找到路径MTU，主机首先发送整个数据包，并将IP首部的禁止分片标志设为1.这样路由器在遇到需要分片才能处理的包时不会分片，而是直接丢弃数据并通过ICMP协议将整个不可达的消息发回主机。主机将ICMP通知中的MTU设置为当前MTU，根据真个MTU对数据进行分片处理。如此反复下去，直到不再收到ICMP通知，此时的MTU就是路径MTU。</p>
<p>以UDP协议发送数据为例：</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/%E8%B7%AF%E7%94%B1-%E8%B7%AF%E5%BE%84MTU%E5%8F%91%E7%8E%B0.png" alt=""></p>
<h3 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h3><p>接收端根据IP首部中的标志（Flag）和片偏移（Fragment Offset）进行数据重组。</p>
<h2 id="IP首部（IPv4）"><a href="#IP首部（IPv4）" class="headerlink" title="IP首部（IPv4）"></a>IP首部（IPv4）</h2><p>IP首部是一个有些复杂的结构，我们不用记忆它的结构，只需了解每个部分的作用即可，这样可以加深对IP协议的理解。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/%E8%B7%AF%E7%94%B1-Ip%E9%A6%96%E9%83%A8.jpg" alt=""></p>
<ul>
<li>版本</li>
</ul>
<p>由4比特构成，表示标识IP首部的版本号。IPv4的版本号即为4</p>
<ul>
<li>首部长度（IHL，Internet Header Length）</li>
</ul>
<p>由4比特构成，表明IP首部的大小，单位为4字节。对于没有可选项的IP包，首部长度则设置为5.也就是说，当没有可选项时，IP首部的长度为20字节（4 * 5 = 20）</p>
<ul>
<li>区分服务（TOS：Type of Service）</li>
</ul>
<p>由8比特组成，用来表明服务质量</p>
<p>DSCP（Differential Services Codepoint，差分服务代码点）是TOS的一部分，用来进行质量控制，由6个字节组成。<br>ECN（Explicit Congestion Nofication，显示拥塞通告），用来报告网络拥堵情况，由2bit构成。</p>
<ul>
<li>总长度</li>
</ul>
<p>表示IP首部与数据部分结合起来的总字节数。该字段为16bit。因此IP包的最大长度为65535（2^16）个字节。虽然不同数据链路的MTU不同，但是IP协议屏蔽了这些区别，通过自己实现的数据分片功能，从上层的角度来看，IP协议总是能够以65535为最大包长进行传输。</p>
<ul>
<li>标识（ID）</li>
</ul>
<p>由16比特组成，用于分片重组。同一分片的标识值相同，不同分片的标识值不同。通过每发送一个IP包，它的值也逐渐递增。此外即使ID相同，如果目标地址、源地址或协议不同的话，也会被认为是不同的分片。</p>
<ul>
<li>标志（Flags）</li>
</ul>
<p>由3bit组成，表示包被分片的相关信息</p>
<ul>
<li>片偏移（FO，Fragment Offset）</li>
</ul>
<p>由13bit构成，用来标识被分片的每一个分段相对于原始数据的位置。第一个分片对应的值为0.由于FO域占13位，因此最多可以表示8192（2^13）个相对位置。单位为8字节，因此最大可表示原始数据8 * 8192 = 65536字节的位置。</p>
<ul>
<li>生存时间（TTL：Time To Live）</li>
</ul>
<p>由8比特构成，以秒为单位记录当前包在网络上应该生存的时间。在实际中它是指可以中转多少个路由器的意思。每经过一个路由器，TTL会减少1，直到变成0则丢弃该包。</p>
<ul>
<li>协议（Protocol）</li>
</ul>
<p>由8bit构成，表示IP首部的下一个首部隶属于哪个协议。</p>
<ul>
<li>首部校验和（Header Checksum）</li>
</ul>
<p>由16比特构成，也叫IP首部校验和。该字段只校验首部，不校验数据部分，主要用来确保IP数据包不被破坏。</p>
<ul>
<li>源地址（Source Address）</li>
</ul>
<p>由32bit构成，表示发送端IP地址</p>
<ul>
<li>目标地址（Destination Address）</li>
</ul>
<p>由32bit构成，表示接收端IP地址</p>
<ul>
<li>可选项（Options）</li>
</ul>
<p>长度可变，通常只在进行实验或诊断时使用</p>
<ul>
<li>填充（Padding）</li>
</ul>
<p>在有可选项的情况下，首部长度可能不是32bit的整数倍。为此，通过向字段填充0，调整32bit的整数倍。</p>
<ul>
<li>数据（Data）</li>
</ul>
<p>存入数据。将IP协议的首部也作为数据进行处理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP（一）分层模型]]></title>
      <url>http://liuguoquan727.github.io/2015/12/17/TCP-IP1%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h1><p>在OSI参考模型中，网络被分为七层，从下到上依次是：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcpip-osi.png" alt="osi七层模型"></p>
<ul>
<li><p>物理层：负责0、1比特流（0、1序列）与电压的高低、光的闪灭（电信号）之间的互换。</p>
</li>
<li><p>数据链路层：负责物理层上互连的、节点之间的通信传输。例如一个与以太网相连的2个节点之间的通信</p>
</li>
<li><p>网络层：将数据传输到目标地址。目标地址可以是多个网络通过路由器连接而成的某一个地址。因此这一层主要是负责寻址和路由选择。</p>
</li>
<li><p>传输层：可靠地传输数据。只在通信双方节点上进行处理，而无需在路由器上处理。</p>
</li>
<li><p>会话层：负责建立和断开通信连接，以及数据的分割等数据传输相关的管理。</p>
</li>
<li><p>表示层：将应用处理的信息转换为适合网络传输的格式，或将来自下一层的数据转换为上层能够处理的格式。因此它主要负责数据格式的转换。</p>
</li>
<li><p>应用层：为应用程序提供服务并规定应用程序中通信相关的细节。包括文件传输、电子邮件、远程登录等协议。</p>
</li>
</ul>
<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>数据链路层中有两个重要的概念：MAC 地址和分组交换</p>
<h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>MAC 地址是被烧录到网卡 ROM 中的一串数字，长度为 48 比特，它在世界范围内唯一(不考虑虚拟机自定义 MAC 地址)。由于 MAC 地址的唯一性，它可以被用来区分不同的节点，一旦指定了 MAC 地址，就不可能出现不知道往哪个设备传输数据的情况。</p>
<h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>分组交换是指将大数据分割为一个个叫做包的较小单位进行传输的方法。使用分组交换的原因是不同的数据链路有各自的最大传输单元（MTU）。以以太网为例，它的MTU是1500字节，也就是通过以太网的数据，必须分割为若干帧，每个帧的数据长度不超过1500字节。如果上层传来的数据超过这个长度，数据链路层需要分割后再发送。</p>
<h1 id="传输方式的分类"><a href="#传输方式的分类" class="headerlink" title="传输方式的分类"></a>传输方式的分类</h1><ul>
<li>面向连接型和面向无连接型（网络数据传输方式）</li>
<li>电路交换和分组交换（网络通信方式）</li>
<li>单播、广播、多播、任播（根据接收端数量分类）<ul>
<li>单播：一对一通信</li>
<li>广播：将消息从1台主机发送给与之相连的所有其他主机，典型例子就是电视播放</li>
<li>多播（组播）：有一台主机发送消息给特定的多台主机</li>
<li>任播：从目标主机群中选择一台最符合网络条件的主机作为目标主机发送消息，发送端将只会跟这台主机进行通信。</li>
</ul>
</li>
</ul>
<h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><h2 id="TCP-IP的具体含义"><a href="#TCP-IP的具体含义" class="headerlink" title="TCP/IP的具体含义"></a>TCP/IP的具体含义</h2><p>全称：Transmission Control Protocol/Internet Protocol</p>
<p>TCP/IP是指利用IP进行通信时所必须用到的协议群的统称。具体来说，IP或ICMP、TCP或UDP、TELNET或FTP、以及HTTP等都属于TCP/IP协议。它们与TCP或IP的关系密切，是互联网必不可少的组成部分。TCP/IP泛指这些协议，有时也称为TCP/IP为网际协议族。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcpip-tcpip%E5%8D%8F%E8%AE%AE%E6%97%8F.png" alt=""></p>
<h2 id="TCP-IP规范-RFC"><a href="#TCP-IP规范-RFC" class="headerlink" title="TCP/IP规范-RFC"></a>TCP/IP规范-RFC</h2><p>那些需要标准化的协议被列入RFC（Request for Comment）文档并在互联网上公布。RFC不仅记录了协议规范内容，还包含了协议的实现和运用的相关信息以及实验方面的信息。</p>
<table>
<thead>
<tr>
<th>协议</th>
<th>RFC</th>
</tr>
</thead>
<tbody>
<tr>
<td>IPv4</td>
<td>RFC791</td>
</tr>
<tr>
<td>IPv6</td>
<td>RFC2460</td>
</tr>
<tr>
<td>TCP</td>
<td>RFC793</td>
</tr>
<tr>
<td>UDP</td>
<td>RFC768</td>
</tr>
<tr>
<td>HTTP(1.1)</td>
<td>RFC2616</td>
</tr>
<tr>
<td>FTP</td>
<td>RFC959</td>
</tr>
<tr>
<td>TELNET</td>
<td>RFC 854</td>
</tr>
</tbody>
</table>
<h2 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h2><p>TCP/IP参考模型中，网络分为五层，从下到上依次为：物理层、网络接口层、网络层、传输层、应用层。TCP/IP更强调“在计算机上实现协议应该开发哪种程序”。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcpip-tcpip%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.png" alt="tcpip参考模型"></p>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>TCP/IP物理层是负责数据传输的硬件。</p>
<h3 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h3><p>网络接口层利用以太网的数据链路层进行通信</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>网络层使用IP协议，相当于OSI参考模型的第三层网络层。IP协议基于IP地址转发分包数据，作用是将分组数据报发送到目的主机。</p>
<p>TCP/IP分层中的网络层与传输层的功能通常由操作系统提供。尤其是路由器，它必须实现通过网络层转发分组数据包的功能。此外，连接互联网的所有主机跟路由器都必须实现IP的功能。</p>
<ul>
<li>IP</li>
</ul>
<p>IP是跨越网络传送数据包，使整个互联网都能收到数据的协议。IP协议使数据能够发送到地球的另一端，这期间它使用IP地址作为主机的标识。</p>
<p>IP还隐含着数据链路层的功能。通过IP相互通信的主机之间不论经过怎样的底层数据链路都能够实现通信</p>
<p>IP也是分组交换的一种协议，但是它不具有重发机制。即使分组数据包未能到达对端主机也不会重发，因此属于非可靠性传输协议。</p>
<ul>
<li>ICMP</li>
</ul>
<p>IP数据包在发送过程中一旦发生异常导致无法到达对端目标地址时，需要给发送方发送一个发送异常的通知。ICMP就是为这一功能而制定的，它有时也被用来诊断网络的健康状况。</p>
<ul>
<li>ARP</li>
</ul>
<p>从分组数据包中的IP地址中解析出物理地址（MAC地址）的一种协议。</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层的主要功能就是让应用程序之间实现通信。</p>
<ul>
<li>TCP传输控制协议</li>
</ul>
<p>TCP是一种面向有连接的传输层协议，它可以保证两端通信主机之间的数据完整性。TCP能够正确处理在传输过程中丢包、传输顺序乱掉等异常情况。此外TCP还能够有效利用宽带，缓解网络拥堵。然而，为了建立与断开连接，有时它需要至少7次的发包收包，导致网络流量的浪费。</p>
<ul>
<li>UDP用户数据包协议</li>
</ul>
<p>UDP是一种面向无连接的传输层协议。它不能保证两端通信主机之间的数据完整性，它是不可靠的。</p>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>TCP/IP应用的架构大多数属于客户端/服务器模型。常见的应用有www、E-mail、FTP、TELNET、SNMP（网络管理）。</p>
<h2 id="TCP-IP通信示例"><a href="#TCP-IP通信示例" class="headerlink" title="TCP/IP通信示例"></a>TCP/IP通信示例</h2><h3 id="数据包首部"><a href="#数据包首部" class="headerlink" title="数据包首部"></a>数据包首部</h3><p>每个分层中，都会对所发送的数据附加一个首部，在这个首部中包含了该层必要的信息，如发送的目标地址以及协议相关信息。通常，为协议提供的信息为包首部，所要发送的内容为数据。如下图所示，在下一层的角度看，从上一层收到的包全部都被认为是本层的数据。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcpip-%E6%95%B0%E6%8D%AE%E5%8C%85%E9%A6%96%E9%83%A8.png" alt=""></p>
<h3 id="发送数据包"><a href="#发送数据包" class="headerlink" title="发送数据包"></a>发送数据包</h3><p>假设甲给乙发送电子邮件，内容为：“早上好”。而从TCP/IP通信上看，是从一台计算机A向另一台计算机B发送电子邮件。下面，我们通过这个例子来讲解一下TCP/IP通信的过程。</p>
<ul>
<li>[1]应用程序处理</li>
</ul>
<p>启动应用程序新建邮件，将收件人邮箱填好，再由键盘输入邮件内容“早上好”，鼠标点击“发送”按钮就可以开始TCP/IP通信了。</p>
<p>首先应用程序会进行编码处理。例如，电子邮件使用UTF-8进行编码，这些编码相当于OSI的表示层功能。</p>
<p>应用在发送邮件的那一刻建立TCP连接，从而利用这个TCP连接发送数据。它的过程首先是将应用的数据发送给下一层的TCP，再做实际的转发处理。</p>
<ul>
<li>[2]TCP模块的处理</li>
</ul>
<p>TCP根据应用的指示，负责建立连接、发送数据以及断开连接。TCP提供将应用层发来的数据顺利发送至对端的可靠传输。</p>
<p>为了实现TCP的这一功能，需要在应用层数据的前端附加一个TCP首部。TCP首部中包括源端口号和目标端口号（用以识别发送主机跟接收主机上的应用）、序号（用以识别发送的包中哪部分是数据）以及校验码。随后将附加类TCP首部的包再发送给IP。</p>
<ul>
<li>[3]IP模块的处理</li>
</ul>
<p>IP将TCP传过来的TCP首部和TCP数据组合起来作为IP包的数据，并在TCP首部的前端加上IP包的首部。因此，IP数据包中IP首部后面紧跟着TCP首部，然后才是应用的数据首部和数据本身。IP首部中包含数据接收端IP地址以及发送端IP地址。紧随IP首部的还有用来判断数据时TCP还是UDP的信息。</p>
<p>IP包生成后，参考路由控制表决定接受此IP包的路由或主机。随后，IP包将被发送给连接这些路由器或主机网络接口的驱动程序，以实现真正发送数据。</p>
<p>如果不知道接收端的MAC地址，可以利用ARP查找。只要知道了对端的MAC地址，就可以将MAC地址和IP地址交给以太网驱动程序，实现数据传输。</p>
<ul>
<li>[4]网络接口层的处理</li>
</ul>
<p>从IP传过来的包，对于以太网驱动来说不过就是数据。给这数据附加上以太网首部并进行发送处理。以太网首部中包含接收端MAC地址、发送端MAC地址以及标志以太网类型的以太网数据的协议。根据上述信息产生的以太网数据包将通过物理层传输给接收端。发送处理中的FCS由硬件计算，添加到包的最后。设置FCS的目的是为了判断数据包是否由于噪声而被破坏。</p>
<p>下图为展示TCP/IP各层对邮件的收发处理</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcpip-%E9%82%AE%E4%BB%B6%E6%94%B6%E5%8F%91%E5%A4%84%E7%90%86.png" alt=""></p>
<h3 id="经过数据链路的包"><a href="#经过数据链路的包" class="headerlink" title="经过数据链路的包"></a>经过数据链路的包</h3><p>分组数据包经过以太网的数据链路时的大致流程如下图所示。</p>
<p><img src="http://7xs7a3.com1.z0.glb.clouddn.com/tcpip-%E5%88%86%E5%B1%82%E4%B8%AD%E5%8C%85%E7%9A%84%E7%BB%93%E6%9E%84.png" alt=""></p>
<p>包流动时，从前往后依次被附加了以太网包首部、IP包首部、TCP包首部以及应用自己的包首部和数据。而包的最后则追加以太网包尾。</p>
<p>每个包首部中至少都会包含两个信息：一是发送端和接收端的地址，另一个是上一层的协议类型。</p>
<p>经过每个协议层时，都必须有识别包发送端和接收端的信息。以太网会用MAC地址，IP会用IP地址，而TCP/UDP则会用端口号作为识别两端主机的地址。即使在应用程序中，像电子邮件地址这样的信息也是一种地址标识。这些地址信息都在每个包经由各个分层时，附加到协议对应的包首部里面。</p>
<p>此外，每个分层的包首部中还包含一个识别位，它是用来标识上一层协议的种类信息。例如以太网的包首部中的以太网类型，IP中的协议类型以及TCP/UDP中两个端口的端口号等都起着识别协议类型的作用。就是在应用的首部信息中，有时也会包含一个用来识别其数据类型的标签。</p>
<h3 id="数据包接收处理"><a href="#数据包接收处理" class="headerlink" title="数据包接收处理"></a>数据包接收处理</h3><p>包的接收流程是发送流程的逆序过程。</p>
<ul>
<li>[5]网络接口层的处理</li>
</ul>
<p>主机收到以太网包以后，首先以太网的包首部找到MAC地址判断是否为发给自己的包。如果不是发给自己的包则丢弃数据。</p>
<p>而如果接收到了恰好是发给自己的包，就查找以太网包首部中的类型域从而确定以太网协议所传送过来的数据类型。在这个例子中数据类型显然是IP包，因此再将数据传给处理IP的子程序，如果这时不是IP而是其他诸如ARP的协议，就把数据传给ARP处理。总之，如果以太网包首部的类型域包含了一个无法识别的协议类型，则丢弃数据。</p>
<ul>
<li>[6]IP模块的处理</li>
</ul>
<p>IP模块接收到IP包首部及后面的数据部分以后，也做类似的处理。如果判断得出包首部中的IP地址与自己的IP地址匹配，则可接收数据并从中查找上一层的协议。如果上一层是TCP就将IP包首部之后的部分传给TCP处理；如果是UDP则将IP包首部后面的部分传给UDP处理。对于有路由器的情况下，接收端地址往往不是自己的地址，此时，需要借助路由控制表，在调查应该送达的主机或路由器以后再转发数据。</p>
<ul>
<li>[7]TCP模块的处理</li>
</ul>
<p>在TCP模块中，首先会计算一下校验和，判断数据是否被破坏。然后检查是否在按照序号接收数据。最后检查端口号，确定具体的应用程序。</p>
<p>数据接收完毕后，接收端则发送一个“确定回执”给发送端。如果这个回执信息未能达到发送端，那么发送端会认为接收端没有接收到数据而一直反复发送。</p>
<p>数据被完整地接收以后，会传给由端口号识别的应用程序。</p>
<ul>
<li>[8]应用程序的处理</li>
</ul>
<p>接收端应用程序会直接接收发送端发送的数据。通过解析数据可以获知邮件的收件人地址是乙的地址。如果主机B上没有乙的邮件信箱，那么主机B返回给发送端一个“无此收件地址”的报错信箱。</p>
<p>但在这个例子中，主机B上有乙的收件箱，所有主机B和收件人乙能够收到电子邮箱的正文。邮件会被保存到本机的硬盘上。如果保存也能正常进行，那么接收端会返回一个“处理正常”的回执给发送端。反之，一旦出现磁盘满、邮件未能成功保存等问题，就会发送一个“处理异常”的回执给发送端。</p>
<p>由此，用户以就可以利用主机B的邮件客户端，接收并阅读由主机A上的用户甲所发送过来的电子邮件。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建和配置Hexo+Github pages个人博客]]></title>
      <url>http://liuguoquan727.github.io/2015/12/15/%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AEHexo-Github-pages%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="Window下安装GitHub-Pages-Hexo"><a href="#Window下安装GitHub-Pages-Hexo" class="headerlink" title="Window下安装GitHub Pages + Hexo"></a>Window下安装GitHub Pages + Hexo</h2><p>本着不重复造轮子的精神，下面提供两篇博文来记录安装过程，因为这两篇文章详细记录了GitHub Pages + Hexo 的安装过程，跟着流程能够成功搭建出基本的个人博客。</p>
<p><a href="http://www.jianshu.com/p/985d07d88ef4" target="_blank" rel="external">Windows下一步步搭建自己的独立博客——使用 GitHub Pages + Hexo 基础教程（一）</a><br><a href="http://www.jianshu.com/p/1973930813f9" target="_blank" rel="external">Windows下一步步搭建自己的独立博客——使用 GitHub Pages + Hexo 基础教程（三）</a></p>
<p>如有自己有申请独立的域名，可参看下面这篇博文<br><a href="http://www.jianshu.com/p/098d99de63fd" target="_blank" rel="external">Windows下一步步搭建自己的独立博客——使用 GitHub Pages + Hexo 基础教程（二）</a></p>
<h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo</div></pre></td></tr></table></figure>
<ul>
<li>升级</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> update hexo</div></pre></td></tr></table></figure>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init</span></div></pre></td></tr></table></figure>
<ul>
<li>创建</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"新的文件"</span> <span class="meta">#新建文章</span></div><div class="line">hexo <span class="keyword">new</span> page <span class="string">"新的页面"</span> <span class="meta">#新的页面</span></div></pre></td></tr></table></figure>
<ul>
<li>操作</li>
</ul>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</div><div class="line">hexo g == hexo <span class="keyword">generate</span>#生成</div><div class="line">hexo s == hexo server #启动服务预览</div><div class="line">hexo d == hexo deploy#部署</div><div class="line"></div><div class="line">hexo server -s #静态模式</div><div class="line">hexo server -p <span class="number">5000</span> #更改端口</div><div class="line">hexo server -i <span class="number">192</span><span class="variable">.168</span><span class="variable">.1</span><span class="variable">.1</span> #自定义 IP</div><div class="line"></div><div class="line">hexo <span class="keyword">generate</span> #使用 Hexo 生成静态文件快速而且简单</div><div class="line">hexo <span class="keyword">generate</span> --watch #监视文件变动</div><div class="line"></div><div class="line"><span class="comment">//完成后部署</span></div><div class="line">hexo <span class="keyword">generate</span> --deploy</div><div class="line">hexo deploy --<span class="keyword">generate</span></div></pre></td></tr></table></figure>
<h2 id="文章头配置"><a href="#文章头配置" class="headerlink" title="文章头配置"></a>文章头配置</h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title: 使用Hexo搭建个人博客</div><div class="line">layout: post</div><div class="line">date: 2014<span class="string">-03</span><span class="string">-03</span> 19:07:43</div><div class="line">comments: true</div><div class="line">categories: Blog</div><div class="line"><span class="keyword">tags:</span> Hexo</div><div class="line">keywords: Hexo, Blog</div><div class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</div></pre></td></tr></table></figure>
<h2 id="创建”关于我”页面"><a href="#创建”关于我”页面" class="headerlink" title="创建”关于我”页面"></a>创建”关于我”页面</h2><p>新建一个about页面：</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$hexo</span> <span class="keyword">new</span> page <span class="string">"about"</span></div></pre></td></tr></table></figure>
<p>菜单显示about链接，在主题theme的_config.yml设置中将menu、中about前面的注释去掉即可。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">menu</span>:</div><div class="line">  home: /</div><div class="line">  archive<span class="variable">s:</span> /archives</div><div class="line">  <span class="keyword">tag</span><span class="variable">s:</span> /<span class="keyword">tags</span></div><div class="line">  abou<span class="variable">t:</span> /about</div></pre></td></tr></table></figure>
<h2 id="创建”分类”页面"><a href="#创建”分类”页面" class="headerlink" title="创建”分类”页面"></a>创建”分类”页面</h2><ul>
<li>1.新建一个页面，命名为categories。终端命令如下：</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">"categories"</span></div></pre></td></tr></table></figure>
<ul>
<li>2.编辑刚刚新建的页面，将页面的类型设置为categories，主题自动为这个页面显示所有分类。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> 分类</div><div class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">04</span></div><div class="line"><span class="attr">type:</span> <span class="string">"categories"</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果有启用多说或者Dis去上、评论，默认页面也会带有评论。需要关闭的话，请添加字段comments并将值设置为false，如下所示：</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> 分类</div><div class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">04</span></div><div class="line"><span class="attr">type:</span> <span class="string">"categories"</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<ul>
<li>3.在菜单中添加链接。编辑主题的 _config.yml ，将 menu 中的 categories: /categories 注释去掉，如下:</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">menu</span>:</div><div class="line">  home: /</div><div class="line">  categorie<span class="variable">s:</span> /categories</div><div class="line">  archive<span class="variable">s:</span> /archives</div><div class="line">  <span class="keyword">tag</span><span class="variable">s:</span> /<span class="keyword">tags</span></div></pre></td></tr></table></figure>
<h2 id="创建”标签云”页面"><a href="#创建”标签云”页面" class="headerlink" title="创建”标签云”页面"></a>创建”标签云”页面</h2><p>添加一个标签云页面，并在菜单中显示页面链接。</p>
<ul>
<li>1.新建一个页面，命名为 tags 。命令如下：</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">"tags"</span></div></pre></td></tr></table></figure>
<ul>
<li>2.编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> All tags</div><div class="line"><span class="attr">date:</span> <span class="number">2014</span><span class="bullet">-12</span><span class="bullet">-22</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">04</span></div><div class="line"><span class="attr">type:</span> <span class="string">"tags"</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">title:</span> All tags</div><div class="line"><span class="string">date:</span> <span class="number">2014</span><span class="number">-12</span><span class="number">-22</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">04</span></div><div class="line"><span class="string">type:</span> <span class="string">"tags"</span></div><div class="line"><span class="string">comments:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>3.在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下:</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">menu</span>:</div><div class="line">  home: /</div><div class="line">  archive<span class="variable">s:</span> /archives</div><div class="line">  <span class="keyword">tag</span><span class="variable">s:</span> /<span class="keyword">tags</span></div></pre></td></tr></table></figure>
<h2 id="设置侧边栏头像"><a href="#设置侧边栏头像" class="headerlink" title="设置侧边栏头像"></a>设置侧边栏头像</h2><p>编辑站点的 _config.yml，新增字段 avatar， 值设置成头像的链接地址。</p>
<p>其中，头像的链接地址可以是：</p>
<ol>
<li>完整的互联网 URL，例如：<a href="https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460" target="_blank" rel="external">https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460</a></li>
<li><p>站点内的地址，例如：</p>
<ul>
<li>/uploads/avatar.jpg 需要将你的头像图片放置在 站点的 source/uploads/（可能需要新建uploads目录）</li>
<li>/images/avatar.jpg 需要将你的头像图片放置在 主题的 source/images/ 目录下。</li>
</ul>
</li>
</ol>
<h2 id="设置侧边栏社交链接"><a href="#设置侧边栏社交链接" class="headerlink" title="设置侧边栏社交链接"></a>设置侧边栏社交链接</h2><p>编辑站点的 _config.yml，新增字段 social，然后添加社交站点名称与地址即可。例如：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">social</span>:</div><div class="line">  <span class="attribute">github</span>: <span class="attribute">https</span>:<span class="comment">//github.com/your-user-name</span></div><div class="line">  <span class="attribute">twitter</span>: <span class="attribute">https</span>:<span class="comment">//twitter.com/your-user-name</span></div><div class="line">  <span class="attribute">weibo</span>: <span class="attribute">http</span>:<span class="comment">//weibo.com/your-user-name</span></div><div class="line">  <span class="attribute">douban</span>: <span class="attribute">http</span>:<span class="comment">//douban.com/people/your-user-name</span></div><div class="line">  <span class="attribute">zhihu</span>: <span class="attribute">http</span>:<span class="comment">//www.zhihu.com/people/your-user-name</span></div></pre></td></tr></table></figure>
<h2 id="设置网页标签LOGO"><a href="#设置网页标签LOGO" class="headerlink" title="设置网页标签LOGO"></a>设置网页标签LOGO</h2><p>编辑主题的 _config.yml,在favicon: /icon.jpg字段设置LOGO标志，图片防止在Hexo/source/目录下</p>
<h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><p>NexT 目前支持六种语言版本：</p>
<p>English<br>中文简体 (zh-Hans)<br>French (fr-FR)<br>正体中文 (zh-hk/zh-tw)<br>Russian (ru)<br>German (de)</p>
<p>默认语言是英文。编辑站点的 _config.yml ，将 language 字段更改为你所需要的语言版本代号：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">language: <span class="keyword">default</span></div><div class="line"><span class="meta"># language: zh-Hans</span></div><div class="line"><span class="meta"># language: fr-FR</span></div><div class="line"><span class="meta"># language: zh-hk</span></div><div class="line"><span class="meta"># language: zh-tw</span></div><div class="line"><span class="meta"># language: ru</span></div><div class="line"><span class="meta"># language: de</span></div></pre></td></tr></table></figure>
<h2 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h2><p>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">Tomorrow Theme</a> 作为代码高亮，共有5款主题供你选择.</p>
<p>编辑主题的 _config.yml,找到highlight_theme字段，设置目标主题</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">highlight_theme:</span> night</div></pre></td></tr></table></figure>
<h2 id="设置站点建立时间"><a href="#设置站点建立时间" class="headerlink" title="设置站点建立时间"></a>设置站点建立时间</h2><p>这个时间将在站点的底部显示，例如 © 2013 - 2015</p>
<p>编辑站点的 _config.yml，新增字段 since。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">since</span>: <span class="number">2013</span></div></pre></td></tr></table></figure>
<h2 id="添加站点访问统计与访客数量统计功能"><a href="#添加站点访问统计与访客数量统计功能" class="headerlink" title="添加站点访问统计与访客数量统计功能"></a>添加站点访问统计与访客数量统计功能</h2><p>网站的浏览次数，即pv；网站的访客数为uv。pv的计算方式是，单个用户连续点击n篇文章，记录n次访问量；uv的计算方式是，单个用户连续点击n篇文章，只记录1次访客数。你可以根据需要添加相应的统计功能。</p>
<ul>
<li><strong>安装busuanzi.js脚本</strong></li>
</ul>
<p>如果你使用的是NexT主题（其他主题类似），打开/theme/next/layout/_partial/footer.swig文件，拷贝下面的代码至文件的开头。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>显示统计标签</strong></li>
</ul>
<p>同样编辑/theme/next/layout/_partial/footer.swig文件。</p>
<p>如果你想要显示pv统计量，复制以下代码至你想要放置的位置，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></div><div class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果你想要显示uv统计量，复制以下代码至你想要放置的位置，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></div><div class="line">  本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
